
PE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016ddc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d44  08016f70  08016f70  00017f70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019cb4  08019cb4  0001b344  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08019cb4  08019cb4  0001acb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019cbc  08019cbc  0001b344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019cbc  08019cbc  0001acbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08019cc0  08019cc0  0001acc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000344  20000000  08019cc4  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010ec  20000344  0801a008  0001b344  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001430  0801a008  0001b430  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001b344  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003cd3d  00000000  00000000  0001b374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000652b  00000000  00000000  000580b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002818  00000000  00000000  0005e5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001f00  00000000  00000000  00060df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034221  00000000  00000000  00062cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00036fac  00000000  00000000  00096f19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00134d1c  00000000  00000000  000cdec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00202be1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000be60  00000000  00000000  00202c24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0020ea84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000344 	.word	0x20000344
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08016f54 	.word	0x08016f54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000348 	.word	0x20000348
 80001cc:	08016f54 	.word	0x08016f54

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b988 	b.w	8000fb0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	468e      	mov	lr, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d962      	bls.n	8000d94 <__udivmoddi4+0xdc>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	b14e      	cbz	r6, 8000ce8 <__udivmoddi4+0x30>
 8000cd4:	f1c6 0320 	rsb	r3, r6, #32
 8000cd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	40b7      	lsls	r7, r6
 8000ce2:	ea43 0808 	orr.w	r8, r3, r8
 8000ce6:	40b4      	lsls	r4, r6
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d0c:	f080 80ea 	bcs.w	8000ee4 <__udivmoddi4+0x22c>
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f240 80e7 	bls.w	8000ee4 <__udivmoddi4+0x22c>
 8000d16:	3902      	subs	r1, #2
 8000d18:	443b      	add	r3, r7
 8000d1a:	1a9a      	subs	r2, r3, r2
 8000d1c:	b2a3      	uxth	r3, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2e:	459c      	cmp	ip, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x8e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d38:	f080 80d6 	bcs.w	8000ee8 <__udivmoddi4+0x230>
 8000d3c:	459c      	cmp	ip, r3
 8000d3e:	f240 80d3 	bls.w	8000ee8 <__udivmoddi4+0x230>
 8000d42:	443b      	add	r3, r7
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4a:	eba3 030c 	sub.w	r3, r3, ip
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11d      	cbz	r5, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40f3      	lsrs	r3, r6
 8000d54:	2200      	movs	r2, #0
 8000d56:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d905      	bls.n	8000d6e <__udivmoddi4+0xb6>
 8000d62:	b10d      	cbz	r5, 8000d68 <__udivmoddi4+0xb0>
 8000d64:	e9c5 0100 	strd	r0, r1, [r5]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e7f5      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d6e:	fab3 f183 	clz	r1, r3
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d146      	bne.n	8000e04 <__udivmoddi4+0x14c>
 8000d76:	4573      	cmp	r3, lr
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xc8>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 8105 	bhi.w	8000f8a <__udivmoddi4+0x2d2>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	4690      	mov	r8, r2
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e5      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d92:	e7e2      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f000 8090 	beq.w	8000eba <__udivmoddi4+0x202>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f040 80a4 	bne.w	8000eec <__udivmoddi4+0x234>
 8000da4:	1a8a      	subs	r2, r1, r2
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	b280      	uxth	r0, r0
 8000dae:	b2bc      	uxth	r4, r7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000db6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x11e>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x11c>
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 80e0 	bhi.w	8000f94 <__udivmoddi4+0x2dc>
 8000dd4:	46c4      	mov	ip, r8
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ddc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000de0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000de4:	fb02 f404 	mul.w	r4, r2, r4
 8000de8:	429c      	cmp	r4, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x144>
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	f102 30ff 	add.w	r0, r2, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x142>
 8000df4:	429c      	cmp	r4, r3
 8000df6:	f200 80ca 	bhi.w	8000f8e <__udivmoddi4+0x2d6>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e02:	e7a5      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e04:	f1c1 0620 	rsb	r6, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e0e:	431f      	orrs	r7, r3
 8000e10:	fa0e f401 	lsl.w	r4, lr, r1
 8000e14:	fa20 f306 	lsr.w	r3, r0, r6
 8000e18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e20:	4323      	orrs	r3, r4
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	fa1f fc87 	uxth.w	ip, r7
 8000e2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e2e:	0c1c      	lsrs	r4, r3, #16
 8000e30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	d909      	bls.n	8000e58 <__udivmoddi4+0x1a0>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e4a:	f080 809c 	bcs.w	8000f86 <__udivmoddi4+0x2ce>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f240 8099 	bls.w	8000f86 <__udivmoddi4+0x2ce>
 8000e54:	3802      	subs	r0, #2
 8000e56:	443c      	add	r4, r7
 8000e58:	eba4 040e 	sub.w	r4, r4, lr
 8000e5c:	fa1f fe83 	uxth.w	lr, r3
 8000e60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e64:	fb09 4413 	mls	r4, r9, r3, r4
 8000e68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e70:	45a4      	cmp	ip, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1ce>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e7a:	f080 8082 	bcs.w	8000f82 <__udivmoddi4+0x2ca>
 8000e7e:	45a4      	cmp	ip, r4
 8000e80:	d97f      	bls.n	8000f82 <__udivmoddi4+0x2ca>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	443c      	add	r4, r7
 8000e86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e8a:	eba4 040c 	sub.w	r4, r4, ip
 8000e8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e92:	4564      	cmp	r4, ip
 8000e94:	4673      	mov	r3, lr
 8000e96:	46e1      	mov	r9, ip
 8000e98:	d362      	bcc.n	8000f60 <__udivmoddi4+0x2a8>
 8000e9a:	d05f      	beq.n	8000f5c <__udivmoddi4+0x2a4>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x1fe>
 8000e9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000ea2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ea6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eaa:	fa22 f301 	lsr.w	r3, r2, r1
 8000eae:	431e      	orrs	r6, r3
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e74f      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000eba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ebe:	0c01      	lsrs	r1, r0, #16
 8000ec0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ec4:	b280      	uxth	r0, r0
 8000ec6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4638      	mov	r0, r7
 8000ece:	463c      	mov	r4, r7
 8000ed0:	46b8      	mov	r8, r7
 8000ed2:	46be      	mov	lr, r7
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eda:	eba2 0208 	sub.w	r2, r2, r8
 8000ede:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ee2:	e766      	b.n	8000db2 <__udivmoddi4+0xfa>
 8000ee4:	4601      	mov	r1, r0
 8000ee6:	e718      	b.n	8000d1a <__udivmoddi4+0x62>
 8000ee8:	4610      	mov	r0, r2
 8000eea:	e72c      	b.n	8000d46 <__udivmoddi4+0x8e>
 8000eec:	f1c6 0220 	rsb	r2, r6, #32
 8000ef0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ef4:	40b7      	lsls	r7, r6
 8000ef6:	40b1      	lsls	r1, r6
 8000ef8:	fa20 f202 	lsr.w	r2, r0, r2
 8000efc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f00:	430a      	orrs	r2, r1
 8000f02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f06:	b2bc      	uxth	r4, r7
 8000f08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb08 f904 	mul.w	r9, r8, r4
 8000f16:	40b0      	lsls	r0, r6
 8000f18:	4589      	cmp	r9, r1
 8000f1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f1e:	b280      	uxth	r0, r0
 8000f20:	d93e      	bls.n	8000fa0 <__udivmoddi4+0x2e8>
 8000f22:	1879      	adds	r1, r7, r1
 8000f24:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x276>
 8000f2a:	4589      	cmp	r9, r1
 8000f2c:	d81f      	bhi.n	8000f6e <__udivmoddi4+0x2b6>
 8000f2e:	eba1 0109 	sub.w	r1, r1, r9
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fb09 f804 	mul.w	r8, r9, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f44:	4542      	cmp	r2, r8
 8000f46:	d229      	bcs.n	8000f9c <__udivmoddi4+0x2e4>
 8000f48:	18ba      	adds	r2, r7, r2
 8000f4a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f4e:	d2c4      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f50:	4542      	cmp	r2, r8
 8000f52:	d2c2      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f54:	f1a9 0102 	sub.w	r1, r9, #2
 8000f58:	443a      	add	r2, r7
 8000f5a:	e7be      	b.n	8000eda <__udivmoddi4+0x222>
 8000f5c:	45f0      	cmp	r8, lr
 8000f5e:	d29d      	bcs.n	8000e9c <__udivmoddi4+0x1e4>
 8000f60:	ebbe 0302 	subs.w	r3, lr, r2
 8000f64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f68:	3801      	subs	r0, #1
 8000f6a:	46e1      	mov	r9, ip
 8000f6c:	e796      	b.n	8000e9c <__udivmoddi4+0x1e4>
 8000f6e:	eba7 0909 	sub.w	r9, r7, r9
 8000f72:	4449      	add	r1, r9
 8000f74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7c:	fb09 f804 	mul.w	r8, r9, r4
 8000f80:	e7db      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f82:	4673      	mov	r3, lr
 8000f84:	e77f      	b.n	8000e86 <__udivmoddi4+0x1ce>
 8000f86:	4650      	mov	r0, sl
 8000f88:	e766      	b.n	8000e58 <__udivmoddi4+0x1a0>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e6fd      	b.n	8000d8a <__udivmoddi4+0xd2>
 8000f8e:	443b      	add	r3, r7
 8000f90:	3a02      	subs	r2, #2
 8000f92:	e733      	b.n	8000dfc <__udivmoddi4+0x144>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	443b      	add	r3, r7
 8000f9a:	e71c      	b.n	8000dd6 <__udivmoddi4+0x11e>
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	e79c      	b.n	8000eda <__udivmoddi4+0x222>
 8000fa0:	eba1 0109 	sub.w	r1, r1, r9
 8000fa4:	46c4      	mov	ip, r8
 8000fa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000faa:	fb09 f804 	mul.w	r8, r9, r4
 8000fae:	e7c4      	b.n	8000f3a <__udivmoddi4+0x282>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <CRC8_MAXIM>:
//
//	return rdata;
//}

static uint8_t CRC8_MAXIM(uint8_t msb,uint8_t lsb)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	460a      	mov	r2, r1
 8000fbe:	71fb      	strb	r3, [r7, #7]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	71bb      	strb	r3, [r7, #6]
	uint8_t crc = 0xff;
 8000fc4:	23ff      	movs	r3, #255	@ 0xff
 8000fc6:	73fb      	strb	r3, [r7, #15]
	crc ^= msb;
 8000fc8:	7bfa      	ldrb	r2, [r7, #15]
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	4053      	eors	r3, r2
 8000fce:	73fb      	strb	r3, [r7, #15]
	crc = CRC_TABLE[crc];
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
 8000fd2:	4a09      	ldr	r2, [pc, #36]	@ (8000ff8 <CRC8_MAXIM+0x44>)
 8000fd4:	5cd3      	ldrb	r3, [r2, r3]
 8000fd6:	73fb      	strb	r3, [r7, #15]
	crc ^= lsb;
 8000fd8:	7bfa      	ldrb	r2, [r7, #15]
 8000fda:	79bb      	ldrb	r3, [r7, #6]
 8000fdc:	4053      	eors	r3, r2
 8000fde:	73fb      	strb	r3, [r7, #15]
	crc = CRC_TABLE[crc];
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	4a05      	ldr	r2, [pc, #20]	@ (8000ff8 <CRC8_MAXIM+0x44>)
 8000fe4:	5cd3      	ldrb	r3, [r2, r3]
 8000fe6:	73fb      	strb	r3, [r7, #15]
	return crc;
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	20000000 	.word	0x20000000

08000ffc <SGP40_MeasureRaw>:

	return 0;
}

uint16_t SGP40_MeasureRaw(float temp, float humi)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af02      	add	r7, sp, #8
 8001002:	ed87 0a01 	vstr	s0, [r7, #4]
 8001006:	edc7 0a00 	vstr	s1, [r7]
	//printf("measureRaw\r\n");

	// 2*humi + CRC
	uint16_t paramh;
	paramh = (uint16_t)((humi * 65535) / 100 + 0.5); // for DATASHEET page13
 800100a:	edd7 7a00 	vldr	s15, [r7]
 800100e:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80010f4 <SGP40_MeasureRaw+0xf8>
 8001012:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001016:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80010f8 <SGP40_MeasureRaw+0xfc>
 800101a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800101e:	ee16 0a90 	vmov	r0, s13
 8001022:	f7ff fa91 	bl	8000548 <__aeabi_f2d>
 8001026:	f04f 0200 	mov.w	r2, #0
 800102a:	4b34      	ldr	r3, [pc, #208]	@ (80010fc <SGP40_MeasureRaw+0x100>)
 800102c:	f7ff f92e 	bl	800028c <__adddf3>
 8001030:	4602      	mov	r2, r0
 8001032:	460b      	mov	r3, r1
 8001034:	4610      	mov	r0, r2
 8001036:	4619      	mov	r1, r3
 8001038:	f7ff fdb6 	bl	8000ba8 <__aeabi_d2uiz>
 800103c:	4603      	mov	r3, r0
 800103e:	81fb      	strh	r3, [r7, #14]
	WITH_HUM_COMP[2] = paramh >> 8;
 8001040:	89fb      	ldrh	r3, [r7, #14]
 8001042:	0a1b      	lsrs	r3, r3, #8
 8001044:	b29b      	uxth	r3, r3
 8001046:	b2da      	uxtb	r2, r3
 8001048:	4b2d      	ldr	r3, [pc, #180]	@ (8001100 <SGP40_MeasureRaw+0x104>)
 800104a:	709a      	strb	r2, [r3, #2]
	WITH_HUM_COMP[3] = paramh & 0xFF;
 800104c:	89fb      	ldrh	r3, [r7, #14]
 800104e:	b2da      	uxtb	r2, r3
 8001050:	4b2b      	ldr	r3, [pc, #172]	@ (8001100 <SGP40_MeasureRaw+0x104>)
 8001052:	70da      	strb	r2, [r3, #3]
	WITH_HUM_COMP[4] = CRC8_MAXIM(WITH_HUM_COMP[2], WITH_HUM_COMP[3]);
 8001054:	4b2a      	ldr	r3, [pc, #168]	@ (8001100 <SGP40_MeasureRaw+0x104>)
 8001056:	789b      	ldrb	r3, [r3, #2]
 8001058:	4a29      	ldr	r2, [pc, #164]	@ (8001100 <SGP40_MeasureRaw+0x104>)
 800105a:	78d2      	ldrb	r2, [r2, #3]
 800105c:	4611      	mov	r1, r2
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff ffa8 	bl	8000fb4 <CRC8_MAXIM>
 8001064:	4603      	mov	r3, r0
 8001066:	461a      	mov	r2, r3
 8001068:	4b25      	ldr	r3, [pc, #148]	@ (8001100 <SGP40_MeasureRaw+0x104>)
 800106a:	711a      	strb	r2, [r3, #4]
	
	// 2*temp + CRC
	uint16_t paramt;
	paramt = (uint16_t)(((temp + 45) * 65535) / 175);
 800106c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001070:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001104 <SGP40_MeasureRaw+0x108>
 8001074:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001078:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80010f4 <SGP40_MeasureRaw+0xf8>
 800107c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001080:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8001108 <SGP40_MeasureRaw+0x10c>
 8001084:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001088:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800108c:	ee17 3a90 	vmov	r3, s15
 8001090:	81bb      	strh	r3, [r7, #12]
	WITH_HUM_COMP[5] = paramt >> 8;
 8001092:	89bb      	ldrh	r3, [r7, #12]
 8001094:	0a1b      	lsrs	r3, r3, #8
 8001096:	b29b      	uxth	r3, r3
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4b19      	ldr	r3, [pc, #100]	@ (8001100 <SGP40_MeasureRaw+0x104>)
 800109c:	715a      	strb	r2, [r3, #5]
	WITH_HUM_COMP[6] = paramt & 0xFF;
 800109e:	89bb      	ldrh	r3, [r7, #12]
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4b17      	ldr	r3, [pc, #92]	@ (8001100 <SGP40_MeasureRaw+0x104>)
 80010a4:	719a      	strb	r2, [r3, #6]
	WITH_HUM_COMP[7] = CRC8_MAXIM(WITH_HUM_COMP[5], WITH_HUM_COMP[6]);
 80010a6:	4b16      	ldr	r3, [pc, #88]	@ (8001100 <SGP40_MeasureRaw+0x104>)
 80010a8:	795b      	ldrb	r3, [r3, #5]
 80010aa:	4a15      	ldr	r2, [pc, #84]	@ (8001100 <SGP40_MeasureRaw+0x104>)
 80010ac:	7992      	ldrb	r2, [r2, #6]
 80010ae:	4611      	mov	r1, r2
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ff7f 	bl	8000fb4 <CRC8_MAXIM>
 80010b6:	4603      	mov	r3, r0
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b11      	ldr	r3, [pc, #68]	@ (8001100 <SGP40_MeasureRaw+0x104>)
 80010bc:	71da      	strb	r2, [r3, #7]

	//SGP40_Write(WITH_HUM_COMP, 8);
	HAL_I2C_Master_Transmit(&hi2c1, (0x59<<1),(uint8_t *)WITH_HUM_COMP, sizeof(WITH_HUM_COMP),HAL_MAX_DELAY);
 80010be:	f04f 33ff 	mov.w	r3, #4294967295
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2308      	movs	r3, #8
 80010c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001100 <SGP40_MeasureRaw+0x104>)
 80010c8:	21b2      	movs	r1, #178	@ 0xb2
 80010ca:	4810      	ldr	r0, [pc, #64]	@ (800110c <SGP40_MeasureRaw+0x110>)
 80010cc:	f006 fbde 	bl	800788c <HAL_I2C_Master_Transmit>

	HAL_Delay(30);
 80010d0:	201e      	movs	r0, #30
 80010d2:	f003 fbf1 	bl	80048b8 <HAL_Delay>
	uint16_t Rdata;
	HAL_I2C_Master_Receive(&hi2c1,(0x59<<1), (uint8_t *)&Rdata, sizeof(Rdata),HAL_MAX_DELAY);
 80010d6:	f107 020a 	add.w	r2, r7, #10
 80010da:	f04f 33ff 	mov.w	r3, #4294967295
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2302      	movs	r3, #2
 80010e2:	21b2      	movs	r1, #178	@ 0xb2
 80010e4:	4809      	ldr	r0, [pc, #36]	@ (800110c <SGP40_MeasureRaw+0x110>)
 80010e6:	f006 fce9 	bl	8007abc <HAL_I2C_Master_Receive>
	return Rdata;
 80010ea:	897b      	ldrh	r3, [r7, #10]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	477fff00 	.word	0x477fff00
 80010f8:	42c80000 	.word	0x42c80000
 80010fc:	3fe00000 	.word	0x3fe00000
 8001100:	20000100 	.word	0x20000100
 8001104:	42340000 	.word	0x42340000
 8001108:	432f0000 	.word	0x432f0000
 800110c:	20000480 	.word	0x20000480

08001110 <SGP40_MeasureVOC>:

uint16_t SGP40_MeasureVOC(float temp, float humi)
{	
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	ed87 0a01 	vstr	s0, [r7, #4]
 800111a:	edc7 0a00 	vstr	s1, [r7]
	int32_t voc_index;
	uint16_t sraw = SGP40_MeasureRaw(temp, humi);
 800111e:	edd7 0a00 	vldr	s1, [r7]
 8001122:	ed97 0a01 	vldr	s0, [r7, #4]
 8001126:	f7ff ff69 	bl	8000ffc <SGP40_MeasureRaw>
 800112a:	4603      	mov	r3, r0
 800112c:	81fb      	strh	r3, [r7, #14]

	VocAlgorithm_process(&voc_algorithm_params, sraw, &voc_index);
 800112e:	89fb      	ldrh	r3, [r7, #14]
 8001130:	f107 0208 	add.w	r2, r7, #8
 8001134:	4619      	mov	r1, r3
 8001136:	4804      	ldr	r0, [pc, #16]	@ (8001148 <SGP40_MeasureVOC+0x38>)
 8001138:	f001 fd5c 	bl	8002bf4 <VocAlgorithm_process>
	//printfln(voc_index);
	return voc_index;
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	b29b      	uxth	r3, r3
}
 8001140:	4618      	mov	r0, r3
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000360 	.word	0x20000360

0800114c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	@ 0x28
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001152:	f107 031c 	add.w	r3, r7, #28
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
 800116c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800116e:	4b36      	ldr	r3, [pc, #216]	@ (8001248 <MX_ADC1_Init+0xfc>)
 8001170:	4a36      	ldr	r2, [pc, #216]	@ (800124c <MX_ADC1_Init+0x100>)
 8001172:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001174:	4b34      	ldr	r3, [pc, #208]	@ (8001248 <MX_ADC1_Init+0xfc>)
 8001176:	2200      	movs	r2, #0
 8001178:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800117a:	4b33      	ldr	r3, [pc, #204]	@ (8001248 <MX_ADC1_Init+0xfc>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001180:	4b31      	ldr	r3, [pc, #196]	@ (8001248 <MX_ADC1_Init+0xfc>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001186:	4b30      	ldr	r3, [pc, #192]	@ (8001248 <MX_ADC1_Init+0xfc>)
 8001188:	2201      	movs	r2, #1
 800118a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800118c:	4b2e      	ldr	r3, [pc, #184]	@ (8001248 <MX_ADC1_Init+0xfc>)
 800118e:	2204      	movs	r2, #4
 8001190:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001192:	4b2d      	ldr	r3, [pc, #180]	@ (8001248 <MX_ADC1_Init+0xfc>)
 8001194:	2200      	movs	r2, #0
 8001196:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001198:	4b2b      	ldr	r3, [pc, #172]	@ (8001248 <MX_ADC1_Init+0xfc>)
 800119a:	2200      	movs	r2, #0
 800119c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 800119e:	4b2a      	ldr	r3, [pc, #168]	@ (8001248 <MX_ADC1_Init+0xfc>)
 80011a0:	2202      	movs	r2, #2
 80011a2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011a4:	4b28      	ldr	r3, [pc, #160]	@ (8001248 <MX_ADC1_Init+0xfc>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011ac:	4b26      	ldr	r3, [pc, #152]	@ (8001248 <MX_ADC1_Init+0xfc>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011b2:	4b25      	ldr	r3, [pc, #148]	@ (8001248 <MX_ADC1_Init+0xfc>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011b8:	4b23      	ldr	r3, [pc, #140]	@ (8001248 <MX_ADC1_Init+0xfc>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011c0:	4b21      	ldr	r3, [pc, #132]	@ (8001248 <MX_ADC1_Init+0xfc>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80011c6:	4b20      	ldr	r3, [pc, #128]	@ (8001248 <MX_ADC1_Init+0xfc>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011ce:	481e      	ldr	r0, [pc, #120]	@ (8001248 <MX_ADC1_Init+0xfc>)
 80011d0:	f003 fd8c 	bl	8004cec <HAL_ADC_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80011da:	f001 fb77 	bl	80028cc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011e2:	f107 031c 	add.w	r3, r7, #28
 80011e6:	4619      	mov	r1, r3
 80011e8:	4817      	ldr	r0, [pc, #92]	@ (8001248 <MX_ADC1_Init+0xfc>)
 80011ea:	f004 ff09 	bl	8006000 <HAL_ADCEx_MultiModeConfigChannel>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80011f4:	f001 fb6a 	bl	80028cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80011f8:	4b15      	ldr	r3, [pc, #84]	@ (8001250 <MX_ADC1_Init+0x104>)
 80011fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011fc:	2306      	movs	r3, #6
 80011fe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001200:	2307      	movs	r3, #7
 8001202:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001204:	237f      	movs	r3, #127	@ 0x7f
 8001206:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001208:	2304      	movs	r3, #4
 800120a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	4619      	mov	r1, r3
 8001214:	480c      	ldr	r0, [pc, #48]	@ (8001248 <MX_ADC1_Init+0xfc>)
 8001216:	f004 fa23 	bl	8005660 <HAL_ADC_ConfigChannel>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001220:	f001 fb54 	bl	80028cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001224:	4b0b      	ldr	r3, [pc, #44]	@ (8001254 <MX_ADC1_Init+0x108>)
 8001226:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001228:	230c      	movs	r3, #12
 800122a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	4619      	mov	r1, r3
 8001230:	4805      	ldr	r0, [pc, #20]	@ (8001248 <MX_ADC1_Init+0xfc>)
 8001232:	f004 fa15 	bl	8005660 <HAL_ADC_ConfigChannel>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 800123c:	f001 fb46 	bl	80028cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001240:	bf00      	nop
 8001242:	3728      	adds	r7, #40	@ 0x28
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	200003e0 	.word	0x200003e0
 800124c:	50040000 	.word	0x50040000
 8001250:	36902000 	.word	0x36902000
 8001254:	2e300800 	.word	0x2e300800

08001258 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b0ac      	sub	sp, #176	@ 0xb0
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	2288      	movs	r2, #136	@ 0x88
 8001276:	2100      	movs	r1, #0
 8001278:	4618      	mov	r0, r3
 800127a:	f013 f99d 	bl	80145b8 <memset>
  if(adcHandle->Instance==ADC1)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a31      	ldr	r2, [pc, #196]	@ (8001348 <HAL_ADC_MspInit+0xf0>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d15b      	bne.n	8001340 <HAL_ADC_MspInit+0xe8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001288:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800128c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800128e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001292:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	4618      	mov	r0, r3
 800129c:	f007 ff92 	bl	80091c4 <HAL_RCCEx_PeriphCLKConfig>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80012a6:	f001 fb11 	bl	80028cc <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80012aa:	4b28      	ldr	r3, [pc, #160]	@ (800134c <HAL_ADC_MspInit+0xf4>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ae:	4a27      	ldr	r2, [pc, #156]	@ (800134c <HAL_ADC_MspInit+0xf4>)
 80012b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80012b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012b6:	4b25      	ldr	r3, [pc, #148]	@ (800134c <HAL_ADC_MspInit+0xf4>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	4b22      	ldr	r3, [pc, #136]	@ (800134c <HAL_ADC_MspInit+0xf4>)
 80012c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c6:	4a21      	ldr	r2, [pc, #132]	@ (800134c <HAL_ADC_MspInit+0xf4>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ce:	4b1f      	ldr	r3, [pc, #124]	@ (800134c <HAL_ADC_MspInit+0xf4>)
 80012d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012da:	4b1c      	ldr	r3, [pc, #112]	@ (800134c <HAL_ADC_MspInit+0xf4>)
 80012dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012de:	4a1b      	ldr	r2, [pc, #108]	@ (800134c <HAL_ADC_MspInit+0xf4>)
 80012e0:	f043 0304 	orr.w	r3, r3, #4
 80012e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012e6:	4b19      	ldr	r3, [pc, #100]	@ (800134c <HAL_ADC_MspInit+0xf4>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ea:	f003 0304 	and.w	r3, r3, #4
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN11
    PC4     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = pot_Pin;
 80012f2:	2340      	movs	r3, #64	@ 0x40
 80012f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80012f8:	230b      	movs	r3, #11
 80012fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(pot_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001308:	4619      	mov	r1, r3
 800130a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800130e:	f006 f82f 	bl	8007370 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = photo_Pin;
 8001312:	2310      	movs	r3, #16
 8001314:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001318:	230b      	movs	r3, #11
 800131a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(photo_GPIO_Port, &GPIO_InitStruct);
 8001324:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001328:	4619      	mov	r1, r3
 800132a:	4809      	ldr	r0, [pc, #36]	@ (8001350 <HAL_ADC_MspInit+0xf8>)
 800132c:	f006 f820 	bl	8007370 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001330:	2200      	movs	r2, #0
 8001332:	2100      	movs	r1, #0
 8001334:	2012      	movs	r0, #18
 8001336:	f005 fd6e 	bl	8006e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800133a:	2012      	movs	r0, #18
 800133c:	f005 fd87 	bl	8006e4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001340:	bf00      	nop
 8001342:	37b0      	adds	r7, #176	@ 0xb0
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	50040000 	.word	0x50040000
 800134c:	40021000 	.word	0x40021000
 8001350:	48000800 	.word	0x48000800

08001354 <buzzer_vInit>:
volatile uint8_t buzzer_stop_flag = 0;
static uint32_t note_timer = 0;

// ----- Initialisation du PWM du buzzer -----
void buzzer_vInit()
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&BUZZER_TIMER, BUZZER_CHANNEL);
 8001358:	210c      	movs	r1, #12
 800135a:	4802      	ldr	r0, [pc, #8]	@ (8001364 <buzzer_vInit+0x10>)
 800135c:	f009 fc44 	bl	800abe8 <HAL_TIM_PWM_Start>
}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000ff8 	.word	0x20000ff8

08001368 <buzzer_set_freq>:

// ----- Génère la fréquence PWM -----
static void buzzer_set_freq(float freq)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	ed87 0a01 	vstr	s0, [r7, #4]
    if (freq == 0.0f) {
 8001372:	edd7 7a01 	vldr	s15, [r7, #4]
 8001376:	eef5 7a40 	vcmp.f32	s15, #0.0
 800137a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800137e:	d104      	bne.n	800138a <buzzer_set_freq+0x22>
        __HAL_TIM_SET_COMPARE(&BUZZER_TIMER, BUZZER_CHANNEL, 0);
 8001380:	4b1b      	ldr	r3, [pc, #108]	@ (80013f0 <buzzer_set_freq+0x88>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2200      	movs	r2, #0
 8001386:	641a      	str	r2, [r3, #64]	@ 0x40
        return;
 8001388:	e02f      	b.n	80013ea <buzzer_set_freq+0x82>
    }

    uint32_t timer_clk = HAL_RCC_GetPCLK1Freq() * 2;
 800138a:	f007 fe8f 	bl	80090ac <HAL_RCC_GetPCLK1Freq>
 800138e:	4603      	mov	r3, r0
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	617b      	str	r3, [r7, #20]
    uint32_t prescaler = BUZZER_TIMER.Init.Prescaler + 1;
 8001394:	4b16      	ldr	r3, [pc, #88]	@ (80013f0 <buzzer_set_freq+0x88>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	3301      	adds	r3, #1
 800139a:	613b      	str	r3, [r7, #16]
    uint32_t period = (uint32_t)((float)timer_clk / (freq * prescaler));
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	ee07 3a90 	vmov	s15, r3
 80013a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	ee07 3a90 	vmov	s15, r3
 80013ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80013b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013c0:	ee17 3a90 	vmov	r3, s15
 80013c4:	60fb      	str	r3, [r7, #12]
    uint32_t pulse = period / 2;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	085b      	lsrs	r3, r3, #1
 80013ca:	60bb      	str	r3, [r7, #8]

    __HAL_TIM_SET_AUTORELOAD(&BUZZER_TIMER, period);
 80013cc:	4b08      	ldr	r3, [pc, #32]	@ (80013f0 <buzzer_set_freq+0x88>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80013d4:	4a06      	ldr	r2, [pc, #24]	@ (80013f0 <buzzer_set_freq+0x88>)
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&BUZZER_TIMER, BUZZER_CHANNEL, pulse);
 80013da:	4b05      	ldr	r3, [pc, #20]	@ (80013f0 <buzzer_set_freq+0x88>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	68ba      	ldr	r2, [r7, #8]
 80013e0:	641a      	str	r2, [r3, #64]	@ 0x40
    BUZZER_TIMER.Instance->CNT = 0;
 80013e2:	4b03      	ldr	r3, [pc, #12]	@ (80013f0 <buzzer_set_freq+0x88>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2200      	movs	r2, #0
 80013e8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000ff8 	.word	0x20000ff8

080013f4 <buzzer_task>:

// ----- Tâche appelée toutes les 10ms par interruption TIM6 -----
void buzzer_task(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
    if (!buzzer_player.is_playing || buzzer_stop_flag)
 80013fa:	4b4d      	ldr	r3, [pc, #308]	@ (8001530 <buzzer_task+0x13c>)
 80013fc:	7a9b      	ldrb	r3, [r3, #10]
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 808e 	beq.w	8001522 <buzzer_task+0x12e>
 8001406:	4b4b      	ldr	r3, [pc, #300]	@ (8001534 <buzzer_task+0x140>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	b2db      	uxtb	r3, r3
 800140c:	2b00      	cmp	r3, #0
 800140e:	f040 8088 	bne.w	8001522 <buzzer_task+0x12e>
        return;

    if (note_timer > 0) {
 8001412:	4b49      	ldr	r3, [pc, #292]	@ (8001538 <buzzer_task+0x144>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00d      	beq.n	8001436 <buzzer_task+0x42>
        note_timer--;
 800141a:	4b47      	ldr	r3, [pc, #284]	@ (8001538 <buzzer_task+0x144>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	3b01      	subs	r3, #1
 8001420:	4a45      	ldr	r2, [pc, #276]	@ (8001538 <buzzer_task+0x144>)
 8001422:	6013      	str	r3, [r2, #0]
        if (note_timer == 1) {
 8001424:	4b44      	ldr	r3, [pc, #272]	@ (8001538 <buzzer_task+0x144>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d17c      	bne.n	8001526 <buzzer_task+0x132>
            buzzer_set_freq(0); // court silence à la fin de la note
 800142c:	ed9f 0a43 	vldr	s0, [pc, #268]	@ 800153c <buzzer_task+0x148>
 8001430:	f7ff ff9a 	bl	8001368 <buzzer_set_freq>
        }
        return;
 8001434:	e077      	b.n	8001526 <buzzer_task+0x132>
    }

    const buzzernote* note = &buzzer_player.song[buzzer_player.index];
 8001436:	4b3e      	ldr	r3, [pc, #248]	@ (8001530 <buzzer_task+0x13c>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	4b3d      	ldr	r3, [pc, #244]	@ (8001530 <buzzer_task+0x13c>)
 800143c:	88db      	ldrh	r3, [r3, #6]
 800143e:	b29b      	uxth	r3, r3
 8001440:	4619      	mov	r1, r3
 8001442:	460b      	mov	r3, r1
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	440b      	add	r3, r1
 8001448:	4413      	add	r3, r2
 800144a:	60bb      	str	r3, [r7, #8]
    if (note->duration == 0) {
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	789b      	ldrb	r3, [r3, #2]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d11a      	bne.n	800148a <buzzer_task+0x96>
        // Fin de morceau
        buzzer_player.current_repeat++;
 8001454:	4b36      	ldr	r3, [pc, #216]	@ (8001530 <buzzer_task+0x13c>)
 8001456:	7a5b      	ldrb	r3, [r3, #9]
 8001458:	b2db      	uxtb	r3, r3
 800145a:	3301      	adds	r3, #1
 800145c:	b2da      	uxtb	r2, r3
 800145e:	4b34      	ldr	r3, [pc, #208]	@ (8001530 <buzzer_task+0x13c>)
 8001460:	725a      	strb	r2, [r3, #9]
        if (buzzer_player.current_repeat >= buzzer_player.repeat) {
 8001462:	4b33      	ldr	r3, [pc, #204]	@ (8001530 <buzzer_task+0x13c>)
 8001464:	7a5b      	ldrb	r3, [r3, #9]
 8001466:	b2da      	uxtb	r2, r3
 8001468:	4b31      	ldr	r3, [pc, #196]	@ (8001530 <buzzer_task+0x13c>)
 800146a:	7a1b      	ldrb	r3, [r3, #8]
 800146c:	b2db      	uxtb	r3, r3
 800146e:	429a      	cmp	r2, r3
 8001470:	d307      	bcc.n	8001482 <buzzer_task+0x8e>
            buzzer_player.is_playing = 0;
 8001472:	4b2f      	ldr	r3, [pc, #188]	@ (8001530 <buzzer_task+0x13c>)
 8001474:	2200      	movs	r2, #0
 8001476:	729a      	strb	r2, [r3, #10]
            buzzer_set_freq(0);
 8001478:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 800153c <buzzer_task+0x148>
 800147c:	f7ff ff74 	bl	8001368 <buzzer_set_freq>
            return;
 8001480:	e052      	b.n	8001528 <buzzer_task+0x134>
        } else {
            buzzer_player.index = 0;
 8001482:	4b2b      	ldr	r3, [pc, #172]	@ (8001530 <buzzer_task+0x13c>)
 8001484:	2200      	movs	r2, #0
 8001486:	80da      	strh	r2, [r3, #6]
            return;
 8001488:	e04e      	b.n	8001528 <buzzer_task+0x134>
        }
    }

    // Lire la note
    float freq = 0.0;
 800148a:	f04f 0300 	mov.w	r3, #0
 800148e:	60fb      	str	r3, [r7, #12]
    if (note->note > 0 && note->note < 18) {
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d01a      	beq.n	80014ce <buzzer_task+0xda>
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b11      	cmp	r3, #17
 800149e:	d816      	bhi.n	80014ce <buzzer_task+0xda>
        freq = note_freqs[note->note];
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	4a26      	ldr	r2, [pc, #152]	@ (8001540 <buzzer_task+0x14c>)
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4413      	add	r3, r2
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	60fb      	str	r3, [r7, #12]
        if (note->sharp && (note->note + 1 < 18)) {
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	785b      	ldrb	r3, [r3, #1]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d00b      	beq.n	80014ce <buzzer_task+0xda>
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b10      	cmp	r3, #16
 80014bc:	d807      	bhi.n	80014ce <buzzer_task+0xda>
            freq = note_freqs[note->note + 1];
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	3301      	adds	r3, #1
 80014c4:	4a1e      	ldr	r2, [pc, #120]	@ (8001540 <buzzer_task+0x14c>)
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4413      	add	r3, r2
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	60fb      	str	r3, [r7, #12]
        }
    }

    buzzer_set_freq(freq);
 80014ce:	ed97 0a03 	vldr	s0, [r7, #12]
 80014d2:	f7ff ff49 	bl	8001368 <buzzer_set_freq>

    uint32_t beat_ms = 60000 / buzzer_player.tempo;
 80014d6:	4b16      	ldr	r3, [pc, #88]	@ (8001530 <buzzer_task+0x13c>)
 80014d8:	889b      	ldrh	r3, [r3, #4]
 80014da:	b29b      	uxth	r3, r3
 80014dc:	461a      	mov	r2, r3
 80014de:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80014e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80014e6:	607b      	str	r3, [r7, #4]
    note_timer = (beat_ms * note->duration) / 10;
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	789b      	ldrb	r3, [r3, #2]
 80014ec:	461a      	mov	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	fb02 f303 	mul.w	r3, r2, r3
 80014f4:	4a13      	ldr	r2, [pc, #76]	@ (8001544 <buzzer_task+0x150>)
 80014f6:	fba2 2303 	umull	r2, r3, r2, r3
 80014fa:	08db      	lsrs	r3, r3, #3
 80014fc:	4a0e      	ldr	r2, [pc, #56]	@ (8001538 <buzzer_task+0x144>)
 80014fe:	6013      	str	r3, [r2, #0]
    if (note_timer > 2) note_timer -= 1; // courte pause
 8001500:	4b0d      	ldr	r3, [pc, #52]	@ (8001538 <buzzer_task+0x144>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b02      	cmp	r3, #2
 8001506:	d904      	bls.n	8001512 <buzzer_task+0x11e>
 8001508:	4b0b      	ldr	r3, [pc, #44]	@ (8001538 <buzzer_task+0x144>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	3b01      	subs	r3, #1
 800150e:	4a0a      	ldr	r2, [pc, #40]	@ (8001538 <buzzer_task+0x144>)
 8001510:	6013      	str	r3, [r2, #0]
    buzzer_player.index++;
 8001512:	4b07      	ldr	r3, [pc, #28]	@ (8001530 <buzzer_task+0x13c>)
 8001514:	88db      	ldrh	r3, [r3, #6]
 8001516:	b29b      	uxth	r3, r3
 8001518:	3301      	adds	r3, #1
 800151a:	b29a      	uxth	r2, r3
 800151c:	4b04      	ldr	r3, [pc, #16]	@ (8001530 <buzzer_task+0x13c>)
 800151e:	80da      	strh	r2, [r3, #6]
 8001520:	e002      	b.n	8001528 <buzzer_task+0x134>
        return;
 8001522:	bf00      	nop
 8001524:	e000      	b.n	8001528 <buzzer_task+0x134>
        return;
 8001526:	bf00      	nop
}
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000444 	.word	0x20000444
 8001534:	20000450 	.word	0x20000450
 8001538:	20000454 	.word	0x20000454
 800153c:	00000000 	.word	0x00000000
 8001540:	08017060 	.word	0x08017060
 8001544:	cccccccd 	.word	0xcccccccd

08001548 <buzzer_ePlaySong>:

// ----- Lancer une mélodie -----
buzzer_status_t buzzer_ePlaySong(uint16_t tempo)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	80fb      	strh	r3, [r7, #6]
    buzzer_stop_flag = 0;
 8001552:	4b0f      	ldr	r3, [pc, #60]	@ (8001590 <buzzer_ePlaySong+0x48>)
 8001554:	2200      	movs	r2, #0
 8001556:	701a      	strb	r2, [r3, #0]
    buzzer_vInit();
 8001558:	f7ff fefc 	bl	8001354 <buzzer_vInit>

    buzzer_player.song = nokia;
 800155c:	4b0d      	ldr	r3, [pc, #52]	@ (8001594 <buzzer_ePlaySong+0x4c>)
 800155e:	4a0e      	ldr	r2, [pc, #56]	@ (8001598 <buzzer_ePlaySong+0x50>)
 8001560:	601a      	str	r2, [r3, #0]
    buzzer_player.tempo = tempo;
 8001562:	4a0c      	ldr	r2, [pc, #48]	@ (8001594 <buzzer_ePlaySong+0x4c>)
 8001564:	88fb      	ldrh	r3, [r7, #6]
 8001566:	8093      	strh	r3, [r2, #4]
    buzzer_player.index = 0;
 8001568:	4b0a      	ldr	r3, [pc, #40]	@ (8001594 <buzzer_ePlaySong+0x4c>)
 800156a:	2200      	movs	r2, #0
 800156c:	80da      	strh	r2, [r3, #6]
    buzzer_player.repeat = 5;
 800156e:	4b09      	ldr	r3, [pc, #36]	@ (8001594 <buzzer_ePlaySong+0x4c>)
 8001570:	2205      	movs	r2, #5
 8001572:	721a      	strb	r2, [r3, #8]
    buzzer_player.current_repeat = 0;
 8001574:	4b07      	ldr	r3, [pc, #28]	@ (8001594 <buzzer_ePlaySong+0x4c>)
 8001576:	2200      	movs	r2, #0
 8001578:	725a      	strb	r2, [r3, #9]
    buzzer_player.is_playing = 1;
 800157a:	4b06      	ldr	r3, [pc, #24]	@ (8001594 <buzzer_ePlaySong+0x4c>)
 800157c:	2201      	movs	r2, #1
 800157e:	729a      	strb	r2, [r3, #10]
    note_timer = 0;
 8001580:	4b06      	ldr	r3, [pc, #24]	@ (800159c <buzzer_ePlaySong+0x54>)
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]

    return BUZZER_OK;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000450 	.word	0x20000450
 8001594:	20000444 	.word	0x20000444
 8001598:	08017030 	.word	0x08017030
 800159c:	20000454 	.word	0x20000454

080015a0 <buzzer_isIdle>:


uint8_t buzzer_isIdle(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
    return (buzzer_player.is_playing == 0);
 80015a4:	4b06      	ldr	r3, [pc, #24]	@ (80015c0 <buzzer_isIdle+0x20>)
 80015a6:	7a9b      	ldrb	r3, [r3, #10]
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	bf0c      	ite	eq
 80015ae:	2301      	moveq	r3, #1
 80015b0:	2300      	movne	r3, #0
 80015b2:	b2db      	uxtb	r3, r3
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	20000444 	.word	0x20000444

080015c4 <buzzer_vStop>:

// ----- Arrêter immédiatement -----
void buzzer_vStop(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
    buzzer_stop_flag = 1;
 80015c8:	4b05      	ldr	r3, [pc, #20]	@ (80015e0 <buzzer_vStop+0x1c>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	701a      	strb	r2, [r3, #0]
    buzzer_player.is_playing = 0;
 80015ce:	4b05      	ldr	r3, [pc, #20]	@ (80015e4 <buzzer_vStop+0x20>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	729a      	strb	r2, [r3, #10]
    buzzer_set_freq(0);
 80015d4:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 80015e8 <buzzer_vStop+0x24>
 80015d8:	f7ff fec6 	bl	8001368 <buzzer_set_freq>
}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000450 	.word	0x20000450
 80015e4:	20000444 	.word	0x20000444
 80015e8:	00000000 	.word	0x00000000

080015ec <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80015f0:	4b17      	ldr	r3, [pc, #92]	@ (8001650 <MX_CAN1_Init+0x64>)
 80015f2:	4a18      	ldr	r2, [pc, #96]	@ (8001654 <MX_CAN1_Init+0x68>)
 80015f4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 80;
 80015f6:	4b16      	ldr	r3, [pc, #88]	@ (8001650 <MX_CAN1_Init+0x64>)
 80015f8:	2250      	movs	r2, #80	@ 0x50
 80015fa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80015fc:	4b14      	ldr	r3, [pc, #80]	@ (8001650 <MX_CAN1_Init+0x64>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001602:	4b13      	ldr	r3, [pc, #76]	@ (8001650 <MX_CAN1_Init+0x64>)
 8001604:	2200      	movs	r2, #0
 8001606:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001608:	4b11      	ldr	r3, [pc, #68]	@ (8001650 <MX_CAN1_Init+0x64>)
 800160a:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 800160e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001610:	4b0f      	ldr	r3, [pc, #60]	@ (8001650 <MX_CAN1_Init+0x64>)
 8001612:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001616:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001618:	4b0d      	ldr	r3, [pc, #52]	@ (8001650 <MX_CAN1_Init+0x64>)
 800161a:	2200      	movs	r2, #0
 800161c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800161e:	4b0c      	ldr	r3, [pc, #48]	@ (8001650 <MX_CAN1_Init+0x64>)
 8001620:	2200      	movs	r2, #0
 8001622:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001624:	4b0a      	ldr	r3, [pc, #40]	@ (8001650 <MX_CAN1_Init+0x64>)
 8001626:	2200      	movs	r2, #0
 8001628:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800162a:	4b09      	ldr	r3, [pc, #36]	@ (8001650 <MX_CAN1_Init+0x64>)
 800162c:	2200      	movs	r2, #0
 800162e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001630:	4b07      	ldr	r3, [pc, #28]	@ (8001650 <MX_CAN1_Init+0x64>)
 8001632:	2200      	movs	r2, #0
 8001634:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001636:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <MX_CAN1_Init+0x64>)
 8001638:	2200      	movs	r2, #0
 800163a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800163c:	4804      	ldr	r0, [pc, #16]	@ (8001650 <MX_CAN1_Init+0x64>)
 800163e:	f004 fd8f 	bl	8006160 <HAL_CAN_Init>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001648:	f001 f940 	bl	80028cc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000458 	.word	0x20000458
 8001654:	40006400 	.word	0x40006400

08001658 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08a      	sub	sp, #40	@ 0x28
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a28      	ldr	r2, [pc, #160]	@ (8001718 <HAL_CAN_MspInit+0xc0>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d149      	bne.n	800170e <HAL_CAN_MspInit+0xb6>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800167a:	4b28      	ldr	r3, [pc, #160]	@ (800171c <HAL_CAN_MspInit+0xc4>)
 800167c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800167e:	4a27      	ldr	r2, [pc, #156]	@ (800171c <HAL_CAN_MspInit+0xc4>)
 8001680:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001684:	6593      	str	r3, [r2, #88]	@ 0x58
 8001686:	4b25      	ldr	r3, [pc, #148]	@ (800171c <HAL_CAN_MspInit+0xc4>)
 8001688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800168a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001692:	4b22      	ldr	r3, [pc, #136]	@ (800171c <HAL_CAN_MspInit+0xc4>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001696:	4a21      	ldr	r2, [pc, #132]	@ (800171c <HAL_CAN_MspInit+0xc4>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800169e:	4b1f      	ldr	r3, [pc, #124]	@ (800171c <HAL_CAN_MspInit+0xc4>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80016aa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80016ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b0:	2302      	movs	r3, #2
 80016b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b8:	2303      	movs	r3, #3
 80016ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80016bc:	2309      	movs	r3, #9
 80016be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	4619      	mov	r1, r3
 80016c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016ca:	f005 fe51 	bl	8007370 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2100      	movs	r1, #0
 80016d2:	2013      	movs	r0, #19
 80016d4:	f005 fb9f 	bl	8006e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80016d8:	2013      	movs	r0, #19
 80016da:	f005 fbb8 	bl	8006e4e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	2100      	movs	r1, #0
 80016e2:	2014      	movs	r0, #20
 80016e4:	f005 fb97 	bl	8006e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80016e8:	2014      	movs	r0, #20
 80016ea:	f005 fbb0 	bl	8006e4e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2100      	movs	r1, #0
 80016f2:	2015      	movs	r0, #21
 80016f4:	f005 fb8f 	bl	8006e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80016f8:	2015      	movs	r0, #21
 80016fa:	f005 fba8 	bl	8006e4e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 80016fe:	2200      	movs	r2, #0
 8001700:	2100      	movs	r1, #0
 8001702:	2016      	movs	r0, #22
 8001704:	f005 fb87 	bl	8006e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001708:	2016      	movs	r0, #22
 800170a:	f005 fba0 	bl	8006e4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800170e:	bf00      	nop
 8001710:	3728      	adds	r7, #40	@ 0x28
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40006400 	.word	0x40006400
 800171c:	40021000 	.word	0x40021000

08001720 <update_display>:
    int hours;
    int minutes;
    int seconds;
} Time;
void update_display(Time t, uint32_t ldr);
void update_display(Time t, uint32_t ldr) {
 8001720:	b590      	push	{r4, r7, lr}
 8001722:	b08b      	sub	sp, #44	@ 0x2c
 8001724:	af00      	add	r7, sp, #0
 8001726:	1d3c      	adds	r4, r7, #4
 8001728:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800172c:	603b      	str	r3, [r7, #0]
    char display[20];

    SSD1306_Clear();
 800172e:	f002 f88c 	bl	800384a <SSD1306_Clear>
    SSD1306_GotoXY(0, 0);
 8001732:	2100      	movs	r1, #0
 8001734:	2000      	movs	r0, #0
 8001736:	f001 ffcf 	bl	80036d8 <SSD1306_GotoXY>
    if (ldr > 3000) {
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001740:	4293      	cmp	r3, r2
 8001742:	d93b      	bls.n	80017bc <update_display+0x9c>
    SSD1306_Puts("Time running:", &Font_7x10, 1);
 8001744:	2201      	movs	r2, #1
 8001746:	493e      	ldr	r1, [pc, #248]	@ (8001840 <update_display+0x120>)
 8001748:	483e      	ldr	r0, [pc, #248]	@ (8001844 <update_display+0x124>)
 800174a:	f002 f859 	bl	8003800 <SSD1306_Puts>

    SSD1306_GotoXY(0, 15);
 800174e:	210f      	movs	r1, #15
 8001750:	2000      	movs	r0, #0
 8001752:	f001 ffc1 	bl	80036d8 <SSD1306_GotoXY>
    sprintf(display, "Hour: %02d", t.hours);
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	493a      	ldr	r1, [pc, #232]	@ (8001848 <update_display+0x128>)
 800175e:	4618      	mov	r0, r3
 8001760:	f012 fe02 	bl	8014368 <siprintf>
    SSD1306_Puts(display, &Font_7x10, 1);
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	2201      	movs	r2, #1
 800176a:	4935      	ldr	r1, [pc, #212]	@ (8001840 <update_display+0x120>)
 800176c:	4618      	mov	r0, r3
 800176e:	f002 f847 	bl	8003800 <SSD1306_Puts>

    SSD1306_GotoXY(0, 30);
 8001772:	211e      	movs	r1, #30
 8001774:	2000      	movs	r0, #0
 8001776:	f001 ffaf 	bl	80036d8 <SSD1306_GotoXY>
    sprintf(display, "Min:  %02d", t.minutes);
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	4932      	ldr	r1, [pc, #200]	@ (800184c <update_display+0x12c>)
 8001782:	4618      	mov	r0, r3
 8001784:	f012 fdf0 	bl	8014368 <siprintf>
    SSD1306_Puts(display, &Font_7x10, 1);
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	2201      	movs	r2, #1
 800178e:	492c      	ldr	r1, [pc, #176]	@ (8001840 <update_display+0x120>)
 8001790:	4618      	mov	r0, r3
 8001792:	f002 f835 	bl	8003800 <SSD1306_Puts>

    SSD1306_GotoXY(0, 45);
 8001796:	212d      	movs	r1, #45	@ 0x2d
 8001798:	2000      	movs	r0, #0
 800179a:	f001 ff9d 	bl	80036d8 <SSD1306_GotoXY>
    sprintf(display, "Sec:  %02d", t.seconds);
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	492a      	ldr	r1, [pc, #168]	@ (8001850 <update_display+0x130>)
 80017a6:	4618      	mov	r0, r3
 80017a8:	f012 fdde 	bl	8014368 <siprintf>
    SSD1306_Puts(display, &Font_7x10, 1);}
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	2201      	movs	r2, #1
 80017b2:	4923      	ldr	r1, [pc, #140]	@ (8001840 <update_display+0x120>)
 80017b4:	4618      	mov	r0, r3
 80017b6:	f002 f823 	bl	8003800 <SSD1306_Puts>
 80017ba:	e03a      	b.n	8001832 <update_display+0x112>
else{

    SSD1306_Puts("Time running:", &Font_7x10, 0);
 80017bc:	2200      	movs	r2, #0
 80017be:	4920      	ldr	r1, [pc, #128]	@ (8001840 <update_display+0x120>)
 80017c0:	4820      	ldr	r0, [pc, #128]	@ (8001844 <update_display+0x124>)
 80017c2:	f002 f81d 	bl	8003800 <SSD1306_Puts>

    SSD1306_GotoXY(0, 15);
 80017c6:	210f      	movs	r1, #15
 80017c8:	2000      	movs	r0, #0
 80017ca:	f001 ff85 	bl	80036d8 <SSD1306_GotoXY>
    sprintf(display, "Hour: %02d", t.hours);
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	f107 0314 	add.w	r3, r7, #20
 80017d4:	491c      	ldr	r1, [pc, #112]	@ (8001848 <update_display+0x128>)
 80017d6:	4618      	mov	r0, r3
 80017d8:	f012 fdc6 	bl	8014368 <siprintf>
    SSD1306_Puts(display, &Font_7x10, 0);
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	2200      	movs	r2, #0
 80017e2:	4917      	ldr	r1, [pc, #92]	@ (8001840 <update_display+0x120>)
 80017e4:	4618      	mov	r0, r3
 80017e6:	f002 f80b 	bl	8003800 <SSD1306_Puts>

    SSD1306_GotoXY(0, 30);
 80017ea:	211e      	movs	r1, #30
 80017ec:	2000      	movs	r0, #0
 80017ee:	f001 ff73 	bl	80036d8 <SSD1306_GotoXY>
    sprintf(display, "Min:  %02d", t.minutes);
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	4914      	ldr	r1, [pc, #80]	@ (800184c <update_display+0x12c>)
 80017fa:	4618      	mov	r0, r3
 80017fc:	f012 fdb4 	bl	8014368 <siprintf>
    SSD1306_Puts(display, &Font_7x10, 0);
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	2200      	movs	r2, #0
 8001806:	490e      	ldr	r1, [pc, #56]	@ (8001840 <update_display+0x120>)
 8001808:	4618      	mov	r0, r3
 800180a:	f001 fff9 	bl	8003800 <SSD1306_Puts>

    SSD1306_GotoXY(0, 45);
 800180e:	212d      	movs	r1, #45	@ 0x2d
 8001810:	2000      	movs	r0, #0
 8001812:	f001 ff61 	bl	80036d8 <SSD1306_GotoXY>
    sprintf(display, "Sec:  %02d", t.seconds);
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	f107 0314 	add.w	r3, r7, #20
 800181c:	490c      	ldr	r1, [pc, #48]	@ (8001850 <update_display+0x130>)
 800181e:	4618      	mov	r0, r3
 8001820:	f012 fda2 	bl	8014368 <siprintf>
    SSD1306_Puts(display, &Font_7x10, 0);
 8001824:	f107 0314 	add.w	r3, r7, #20
 8001828:	2200      	movs	r2, #0
 800182a:	4905      	ldr	r1, [pc, #20]	@ (8001840 <update_display+0x120>)
 800182c:	4618      	mov	r0, r3
 800182e:	f001 ffe7 	bl	8003800 <SSD1306_Puts>
}

    SSD1306_UpdateScreen();
 8001832:	f001 feab 	bl	800358c <SSD1306_UpdateScreen>
}
 8001836:	bf00      	nop
 8001838:	372c      	adds	r7, #44	@ 0x2c
 800183a:	46bd      	mov	sp, r7
 800183c:	bd90      	pop	{r4, r7, pc}
 800183e:	bf00      	nop
 8001840:	20000108 	.word	0x20000108
 8001844:	08016f70 	.word	0x08016f70
 8001848:	08016f80 	.word	0x08016f80
 800184c:	08016f8c 	.word	0x08016f8c
 8001850:	08016f98 	.word	0x08016f98

08001854 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800185a:	4b0c      	ldr	r3, [pc, #48]	@ (800188c <MX_DMA_Init+0x38>)
 800185c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800185e:	4a0b      	ldr	r2, [pc, #44]	@ (800188c <MX_DMA_Init+0x38>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6493      	str	r3, [r2, #72]	@ 0x48
 8001866:	4b09      	ldr	r3, [pc, #36]	@ (800188c <MX_DMA_Init+0x38>)
 8001868:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	607b      	str	r3, [r7, #4]
 8001870:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001872:	2200      	movs	r2, #0
 8001874:	2100      	movs	r1, #0
 8001876:	200d      	movs	r0, #13
 8001878:	f005 facd 	bl	8006e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800187c:	200d      	movs	r0, #13
 800187e:	f005 fae6 	bl	8006e4e <HAL_NVIC_EnableIRQ>

}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40021000 	.word	0x40021000

08001890 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08a      	sub	sp, #40	@ 0x28
 8001894:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001896:	f107 0314 	add.w	r3, r7, #20
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	609a      	str	r2, [r3, #8]
 80018a2:	60da      	str	r2, [r3, #12]
 80018a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a6:	4b52      	ldr	r3, [pc, #328]	@ (80019f0 <MX_GPIO_Init+0x160>)
 80018a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018aa:	4a51      	ldr	r2, [pc, #324]	@ (80019f0 <MX_GPIO_Init+0x160>)
 80018ac:	f043 0304 	orr.w	r3, r3, #4
 80018b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018b2:	4b4f      	ldr	r3, [pc, #316]	@ (80019f0 <MX_GPIO_Init+0x160>)
 80018b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b6:	f003 0304 	and.w	r3, r3, #4
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018be:	4b4c      	ldr	r3, [pc, #304]	@ (80019f0 <MX_GPIO_Init+0x160>)
 80018c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c2:	4a4b      	ldr	r2, [pc, #300]	@ (80019f0 <MX_GPIO_Init+0x160>)
 80018c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018ca:	4b49      	ldr	r3, [pc, #292]	@ (80019f0 <MX_GPIO_Init+0x160>)
 80018cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d6:	4b46      	ldr	r3, [pc, #280]	@ (80019f0 <MX_GPIO_Init+0x160>)
 80018d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018da:	4a45      	ldr	r2, [pc, #276]	@ (80019f0 <MX_GPIO_Init+0x160>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018e2:	4b43      	ldr	r3, [pc, #268]	@ (80019f0 <MX_GPIO_Init+0x160>)
 80018e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ee:	4b40      	ldr	r3, [pc, #256]	@ (80019f0 <MX_GPIO_Init+0x160>)
 80018f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018f2:	4a3f      	ldr	r2, [pc, #252]	@ (80019f0 <MX_GPIO_Init+0x160>)
 80018f4:	f043 0302 	orr.w	r3, r3, #2
 80018f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018fa:	4b3d      	ldr	r3, [pc, #244]	@ (80019f0 <MX_GPIO_Init+0x160>)
 80018fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHUT1_GPIO_Port, SHUT1_Pin, GPIO_PIN_RESET);
 8001906:	2200      	movs	r2, #0
 8001908:	2101      	movs	r1, #1
 800190a:	483a      	ldr	r0, [pc, #232]	@ (80019f4 <MX_GPIO_Init+0x164>)
 800190c:	f005 fef2 	bl	80076f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 8001910:	2200      	movs	r2, #0
 8001912:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001916:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800191a:	f005 feeb 	bl	80076f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIS_Pin|CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 800191e:	2200      	movs	r2, #0
 8001920:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8001924:	4834      	ldr	r0, [pc, #208]	@ (80019f8 <MX_GPIO_Init+0x168>)
 8001926:	f005 fee5 	bl	80076f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin INTOF1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|INTOF1_Pin;
 800192a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800192e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001930:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001934:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800193a:	f107 0314 	add.w	r3, r7, #20
 800193e:	4619      	mov	r1, r3
 8001940:	482e      	ldr	r0, [pc, #184]	@ (80019fc <MX_GPIO_Init+0x16c>)
 8001942:	f005 fd15 	bl	8007370 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHUT1_Pin */
  GPIO_InitStruct.Pin = SHUT1_Pin;
 8001946:	2301      	movs	r3, #1
 8001948:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194a:	2301      	movs	r3, #1
 800194c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001952:	2300      	movs	r3, #0
 8001954:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHUT1_GPIO_Port, &GPIO_InitStruct);
 8001956:	f107 0314 	add.w	r3, r7, #20
 800195a:	4619      	mov	r1, r3
 800195c:	4825      	ldr	r0, [pc, #148]	@ (80019f4 <MX_GPIO_Init+0x164>)
 800195e:	f005 fd07 	bl	8007370 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001962:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001968:	2300      	movs	r3, #0
 800196a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800196c:	2301      	movs	r3, #1
 800196e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	4619      	mov	r1, r3
 8001976:	4820      	ldr	r0, [pc, #128]	@ (80019f8 <MX_GPIO_Init+0x168>)
 8001978:	f005 fcfa 	bl	8007370 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_Pin */
  GPIO_InitStruct.Pin = DIR_Pin;
 800197c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001982:	2301      	movs	r3, #1
 8001984:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198a:	2300      	movs	r3, #0
 800198c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 800198e:	f107 0314 	add.w	r3, r7, #20
 8001992:	4619      	mov	r1, r3
 8001994:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001998:	f005 fcea 	bl	8007370 <HAL_GPIO_Init>

  /*Configure GPIO pin : btn_Pin_Pin */
  GPIO_InitStruct.Pin = btn_Pin_Pin;
 800199c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80019a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019a2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(btn_Pin_GPIO_Port, &GPIO_InitStruct);
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	4619      	mov	r1, r3
 80019b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019b6:	f005 fcdb 	bl	8007370 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIS_Pin CE_Pin CSN_Pin */
  GPIO_InitStruct.Pin = DIS_Pin|CE_Pin|CSN_Pin;
 80019ba:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80019be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c0:	2301      	movs	r3, #1
 80019c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c8:	2300      	movs	r3, #0
 80019ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	4619      	mov	r1, r3
 80019d2:	4809      	ldr	r0, [pc, #36]	@ (80019f8 <MX_GPIO_Init+0x168>)
 80019d4:	f005 fccc 	bl	8007370 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80019d8:	2200      	movs	r2, #0
 80019da:	2100      	movs	r1, #0
 80019dc:	2028      	movs	r0, #40	@ 0x28
 80019de:	f005 fa1a 	bl	8006e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019e2:	2028      	movs	r0, #40	@ 0x28
 80019e4:	f005 fa33 	bl	8006e4e <HAL_NVIC_EnableIRQ>

}
 80019e8:	bf00      	nop
 80019ea:	3728      	adds	r7, #40	@ 0x28
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40021000 	.word	0x40021000
 80019f4:	48001c00 	.word	0x48001c00
 80019f8:	48000400 	.word	0x48000400
 80019fc:	48000800 	.word	0x48000800

08001a00 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a04:	4b1b      	ldr	r3, [pc, #108]	@ (8001a74 <MX_I2C1_Init+0x74>)
 8001a06:	4a1c      	ldr	r2, [pc, #112]	@ (8001a78 <MX_I2C1_Init+0x78>)
 8001a08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00F12981;
 8001a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001a74 <MX_I2C1_Init+0x74>)
 8001a0c:	4a1b      	ldr	r2, [pc, #108]	@ (8001a7c <MX_I2C1_Init+0x7c>)
 8001a0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a10:	4b18      	ldr	r3, [pc, #96]	@ (8001a74 <MX_I2C1_Init+0x74>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a16:	4b17      	ldr	r3, [pc, #92]	@ (8001a74 <MX_I2C1_Init+0x74>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a1c:	4b15      	ldr	r3, [pc, #84]	@ (8001a74 <MX_I2C1_Init+0x74>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a22:	4b14      	ldr	r3, [pc, #80]	@ (8001a74 <MX_I2C1_Init+0x74>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a28:	4b12      	ldr	r3, [pc, #72]	@ (8001a74 <MX_I2C1_Init+0x74>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a2e:	4b11      	ldr	r3, [pc, #68]	@ (8001a74 <MX_I2C1_Init+0x74>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a34:	4b0f      	ldr	r3, [pc, #60]	@ (8001a74 <MX_I2C1_Init+0x74>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a3a:	480e      	ldr	r0, [pc, #56]	@ (8001a74 <MX_I2C1_Init+0x74>)
 8001a3c:	f005 fe8a 	bl	8007754 <HAL_I2C_Init>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a46:	f000 ff41 	bl	80028cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	4809      	ldr	r0, [pc, #36]	@ (8001a74 <MX_I2C1_Init+0x74>)
 8001a4e:	f006 fcbd 	bl	80083cc <HAL_I2CEx_ConfigAnalogFilter>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a58:	f000 ff38 	bl	80028cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	4805      	ldr	r0, [pc, #20]	@ (8001a74 <MX_I2C1_Init+0x74>)
 8001a60:	f006 fcff 	bl	8008462 <HAL_I2CEx_ConfigDigitalFilter>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a6a:	f000 ff2f 	bl	80028cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000480 	.word	0x20000480
 8001a78:	40005400 	.word	0x40005400
 8001a7c:	00f12981 	.word	0x00f12981

08001a80 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b0ac      	sub	sp, #176	@ 0xb0
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	2288      	movs	r2, #136	@ 0x88
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f012 fd89 	bl	80145b8 <memset>
  if(i2cHandle->Instance==I2C1)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a21      	ldr	r2, [pc, #132]	@ (8001b30 <HAL_I2C_MspInit+0xb0>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d13a      	bne.n	8001b26 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ab0:	2340      	movs	r3, #64	@ 0x40
 8001ab2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	4618      	mov	r0, r3
 8001abe:	f007 fb81 	bl	80091c4 <HAL_RCCEx_PeriphCLKConfig>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001ac8:	f000 ff00 	bl	80028cc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001acc:	4b19      	ldr	r3, [pc, #100]	@ (8001b34 <HAL_I2C_MspInit+0xb4>)
 8001ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad0:	4a18      	ldr	r2, [pc, #96]	@ (8001b34 <HAL_I2C_MspInit+0xb4>)
 8001ad2:	f043 0302 	orr.w	r3, r3, #2
 8001ad6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ad8:	4b16      	ldr	r3, [pc, #88]	@ (8001b34 <HAL_I2C_MspInit+0xb4>)
 8001ada:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	613b      	str	r3, [r7, #16]
 8001ae2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ae4:	23c0      	movs	r3, #192	@ 0xc0
 8001ae6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aea:	2312      	movs	r3, #18
 8001aec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af6:	2303      	movs	r3, #3
 8001af8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001afc:	2304      	movs	r3, #4
 8001afe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b02:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b06:	4619      	mov	r1, r3
 8001b08:	480b      	ldr	r0, [pc, #44]	@ (8001b38 <HAL_I2C_MspInit+0xb8>)
 8001b0a:	f005 fc31 	bl	8007370 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b0e:	4b09      	ldr	r3, [pc, #36]	@ (8001b34 <HAL_I2C_MspInit+0xb4>)
 8001b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b12:	4a08      	ldr	r2, [pc, #32]	@ (8001b34 <HAL_I2C_MspInit+0xb4>)
 8001b14:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b18:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b1a:	4b06      	ldr	r3, [pc, #24]	@ (8001b34 <HAL_I2C_MspInit+0xb4>)
 8001b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001b26:	bf00      	nop
 8001b28:	37b0      	adds	r7, #176	@ 0xb0
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40005400 	.word	0x40005400
 8001b34:	40021000 	.word	0x40021000
 8001b38:	48000400 	.word	0x48000400

08001b3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08e      	sub	sp, #56	@ 0x38
 8001b40:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b42:	f002 fe3d 	bl	80047c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b46:	f000 fa0f 	bl	8001f68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b4a:	f7ff fea1 	bl	8001890 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b4e:	f7ff fe81 	bl	8001854 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001b52:	f002 fd31 	bl	80045b8 <MX_USART2_UART_Init>
  MX_TIM8_Init();
 8001b56:	f002 fa57 	bl	8004008 <MX_TIM8_Init>
  MX_LPUART1_UART_Init();
 8001b5a:	f002 fd01 	bl	8004560 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 8001b5e:	f7ff ff4f 	bl	8001a00 <MX_I2C1_Init>
  MX_TIM6_Init();
 8001b62:	f002 fa19 	bl	8003f98 <MX_TIM6_Init>
  MX_SPI2_Init();
 8001b66:	f001 fbad 	bl	80032c4 <MX_SPI2_Init>
  MX_TSC_Init();
 8001b6a:	f002 fc31 	bl	80043d0 <MX_TSC_Init>
  MX_CAN1_Init();
 8001b6e:	f7ff fd3d 	bl	80015ec <MX_CAN1_Init>
  MX_TIM3_Init();
 8001b72:	f002 f925 	bl	8003dc0 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001b76:	f7ff fae9 	bl	800114c <MX_ADC1_Init>
  MX_TIM2_Init();
 8001b7a:	f002 f8a9 	bl	8003cd0 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001b7e:	f002 f995 	bl	8003eac <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TSC_Start(&htsc);
 8001b82:	48b1      	ldr	r0, [pc, #708]	@ (8001e48 <main+0x30c>)
 8001b84:	f00a ff6a 	bl	800ca5c <HAL_TSC_Start>


	 HAL_CAN_Start(&hcan1);
 8001b88:	48b0      	ldr	r0, [pc, #704]	@ (8001e4c <main+0x310>)
 8001b8a:	f004 fcae 	bl	80064ea <HAL_CAN_Start>
	 SSD1306_Init();
 8001b8e:	f001 fc39 	bl	8003404 <SSD1306_Init>

//callbacks BusCan


	 HAL_GPIO_WritePin(CSN_GPIO_Port,CSN_Pin,GPIO_PIN_SET);
 8001b92:	2201      	movs	r2, #1
 8001b94:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b98:	48ad      	ldr	r0, [pc, #692]	@ (8001e50 <main+0x314>)
 8001b9a:	f005 fdab 	bl	80076f4 <HAL_GPIO_WritePin>



//moteur

	 HAL_GPIO_WritePin(GPIOA, DIR_Pin, GPIO_PIN_RESET);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ba4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ba8:	f005 fda4 	bl	80076f4 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, DIS_Pin, GPIO_PIN_SET);
 8001bac:	2201      	movs	r2, #1
 8001bae:	2120      	movs	r1, #32
 8001bb0:	48a7      	ldr	r0, [pc, #668]	@ (8001e50 <main+0x314>)
 8001bb2:	f005 fd9f 	bl	80076f4 <HAL_GPIO_WritePin>
	 __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 20000);
 8001bb6:	4ba7      	ldr	r3, [pc, #668]	@ (8001e54 <main+0x318>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001bbe:	635a      	str	r2, [r3, #52]	@ 0x34

	 HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	48a4      	ldr	r0, [pc, #656]	@ (8001e54 <main+0x318>)
 8001bc4:	f009 f810 	bl	800abe8 <HAL_TIM_PWM_Start>

	// Configuration des filtres
  	CAN_FilterTypeDef sFilterConfig;
  	sFilterConfig.FilterBank = 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	61bb      	str	r3, [r7, #24]
  	sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	61fb      	str	r3, [r7, #28]
  	sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	623b      	str	r3, [r7, #32]
  	sFilterConfig.FilterIdHigh = 0x0220;
 8001bd4:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8001bd8:	607b      	str	r3, [r7, #4]
  	sFilterConfig.FilterIdLow = 0x0220;
 8001bda:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8001bde:	60bb      	str	r3, [r7, #8]
  	sFilterConfig.FilterMaskIdHigh = 0x0220;
 8001be0:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8001be4:	60fb      	str	r3, [r7, #12]
  	sFilterConfig.FilterMaskIdLow = 0x0220;
 8001be6:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8001bea:	613b      	str	r3, [r7, #16]
  	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]
  	sFilterConfig.FilterActivation = ENABLE;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	627b      	str	r3, [r7, #36]	@ 0x24
  	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig );
 8001bf4:	1d3b      	adds	r3, r7, #4
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4894      	ldr	r0, [pc, #592]	@ (8001e4c <main+0x310>)
 8001bfa:	f004 fbac 	bl	8006356 <HAL_CAN_ConfigFilter>

  // Envoi de la commande SGP40

	error_code=HAL_I2C_Master_Transmit(&hi2c1,(DevAddress<<1),(uint8_t *)cmd_test, sizeof(cmd_test),HAL_MAX_DELAY);
 8001bfe:	4b96      	ldr	r3, [pc, #600]	@ (8001e58 <main+0x31c>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	b299      	uxth	r1, r3
 8001c06:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	4a93      	ldr	r2, [pc, #588]	@ (8001e5c <main+0x320>)
 8001c10:	4893      	ldr	r0, [pc, #588]	@ (8001e60 <main+0x324>)
 8001c12:	f005 fe3b 	bl	800788c <HAL_I2C_Master_Transmit>
 8001c16:	4603      	mov	r3, r0
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4b92      	ldr	r3, [pc, #584]	@ (8001e64 <main+0x328>)
 8001c1c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(320);
 8001c1e:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8001c22:	f002 fe49 	bl	80048b8 <HAL_Delay>

  // Lecture de la réponse du SGP40

	error_code=HAL_I2C_Master_Receive(&hi2c1,(DevAddress<<1), (uint8_t *)read, sizeof(read),HAL_MAX_DELAY);
 8001c26:	4b8c      	ldr	r3, [pc, #560]	@ (8001e58 <main+0x31c>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	b299      	uxth	r1, r3
 8001c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	2303      	movs	r3, #3
 8001c36:	4a8c      	ldr	r2, [pc, #560]	@ (8001e68 <main+0x32c>)
 8001c38:	4889      	ldr	r0, [pc, #548]	@ (8001e60 <main+0x324>)
 8001c3a:	f005 ff3f 	bl	8007abc <HAL_I2C_Master_Receive>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	461a      	mov	r2, r3
 8001c42:	4b88      	ldr	r3, [pc, #544]	@ (8001e64 <main+0x328>)
 8001c44:	701a      	strb	r2, [r3, #0]

    set_leds(0);
 8001c46:	2000      	movs	r0, #0
 8001c48:	f000 fb3a 	bl	80022c0 <set_leds>


     HAL_TIM_Base_Start_IT(&htim6);
 8001c4c:	4887      	ldr	r0, [pc, #540]	@ (8001e6c <main+0x330>)
 8001c4e:	f008 fef9 	bl	800aa44 <HAL_TIM_Base_Start_IT>
	 HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_4);
 8001c52:	210c      	movs	r1, #12
 8001c54:	4886      	ldr	r0, [pc, #536]	@ (8001e70 <main+0x334>)
 8001c56:	f009 f8cd 	bl	800adf4 <HAL_TIM_PWM_Start_IT>

     HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING );
 8001c5a:	2102      	movs	r1, #2
 8001c5c:	487b      	ldr	r0, [pc, #492]	@ (8001e4c <main+0x310>)
 8001c5e:	f004 fdaa 	bl	80067b6 <HAL_CAN_ActivateNotification>
	 HAL_CAN_ActivateNotification(&hcan1,CAN_IT_TX_MAILBOX_EMPTY );
 8001c62:	2101      	movs	r1, #1
 8001c64:	4879      	ldr	r0, [pc, #484]	@ (8001e4c <main+0x310>)
 8001c66:	f004 fda6 	bl	80067b6 <HAL_CAN_ActivateNotification>


	 //bluetooth
	 HAL_UART_Receive_IT(&hlpuart1,time_buffer, 10);
 8001c6a:	220a      	movs	r2, #10
 8001c6c:	4981      	ldr	r1, [pc, #516]	@ (8001e74 <main+0x338>)
 8001c6e:	4882      	ldr	r0, [pc, #520]	@ (8001e78 <main+0x33c>)
 8001c70:	f00b f81e 	bl	800ccb0 <HAL_UART_Receive_IT>


	 ResetAndInitializeTOF1();
 8001c74:	f000 fd3e 	bl	80026f4 <ResetAndInitializeTOF1>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //condition moteur
	  if(count50> 50)  {HAL_ADC_Start_IT(&hadc1); count50= 0;}
 8001c78:	4b80      	ldr	r3, [pc, #512]	@ (8001e7c <main+0x340>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b32      	cmp	r3, #50	@ 0x32
 8001c7e:	d905      	bls.n	8001c8c <main+0x150>
 8001c80:	487f      	ldr	r0, [pc, #508]	@ (8001e80 <main+0x344>)
 8001c82:	f003 f983 	bl	8004f8c <HAL_ADC_Start_IT>
 8001c86:	4b7d      	ldr	r3, [pc, #500]	@ (8001e7c <main+0x340>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]


		if( (pot_Value/ 10) < Sraw_voc)
 8001c8c:	4b7d      	ldr	r3, [pc, #500]	@ (8001e84 <main+0x348>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a7d      	ldr	r2, [pc, #500]	@ (8001e88 <main+0x34c>)
 8001c92:	fba2 2303 	umull	r2, r3, r2, r3
 8001c96:	08db      	lsrs	r3, r3, #3
 8001c98:	4a7c      	ldr	r2, [pc, #496]	@ (8001e8c <main+0x350>)
 8001c9a:	8812      	ldrh	r2, [r2, #0]
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d205      	bcs.n	8001cac <main+0x170>
			  HAL_GPIO_WritePin(GPIOB, DIS_Pin, GPIO_PIN_RESET);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2120      	movs	r1, #32
 8001ca4:	486a      	ldr	r0, [pc, #424]	@ (8001e50 <main+0x314>)
 8001ca6:	f005 fd25 	bl	80076f4 <HAL_GPIO_WritePin>
 8001caa:	e004      	b.n	8001cb6 <main+0x17a>
		else
			  HAL_GPIO_WritePin(GPIOB, DIS_Pin, GPIO_PIN_SET);
 8001cac:	2201      	movs	r2, #1
 8001cae:	2120      	movs	r1, #32
 8001cb0:	4867      	ldr	r0, [pc, #412]	@ (8001e50 <main+0x314>)
 8001cb2:	f005 fd1f 	bl	80076f4 <HAL_GPIO_WritePin>

//time
		if(timeUpdate) {
 8001cb6:	4b76      	ldr	r3, [pc, #472]	@ (8001e90 <main+0x354>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d021      	beq.n	8001d04 <main+0x1c8>

		char test = time_buffer[0];
 8001cc0:	4b6c      	ldr	r3, [pc, #432]	@ (8001e74 <main+0x338>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

		timeUpdate=0;
 8001cc8:	4b71      	ldr	r3, [pc, #452]	@ (8001e90 <main+0x354>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	701a      	strb	r2, [r3, #0]

		if(test=='A'){
 8001cce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001cd2:	2b41      	cmp	r3, #65	@ 0x41
 8001cd4:	d108      	bne.n	8001ce8 <main+0x1ac>
			sscanf(time_buffer, "%*c:%d:%d:%d", &alarmTime.hours, &alarmTime.minutes, &alarmTime.seconds );
 8001cd6:	4b6f      	ldr	r3, [pc, #444]	@ (8001e94 <main+0x358>)
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	4b6f      	ldr	r3, [pc, #444]	@ (8001e98 <main+0x35c>)
 8001cdc:	4a6f      	ldr	r2, [pc, #444]	@ (8001e9c <main+0x360>)
 8001cde:	4970      	ldr	r1, [pc, #448]	@ (8001ea0 <main+0x364>)
 8001ce0:	4864      	ldr	r0, [pc, #400]	@ (8001e74 <main+0x338>)
 8001ce2:	f012 fb63 	bl	80143ac <siscanf>
 8001ce6:	e00d      	b.n	8001d04 <main+0x1c8>
			//buzzer_ePlaySong( 100);
		}
		else{
			sscanf(time_buffer, "%*c:%d:%d:%d", &currentTime.hours, &currentTime.minutes, &currentTime.seconds );
 8001ce8:	4b6e      	ldr	r3, [pc, #440]	@ (8001ea4 <main+0x368>)
 8001cea:	9300      	str	r3, [sp, #0]
 8001cec:	4b6e      	ldr	r3, [pc, #440]	@ (8001ea8 <main+0x36c>)
 8001cee:	4a6f      	ldr	r2, [pc, #444]	@ (8001eac <main+0x370>)
 8001cf0:	496b      	ldr	r1, [pc, #428]	@ (8001ea0 <main+0x364>)
 8001cf2:	4860      	ldr	r0, [pc, #384]	@ (8001e74 <main+0x338>)
 8001cf4:	f012 fb5a 	bl	80143ac <siscanf>
			update_display(currentTime, ldr_value);
 8001cf8:	4b6d      	ldr	r3, [pc, #436]	@ (8001eb0 <main+0x374>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a6b      	ldr	r2, [pc, #428]	@ (8001eac <main+0x370>)
 8001cfe:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d00:	f7ff fd0e 	bl	8001720 <update_display>
		}
		}

//alarme
	  if((alarmTime.hours==currentTime.hours)  &&(alarmTime.minutes==currentTime.minutes)&&(currentTime.seconds ==alarmTime.seconds)){
 8001d04:	4b65      	ldr	r3, [pc, #404]	@ (8001e9c <main+0x360>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	4b68      	ldr	r3, [pc, #416]	@ (8001eac <main+0x370>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d114      	bne.n	8001d3a <main+0x1fe>
 8001d10:	4b62      	ldr	r3, [pc, #392]	@ (8001e9c <main+0x360>)
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	4b65      	ldr	r3, [pc, #404]	@ (8001eac <main+0x370>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d10e      	bne.n	8001d3a <main+0x1fe>
 8001d1c:	4b63      	ldr	r3, [pc, #396]	@ (8001eac <main+0x370>)
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	4b5e      	ldr	r3, [pc, #376]	@ (8001e9c <main+0x360>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d108      	bne.n	8001d3a <main+0x1fe>
		  buzzer_ePlaySong( 120);
 8001d28:	2078      	movs	r0, #120	@ 0x78
 8001d2a:	f7ff fc0d 	bl	8001548 <buzzer_ePlaySong>
		running_day=1;
 8001d2e:	4b61      	ldr	r3, [pc, #388]	@ (8001eb4 <main+0x378>)
 8001d30:	2201      	movs	r2, #1
 8001d32:	801a      	strh	r2, [r3, #0]
		  play_triggered = 1;
 8001d34:	4b60      	ldr	r3, [pc, #384]	@ (8001eb8 <main+0x37c>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	701a      	strb	r2, [r3, #0]
	  }

	  if (buzzer_isIdle())
 8001d3a:	f7ff fc31 	bl	80015a0 <buzzer_isIdle>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d002      	beq.n	8001d4a <main+0x20e>
	        {
	            play_triggered = 0;
 8001d44:	4b5c      	ldr	r3, [pc, #368]	@ (8001eb8 <main+0x37c>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	701a      	strb	r2, [r3, #0]
	        }

	  progressive_led_on();
 8001d4a:	f000 fb41 	bl	80023d0 <progressive_led_on>
	  poll_PB11();
 8001d4e:	f000 fbfd 	bl	800254c <poll_PB11>
//capteur de température
	 HAL_GPIO_WritePin(CE_GPIO_Port,CE_Pin, GPIO_PIN_SET);
 8001d52:	2201      	movs	r2, #1
 8001d54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d58:	483d      	ldr	r0, [pc, #244]	@ (8001e50 <main+0x314>)
 8001d5a:	f005 fccb 	bl	80076f4 <HAL_GPIO_WritePin>

	 error_code=HAL_SPI_Transmit(&hspi2,(uint8_t *)control_T,sizeof(control_T),HAL_MAX_DELAY);
 8001d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d62:	2202      	movs	r2, #2
 8001d64:	4955      	ldr	r1, [pc, #340]	@ (8001ebc <main+0x380>)
 8001d66:	4856      	ldr	r0, [pc, #344]	@ (8001ec0 <main+0x384>)
 8001d68:	f007 ff8b 	bl	8009c82 <HAL_SPI_Transmit>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	461a      	mov	r2, r3
 8001d70:	4b3c      	ldr	r3, [pc, #240]	@ (8001e64 <main+0x328>)
 8001d72:	701a      	strb	r2, [r3, #0]

     HAL_GPIO_WritePin(CE_GPIO_Port,CE_Pin,GPIO_PIN_RESET);
 8001d74:	2200      	movs	r2, #0
 8001d76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d7a:	4835      	ldr	r0, [pc, #212]	@ (8001e50 <main+0x314>)
 8001d7c:	f005 fcba 	bl	80076f4 <HAL_GPIO_WritePin>
//    	 count15= 0;
//
//    	 once=0;
//     }

	if (count15> 15){
 8001d80:	4b50      	ldr	r3, [pc, #320]	@ (8001ec4 <main+0x388>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2b0f      	cmp	r3, #15
 8001d86:	d927      	bls.n	8001dd8 <main+0x29c>

		once= 	1;
 8001d88:	4b4f      	ldr	r3, [pc, #316]	@ (8001ec8 <main+0x38c>)
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	701a      	strb	r2, [r3, #0]
		count15= 0;
 8001d8e:	4b4d      	ldr	r3, [pc, #308]	@ (8001ec4 <main+0x388>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]

     HAL_GPIO_WritePin(CE_GPIO_Port,CE_Pin, GPIO_PIN_SET);
 8001d94:	2201      	movs	r2, #1
 8001d96:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d9a:	482d      	ldr	r0, [pc, #180]	@ (8001e50 <main+0x314>)
 8001d9c:	f005 fcaa 	bl	80076f4 <HAL_GPIO_WritePin>


	 error_code=HAL_SPI_Transmit(&hspi2,&Temp_Address,1,HAL_MAX_DELAY);
 8001da0:	f04f 33ff 	mov.w	r3, #4294967295
 8001da4:	2201      	movs	r2, #1
 8001da6:	4949      	ldr	r1, [pc, #292]	@ (8001ecc <main+0x390>)
 8001da8:	4845      	ldr	r0, [pc, #276]	@ (8001ec0 <main+0x384>)
 8001daa:	f007 ff6a 	bl	8009c82 <HAL_SPI_Transmit>
 8001dae:	4603      	mov	r3, r0
 8001db0:	461a      	mov	r2, r3
 8001db2:	4b2c      	ldr	r3, [pc, #176]	@ (8001e64 <main+0x328>)
 8001db4:	701a      	strb	r2, [r3, #0]


	 error_code=HAL_SPI_Receive(&hspi2,(uint8_t *)Temp,3,HAL_MAX_DELAY);
 8001db6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dba:	2203      	movs	r2, #3
 8001dbc:	4944      	ldr	r1, [pc, #272]	@ (8001ed0 <main+0x394>)
 8001dbe:	4840      	ldr	r0, [pc, #256]	@ (8001ec0 <main+0x384>)
 8001dc0:	f008 f8d5 	bl	8009f6e <HAL_SPI_Receive>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	4b26      	ldr	r3, [pc, #152]	@ (8001e64 <main+0x328>)
 8001dca:	701a      	strb	r2, [r3, #0]


	 HAL_GPIO_WritePin(CE_GPIO_Port,CE_Pin,GPIO_PIN_RESET);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001dd2:	481f      	ldr	r0, [pc, #124]	@ (8001e50 <main+0x314>)
 8001dd4:	f005 fc8e 	bl	80076f4 <HAL_GPIO_WritePin>
	}

	 uint8_t msbvalue = Temp[0];
 8001dd8:	4b3d      	ldr	r3, [pc, #244]	@ (8001ed0 <main+0x394>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	 uint8_t lsbvalue = Temp[1];
 8001de0:	4b3b      	ldr	r3, [pc, #236]	@ (8001ed0 <main+0x394>)
 8001de2:	785b      	ldrb	r3, [r3, #1]
 8001de4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d


	 if(lsbvalue && 0b10000000 == 0b10000000)
 8001de8:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d013      	beq.n	8001e18 <main+0x2dc>
		{
			fTemperature = msbvalue + 0.50;
 8001df0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7fe fb95 	bl	8000524 <__aeabi_i2d>
 8001dfa:	f04f 0200 	mov.w	r2, #0
 8001dfe:	4b35      	ldr	r3, [pc, #212]	@ (8001ed4 <main+0x398>)
 8001e00:	f7fe fa44 	bl	800028c <__adddf3>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4610      	mov	r0, r2
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	f7fe feec 	bl	8000be8 <__aeabi_d2f>
 8001e10:	4603      	mov	r3, r0
 8001e12:	4a31      	ldr	r2, [pc, #196]	@ (8001ed8 <main+0x39c>)
 8001e14:	6013      	str	r3, [r2, #0]
 8001e16:	e06c      	b.n	8001ef2 <main+0x3b6>
		}
	 else if(lsbvalue && 0b01000000 == 0b01000000)
 8001e18:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d05f      	beq.n	8001ee0 <main+0x3a4>
		{
			fTemperature = msbvalue + 0.25;
 8001e20:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe fb7d 	bl	8000524 <__aeabi_i2d>
 8001e2a:	f04f 0200 	mov.w	r2, #0
 8001e2e:	4b2b      	ldr	r3, [pc, #172]	@ (8001edc <main+0x3a0>)
 8001e30:	f7fe fa2c 	bl	800028c <__adddf3>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	4610      	mov	r0, r2
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	f7fe fed4 	bl	8000be8 <__aeabi_d2f>
 8001e40:	4603      	mov	r3, r0
 8001e42:	4a25      	ldr	r2, [pc, #148]	@ (8001ed8 <main+0x39c>)
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	e054      	b.n	8001ef2 <main+0x3b6>
 8001e48:	2000108c 	.word	0x2000108c
 8001e4c:	20000458 	.word	0x20000458
 8001e50:	48000400 	.word	0x48000400
 8001e54:	20000ec8 	.word	0x20000ec8
 8001e58:	20000124 	.word	0x20000124
 8001e5c:	20000128 	.word	0x20000128
 8001e60:	20000480 	.word	0x20000480
 8001e64:	200004ec 	.word	0x200004ec
 8001e68:	20000618 	.word	0x20000618
 8001e6c:	20000fac 	.word	0x20000fac
 8001e70:	20000f60 	.word	0x20000f60
 8001e74:	2000067c 	.word	0x2000067c
 8001e78:	200010d0 	.word	0x200010d0
 8001e7c:	2000063c 	.word	0x2000063c
 8001e80:	200003e0 	.word	0x200003e0
 8001e84:	20000620 	.word	0x20000620
 8001e88:	cccccccd 	.word	0xcccccccd
 8001e8c:	2000061c 	.word	0x2000061c
 8001e90:	20000678 	.word	0x20000678
 8001e94:	20000138 	.word	0x20000138
 8001e98:	20000134 	.word	0x20000134
 8001e9c:	20000130 	.word	0x20000130
 8001ea0:	08016fa4 	.word	0x08016fa4
 8001ea4:	20000674 	.word	0x20000674
 8001ea8:	20000670 	.word	0x20000670
 8001eac:	2000066c 	.word	0x2000066c
 8001eb0:	20000624 	.word	0x20000624
 8001eb4:	20000640 	.word	0x20000640
 8001eb8:	20000669 	.word	0x20000669
 8001ebc:	20000120 	.word	0x20000120
 8001ec0:	20000a58 	.word	0x20000a58
 8001ec4:	20000630 	.word	0x20000630
 8001ec8:	2000012a 	.word	0x2000012a
 8001ecc:	20000122 	.word	0x20000122
 8001ed0:	200004d4 	.word	0x200004d4
 8001ed4:	3fe00000 	.word	0x3fe00000
 8001ed8:	200004e4 	.word	0x200004e4
 8001edc:	3fd00000 	.word	0x3fd00000
		}
	 else
		{
			fTemperature = msbvalue;
 8001ee0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001ee4:	ee07 3a90 	vmov	s15, r3
 8001ee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eec:	4b18      	ldr	r3, [pc, #96]	@ (8001f50 <main+0x414>)
 8001eee:	edc3 7a00 	vstr	s15, [r3]
//	 {
//
//		 count100 =0;
//		 once2= 0;
//	 }
if(count100 > 100){
 8001ef2:	4b18      	ldr	r3, [pc, #96]	@ (8001f54 <main+0x418>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2b64      	cmp	r3, #100	@ 0x64
 8001ef8:	d912      	bls.n	8001f20 <main+0x3e4>

	once2= 1;
 8001efa:	4b17      	ldr	r3, [pc, #92]	@ (8001f58 <main+0x41c>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	701a      	strb	r2, [r3, #0]
	count100 = 0;
 8001f00:	4b14      	ldr	r3, [pc, #80]	@ (8001f54 <main+0x418>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
  // Reconstruction de la réponse du SGP40
     Sraw_voc = SGP40_MeasureVOC(fTemperature, 50);
 8001f06:	4b12      	ldr	r3, [pc, #72]	@ (8001f50 <main+0x414>)
 8001f08:	edd3 7a00 	vldr	s15, [r3]
 8001f0c:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8001f5c <main+0x420>
 8001f10:	eeb0 0a67 	vmov.f32	s0, s15
 8001f14:	f7ff f8fc 	bl	8001110 <SGP40_MeasureVOC>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	4b10      	ldr	r3, [pc, #64]	@ (8001f60 <main+0x424>)
 8001f1e:	801a      	strh	r2, [r3, #0]
}



  //  tactile
         if (isStableTouch(TSC_GROUP1_IDX, 239, TOUCH_THRESHOLD)) {
 8001f20:	2223      	movs	r2, #35	@ 0x23
 8001f22:	21ef      	movs	r1, #239	@ 0xef
 8001f24:	2000      	movs	r0, #0
 8001f26:	f000 facd 	bl	80024c4 <isStableTouch>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f43f aea3 	beq.w	8001c78 <main+0x13c>
          sw++;
 8001f32:	4b0c      	ldr	r3, [pc, #48]	@ (8001f64 <main+0x428>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	3301      	adds	r3, #1
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f64 <main+0x428>)
 8001f3c:	701a      	strb	r2, [r3, #0]
          if(sw==3)  sw=0;
 8001f3e:	4b09      	ldr	r3, [pc, #36]	@ (8001f64 <main+0x428>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2b03      	cmp	r3, #3
 8001f44:	f47f ae98 	bne.w	8001c78 <main+0x13c>
 8001f48:	4b06      	ldr	r3, [pc, #24]	@ (8001f64 <main+0x428>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	701a      	strb	r2, [r3, #0]
  {
 8001f4e:	e693      	b.n	8001c78 <main+0x13c>
 8001f50:	200004e4 	.word	0x200004e4
 8001f54:	2000062c 	.word	0x2000062c
 8001f58:	2000012b 	.word	0x2000012b
 8001f5c:	42480000 	.word	0x42480000
 8001f60:	2000061c 	.word	0x2000061c
 8001f64:	20000123 	.word	0x20000123

08001f68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b096      	sub	sp, #88	@ 0x58
 8001f6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f6e:	f107 0314 	add.w	r3, r7, #20
 8001f72:	2244      	movs	r2, #68	@ 0x44
 8001f74:	2100      	movs	r1, #0
 8001f76:	4618      	mov	r0, r3
 8001f78:	f012 fb1e 	bl	80145b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f7c:	463b      	mov	r3, r7
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	605a      	str	r2, [r3, #4]
 8001f84:	609a      	str	r2, [r3, #8]
 8001f86:	60da      	str	r2, [r3, #12]
 8001f88:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001f8a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001f8e:	f006 fac3 	bl	8008518 <HAL_PWREx_ControlVoltageScaling>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001f98:	f000 fc98 	bl	80028cc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fa0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fa4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fa6:	2310      	movs	r3, #16
 8001fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001faa:	2302      	movs	r3, #2
 8001fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001fb6:	230a      	movs	r3, #10
 8001fb8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001fba:	2307      	movs	r3, #7
 8001fbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fc6:	f107 0314 	add.w	r3, r7, #20
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f006 fafa 	bl	80085c4 <HAL_RCC_OscConfig>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001fd6:	f000 fc79 	bl	80028cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fda:	230f      	movs	r3, #15
 8001fdc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fea:	2300      	movs	r3, #0
 8001fec:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001fee:	463b      	mov	r3, r7
 8001ff0:	2104      	movs	r1, #4
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f006 fec2 	bl	8008d7c <HAL_RCC_ClockConfig>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001ffe:	f000 fc65 	bl	80028cc <Error_Handler>
  }
}
 8002002:	bf00      	nop
 8002004:	3758      	adds	r7, #88	@ 0x58
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <HAL_TIM_PWM_PulseFinishedCallback>:
/* USER CODE BEGIN 4 */
uint8_t cpt=0;

uint8_t flag_btn=0;
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3){
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a30      	ldr	r2, [pc, #192]	@ (80020dc <HAL_TIM_PWM_PulseFinishedCallback+0xd0>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d106      	bne.n	800202c <HAL_TIM_PWM_PulseFinishedCallback+0x20>
	HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_4);
 800201e:	210c      	movs	r1, #12
 8002020:	482f      	ldr	r0, [pc, #188]	@ (80020e0 <HAL_TIM_PWM_PulseFinishedCallback+0xd4>)
 8002022:	f009 fa5b 	bl	800b4dc <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;}
 8002026:	4b2f      	ldr	r3, [pc, #188]	@ (80020e4 <HAL_TIM_PWM_PulseFinishedCallback+0xd8>)
 8002028:	2201      	movs	r2, #1
 800202a:	701a      	strb	r2, [r3, #0]

	if (htim->Instance == TIM4){
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a2d      	ldr	r2, [pc, #180]	@ (80020e8 <HAL_TIM_PWM_PulseFinishedCallback+0xdc>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d14e      	bne.n	80020d4 <HAL_TIM_PWM_PulseFinishedCallback+0xc8>
		 count500 ++; count100 ++; count15 ++;count =1; count11++; count50++;
 8002036:	4b2d      	ldr	r3, [pc, #180]	@ (80020ec <HAL_TIM_PWM_PulseFinishedCallback+0xe0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	3301      	adds	r3, #1
 800203c:	4a2b      	ldr	r2, [pc, #172]	@ (80020ec <HAL_TIM_PWM_PulseFinishedCallback+0xe0>)
 800203e:	6013      	str	r3, [r2, #0]
 8002040:	4b2b      	ldr	r3, [pc, #172]	@ (80020f0 <HAL_TIM_PWM_PulseFinishedCallback+0xe4>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	3301      	adds	r3, #1
 8002046:	4a2a      	ldr	r2, [pc, #168]	@ (80020f0 <HAL_TIM_PWM_PulseFinishedCallback+0xe4>)
 8002048:	6013      	str	r3, [r2, #0]
 800204a:	4b2a      	ldr	r3, [pc, #168]	@ (80020f4 <HAL_TIM_PWM_PulseFinishedCallback+0xe8>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	3301      	adds	r3, #1
 8002050:	4a28      	ldr	r2, [pc, #160]	@ (80020f4 <HAL_TIM_PWM_PulseFinishedCallback+0xe8>)
 8002052:	6013      	str	r3, [r2, #0]
 8002054:	4b28      	ldr	r3, [pc, #160]	@ (80020f8 <HAL_TIM_PWM_PulseFinishedCallback+0xec>)
 8002056:	2201      	movs	r2, #1
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	4b28      	ldr	r3, [pc, #160]	@ (80020fc <HAL_TIM_PWM_PulseFinishedCallback+0xf0>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	3301      	adds	r3, #1
 8002060:	4a26      	ldr	r2, [pc, #152]	@ (80020fc <HAL_TIM_PWM_PulseFinishedCallback+0xf0>)
 8002062:	6013      	str	r3, [r2, #0]
 8002064:	4b26      	ldr	r3, [pc, #152]	@ (8002100 <HAL_TIM_PWM_PulseFinishedCallback+0xf4>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	3301      	adds	r3, #1
 800206a:	4a25      	ldr	r2, [pc, #148]	@ (8002100 <HAL_TIM_PWM_PulseFinishedCallback+0xf4>)
 800206c:	6013      	str	r3, [r2, #0]
		 buzzer_task();
 800206e:	f7ff f9c1 	bl	80013f4 <buzzer_task>
		 if(count11>= 11 && flag_btn){
 8002072:	4b22      	ldr	r3, [pc, #136]	@ (80020fc <HAL_TIM_PWM_PulseFinishedCallback+0xf0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2b0a      	cmp	r3, #10
 8002078:	d92c      	bls.n	80020d4 <HAL_TIM_PWM_PulseFinishedCallback+0xc8>
 800207a:	4b22      	ldr	r3, [pc, #136]	@ (8002104 <HAL_TIM_PWM_PulseFinishedCallback+0xf8>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d028      	beq.n	80020d4 <HAL_TIM_PWM_PulseFinishedCallback+0xc8>


				if(sw==1) { display_temp(); sw=2;}
 8002082:	4b21      	ldr	r3, [pc, #132]	@ (8002108 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d105      	bne.n	8002096 <HAL_TIM_PWM_PulseFinishedCallback+0x8a>
 800208a:	f000 fafd 	bl	8002688 <display_temp>
 800208e:	4b1e      	ldr	r3, [pc, #120]	@ (8002108 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002090:	2202      	movs	r2, #2
 8002092:	701a      	strb	r2, [r3, #0]
 8002094:	e012      	b.n	80020bc <HAL_TIM_PWM_PulseFinishedCallback+0xb0>
				else if(sw==0) {update_display(currentTime, ldr_value); sw=1;}
 8002096:	4b1c      	ldr	r3, [pc, #112]	@ (8002108 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d109      	bne.n	80020b2 <HAL_TIM_PWM_PulseFinishedCallback+0xa6>
 800209e:	4b1b      	ldr	r3, [pc, #108]	@ (800210c <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a1b      	ldr	r2, [pc, #108]	@ (8002110 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80020a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80020a6:	f7ff fb3b 	bl	8001720 <update_display>
 80020aa:	4b17      	ldr	r3, [pc, #92]	@ (8002108 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80020ac:	2201      	movs	r2, #1
 80020ae:	701a      	strb	r2, [r3, #0]
 80020b0:	e004      	b.n	80020bc <HAL_TIM_PWM_PulseFinishedCallback+0xb0>
				else {display_IAQ(); sw=0;  }
 80020b2:	f000 fa7b 	bl	80025ac <display_IAQ>
 80020b6:	4b14      	ldr	r3, [pc, #80]	@ (8002108 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	701a      	strb	r2, [r3, #0]
				cpt++;
 80020bc:	4b15      	ldr	r3, [pc, #84]	@ (8002114 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	3301      	adds	r3, #1
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	4b13      	ldr	r3, [pc, #76]	@ (8002114 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 80020c6:	701a      	strb	r2, [r3, #0]
				count11=0;
 80020c8:	4b0c      	ldr	r3, [pc, #48]	@ (80020fc <HAL_TIM_PWM_PulseFinishedCallback+0xf0>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
			    flag_btn=0;
 80020ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002104 <HAL_TIM_PWM_PulseFinishedCallback+0xf8>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	701a      	strb	r2, [r3, #0]
		 }
	}
}
 80020d4:	bf00      	nop
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40000400 	.word	0x40000400
 80020e0:	20000f14 	.word	0x20000f14
 80020e4:	20000614 	.word	0x20000614
 80020e8:	40000800 	.word	0x40000800
 80020ec:	20000628 	.word	0x20000628
 80020f0:	2000062c 	.word	0x2000062c
 80020f4:	20000630 	.word	0x20000630
 80020f8:	20000634 	.word	0x20000634
 80020fc:	20000638 	.word	0x20000638
 8002100:	2000063c 	.word	0x2000063c
 8002104:	20000a55 	.word	0x20000a55
 8002108:	20000123 	.word	0x20000123
 800210c:	20000624 	.word	0x20000624
 8002110:	2000066c 	.word	0x2000066c
 8002114:	20000a54 	.word	0x20000a54

08002118 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6) {
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a1f      	ldr	r2, [pc, #124]	@ (80021a4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d137      	bne.n	800219a <HAL_TIM_PeriodElapsedCallback+0x82>
        currentTime.seconds++;
 800212a:	4b1f      	ldr	r3, [pc, #124]	@ (80021a8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	3301      	adds	r3, #1
 8002130:	4a1d      	ldr	r2, [pc, #116]	@ (80021a8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002132:	6093      	str	r3, [r2, #8]

        if (currentTime.seconds >= 60) {
 8002134:	4b1c      	ldr	r3, [pc, #112]	@ (80021a8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2b3b      	cmp	r3, #59	@ 0x3b
 800213a:	dd1a      	ble.n	8002172 <HAL_TIM_PeriodElapsedCallback+0x5a>
            currentTime.seconds = 0;
 800213c:	4b1a      	ldr	r3, [pc, #104]	@ (80021a8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800213e:	2200      	movs	r2, #0
 8002140:	609a      	str	r2, [r3, #8]
            currentTime.minutes++;
 8002142:	4b19      	ldr	r3, [pc, #100]	@ (80021a8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	3301      	adds	r3, #1
 8002148:	4a17      	ldr	r2, [pc, #92]	@ (80021a8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800214a:	6053      	str	r3, [r2, #4]
            if (currentTime.minutes >= 60) {
 800214c:	4b16      	ldr	r3, [pc, #88]	@ (80021a8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	2b3b      	cmp	r3, #59	@ 0x3b
 8002152:	dd0e      	ble.n	8002172 <HAL_TIM_PeriodElapsedCallback+0x5a>
                currentTime.minutes = 0;
 8002154:	4b14      	ldr	r3, [pc, #80]	@ (80021a8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002156:	2200      	movs	r2, #0
 8002158:	605a      	str	r2, [r3, #4]
                currentTime.hours++;
 800215a:	4b13      	ldr	r3, [pc, #76]	@ (80021a8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	3301      	adds	r3, #1
 8002160:	4a11      	ldr	r2, [pc, #68]	@ (80021a8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002162:	6013      	str	r3, [r2, #0]
                if (currentTime.hours >= 24) {
 8002164:	4b10      	ldr	r3, [pc, #64]	@ (80021a8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b17      	cmp	r3, #23
 800216a:	dd02      	ble.n	8002172 <HAL_TIM_PeriodElapsedCallback+0x5a>
                    currentTime.hours = 0;
 800216c:	4b0e      	ldr	r3, [pc, #56]	@ (80021a8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
                }
            }
        }

        if(sw==1)  update_display(currentTime, ldr_value); else if(sw==2) display_temp(); else display_IAQ();
 8002172:	4b0e      	ldr	r3, [pc, #56]	@ (80021ac <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d106      	bne.n	8002188 <HAL_TIM_PeriodElapsedCallback+0x70>
 800217a:	4b0d      	ldr	r3, [pc, #52]	@ (80021b0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a0a      	ldr	r2, [pc, #40]	@ (80021a8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002180:	ca07      	ldmia	r2, {r0, r1, r2}
 8002182:	f7ff facd 	bl	8001720 <update_display>
    }


}
 8002186:	e008      	b.n	800219a <HAL_TIM_PeriodElapsedCallback+0x82>
        if(sw==1)  update_display(currentTime, ldr_value); else if(sw==2) display_temp(); else display_IAQ();
 8002188:	4b08      	ldr	r3, [pc, #32]	@ (80021ac <HAL_TIM_PeriodElapsedCallback+0x94>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b02      	cmp	r3, #2
 800218e:	d102      	bne.n	8002196 <HAL_TIM_PeriodElapsedCallback+0x7e>
 8002190:	f000 fa7a 	bl	8002688 <display_temp>
}
 8002194:	e001      	b.n	800219a <HAL_TIM_PeriodElapsedCallback+0x82>
        if(sw==1)  update_display(currentTime, ldr_value); else if(sw==2) display_temp(); else display_IAQ();
 8002196:	f000 fa09 	bl	80025ac <display_IAQ>
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40001000 	.word	0x40001000
 80021a8:	2000066c 	.word	0x2000066c
 80021ac:	20000123 	.word	0x20000123
 80021b0:	20000624 	.word	0x20000624

080021b4 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]

	timeUpdate=1;
 80021bc:	4b05      	ldr	r3, [pc, #20]	@ (80021d4 <HAL_UART_RxCpltCallback+0x20>)
 80021be:	2201      	movs	r2, #1
 80021c0:	701a      	strb	r2, [r3, #0]

	  HAL_UART_Receive_IT(&hlpuart1,time_buffer, 10);
 80021c2:	220a      	movs	r2, #10
 80021c4:	4904      	ldr	r1, [pc, #16]	@ (80021d8 <HAL_UART_RxCpltCallback+0x24>)
 80021c6:	4805      	ldr	r0, [pc, #20]	@ (80021dc <HAL_UART_RxCpltCallback+0x28>)
 80021c8:	f00a fd72 	bl	800ccb0 <HAL_UART_Receive_IT>

}
 80021cc:	bf00      	nop
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	20000678 	.word	0x20000678
 80021d8:	2000067c 	.word	0x2000067c
 80021dc:	200010d0 	.word	0x200010d0

080021e0 <HAL_GPIO_EXTI_Callback>:





void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	80fb      	strh	r3, [r7, #6]
if ( GPIO_Pin == INTOF1_Pin ) {
 80021ea:	88fb      	ldrh	r3, [r7, #6]
 80021ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80021f0:	d115      	bne.n	800221e <HAL_GPIO_EXTI_Callback+0x3e>
VL53L1_GetRangingMeasurementData(&devLeft, &RangingData);
 80021f2:	4912      	ldr	r1, [pc, #72]	@ (800223c <HAL_GPIO_EXTI_Callback+0x5c>)
 80021f4:	4812      	ldr	r0, [pc, #72]	@ (8002240 <HAL_GPIO_EXTI_Callback+0x60>)
 80021f6:	f00c feef 	bl	800efd8 <VL53L1_GetRangingMeasurementData>
Dist_Obst_G = RangingData.RangeMilliMeter;
 80021fa:	4b10      	ldr	r3, [pc, #64]	@ (800223c <HAL_GPIO_EXTI_Callback+0x5c>)
 80021fc:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002200:	b29a      	uxth	r2, r3
 8002202:	4b10      	ldr	r3, [pc, #64]	@ (8002244 <HAL_GPIO_EXTI_Callback+0x64>)
 8002204:	801a      	strh	r2, [r3, #0]
if ( Dist_Obst_G <= 300)
 8002206:	4b0f      	ldr	r3, [pc, #60]	@ (8002244 <HAL_GPIO_EXTI_Callback+0x64>)
 8002208:	881b      	ldrh	r3, [r3, #0]
 800220a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800220e:	d801      	bhi.n	8002214 <HAL_GPIO_EXTI_Callback+0x34>
buzzer_vStop();
 8002210:	f7ff f9d8 	bl	80015c4 <buzzer_vStop>
VL53L1_ClearInterruptAndStartMeasurement(Dev);
 8002214:	4b0c      	ldr	r3, [pc, #48]	@ (8002248 <HAL_GPIO_EXTI_Callback+0x68>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f00c fd1e 	bl	800ec5a <VL53L1_ClearInterruptAndStartMeasurement>

}

if ( GPIO_Pin == btn_Pin_Pin ) {
 800221e:	88fb      	ldrh	r3, [r7, #6]
 8002220:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002224:	d105      	bne.n	8002232 <HAL_GPIO_EXTI_Callback+0x52>
	count11= 0;
 8002226:	4b09      	ldr	r3, [pc, #36]	@ (800224c <HAL_GPIO_EXTI_Callback+0x6c>)
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
    flag_btn=1;
 800222c:	4b08      	ldr	r3, [pc, #32]	@ (8002250 <HAL_GPIO_EXTI_Callback+0x70>)
 800222e:	2201      	movs	r2, #1
 8002230:	701a      	strb	r2, [r3, #0]
}

}
 8002232:	bf00      	nop
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	20000a34 	.word	0x20000a34
 8002240:	20000688 	.word	0x20000688
 8002244:	20000a50 	.word	0x20000a50
 8002248:	20000a2c 	.word	0x20000a2c
 800224c:	20000638 	.word	0x20000638
 8002250:	20000a55 	.word	0x20000a55

08002254 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
	if(hcan == &hcan1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a13      	ldr	r2, [pc, #76]	@ (80022ac <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d11f      	bne.n	80022a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
	{
		HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 8002264:	4b12      	ldr	r3, [pc, #72]	@ (80022b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8002266:	4a13      	ldr	r2, [pc, #76]	@ (80022b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8002268:	2100      	movs	r1, #0
 800226a:	4810      	ldr	r0, [pc, #64]	@ (80022ac <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 800226c:	f004 f981 	bl	8006572 <HAL_CAN_GetRxMessage>

		// Reconstruction du message, en décimal : 4660
		message = ((uint16_t)(RxData[0])<<8)|RxData[1];
 8002270:	4b0f      	ldr	r3, [pc, #60]	@ (80022b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	b21b      	sxth	r3, r3
 8002276:	021b      	lsls	r3, r3, #8
 8002278:	b21a      	sxth	r2, r3
 800227a:	4b0d      	ldr	r3, [pc, #52]	@ (80022b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 800227c:	785b      	ldrb	r3, [r3, #1]
 800227e:	b21b      	sxth	r3, r3
 8002280:	4313      	orrs	r3, r2
 8002282:	b21b      	sxth	r3, r3
 8002284:	b29a      	uxth	r2, r3
 8002286:	4b0c      	ldr	r3, [pc, #48]	@ (80022b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8002288:	801a      	strh	r2, [r3, #0]

		message2 = ((uint16_t)(RxData[2])<<8)|RxData[3];
 800228a:	4b09      	ldr	r3, [pc, #36]	@ (80022b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 800228c:	789b      	ldrb	r3, [r3, #2]
 800228e:	b21b      	sxth	r3, r3
 8002290:	021b      	lsls	r3, r3, #8
 8002292:	b21a      	sxth	r2, r3
 8002294:	4b06      	ldr	r3, [pc, #24]	@ (80022b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8002296:	78db      	ldrb	r3, [r3, #3]
 8002298:	b21b      	sxth	r3, r3
 800229a:	4313      	orrs	r3, r2
 800229c:	b21b      	sxth	r3, r3
 800229e:	b29a      	uxth	r2, r3
 80022a0:	4b06      	ldr	r3, [pc, #24]	@ (80022bc <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80022a2:	801a      	strh	r2, [r3, #0]
	}
}
 80022a4:	bf00      	nop
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	20000458 	.word	0x20000458
 80022b0:	20000644 	.word	0x20000644
 80022b4:	2000064c 	.word	0x2000064c
 80022b8:	200004e8 	.word	0x200004e8
 80022bc:	200004ea 	.word	0x200004ea

080022c0 <set_leds>:



////// functionssssss

void set_leds(uint8_t num_on) {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08a      	sub	sp, #40	@ 0x28
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	71fb      	strb	r3, [r7, #7]
    int k = 0;
 80022ca:	2300      	movs	r3, #0
 80022cc:	627b      	str	r3, [r7, #36]	@ 0x24

    for (int i = 0; i < 4; i++) {
 80022ce:	2300      	movs	r3, #0
 80022d0:	623b      	str	r3, [r7, #32]
 80022d2:	e053      	b.n	800237c <set_leds+0xbc>
        uint8_t p = (i < num_on) ? 1 : 0;
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	6a3a      	ldr	r2, [r7, #32]
 80022d8:	429a      	cmp	r2, r3
 80022da:	bfb4      	ite	lt
 80022dc:	2301      	movlt	r3, #1
 80022de:	2300      	movge	r3, #0
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	73fb      	strb	r3, [r7, #15]

        uint8_t green = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	77fb      	strb	r3, [r7, #31]
        uint8_t red = 0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	77bb      	strb	r3, [r7, #30]
        uint8_t blue = 0;
 80022ec:	2300      	movs	r3, #0
 80022ee:	777b      	strb	r3, [r7, #29]

        if (p) {
 80022f0:	7bfb      	ldrb	r3, [r7, #15]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d011      	beq.n	800231a <set_leds+0x5a>
            if (running_day) {
 80022f6:	4b32      	ldr	r3, [pc, #200]	@ (80023c0 <set_leds+0x100>)
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d006      	beq.n	800230e <set_leds+0x4e>
                // Blue
                red = 0;
 8002300:	2300      	movs	r3, #0
 8002302:	77bb      	strb	r3, [r7, #30]
                green = 0;
 8002304:	2300      	movs	r3, #0
 8002306:	77fb      	strb	r3, [r7, #31]
                blue = 255 * 0.3f;
 8002308:	234c      	movs	r3, #76	@ 0x4c
 800230a:	777b      	strb	r3, [r7, #29]
 800230c:	e005      	b.n	800231a <set_leds+0x5a>
            } else {
                // Red
                red = 255 * 0.3f  ;
 800230e:	234c      	movs	r3, #76	@ 0x4c
 8002310:	77bb      	strb	r3, [r7, #30]
                green = 0;
 8002312:	2300      	movs	r3, #0
 8002314:	77fb      	strb	r3, [r7, #31]
                blue = 0;
 8002316:	2300      	movs	r3, #0
 8002318:	777b      	strb	r3, [r7, #29]
            }
        }

        // GRB order
        uint8_t color[3] = {green, red, blue};
 800231a:	7ffb      	ldrb	r3, [r7, #31]
 800231c:	733b      	strb	r3, [r7, #12]
 800231e:	7fbb      	ldrb	r3, [r7, #30]
 8002320:	737b      	strb	r3, [r7, #13]
 8002322:	7f7b      	ldrb	r3, [r7, #29]
 8002324:	73bb      	strb	r3, [r7, #14]

        for (int c = 0; c < 3; c++) {
 8002326:	2300      	movs	r3, #0
 8002328:	61bb      	str	r3, [r7, #24]
 800232a:	e021      	b.n	8002370 <set_leds+0xb0>
            for (int b = 7; b >= 0; b--) {
 800232c:	2307      	movs	r3, #7
 800232e:	617b      	str	r3, [r7, #20]
 8002330:	e018      	b.n	8002364 <set_leds+0xa4>
                PwmRC[k++] = (color[c] >> b) & 0x01 ? 64 : 32;
 8002332:	f107 020c 	add.w	r2, r7, #12
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	4413      	add	r3, r2
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	461a      	mov	r2, r3
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	fa42 f303 	asr.w	r3, r2, r3
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <set_leds+0x90>
 800234c:	2140      	movs	r1, #64	@ 0x40
 800234e:	e000      	b.n	8002352 <set_leds+0x92>
 8002350:	2120      	movs	r1, #32
 8002352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002354:	1c5a      	adds	r2, r3, #1
 8002356:	627a      	str	r2, [r7, #36]	@ 0x24
 8002358:	4a1a      	ldr	r2, [pc, #104]	@ (80023c4 <set_leds+0x104>)
 800235a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (int b = 7; b >= 0; b--) {
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	3b01      	subs	r3, #1
 8002362:	617b      	str	r3, [r7, #20]
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	2b00      	cmp	r3, #0
 8002368:	dae3      	bge.n	8002332 <set_leds+0x72>
        for (int c = 0; c < 3; c++) {
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	3301      	adds	r3, #1
 800236e:	61bb      	str	r3, [r7, #24]
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	2b02      	cmp	r3, #2
 8002374:	ddda      	ble.n	800232c <set_leds+0x6c>
    for (int i = 0; i < 4; i++) {
 8002376:	6a3b      	ldr	r3, [r7, #32]
 8002378:	3301      	adds	r3, #1
 800237a:	623b      	str	r3, [r7, #32]
 800237c:	6a3b      	ldr	r3, [r7, #32]
 800237e:	2b03      	cmp	r3, #3
 8002380:	dda8      	ble.n	80022d4 <set_leds+0x14>
            }
        }
    }

    // Reset signal
    for (int i = 0; i < 50; i++) {
 8002382:	2300      	movs	r3, #0
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	e009      	b.n	800239c <set_leds+0xdc>
        PwmRC[k++] = 0;
 8002388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238a:	1c5a      	adds	r2, r3, #1
 800238c:	627a      	str	r2, [r7, #36]	@ 0x24
 800238e:	4a0d      	ldr	r2, [pc, #52]	@ (80023c4 <set_leds+0x104>)
 8002390:	2100      	movs	r1, #0
 8002392:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < 50; i++) {
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	3301      	adds	r3, #1
 800239a:	613b      	str	r3, [r7, #16]
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	2b31      	cmp	r3, #49	@ 0x31
 80023a0:	ddf2      	ble.n	8002388 <set_leds+0xc8>
    }

    datasentflag = 0;
 80023a2:	4b09      	ldr	r3, [pc, #36]	@ (80023c8 <set_leds+0x108>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4, (uint32_t *)PwmRC, k);
 80023a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	4a05      	ldr	r2, [pc, #20]	@ (80023c4 <set_leds+0x104>)
 80023ae:	210c      	movs	r1, #12
 80023b0:	4806      	ldr	r0, [pc, #24]	@ (80023cc <set_leds+0x10c>)
 80023b2:	f008 fe73 	bl	800b09c <HAL_TIM_PWM_Start_DMA>
}
 80023b6:	bf00      	nop
 80023b8:	3728      	adds	r7, #40	@ 0x28
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000640 	.word	0x20000640
 80023c4:	200004f0 	.word	0x200004f0
 80023c8:	20000614 	.word	0x20000614
 80023cc:	20000f14 	.word	0x20000f14

080023d0 <progressive_led_on>:



void progressive_led_on(void) {
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0

if(running_day || running_night){
 80023d4:	4b37      	ldr	r3, [pc, #220]	@ (80024b4 <progressive_led_on+0xe4>)
 80023d6:	881b      	ldrh	r3, [r3, #0]
 80023d8:	b29b      	uxth	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d104      	bne.n	80023e8 <progressive_led_on+0x18>
 80023de:	4b36      	ldr	r3, [pc, #216]	@ (80024b8 <progressive_led_on+0xe8>)
 80023e0:	881b      	ldrh	r3, [r3, #0]
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d063      	beq.n	80024b0 <progressive_led_on+0xe0>

    switch (step) {
 80023e8:	4b34      	ldr	r3, [pc, #208]	@ (80024bc <progressive_led_on+0xec>)
 80023ea:	881b      	ldrh	r3, [r3, #0]
 80023ec:	2b04      	cmp	r3, #4
 80023ee:	d856      	bhi.n	800249e <progressive_led_on+0xce>
 80023f0:	a201      	add	r2, pc, #4	@ (adr r2, 80023f8 <progressive_led_on+0x28>)
 80023f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f6:	bf00      	nop
 80023f8:	0800240d 	.word	0x0800240d
 80023fc:	08002421 	.word	0x08002421
 8002400:	0800243f 	.word	0x0800243f
 8002404:	0800245d 	.word	0x0800245d
 8002408:	0800247b 	.word	0x0800247b
    case 0:

				step = 1;
 800240c:	4b2b      	ldr	r3, [pc, #172]	@ (80024bc <progressive_led_on+0xec>)
 800240e:	2201      	movs	r2, #1
 8002410:	801a      	strh	r2, [r3, #0]
				set_leds(1);
 8002412:	2001      	movs	r0, #1
 8002414:	f7ff ff54 	bl	80022c0 <set_leds>
				count500 =0;
 8002418:	4b29      	ldr	r3, [pc, #164]	@ (80024c0 <progressive_led_on+0xf0>)
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]

                break;
 800241e:	e047      	b.n	80024b0 <progressive_led_on+0xe0>
        case 1:
            if (count500  > 500) {
 8002420:	4b27      	ldr	r3, [pc, #156]	@ (80024c0 <progressive_led_on+0xf0>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002428:	d93b      	bls.n	80024a2 <progressive_led_on+0xd2>
                step = 2;
 800242a:	4b24      	ldr	r3, [pc, #144]	@ (80024bc <progressive_led_on+0xec>)
 800242c:	2202      	movs	r2, #2
 800242e:	801a      	strh	r2, [r3, #0]
                set_leds(2);
 8002430:	2002      	movs	r0, #2
 8002432:	f7ff ff45 	bl	80022c0 <set_leds>
                count500 =0;
 8002436:	4b22      	ldr	r3, [pc, #136]	@ (80024c0 <progressive_led_on+0xf0>)
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
            }
            break;
 800243c:	e031      	b.n	80024a2 <progressive_led_on+0xd2>
        case 2:
            if (count500  > 500) {
 800243e:	4b20      	ldr	r3, [pc, #128]	@ (80024c0 <progressive_led_on+0xf0>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002446:	d92e      	bls.n	80024a6 <progressive_led_on+0xd6>
                step = 3;
 8002448:	4b1c      	ldr	r3, [pc, #112]	@ (80024bc <progressive_led_on+0xec>)
 800244a:	2203      	movs	r2, #3
 800244c:	801a      	strh	r2, [r3, #0]
                set_leds(3);
 800244e:	2003      	movs	r0, #3
 8002450:	f7ff ff36 	bl	80022c0 <set_leds>
                count500 =0;
 8002454:	4b1a      	ldr	r3, [pc, #104]	@ (80024c0 <progressive_led_on+0xf0>)
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
            }
            break;
 800245a:	e024      	b.n	80024a6 <progressive_led_on+0xd6>
        case 3:
            if (count500  > 500) {
 800245c:	4b18      	ldr	r3, [pc, #96]	@ (80024c0 <progressive_led_on+0xf0>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002464:	d921      	bls.n	80024aa <progressive_led_on+0xda>
                step = 4;
 8002466:	4b15      	ldr	r3, [pc, #84]	@ (80024bc <progressive_led_on+0xec>)
 8002468:	2204      	movs	r2, #4
 800246a:	801a      	strh	r2, [r3, #0]
                set_leds(4);
 800246c:	2004      	movs	r0, #4
 800246e:	f7ff ff27 	bl	80022c0 <set_leds>
                count500 =0;
 8002472:	4b13      	ldr	r3, [pc, #76]	@ (80024c0 <progressive_led_on+0xf0>)
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
            }
            break;
 8002478:	e017      	b.n	80024aa <progressive_led_on+0xda>
        case 4:
            if (count500  > 500) {
 800247a:	4b11      	ldr	r3, [pc, #68]	@ (80024c0 <progressive_led_on+0xf0>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002482:	d914      	bls.n	80024ae <progressive_led_on+0xde>
                running_day = 0;
 8002484:	4b0b      	ldr	r3, [pc, #44]	@ (80024b4 <progressive_led_on+0xe4>)
 8002486:	2200      	movs	r2, #0
 8002488:	801a      	strh	r2, [r3, #0]
                running_night =0;
 800248a:	4b0b      	ldr	r3, [pc, #44]	@ (80024b8 <progressive_led_on+0xe8>)
 800248c:	2200      	movs	r2, #0
 800248e:	801a      	strh	r2, [r3, #0]
                step = 0;
 8002490:	4b0a      	ldr	r3, [pc, #40]	@ (80024bc <progressive_led_on+0xec>)
 8002492:	2200      	movs	r2, #0
 8002494:	801a      	strh	r2, [r3, #0]
                set_leds(0);
 8002496:	2000      	movs	r0, #0
 8002498:	f7ff ff12 	bl	80022c0 <set_leds>
            }
            break;
 800249c:	e007      	b.n	80024ae <progressive_led_on+0xde>
        default:
            break;
 800249e:	bf00      	nop
 80024a0:	e006      	b.n	80024b0 <progressive_led_on+0xe0>
            break;
 80024a2:	bf00      	nop
 80024a4:	e004      	b.n	80024b0 <progressive_led_on+0xe0>
            break;
 80024a6:	bf00      	nop
 80024a8:	e002      	b.n	80024b0 <progressive_led_on+0xe0>
            break;
 80024aa:	bf00      	nop
 80024ac:	e000      	b.n	80024b0 <progressive_led_on+0xe0>
            break;
 80024ae:	bf00      	nop
    }
}

}
 80024b0:	bf00      	nop
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	20000640 	.word	0x20000640
 80024b8:	20000642 	.word	0x20000642
 80024bc:	20000a30 	.word	0x20000a30
 80024c0:	20000628 	.word	0x20000628

080024c4 <isStableTouch>:
    while (HAL_TSC_GetState(&htsc) != HAL_TSC_STATE_READY);
    value_group4 = HAL_TSC_GroupGetValue(&htsc, TSC_GROUP4_IDX);
    HAL_TSC_Stop(&htsc);
}

bool isStableTouch(uint8_t group_idx, uint32_t base, uint32_t threshold) {
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
 80024d0:	73fb      	strb	r3, [r7, #15]
    int stable_count = 0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < 5; i++) {
 80024d6:	2300      	movs	r3, #0
 80024d8:	61bb      	str	r3, [r7, #24]
 80024da:	e028      	b.n	800252e <isStableTouch+0x6a>
        HAL_TSC_Start(&htsc);
 80024dc:	481a      	ldr	r0, [pc, #104]	@ (8002548 <isStableTouch+0x84>)
 80024de:	f00a fabd 	bl	800ca5c <HAL_TSC_Start>
        while (HAL_TSC_GetState(&htsc) != HAL_TSC_STATE_READY);
 80024e2:	bf00      	nop
 80024e4:	4818      	ldr	r0, [pc, #96]	@ (8002548 <isStableTouch+0x84>)
 80024e6:	f00a fb44 	bl	800cb72 <HAL_TSC_GetState>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d1f9      	bne.n	80024e4 <isStableTouch+0x20>
        uint32_t val = HAL_TSC_GroupGetValue(&htsc, group_idx);
 80024f0:	7bfb      	ldrb	r3, [r7, #15]
 80024f2:	4619      	mov	r1, r3
 80024f4:	4814      	ldr	r0, [pc, #80]	@ (8002548 <isStableTouch+0x84>)
 80024f6:	f00a fb2a 	bl	800cb4e <HAL_TSC_GroupGetValue>
 80024fa:	6178      	str	r0, [r7, #20]
        HAL_TSC_Stop(&htsc);
 80024fc:	4812      	ldr	r0, [pc, #72]	@ (8002548 <isStableTouch+0x84>)
 80024fe:	f00a faf4 	bl	800caea <HAL_TSC_Stop>

        if (abs(val-base) >threshold)
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	bfb8      	it	lt
 800250c:	425b      	neglt	r3, r3
 800250e:	461a      	mov	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4293      	cmp	r3, r2
 8002514:	d203      	bcs.n	800251e <isStableTouch+0x5a>
            stable_count++;
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	3301      	adds	r3, #1
 800251a:	61fb      	str	r3, [r7, #28]
 800251c:	e001      	b.n	8002522 <isStableTouch+0x5e>
        else
            stable_count = 0;
 800251e:	2300      	movs	r3, #0
 8002520:	61fb      	str	r3, [r7, #28]
        HAL_Delay(10);
 8002522:	200a      	movs	r0, #10
 8002524:	f002 f9c8 	bl	80048b8 <HAL_Delay>
    for (int i = 0; i < 5; i++) {
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	3301      	adds	r3, #1
 800252c:	61bb      	str	r3, [r7, #24]
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	2b04      	cmp	r3, #4
 8002532:	ddd3      	ble.n	80024dc <isStableTouch+0x18>
    }
    return (stable_count >= 3);
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	2b02      	cmp	r3, #2
 8002538:	bfcc      	ite	gt
 800253a:	2301      	movgt	r3, #1
 800253c:	2300      	movle	r3, #0
 800253e:	b2db      	uxtb	r3, r3
}
 8002540:	4618      	mov	r0, r3
 8002542:	3720      	adds	r7, #32
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	2000108c 	.word	0x2000108c

0800254c <poll_PB11>:
void poll_PB11(void) {
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
	if (fisrtCall){ fisrtCall =0;}
 8002550:	4b11      	ldr	r3, [pc, #68]	@ (8002598 <poll_PB11+0x4c>)
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d003      	beq.n	8002560 <poll_PB11+0x14>
 8002558:	4b0f      	ldr	r3, [pc, #60]	@ (8002598 <poll_PB11+0x4c>)
 800255a:	2200      	movs	r2, #0
 800255c:	801a      	strh	r2, [r3, #0]
        last_state = current_state;
        if (current_state == GPIO_PIN_RESET) {
        	running_night =1;
        }
    }}
}
 800255e:	e019      	b.n	8002594 <poll_PB11+0x48>
	current_state= HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11);
 8002560:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002564:	480d      	ldr	r0, [pc, #52]	@ (800259c <poll_PB11+0x50>)
 8002566:	f005 f8ad 	bl	80076c4 <HAL_GPIO_ReadPin>
 800256a:	4603      	mov	r3, r0
 800256c:	461a      	mov	r2, r3
 800256e:	4b0c      	ldr	r3, [pc, #48]	@ (80025a0 <poll_PB11+0x54>)
 8002570:	701a      	strb	r2, [r3, #0]
    if (current_state != last_state) {
 8002572:	4b0b      	ldr	r3, [pc, #44]	@ (80025a0 <poll_PB11+0x54>)
 8002574:	781a      	ldrb	r2, [r3, #0]
 8002576:	4b0b      	ldr	r3, [pc, #44]	@ (80025a4 <poll_PB11+0x58>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d00a      	beq.n	8002594 <poll_PB11+0x48>
        last_state = current_state;
 800257e:	4b08      	ldr	r3, [pc, #32]	@ (80025a0 <poll_PB11+0x54>)
 8002580:	781a      	ldrb	r2, [r3, #0]
 8002582:	4b08      	ldr	r3, [pc, #32]	@ (80025a4 <poll_PB11+0x58>)
 8002584:	701a      	strb	r2, [r3, #0]
        if (current_state == GPIO_PIN_RESET) {
 8002586:	4b06      	ldr	r3, [pc, #24]	@ (80025a0 <poll_PB11+0x54>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d102      	bne.n	8002594 <poll_PB11+0x48>
        	running_night =1;
 800258e:	4b06      	ldr	r3, [pc, #24]	@ (80025a8 <poll_PB11+0x5c>)
 8002590:	2201      	movs	r2, #1
 8002592:	801a      	strh	r2, [r3, #0]
}
 8002594:	bf00      	nop
 8002596:	bd80      	pop	{r7, pc}
 8002598:	2000012c 	.word	0x2000012c
 800259c:	48000400 	.word	0x48000400
 80025a0:	2000013d 	.word	0x2000013d
 80025a4:	2000013c 	.word	0x2000013c
 80025a8:	20000642 	.word	0x20000642

080025ac <display_IAQ>:

void display_IAQ(){
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0


	    uint8_t sleep_quality;

	      // Clear OLED display
	      SSD1306_Clear();
 80025b2:	f001 f94a 	bl	800384a <SSD1306_Clear>

	      // Display VOC value
	      sprintf(str, "VOC:%d", Sraw_voc);
 80025b6:	4b2b      	ldr	r3, [pc, #172]	@ (8002664 <display_IAQ+0xb8>)
 80025b8:	881b      	ldrh	r3, [r3, #0]
 80025ba:	461a      	mov	r2, r3
 80025bc:	1d3b      	adds	r3, r7, #4
 80025be:	492a      	ldr	r1, [pc, #168]	@ (8002668 <display_IAQ+0xbc>)
 80025c0:	4618      	mov	r0, r3
 80025c2:	f011 fed1 	bl	8014368 <siprintf>
	      SSD1306_GotoXY(0, 0);
 80025c6:	2100      	movs	r1, #0
 80025c8:	2000      	movs	r0, #0
 80025ca:	f001 f885 	bl	80036d8 <SSD1306_GotoXY>
	      if (ldr_value > 3000)
 80025ce:	4b27      	ldr	r3, [pc, #156]	@ (800266c <display_IAQ+0xc0>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d906      	bls.n	80025e8 <display_IAQ+0x3c>
	          SSD1306_Puts(str, &Font_11x18, 1);
 80025da:	1d3b      	adds	r3, r7, #4
 80025dc:	2201      	movs	r2, #1
 80025de:	4924      	ldr	r1, [pc, #144]	@ (8002670 <display_IAQ+0xc4>)
 80025e0:	4618      	mov	r0, r3
 80025e2:	f001 f90d 	bl	8003800 <SSD1306_Puts>
 80025e6:	e005      	b.n	80025f4 <display_IAQ+0x48>
	      else
	          SSD1306_Puts(str, &Font_11x18, 0);
 80025e8:	1d3b      	adds	r3, r7, #4
 80025ea:	2200      	movs	r2, #0
 80025ec:	4920      	ldr	r1, [pc, #128]	@ (8002670 <display_IAQ+0xc4>)
 80025ee:	4618      	mov	r0, r3
 80025f0:	f001 f906 	bl	8003800 <SSD1306_Puts>

	      // Call sleep quality function
	      sleep_quality =  bonne_sommeil(message, message2);
 80025f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002674 <display_IAQ+0xc8>)
 80025f6:	881b      	ldrh	r3, [r3, #0]
 80025f8:	4a1f      	ldr	r2, [pc, #124]	@ (8002678 <display_IAQ+0xcc>)
 80025fa:	8812      	ldrh	r2, [r2, #0]
 80025fc:	4611      	mov	r1, r2
 80025fe:	4618      	mov	r0, r3
 8002600:	f000 f93e 	bl	8002880 <bonne_sommeil>
 8002604:	4603      	mov	r3, r0
 8002606:	73fb      	strb	r3, [r7, #15]

	      // Display sleep quality on second line
	      SSD1306_GotoXY(0, 25); // second row (adjust if needed)
 8002608:	2119      	movs	r1, #25
 800260a:	2000      	movs	r0, #0
 800260c:	f001 f864 	bl	80036d8 <SSD1306_GotoXY>
	      if (ldr_value > 3000){
 8002610:	4b16      	ldr	r3, [pc, #88]	@ (800266c <display_IAQ+0xc0>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002618:	4293      	cmp	r3, r2
 800261a:	d90e      	bls.n	800263a <display_IAQ+0x8e>
	      if (sleep_quality)
 800261c:	7bfb      	ldrb	r3, [r7, #15]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d005      	beq.n	800262e <display_IAQ+0x82>
	          SSD1306_Puts("bonne sommeil", &Font_7x10, 1);
 8002622:	2201      	movs	r2, #1
 8002624:	4915      	ldr	r1, [pc, #84]	@ (800267c <display_IAQ+0xd0>)
 8002626:	4816      	ldr	r0, [pc, #88]	@ (8002680 <display_IAQ+0xd4>)
 8002628:	f001 f8ea 	bl	8003800 <SSD1306_Puts>
 800262c:	e013      	b.n	8002656 <display_IAQ+0xaa>
	      else
	          SSD1306_Puts("mauvaise sommeil", &Font_7x10, 1);}
 800262e:	2201      	movs	r2, #1
 8002630:	4912      	ldr	r1, [pc, #72]	@ (800267c <display_IAQ+0xd0>)
 8002632:	4814      	ldr	r0, [pc, #80]	@ (8002684 <display_IAQ+0xd8>)
 8002634:	f001 f8e4 	bl	8003800 <SSD1306_Puts>
 8002638:	e00d      	b.n	8002656 <display_IAQ+0xaa>
	      else {
		      if (sleep_quality)
 800263a:	7bfb      	ldrb	r3, [r7, #15]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d005      	beq.n	800264c <display_IAQ+0xa0>
		          SSD1306_Puts("bonne sommeil", &Font_7x10, 0);
 8002640:	2200      	movs	r2, #0
 8002642:	490e      	ldr	r1, [pc, #56]	@ (800267c <display_IAQ+0xd0>)
 8002644:	480e      	ldr	r0, [pc, #56]	@ (8002680 <display_IAQ+0xd4>)
 8002646:	f001 f8db 	bl	8003800 <SSD1306_Puts>
 800264a:	e004      	b.n	8002656 <display_IAQ+0xaa>
		      else
		          SSD1306_Puts("mauvaise sommeil", &Font_7x10, 0);}
 800264c:	2200      	movs	r2, #0
 800264e:	490b      	ldr	r1, [pc, #44]	@ (800267c <display_IAQ+0xd0>)
 8002650:	480c      	ldr	r0, [pc, #48]	@ (8002684 <display_IAQ+0xd8>)
 8002652:	f001 f8d5 	bl	8003800 <SSD1306_Puts>

	      // Update OLED
	      SSD1306_UpdateScreen();
 8002656:	f000 ff99 	bl	800358c <SSD1306_UpdateScreen>

}
 800265a:	bf00      	nop
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	2000061c 	.word	0x2000061c
 8002668:	08016fb4 	.word	0x08016fb4
 800266c:	20000624 	.word	0x20000624
 8002670:	20000110 	.word	0x20000110
 8002674:	200004e8 	.word	0x200004e8
 8002678:	200004ea 	.word	0x200004ea
 800267c:	20000108 	.word	0x20000108
 8002680:	08016fbc 	.word	0x08016fbc
 8002684:	08016fcc 	.word	0x08016fcc

08002688 <display_temp>:
void display_temp(){
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0

	sprintf(str,"%.1f C",fTemperature);
 800268c:	4b14      	ldr	r3, [pc, #80]	@ (80026e0 <display_temp+0x58>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4618      	mov	r0, r3
 8002692:	f7fd ff59 	bl	8000548 <__aeabi_f2d>
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	4912      	ldr	r1, [pc, #72]	@ (80026e4 <display_temp+0x5c>)
 800269c:	4812      	ldr	r0, [pc, #72]	@ (80026e8 <display_temp+0x60>)
 800269e:	f011 fe63 	bl	8014368 <siprintf>
	 SSD1306_Clear();
 80026a2:	f001 f8d2 	bl	800384a <SSD1306_Clear>
	SSD1306_GotoXY (0,30);
 80026a6:	211e      	movs	r1, #30
 80026a8:	2000      	movs	r0, #0
 80026aa:	f001 f815 	bl	80036d8 <SSD1306_GotoXY>
	SSD1306_GotoXY(0, 0);
 80026ae:	2100      	movs	r1, #0
 80026b0:	2000      	movs	r0, #0
 80026b2:	f001 f811 	bl	80036d8 <SSD1306_GotoXY>
if (ldr_value > 3000)
 80026b6:	4b0d      	ldr	r3, [pc, #52]	@ (80026ec <display_temp+0x64>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80026be:	4293      	cmp	r3, r2
 80026c0:	d905      	bls.n	80026ce <display_temp+0x46>
	SSD1306_Puts (str,&Font_16x26,1);
 80026c2:	2201      	movs	r2, #1
 80026c4:	490a      	ldr	r1, [pc, #40]	@ (80026f0 <display_temp+0x68>)
 80026c6:	4808      	ldr	r0, [pc, #32]	@ (80026e8 <display_temp+0x60>)
 80026c8:	f001 f89a 	bl	8003800 <SSD1306_Puts>
 80026cc:	e004      	b.n	80026d8 <display_temp+0x50>
else
	SSD1306_Puts (str,&Font_16x26,0);
 80026ce:	2200      	movs	r2, #0
 80026d0:	4907      	ldr	r1, [pc, #28]	@ (80026f0 <display_temp+0x68>)
 80026d2:	4805      	ldr	r0, [pc, #20]	@ (80026e8 <display_temp+0x60>)
 80026d4:	f001 f894 	bl	8003800 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80026d8:	f000 ff58 	bl	800358c <SSD1306_UpdateScreen>

}
 80026dc:	bf00      	nop
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	200004e4 	.word	0x200004e4
 80026e4:	08016fe0 	.word	0x08016fe0
 80026e8:	200004d8 	.word	0x200004d8
 80026ec:	20000624 	.word	0x20000624
 80026f0:	20000118 	.word	0x20000118

080026f4 <ResetAndInitializeTOF1>:


	void ResetAndInitializeTOF1(void ){
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b088      	sub	sp, #32
 80026f8:	af00      	add	r7, sp, #0
	VL53L1_DetectionConfig_t DetectionConfig;
	uint8_t newI2C = 0x52;
 80026fa:	2352      	movs	r3, #82	@ 0x52
 80026fc:	77fb      	strb	r3, [r7, #31]
	/* Reset the 1 ToF sensors on the expansion board */
	HAL_GPIO_WritePin(GPIOH, SHUT1_Pin, GPIO_PIN_RESET);
 80026fe:	2200      	movs	r2, #0
 8002700:	2101      	movs	r1, #1
 8002702:	4846      	ldr	r0, [pc, #280]	@ (800281c <ResetAndInitializeTOF1+0x128>)
 8002704:	f004 fff6 	bl	80076f4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002708:	200a      	movs	r0, #10
 800270a:	f002 f8d5 	bl	80048b8 <HAL_Delay>
	/* Bring the sensors out of the reset stage one by one and set the new I2C address */
	Dev=&devLeft;
 800270e:	4b44      	ldr	r3, [pc, #272]	@ (8002820 <ResetAndInitializeTOF1+0x12c>)
 8002710:	4a44      	ldr	r2, [pc, #272]	@ (8002824 <ResetAndInitializeTOF1+0x130>)
 8002712:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOH, SHUT1_Pin, GPIO_PIN_SET);
 8002714:	2201      	movs	r2, #1
 8002716:	2101      	movs	r1, #1
 8002718:	4840      	ldr	r0, [pc, #256]	@ (800281c <ResetAndInitializeTOF1+0x128>)
 800271a:	f004 ffeb 	bl	80076f4 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800271e:	2005      	movs	r0, #5
 8002720:	f002 f8ca 	bl	80048b8 <HAL_Delay>
	Dev->comms_speed_khz = 400;
 8002724:	4b3e      	ldr	r3, [pc, #248]	@ (8002820 <ResetAndInitializeTOF1+0x12c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800272c:	f8a3 239a 	strh.w	r2, [r3, #922]	@ 0x39a
	Dev->I2cHandle = &hi2c1;
 8002730:	4b3b      	ldr	r3, [pc, #236]	@ (8002820 <ResetAndInitializeTOF1+0x12c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a3c      	ldr	r2, [pc, #240]	@ (8002828 <ResetAndInitializeTOF1+0x134>)
 8002736:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
	Dev->comms_type = 1;
 800273a:	4b39      	ldr	r3, [pc, #228]	@ (8002820 <ResetAndInitializeTOF1+0x12c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2399 	strb.w	r2, [r3, #921]	@ 0x399
	Dev->I2cDevAddr=0x52; /* default ToF sensor I2C address*/
 8002744:	4b36      	ldr	r3, [pc, #216]	@ (8002820 <ResetAndInitializeTOF1+0x12c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2252      	movs	r2, #82	@ 0x52
 800274a:	f883 2398 	strb.w	r2, [r3, #920]	@ 0x398
	newI2C = Dev->I2cDevAddr + 2;
 800274e:	4b34      	ldr	r3, [pc, #208]	@ (8002820 <ResetAndInitializeTOF1+0x12c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f893 3398 	ldrb.w	r3, [r3, #920]	@ 0x398
 8002756:	3302      	adds	r3, #2
 8002758:	77fb      	strb	r3, [r7, #31]
	VL53L1_SetDeviceAddress(Dev, newI2C);
 800275a:	4b31      	ldr	r3, [pc, #196]	@ (8002820 <ResetAndInitializeTOF1+0x12c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	7ffa      	ldrb	r2, [r7, #31]
 8002760:	4611      	mov	r1, r2
 8002762:	4618      	mov	r0, r3
 8002764:	f00b fe08 	bl	800e378 <VL53L1_SetDeviceAddress>
	Dev->I2cDevAddr=newI2C;
 8002768:	4b2d      	ldr	r3, [pc, #180]	@ (8002820 <ResetAndInitializeTOF1+0x12c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	7ffa      	ldrb	r2, [r7, #31]
 800276e:	f883 2398 	strb.w	r2, [r3, #920]	@ 0x398
	/* Device Initialization and setting */
	VL53L1_WaitDeviceBooted(Dev);
 8002772:	4b2b      	ldr	r3, [pc, #172]	@ (8002820 <ResetAndInitializeTOF1+0x12c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f00b fe7c 	bl	800e474 <VL53L1_WaitDeviceBooted>
	VL53L1_DataInit(Dev);
 800277c:	4b28      	ldr	r3, [pc, #160]	@ (8002820 <ResetAndInitializeTOF1+0x12c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f00b fe1f 	bl	800e3c4 <VL53L1_DataInit>
	VL53L1_StaticInit(Dev);
 8002786:	4b26      	ldr	r3, [pc, #152]	@ (8002820 <ResetAndInitializeTOF1+0x12c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f00b fe53 	bl	800e436 <VL53L1_StaticInit>
	VL53L1_SetDistanceMode(Dev, VL53L1_DISTANCEMODE_LONG);
 8002790:	4b23      	ldr	r3, [pc, #140]	@ (8002820 <ResetAndInitializeTOF1+0x12c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2103      	movs	r1, #3
 8002796:	4618      	mov	r0, r3
 8002798:	f00b ff9c 	bl	800e6d4 <VL53L1_SetDistanceMode>
	VL53L1_SetMeasurementTimingBudgetMicroSeconds(Dev, 40000);
 800279c:	4b20      	ldr	r3, [pc, #128]	@ (8002820 <ResetAndInitializeTOF1+0x12c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f649 4140 	movw	r1, #40000	@ 0x9c40
 80027a4:	4618      	mov	r0, r3
 80027a6:	f00c f80b 	bl	800e7c0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
	VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev, 50);
 80027aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002820 <ResetAndInitializeTOF1+0x12c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2132      	movs	r1, #50	@ 0x32
 80027b0:	4618      	mov	r0, r3
 80027b2:	f00c f8e5 	bl	800e980 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
	memset ( &DetectionConfig,0,sizeof(DetectionConfig));
 80027b6:	f107 0308 	add.w	r3, r7, #8
 80027ba:	2214      	movs	r2, #20
 80027bc:	2100      	movs	r1, #0
 80027be:	4618      	mov	r0, r3
 80027c0:	f011 fefa 	bl	80145b8 <memset>
	DetectionConfig.DetectionMode = VL53L1_DETECTION_DISTANCE_ONLY;
 80027c4:	2301      	movs	r3, #1
 80027c6:	723b      	strb	r3, [r7, #8]
	DetectionConfig.IntrNoTarget = 0;
 80027c8:	2300      	movs	r3, #0
 80027ca:	727b      	strb	r3, [r7, #9]
	DetectionConfig.Distance.CrossMode = VL53L1_THRESHOLD_IN_WINDOW;
 80027cc:	2303      	movs	r3, #3
 80027ce:	72bb      	strb	r3, [r7, #10]
	DetectionConfig.Distance.Low = 20;
 80027d0:	2314      	movs	r3, #20
 80027d2:	81fb      	strh	r3, [r7, #14]
	DetectionConfig.Distance.High = 300;
 80027d4:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80027d8:	81bb      	strh	r3, [r7, #12]
	VL53L1_SetThresholdConfig ( Dev, &DetectionConfig);
 80027da:	4b11      	ldr	r3, [pc, #68]	@ (8002820 <ResetAndInitializeTOF1+0x12c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f107 0208 	add.w	r2, r7, #8
 80027e2:	4611      	mov	r1, r2
 80027e4:	4618      	mov	r0, r3
 80027e6:	f00c fc33 	bl	800f050 <VL53L1_SetThresholdConfig>
	VL53L1_UserRoi_t roiConfig;
	roiConfig.TopLeftX= 0;
 80027ea:	2300      	movs	r3, #0
 80027ec:	713b      	strb	r3, [r7, #4]
	roiConfig.TopLeftY= 15;
 80027ee:	230f      	movs	r3, #15
 80027f0:	717b      	strb	r3, [r7, #5]
	roiConfig.BotRightX= 15;
 80027f2:	230f      	movs	r3, #15
 80027f4:	71bb      	strb	r3, [r7, #6]
	roiConfig.BotRightY= 0;
 80027f6:	2300      	movs	r3, #0
 80027f8:	71fb      	strb	r3, [r7, #7]
	VL53L1_SetUserROI(Dev, &roiConfig);
 80027fa:	4b09      	ldr	r3, [pc, #36]	@ (8002820 <ResetAndInitializeTOF1+0x12c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	1d3a      	adds	r2, r7, #4
 8002800:	4611      	mov	r1, r2
 8002802:	4618      	mov	r0, r3
 8002804:	f00c f9bf 	bl	800eb86 <VL53L1_SetUserROI>
	VL53L1_ClearInterruptAndStartMeasurement(Dev);
 8002808:	4b05      	ldr	r3, [pc, #20]	@ (8002820 <ResetAndInitializeTOF1+0x12c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f00c fa24 	bl	800ec5a <VL53L1_ClearInterruptAndStartMeasurement>
}
 8002812:	bf00      	nop
 8002814:	3720      	adds	r7, #32
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	48001c00 	.word	0x48001c00
 8002820:	20000a2c 	.word	0x20000a2c
 8002824:	20000688 	.word	0x20000688
 8002828:	20000480 	.word	0x20000480

0800282c <HAL_ADC_ConvCpltCallback>:
	void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
		cpt_adc++;
 8002834:	4b0e      	ldr	r3, [pc, #56]	@ (8002870 <HAL_ADC_ConvCpltCallback+0x44>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	3301      	adds	r3, #1
 800283a:	b2da      	uxtb	r2, r3
 800283c:	4b0c      	ldr	r3, [pc, #48]	@ (8002870 <HAL_ADC_ConvCpltCallback+0x44>)
 800283e:	701a      	strb	r2, [r3, #0]
		if(cpt_adc==1) {ldr_value = HAL_ADC_GetValue(&hadc1);}
 8002840:	4b0b      	ldr	r3, [pc, #44]	@ (8002870 <HAL_ADC_ConvCpltCallback+0x44>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d106      	bne.n	8002856 <HAL_ADC_ConvCpltCallback+0x2a>
 8002848:	480a      	ldr	r0, [pc, #40]	@ (8002874 <HAL_ADC_ConvCpltCallback+0x48>)
 800284a:	f002 fccd 	bl	80051e8 <HAL_ADC_GetValue>
 800284e:	4603      	mov	r3, r0
 8002850:	4a09      	ldr	r2, [pc, #36]	@ (8002878 <HAL_ADC_ConvCpltCallback+0x4c>)
 8002852:	6013      	str	r3, [r2, #0]
		else { pot_Value = HAL_ADC_GetValue(&hadc1); cpt_adc=0;}


	}
 8002854:	e008      	b.n	8002868 <HAL_ADC_ConvCpltCallback+0x3c>
		else { pot_Value = HAL_ADC_GetValue(&hadc1); cpt_adc=0;}
 8002856:	4807      	ldr	r0, [pc, #28]	@ (8002874 <HAL_ADC_ConvCpltCallback+0x48>)
 8002858:	f002 fcc6 	bl	80051e8 <HAL_ADC_GetValue>
 800285c:	4603      	mov	r3, r0
 800285e:	4a07      	ldr	r2, [pc, #28]	@ (800287c <HAL_ADC_ConvCpltCallback+0x50>)
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	4b03      	ldr	r3, [pc, #12]	@ (8002870 <HAL_ADC_ConvCpltCallback+0x44>)
 8002864:	2200      	movs	r2, #0
 8002866:	701a      	strb	r2, [r3, #0]
	}
 8002868:	bf00      	nop
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	20000668 	.word	0x20000668
 8002874:	200003e0 	.word	0x200003e0
 8002878:	20000624 	.word	0x20000624
 800287c:	20000620 	.word	0x20000620

08002880 <bonne_sommeil>:

	uint8_t bonne_sommeil(uint16_t message, uint16_t message2) {
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	4603      	mov	r3, r0
 8002888:	460a      	mov	r2, r1
 800288a:	80fb      	strh	r3, [r7, #6]
 800288c:	4613      	mov	r3, r2
 800288e:	80bb      	strh	r3, [r7, #4]
	    // Calculate absolute difference
	     diff = (message > message2) ? (message - message2) : (message2 - message);
 8002890:	88fa      	ldrh	r2, [r7, #6]
 8002892:	88bb      	ldrh	r3, [r7, #4]
 8002894:	429a      	cmp	r2, r3
 8002896:	d904      	bls.n	80028a2 <bonne_sommeil+0x22>
 8002898:	88fa      	ldrh	r2, [r7, #6]
 800289a:	88bb      	ldrh	r3, [r7, #4]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	b29b      	uxth	r3, r3
 80028a0:	e003      	b.n	80028aa <bonne_sommeil+0x2a>
 80028a2:	88ba      	ldrh	r2, [r7, #4]
 80028a4:	88fb      	ldrh	r3, [r7, #6]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	4a07      	ldr	r2, [pc, #28]	@ (80028c8 <bonne_sommeil+0x48>)
 80028ac:	8013      	strh	r3, [r2, #0]

	    // If difference is small (less than threshold), return 1
	    if (diff < 30) {  // Example: movement < 30 mm is acceptable
 80028ae:	4b06      	ldr	r3, [pc, #24]	@ (80028c8 <bonne_sommeil+0x48>)
 80028b0:	881b      	ldrh	r3, [r3, #0]
 80028b2:	2b1d      	cmp	r3, #29
 80028b4:	d801      	bhi.n	80028ba <bonne_sommeil+0x3a>
	        return 1; // Good (stable) sleep
 80028b6:	2301      	movs	r3, #1
 80028b8:	e000      	b.n	80028bc <bonne_sommeil+0x3c>
	    } else {
	        return 0; // Bad (restless) sleep
 80028ba:	2300      	movs	r3, #0
	    }
	}
 80028bc:	4618      	mov	r0, r3
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	20000a52 	.word	0x20000a52

080028cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028d0:	b672      	cpsid	i
}
 80028d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028d4:	bf00      	nop
 80028d6:	e7fd      	b.n	80028d4 <Error_Handler+0x8>

080028d8 <fix16_mul>:
static fix16_t fix16_sqrt(fix16_t inValue);

/*! Returns the exponent (e^) of the given fix16_t. */
static fix16_t fix16_exp(fix16_t inValue);

static fix16_t fix16_mul(fix16_t inArg0, fix16_t inArg1) {
 80028d8:	b480      	push	{r7}
 80028da:	b08f      	sub	sp, #60	@ 0x3c
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
    //					BD	16 * 16 -> 32 bit products
    //				 CB
    //				 AD
    //				AC
    //			 |----| 64 bit product
    int32_t A = (inArg0 >> 16), C = (inArg1 >> 16);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	141b      	asrs	r3, r3, #16
 80028e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	141b      	asrs	r3, r3, #16
 80028ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t B = (inArg0 & 0xFFFF), D = (inArg1 & 0xFFFF);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	627b      	str	r3, [r7, #36]	@ 0x24

    int32_t AC = A * C;
 80028fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028fe:	fb02 f303 	mul.w	r3, r2, r3
 8002902:	623b      	str	r3, [r7, #32]
    int32_t AD_CB = A * D + C * B;
 8002904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002906:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002908:	fb03 f202 	mul.w	r2, r3, r2
 800290c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800290e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002910:	fb01 f303 	mul.w	r3, r1, r3
 8002914:	4413      	add	r3, r2
 8002916:	61fb      	str	r3, [r7, #28]
    uint32_t BD = B * D;
 8002918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800291a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800291c:	fb02 f303 	mul.w	r3, r2, r3
 8002920:	61bb      	str	r3, [r7, #24]

    int32_t product_hi = AC + (AD_CB >> 16);
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	141b      	asrs	r3, r3, #16
 8002926:	6a3a      	ldr	r2, [r7, #32]
 8002928:	4413      	add	r3, r2
 800292a:	637b      	str	r3, [r7, #52]	@ 0x34

    // Handle carry from lower 32 bits to upper part of result.
    uint32_t ad_cb_temp = AD_CB << 16;
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	041b      	lsls	r3, r3, #16
 8002930:	617b      	str	r3, [r7, #20]
    uint32_t product_lo = BD + ad_cb_temp;
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	4413      	add	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
    if (product_lo < BD)
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	429a      	cmp	r2, r3
 8002940:	d202      	bcs.n	8002948 <fix16_mul+0x70>
        product_hi++;
 8002942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002944:	3301      	adds	r3, #1
 8002946:	637b      	str	r3, [r7, #52]	@ 0x34

#ifndef FIXMATH_NO_OVERFLOW
    // The upper 17 bits should all be the same (the sign).
    if (product_hi >> 31 != product_hi >> 15)
 8002948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800294a:	17da      	asrs	r2, r3, #31
 800294c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800294e:	13db      	asrs	r3, r3, #15
 8002950:	429a      	cmp	r2, r3
 8002952:	d002      	beq.n	800295a <fix16_mul+0x82>
        return FIX16_OVERFLOW;
 8002954:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002958:	e01c      	b.n	8002994 <fix16_mul+0xbc>
#else
    // Subtracting 0x8000 (= 0.5) and then using signed right shift
    // achieves proper rounding to result-1, except in the corner
    // case of negative numbers and lowest word = 0x8000.
    // To handle that, we also have to subtract 1 for negative numbers.
    uint32_t product_lo_tmp = product_lo;
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	60fb      	str	r3, [r7, #12]
    product_lo -= 0x8000;
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8002964:	613b      	str	r3, [r7, #16]
    product_lo -= (uint32_t)product_hi >> 31;
 8002966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002968:	17db      	asrs	r3, r3, #31
 800296a:	461a      	mov	r2, r3
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	4413      	add	r3, r2
 8002970:	613b      	str	r3, [r7, #16]
    if (product_lo > product_lo_tmp)
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	429a      	cmp	r2, r3
 8002978:	d902      	bls.n	8002980 <fix16_mul+0xa8>
        product_hi--;
 800297a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800297c:	3b01      	subs	r3, #1
 800297e:	637b      	str	r3, [r7, #52]	@ 0x34

    // Discard the lowest 16 bits. Note that this is not exactly the same
    // as dividing by 0x10000. For example if product = -1, result will
    // also be -1 and not 0. This is compensated by adding +1 to the result
    // and compensating this in turn in the rounding above.
    fix16_t result = (product_hi << 16) | (product_lo >> 16);
 8002980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002982:	041a      	lsls	r2, r3, #16
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	0c1b      	lsrs	r3, r3, #16
 8002988:	4313      	orrs	r3, r2
 800298a:	60bb      	str	r3, [r7, #8]
    result += 1;
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	3301      	adds	r3, #1
 8002990:	60bb      	str	r3, [r7, #8]
    return result;
 8002992:	68bb      	ldr	r3, [r7, #8]
#endif
}
 8002994:	4618      	mov	r0, r3
 8002996:	373c      	adds	r7, #60	@ 0x3c
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <fix16_div>:

static fix16_t fix16_div(fix16_t a, fix16_t b) {
 80029a0:	b480      	push	{r7}
 80029a2:	b089      	sub	sp, #36	@ 0x24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
    // This uses the basic binary restoring division algorithm.
    // It appears to be faster to do the whole division manually than
    // trying to compose a 64-bit divide out of 32-bit divisions on
    // platforms without hardware divide.

    if (b == 0)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d102      	bne.n	80029b6 <fix16_div+0x16>
        return FIX16_MINIMUM;
 80029b0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80029b4:	e066      	b.n	8002a84 <fix16_div+0xe4>

    uint32_t remainder = (a >= 0) ? a : (-a);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	bfb8      	it	lt
 80029bc:	425b      	neglt	r3, r3
 80029be:	61fb      	str	r3, [r7, #28]
    uint32_t divider = (b >= 0) ? b : (-b);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	bfb8      	it	lt
 80029c6:	425b      	neglt	r3, r3
 80029c8:	61bb      	str	r3, [r7, #24]

    uint32_t quotient = 0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	617b      	str	r3, [r7, #20]
    uint32_t bit = 0x10000;
 80029ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80029d2:	613b      	str	r3, [r7, #16]

    /* The algorithm requires D >= R */
    while (divider < remainder) {
 80029d4:	e005      	b.n	80029e2 <fix16_div+0x42>
        divider <<= 1;
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	61bb      	str	r3, [r7, #24]
        bit <<= 1;
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	613b      	str	r3, [r7, #16]
    while (divider < remainder) {
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d3f5      	bcc.n	80029d6 <fix16_div+0x36>
    }

#ifndef FIXMATH_NO_OVERFLOW
    if (!bit)
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d102      	bne.n	80029f6 <fix16_div+0x56>
        return FIX16_OVERFLOW;
 80029f0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80029f4:	e046      	b.n	8002a84 <fix16_div+0xe4>
#endif

    if (divider & 0x80000000) {
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	da24      	bge.n	8002a46 <fix16_div+0xa6>
        // Perform one step manually to avoid overflows later.
        // We know that divider's bottom bit is 0 here.
        if (remainder >= divider) {
 80029fc:	69fa      	ldr	r2, [r7, #28]
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d307      	bcc.n	8002a14 <fix16_div+0x74>
            quotient |= bit;
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	617b      	str	r3, [r7, #20]
            remainder -= divider;
 8002a0c:	69fa      	ldr	r2, [r7, #28]
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	61fb      	str	r3, [r7, #28]
        }
        divider >>= 1;
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	085b      	lsrs	r3, r3, #1
 8002a18:	61bb      	str	r3, [r7, #24]
        bit >>= 1;
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	085b      	lsrs	r3, r3, #1
 8002a1e:	613b      	str	r3, [r7, #16]
    }

    /* Main division loop */
    while (bit && remainder) {
 8002a20:	e011      	b.n	8002a46 <fix16_div+0xa6>
        if (remainder >= divider) {
 8002a22:	69fa      	ldr	r2, [r7, #28]
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d307      	bcc.n	8002a3a <fix16_div+0x9a>
            quotient |= bit;
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	617b      	str	r3, [r7, #20]
            remainder -= divider;
 8002a32:	69fa      	ldr	r2, [r7, #28]
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	61fb      	str	r3, [r7, #28]
        }

        remainder <<= 1;
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	61fb      	str	r3, [r7, #28]
        bit >>= 1;
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	085b      	lsrs	r3, r3, #1
 8002a44:	613b      	str	r3, [r7, #16]
    while (bit && remainder) {
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d002      	beq.n	8002a52 <fix16_div+0xb2>
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1e7      	bne.n	8002a22 <fix16_div+0x82>
    }

#ifndef FIXMATH_NO_ROUNDING
    if (remainder >= divider) {
 8002a52:	69fa      	ldr	r2, [r7, #28]
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d302      	bcc.n	8002a60 <fix16_div+0xc0>
        quotient++;
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	617b      	str	r3, [r7, #20]
    }
#endif

    fix16_t result = quotient;
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	60fb      	str	r3, [r7, #12]

    /* Figure out the sign of result */
    if ((a ^ b) & 0x80000000) {
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	4053      	eors	r3, r2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	da09      	bge.n	8002a82 <fix16_div+0xe2>
#ifndef FIXMATH_NO_OVERFLOW
        if (result == FIX16_MINIMUM)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002a74:	d102      	bne.n	8002a7c <fix16_div+0xdc>
            return FIX16_OVERFLOW;
 8002a76:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002a7a:	e003      	b.n	8002a84 <fix16_div+0xe4>
#endif

        result = -result;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	425b      	negs	r3, r3
 8002a80:	60fb      	str	r3, [r7, #12]
    }

    return result;
 8002a82:	68fb      	ldr	r3, [r7, #12]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3724      	adds	r7, #36	@ 0x24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <fix16_sqrt>:

static fix16_t fix16_sqrt(fix16_t x) {
 8002a90:	b480      	push	{r7}
 8002a92:	b087      	sub	sp, #28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
    // It is assumed that x is not negative

    uint32_t num = x;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	617b      	str	r3, [r7, #20]
    uint32_t result = 0;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	613b      	str	r3, [r7, #16]
    uint32_t bit;
    uint8_t n;

    bit = (uint32_t)1 << 30;
 8002aa0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002aa4:	60fb      	str	r3, [r7, #12]
    while (bit > num)
 8002aa6:	e002      	b.n	8002aae <fix16_sqrt+0x1e>
        bit >>= 2;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	089b      	lsrs	r3, r3, #2
 8002aac:	60fb      	str	r3, [r7, #12]
    while (bit > num)
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d8f8      	bhi.n	8002aa8 <fix16_sqrt+0x18>

    // The main part is executed twice, in order to avoid
    // using 64 bit values in computations.
    for (n = 0; n < 2; n++) {
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	72fb      	strb	r3, [r7, #11]
 8002aba:	e03c      	b.n	8002b36 <fix16_sqrt+0xa6>
        // First we get the top 24 bits of the answer.
        while (bit) {
            if (num >= result + bit) {
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d30b      	bcc.n	8002ae0 <fix16_sqrt+0x50>
                num -= result + bit;
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	4413      	add	r3, r2
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	617b      	str	r3, [r7, #20]
                result = (result >> 1) + bit;
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	085b      	lsrs	r3, r3, #1
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	4413      	add	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]
 8002ade:	e002      	b.n	8002ae6 <fix16_sqrt+0x56>
            } else {
                result = (result >> 1);
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	085b      	lsrs	r3, r3, #1
 8002ae4:	613b      	str	r3, [r7, #16]
            }
            bit >>= 2;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	089b      	lsrs	r3, r3, #2
 8002aea:	60fb      	str	r3, [r7, #12]
        while (bit) {
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1e4      	bne.n	8002abc <fix16_sqrt+0x2c>
        }

        if (n == 0) {
 8002af2:	7afb      	ldrb	r3, [r7, #11]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d11b      	bne.n	8002b30 <fix16_sqrt+0xa0>
            // Then process it again to get the lowest 8 bits.
            if (num > 65535) {
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002afe:	d30e      	bcc.n	8002b1e <fix16_sqrt+0x8e>
                // by 16, so we have to add 1 to result manually and
                // adjust 'num' accordingly.
                // num = a - (result + 0.5)^2
                //	 = num + result^2 - (result + 0.5)^2
                //	 = num - result - 0.5
                num -= result;
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	617b      	str	r3, [r7, #20]
                num = (num << 16) - 0x8000;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	041b      	lsls	r3, r3, #16
 8002b0c:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8002b10:	617b      	str	r3, [r7, #20]
                result = (result << 16) + 0x8000;
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	041b      	lsls	r3, r3, #16
 8002b16:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8002b1a:	613b      	str	r3, [r7, #16]
 8002b1c:	e005      	b.n	8002b2a <fix16_sqrt+0x9a>
            } else {
                num <<= 16;
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	041b      	lsls	r3, r3, #16
 8002b22:	617b      	str	r3, [r7, #20]
                result <<= 16;
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	041b      	lsls	r3, r3, #16
 8002b28:	613b      	str	r3, [r7, #16]
            }

            bit = 1 << 14;
 8002b2a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b2e:	60fb      	str	r3, [r7, #12]
    for (n = 0; n < 2; n++) {
 8002b30:	7afb      	ldrb	r3, [r7, #11]
 8002b32:	3301      	adds	r3, #1
 8002b34:	72fb      	strb	r3, [r7, #11]
 8002b36:	7afb      	ldrb	r3, [r7, #11]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d9d7      	bls.n	8002aec <fix16_sqrt+0x5c>
        }
    }

#ifndef FIXMATH_NO_ROUNDING
    // Finally, if next bit would have been 1, round the result upwards.
    if (num > result) {
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d902      	bls.n	8002b4a <fix16_sqrt+0xba>
        result++;
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	3301      	adds	r3, #1
 8002b48:	613b      	str	r3, [r7, #16]
    }
#endif

    return (fix16_t)result;
 8002b4a:	693b      	ldr	r3, [r7, #16]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	371c      	adds	r7, #28
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <fix16_exp>:

static fix16_t fix16_exp(fix16_t x) {
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
    const fix16_t* exp_values;

    fix16_t res, arg;
    uint16_t i;

    if (x >= F16(10.3972))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a20      	ldr	r2, [pc, #128]	@ (8002be4 <fix16_exp+0x8c>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	dd02      	ble.n	8002b6e <fix16_exp+0x16>
        return FIX16_MAXIMUM;
 8002b68:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8002b6c:	e035      	b.n	8002bda <fix16_exp+0x82>
    if (x <= F16(-11.7835))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a1d      	ldr	r2, [pc, #116]	@ (8002be8 <fix16_exp+0x90>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	da01      	bge.n	8002b7a <fix16_exp+0x22>
        return 0;
 8002b76:	2300      	movs	r3, #0
 8002b78:	e02f      	b.n	8002bda <fix16_exp+0x82>

    if (x < 0) {
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	da05      	bge.n	8002b8c <fix16_exp+0x34>
        x = -x;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	425b      	negs	r3, r3
 8002b84:	607b      	str	r3, [r7, #4]
        exp_values = exp_neg_values;
 8002b86:	4b19      	ldr	r3, [pc, #100]	@ (8002bec <fix16_exp+0x94>)
 8002b88:	617b      	str	r3, [r7, #20]
 8002b8a:	e001      	b.n	8002b90 <fix16_exp+0x38>
    } else {
        exp_values = exp_pos_values;
 8002b8c:	4b18      	ldr	r3, [pc, #96]	@ (8002bf0 <fix16_exp+0x98>)
 8002b8e:	617b      	str	r3, [r7, #20]
    }

    res = FIX16_ONE;
 8002b90:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b94:	613b      	str	r3, [r7, #16]
    arg = FIX16_ONE;
 8002b96:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b9a:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < NUM_EXP_VALUES; i++) {
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	817b      	strh	r3, [r7, #10]
 8002ba0:	e017      	b.n	8002bd2 <fix16_exp+0x7a>
        while (x >= arg) {
            res = fix16_mul(res, exp_values[i]);
 8002ba2:	897b      	ldrh	r3, [r7, #10]
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	4413      	add	r3, r2
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4619      	mov	r1, r3
 8002bae:	6938      	ldr	r0, [r7, #16]
 8002bb0:	f7ff fe92 	bl	80028d8 <fix16_mul>
 8002bb4:	6138      	str	r0, [r7, #16]
            x -= arg;
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	607b      	str	r3, [r7, #4]
        while (x >= arg) {
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	daed      	bge.n	8002ba2 <fix16_exp+0x4a>
        }
        arg >>= 3;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	10db      	asrs	r3, r3, #3
 8002bca:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < NUM_EXP_VALUES; i++) {
 8002bcc:	897b      	ldrh	r3, [r7, #10]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	817b      	strh	r3, [r7, #10]
 8002bd2:	897b      	ldrh	r3, [r7, #10]
 8002bd4:	2b03      	cmp	r3, #3
 8002bd6:	d9f2      	bls.n	8002bbe <fix16_exp+0x66>
    }
    return res;
 8002bd8:	693b      	ldr	r3, [r7, #16]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	000a65ae 	.word	0x000a65ae
 8002be8:	fff4376e 	.word	0xfff4376e
 8002bec:	080198bc 	.word	0x080198bc
 8002bf0:	080198cc 	.word	0x080198cc

08002bf4 <VocAlgorithm_process>:
    params->mSraw_Std_Initial = (fix16_from_int(std_initial));
    VocAlgorithm__init_instances(params);
}

void VocAlgorithm_process(VocAlgorithmParams* params, int32_t sraw,
                          int32_t* voc_index) {
 8002bf4:	b590      	push	{r4, r7, lr}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= F16(VocAlgorithm_INITIAL_BLACKOUT))) {
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	f5b3 1f34 	cmp.w	r3, #2949120	@ 0x2d0000
 8002c08:	dc06      	bgt.n	8002c18 <VocAlgorithm_process+0x24>
        params->mUptime =
            (params->mUptime + F16(VocAlgorithm_SAMPLING_INTERVAL));
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
        params->mUptime =
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	611a      	str	r2, [r3, #16]
 8002c16:	e05c      	b.n	8002cd2 <VocAlgorithm_process+0xde>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	dd1c      	ble.n	8002c58 <VocAlgorithm_process+0x64>
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	f64f 52e7 	movw	r2, #64999	@ 0xfde7
 8002c24:	4293      	cmp	r3, r2
 8002c26:	dc17      	bgt.n	8002c58 <VocAlgorithm_process+0x64>
            if ((sraw < 20001)) {
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	dc03      	bgt.n	8002c3a <VocAlgorithm_process+0x46>
                sraw = 20001;
 8002c32:	f644 6321 	movw	r3, #20001	@ 0x4e21
 8002c36:	60bb      	str	r3, [r7, #8]
 8002c38:	e007      	b.n	8002c4a <VocAlgorithm_process+0x56>
            } else if ((sraw > 52767)) {
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	f64c 621f 	movw	r2, #52767	@ 0xce1f
 8002c40:	4293      	cmp	r3, r2
 8002c42:	dd02      	ble.n	8002c4a <VocAlgorithm_process+0x56>
                sraw = 52767;
 8002c44:	f64c 631f 	movw	r3, #52767	@ 0xce1f
 8002c48:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((FIX16_ONE*(sraw - 20000)));
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	f5a3 439c 	sub.w	r3, r3, #19968	@ 0x4e00
 8002c50:	3b20      	subs	r3, #32
 8002c52:	041a      	lsls	r2, r3, #16
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	615a      	str	r2, [r3, #20]
        }
        params->mVoc_Index =
            VocAlgorithm__mox_model__process(params, params->mSraw);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 fa2d 	bl	80030be <VocAlgorithm__mox_model__process>
 8002c64:	4602      	mov	r2, r0
        params->mVoc_Index =
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	619a      	str	r2, [r3, #24]
        params->mVoc_Index =
            VocAlgorithm__sigmoid_scaled__process(params, params->mVoc_Index);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	4619      	mov	r1, r3
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 fa43 	bl	80030fc <VocAlgorithm__sigmoid_scaled__process>
 8002c76:	4602      	mov	r2, r0
        params->mVoc_Index =
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	619a      	str	r2, [r3, #24]
        params->mVoc_Index =
            VocAlgorithm__adaptive_lowpass__process(params, params->mVoc_Index);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	4619      	mov	r1, r3
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 fa98 	bl	80031b8 <VocAlgorithm__adaptive_lowpass__process>
 8002c88:	4602      	mov	r2, r0
        params->mVoc_Index =
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	619a      	str	r2, [r3, #24]
        if ((params->mVoc_Index < F16(0.5))) {
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c96:	da03      	bge.n	8002ca0 <VocAlgorithm_process+0xac>
            params->mVoc_Index = F16(0.5);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002c9e:	619a      	str	r2, [r3, #24]
        }
        if ((params->mSraw > F16(0.))) {
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	dd14      	ble.n	8002cd2 <VocAlgorithm_process+0xde>
            VocAlgorithm__mean_variance_estimator__process(
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6959      	ldr	r1, [r3, #20]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 f908 	bl	8002ec8 <VocAlgorithm__mean_variance_estimator__process>
                params, params->mSraw, params->mVoc_Index);
            VocAlgorithm__mox_model__set_parameters(
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 f815 	bl	8002ce8 <VocAlgorithm__mean_variance_estimator__get_std>
 8002cbe:	4604      	mov	r4, r0
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f000 f81d 	bl	8002d00 <VocAlgorithm__mean_variance_estimator__get_mean>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	461a      	mov	r2, r3
 8002cca:	4621      	mov	r1, r4
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 f9e4 	bl	800309a <VocAlgorithm__mox_model__set_parameters>
                params, VocAlgorithm__mean_variance_estimator__get_std(params),
                VocAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *voc_index = (((params->mVoc_Index + F16(0.5)))>> 16);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8002cda:	141a      	asrs	r2, r3, #16
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	601a      	str	r2, [r3, #0]
    return;
 8002ce0:	bf00      	nop
}
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd90      	pop	{r4, r7, pc}

08002ce8 <VocAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static fix16_t
VocAlgorithm__mean_variance_estimator__get_std(VocAlgorithmParams* params) {
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <VocAlgorithm__mean_variance_estimator__get_mean>:

static fix16_t
VocAlgorithm__mean_variance_estimator__get_mean(VocAlgorithmParams* params) {
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    return (params->m_Mean_Variance_Estimator___Mean +
 8002d10:	4413      	add	r3, r2
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
	...

08002d20 <VocAlgorithm__mean_variance_estimator___calculate_gamma>:

static void VocAlgorithm__mean_variance_estimator___calculate_gamma(
    VocAlgorithmParams* params, fix16_t voc_index_from_prior) {
 8002d20:	b590      	push	{r4, r7, lr}
 8002d22:	b08d      	sub	sp, #52	@ 0x34
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
    fix16_t sigmoid_gamma_variance;
    fix16_t gamma_variance;
    fix16_t gating_threshold_variance;
    fix16_t sigmoid_gating_variance;

    uptime_limit = F16((VocAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 8002d2a:	4b63      	ldr	r3, [pc, #396]	@ (8002eb8 <VocAlgorithm__mean_variance_estimator___calculate_gamma+0x198>)
 8002d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        VocAlgorithm_SAMPLING_INTERVAL));
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d34:	429a      	cmp	r2, r3
 8002d36:	dd05      	ble.n	8002d44 <VocAlgorithm__mean_variance_estimator___calculate_gamma+0x24>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d3c:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	645a      	str	r2, [r3, #68]	@ 0x44
             F16(VocAlgorithm_SAMPLING_INTERVAL));
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	dd05      	ble.n	8002d5a <VocAlgorithm__mean_variance_estimator___calculate_gamma+0x3a>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d52:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	649a      	str	r2, [r3, #72]	@ 0x48
             F16(VocAlgorithm_SAMPLING_INTERVAL));
    }
    VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8002d5a:	f240 238f 	movw	r3, #655	@ 0x28f
 8002d5e:	4a57      	ldr	r2, [pc, #348]	@ (8002ebc <VocAlgorithm__mean_variance_estimator___calculate_gamma+0x19c>)
 8002d60:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 f955 	bl	8003014 <VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, F16(1.), F16(VocAlgorithm_INIT_DURATION_MEAN),
        F16(VocAlgorithm_INIT_TRANSITION_MEAN));
    sigmoid_gamma_mean =
        VocAlgorithm__mean_variance_estimator___sigmoid__process(
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d6e:	4619      	mov	r1, r3
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 f965 	bl	8003040 <VocAlgorithm__mean_variance_estimator___sigmoid__process>
 8002d76:	62b8      	str	r0, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean =
        (params->m_Mean_Variance_Estimator___Gamma +
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
         (fix16_mul((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
                     params->m_Mean_Variance_Estimator___Gamma),
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
         (fix16_mul((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff fda5 	bl	80028d8 <fix16_mul>
 8002d8e:	4603      	mov	r3, r0
    gamma_mean =
 8002d90:	4423      	add	r3, r4
 8002d92:	627b      	str	r3, [r7, #36]	@ 0x24
                    sigmoid_gamma_mean)));
    gating_threshold_mean =
        (F16(VocAlgorithm_GATING_THRESHOLD) +
         (fix16_mul(
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d98:	4619      	mov	r1, r3
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f950 	bl	8003040 <VocAlgorithm__mean_variance_estimator___sigmoid__process>
 8002da0:	4603      	mov	r3, r0
 8002da2:	4619      	mov	r1, r3
 8002da4:	f44f 002a 	mov.w	r0, #11141120	@ 0xaa0000
 8002da8:	f7ff fd96 	bl	80028d8 <fix16_mul>
 8002dac:	4603      	mov	r3, r0
    gating_threshold_mean =
 8002dae:	f103 73aa 	add.w	r3, r3, #22282240	@ 0x1540000
 8002db2:	623b      	str	r3, [r7, #32]
             F16((VocAlgorithm_GATING_THRESHOLD_INITIAL -
                  VocAlgorithm_GATING_THRESHOLD)),
             VocAlgorithm__mean_variance_estimator___sigmoid__process(
                 params, params->m_Mean_Variance_Estimator___Uptime_Gating))));
    VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8002db4:	f241 730a 	movw	r3, #5898	@ 0x170a
 8002db8:	6a3a      	ldr	r2, [r7, #32]
 8002dba:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f928 	bl	8003014 <VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, F16(1.), gating_threshold_mean,
        F16(VocAlgorithm_GATING_THRESHOLD_TRANSITION));
    sigmoid_gating_mean =
        VocAlgorithm__mean_variance_estimator___sigmoid__process(
 8002dc4:	6839      	ldr	r1, [r7, #0]
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f93a 	bl	8003040 <VocAlgorithm__mean_variance_estimator___sigmoid__process>
 8002dcc:	61f8      	str	r0, [r7, #28]
            params, voc_index_from_prior);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (fix16_mul(sigmoid_gating_mean, gamma_mean));
 8002dce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002dd0:	69f8      	ldr	r0, [r7, #28]
 8002dd2:	f7ff fd81 	bl	80028d8 <fix16_mul>
 8002dd6:	4602      	mov	r2, r0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	63da      	str	r2, [r3, #60]	@ 0x3c
    VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8002ddc:	f240 238f 	movw	r3, #655	@ 0x28f
 8002de0:	4a37      	ldr	r2, [pc, #220]	@ (8002ec0 <VocAlgorithm__mean_variance_estimator___calculate_gamma+0x1a0>)
 8002de2:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 f914 	bl	8003014 <VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, F16(1.), F16(VocAlgorithm_INIT_DURATION_VARIANCE),
        F16(VocAlgorithm_INIT_TRANSITION_VARIANCE));
    sigmoid_gamma_variance =
        VocAlgorithm__mean_variance_estimator___sigmoid__process(
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df0:	4619      	mov	r1, r3
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f924 	bl	8003040 <VocAlgorithm__mean_variance_estimator___sigmoid__process>
 8002df8:	61b8      	str	r0, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma +
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
         (fix16_mul(
             (params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
              params->m_Mean_Variance_Estimator___Gamma),
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
         (fix16_mul(
 8002e06:	1ad0      	subs	r0, r2, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	4619      	mov	r1, r3
 8002e10:	f7ff fd62 	bl	80028d8 <fix16_mul>
 8002e14:	4603      	mov	r3, r0
    gamma_variance =
 8002e16:	4423      	add	r3, r4
 8002e18:	617b      	str	r3, [r7, #20]
             (sigmoid_gamma_variance - sigmoid_gamma_mean))));
    gating_threshold_variance =
        (F16(VocAlgorithm_GATING_THRESHOLD) +
         (fix16_mul(
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e1e:	4619      	mov	r1, r3
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 f90d 	bl	8003040 <VocAlgorithm__mean_variance_estimator___sigmoid__process>
 8002e26:	4603      	mov	r3, r0
 8002e28:	4619      	mov	r1, r3
 8002e2a:	f44f 002a 	mov.w	r0, #11141120	@ 0xaa0000
 8002e2e:	f7ff fd53 	bl	80028d8 <fix16_mul>
 8002e32:	4603      	mov	r3, r0
    gating_threshold_variance =
 8002e34:	f103 73aa 	add.w	r3, r3, #22282240	@ 0x1540000
 8002e38:	613b      	str	r3, [r7, #16]
             F16((VocAlgorithm_GATING_THRESHOLD_INITIAL -
                  VocAlgorithm_GATING_THRESHOLD)),
             VocAlgorithm__mean_variance_estimator___sigmoid__process(
                 params, params->m_Mean_Variance_Estimator___Uptime_Gating))));
    VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8002e3a:	f241 730a 	movw	r3, #5898	@ 0x170a
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 f8e5 	bl	8003014 <VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, F16(1.), gating_threshold_variance,
        F16(VocAlgorithm_GATING_THRESHOLD_TRANSITION));
    sigmoid_gating_variance =
        VocAlgorithm__mean_variance_estimator___sigmoid__process(
 8002e4a:	6839      	ldr	r1, [r7, #0]
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 f8f7 	bl	8003040 <VocAlgorithm__mean_variance_estimator___sigmoid__process>
 8002e52:	60f8      	str	r0, [r7, #12]
            params, voc_index_from_prior);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (fix16_mul(sigmoid_gating_variance, gamma_variance));
 8002e54:	6979      	ldr	r1, [r7, #20]
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f7ff fd3e 	bl	80028d8 <fix16_mul>
 8002e5c:	4602      	mov	r2, r0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
         (fix16_mul(F16((VocAlgorithm_SAMPLING_INTERVAL / 60.)),
                    ((fix16_mul((F16(1.) - sigmoid_gating_mean),
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	f5c3 3380 	rsb	r3, r3, #65536	@ 0x10000
 8002e6c:	4915      	ldr	r1, [pc, #84]	@ (8002ec4 <VocAlgorithm__mean_variance_estimator___calculate_gamma+0x1a4>)
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff fd32 	bl	80028d8 <fix16_mul>
 8002e74:	4603      	mov	r3, r0
         (fix16_mul(F16((VocAlgorithm_SAMPLING_INTERVAL / 60.)),
 8002e76:	f5a3 4399 	sub.w	r3, r3, #19584	@ 0x4c80
 8002e7a:	3b4d      	subs	r3, #77	@ 0x4d
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	f240 4044 	movw	r0, #1092	@ 0x444
 8002e82:	f7ff fd29 	bl	80028d8 <fix16_mul>
 8002e86:	4603      	mov	r3, r0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8002e88:	18e2      	adds	r2, r4, r3
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	64da      	str	r2, [r3, #76]	@ 0x4c
                                F16((1. + VocAlgorithm_GATING_MAX_RATIO)))) -
                     F16(VocAlgorithm_GATING_MAX_RATIO)))));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes <
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	da02      	bge.n	8002e9c <VocAlgorithm__mean_variance_estimator___calculate_gamma+0x17c>
         F16(0.))) {
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = F16(0.);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
         params->m_Mean_Variance_Estimator__Gating_Max_Duration_Minutes)) {
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	69db      	ldr	r3, [r3, #28]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	dd02      	ble.n	8002eae <VocAlgorithm__mean_variance_estimator___calculate_gamma+0x18e>
        params->m_Mean_Variance_Estimator___Uptime_Gating = F16(0.);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	649a      	str	r2, [r3, #72]	@ 0x48
    }
}
 8002eae:	bf00      	nop
 8002eb0:	3734      	adds	r7, #52	@ 0x34
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd90      	pop	{r4, r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	7ffe0000 	.word	0x7ffe0000
 8002ebc:	0a8c0000 	.word	0x0a8c0000
 8002ec0:	14640000 	.word	0x14640000
 8002ec4:	00014ccd 	.word	0x00014ccd

08002ec8 <VocAlgorithm__mean_variance_estimator__process>:

static void VocAlgorithm__mean_variance_estimator__process(
    VocAlgorithmParams* params, fix16_t sraw, fix16_t voc_index_from_prior) {
 8002ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eca:	b089      	sub	sp, #36	@ 0x24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]

    fix16_t delta_sgp;
    fix16_t c;
    fix16_t additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eda:	f083 0301 	eor.w	r3, r3, #1
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00a      	beq.n	8002efa <VocAlgorithm__mean_variance_estimator__process+0x32>
        params->m_Mean_Variance_Estimator___Initialized = true;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2020 	strb.w	r2, [r3, #32]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	68ba      	ldr	r2, [r7, #8]
 8002ef0:	629a      	str	r2, [r3, #40]	@ 0x28
        params->m_Mean_Variance_Estimator___Mean = F16(0.);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	625a      	str	r2, [r3, #36]	@ 0x24
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             (fix16_mul(params->m_Mean_Variance_Estimator__Gamma_Mean,
                        delta_sgp)));
    }
}
 8002ef8:	e088      	b.n	800300c <VocAlgorithm__mean_variance_estimator__process+0x144>
        if (((params->m_Mean_Variance_Estimator___Mean >= F16(100.)) ||
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efe:	f5b3 0fc8 	cmp.w	r3, #6553600	@ 0x640000
 8002f02:	da04      	bge.n	8002f0e <VocAlgorithm__mean_variance_estimator__process+0x46>
             (params->m_Mean_Variance_Estimator___Mean <= F16(-100.)))) {
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if (((params->m_Mean_Variance_Estimator___Mean >= F16(100.)) ||
 8002f08:	f513 0fc8 	cmn.w	r3, #6553600	@ 0x640000
 8002f0c:	dc09      	bgt.n	8002f22 <VocAlgorithm__mean_variance_estimator__process+0x5a>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
                 params->m_Mean_Variance_Estimator___Mean);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8002f16:	441a      	add	r2, r3
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	629a      	str	r2, [r3, #40]	@ 0x28
            params->m_Mean_Variance_Estimator___Mean = F16(0.);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	625a      	str	r2, [r3, #36]	@ 0x24
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f26:	68ba      	ldr	r2, [r7, #8]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	60bb      	str	r3, [r7, #8]
        VocAlgorithm__mean_variance_estimator___calculate_gamma(
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f7ff fef6 	bl	8002d20 <VocAlgorithm__mean_variance_estimator___calculate_gamma>
            (sraw - params->m_Mean_Variance_Estimator___Mean),
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        delta_sgp = (fix16_div(
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff fd2d 	bl	80029a0 <fix16_div>
 8002f46:	6178      	str	r0, [r7, #20]
        if ((delta_sgp < F16(0.))) {
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	da05      	bge.n	8002f5a <VocAlgorithm__mean_variance_estimator__process+0x92>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	61fb      	str	r3, [r7, #28]
 8002f58:	e004      	b.n	8002f64 <VocAlgorithm__mean_variance_estimator__process+0x9c>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	4413      	add	r3, r2
 8002f62:	61fb      	str	r3, [r7, #28]
        additional_scaling = F16(1.);
 8002f64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002f68:	61bb      	str	r3, [r7, #24]
        if ((c > F16(1440.))) {
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	f1b3 6fb4 	cmp.w	r3, #94371840	@ 0x5a00000
 8002f70:	dd02      	ble.n	8002f78 <VocAlgorithm__mean_variance_estimator__process+0xb0>
            additional_scaling = F16(4.);
 8002f72:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002f76:	61bb      	str	r3, [r7, #24]
                 params->m_Mean_Variance_Estimator__Gamma_Variance)))),
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Std = (fix16_mul(
 8002f7c:	f5c3 0380 	rsb	r3, r3, #4194304	@ 0x400000
 8002f80:	4619      	mov	r1, r3
 8002f82:	69b8      	ldr	r0, [r7, #24]
 8002f84:	f7ff fca8 	bl	80028d8 <fix16_mul>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff fd80 	bl	8002a90 <fix16_sqrt>
 8002f90:	4606      	mov	r6, r0
                (fix16_mul(
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 8002f9a:	69b9      	ldr	r1, [r7, #24]
 8002f9c:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8002fa0:	f7ff fc9a 	bl	80028d8 <fix16_mul>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4628      	mov	r0, r5
 8002faa:	f7ff fcf9 	bl	80029a0 <fix16_div>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4620      	mov	r0, r4
 8002fb4:	f7ff fc90 	bl	80028d8 <fix16_mul>
 8002fb8:	4604      	mov	r4, r0
                (fix16_mul(
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fbe:	6979      	ldr	r1, [r7, #20]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff fc89 	bl	80028d8 <fix16_mul>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	69b9      	ldr	r1, [r7, #24]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff fce8 	bl	80029a0 <fix16_div>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	6979      	ldr	r1, [r7, #20]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff fc7f 	bl	80028d8 <fix16_mul>
 8002fda:	4603      	mov	r3, r0
        params->m_Mean_Variance_Estimator___Std = (fix16_mul(
 8002fdc:	4423      	add	r3, r4
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff fd56 	bl	8002a90 <fix16_sqrt>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4630      	mov	r0, r6
 8002fea:	f7ff fc75 	bl	80028d8 <fix16_mul>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	62da      	str	r2, [r3, #44]	@ 0x2c
            (params->m_Mean_Variance_Estimator___Mean +
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
             (fix16_mul(params->m_Mean_Variance_Estimator__Gamma_Mean,
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ffc:	6979      	ldr	r1, [r7, #20]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff fc6a 	bl	80028d8 <fix16_mul>
 8003004:	4603      	mov	r3, r0
            (params->m_Mean_Variance_Estimator___Mean +
 8003006:	18e2      	adds	r2, r4, r3
        params->m_Mean_Variance_Estimator___Mean =
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800300c:	bf00      	nop
 800300e:	3724      	adds	r7, #36	@ 0x24
 8003010:	46bd      	mov	sp, r7
 8003012:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003014 <VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:
    VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
        params, F16(0.), F16(0.), F16(0.));
}

static void VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    VocAlgorithmParams* params, fix16_t L, fix16_t X0, fix16_t K) {
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
 8003020:	603b      	str	r3, [r7, #0]

    params->m_Mean_Variance_Estimator___Sigmoid__L = L;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	68ba      	ldr	r2, [r7, #8]
 8003026:	651a      	str	r2, [r3, #80]	@ 0x50
    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	655a      	str	r2, [r3, #84]	@ 0x54
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8003034:	bf00      	nop
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <VocAlgorithm__mean_variance_estimator___sigmoid__process>:

static fix16_t VocAlgorithm__mean_variance_estimator___sigmoid__process(
    VocAlgorithmParams* params, fix16_t sample) {
 8003040:	b590      	push	{r4, r7, lr}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]

    fix16_t x;

    x = (fix16_mul(params->m_Mean_Variance_Estimator___Sigmoid__K,
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
                   (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0)));
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
    x = (fix16_mul(params->m_Mean_Variance_Estimator___Sigmoid__K,
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	4619      	mov	r1, r3
 8003058:	f7ff fc3e 	bl	80028d8 <fix16_mul>
 800305c:	60f8      	str	r0, [r7, #12]
    if ((x < F16(-50.))) {
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f513 1f48 	cmn.w	r3, #3276800	@ 0x320000
 8003064:	da02      	bge.n	800306c <VocAlgorithm__mean_variance_estimator___sigmoid__process+0x2c>
        return params->m_Mean_Variance_Estimator___Sigmoid__L;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800306a:	e012      	b.n	8003092 <VocAlgorithm__mean_variance_estimator___sigmoid__process+0x52>
    } else if ((x > F16(50.))) {
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8003072:	dd01      	ble.n	8003078 <VocAlgorithm__mean_variance_estimator___sigmoid__process+0x38>
        return F16(0.);
 8003074:	2300      	movs	r3, #0
 8003076:	e00c      	b.n	8003092 <VocAlgorithm__mean_variance_estimator___sigmoid__process+0x52>
    } else {
        return (fix16_div(params->m_Mean_Variance_Estimator___Sigmoid__L,
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
                          (F16(1.) + fix16_exp(x))));
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f7ff fd6b 	bl	8002b58 <fix16_exp>
 8003082:	4603      	mov	r3, r0
        return (fix16_div(params->m_Mean_Variance_Estimator___Sigmoid__L,
 8003084:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8003088:	4619      	mov	r1, r3
 800308a:	4620      	mov	r0, r4
 800308c:	f7ff fc88 	bl	80029a0 <fix16_div>
 8003090:	4603      	mov	r3, r0
    }
}
 8003092:	4618      	mov	r0, r3
 8003094:	3714      	adds	r7, #20
 8003096:	46bd      	mov	sp, r7
 8003098:	bd90      	pop	{r4, r7, pc}

0800309a <VocAlgorithm__mox_model__set_parameters>:
    VocAlgorithm__mox_model__set_parameters(params, F16(1.), F16(0.));
}

static void VocAlgorithm__mox_model__set_parameters(VocAlgorithmParams* params,
                                                    fix16_t SRAW_STD,
                                                    fix16_t SRAW_MEAN) {
 800309a:	b480      	push	{r7}
 800309c:	b085      	sub	sp, #20
 800309e:	af00      	add	r7, sp, #0
 80030a0:	60f8      	str	r0, [r7, #12]
 80030a2:	60b9      	str	r1, [r7, #8]
 80030a4:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	68ba      	ldr	r2, [r7, #8]
 80030aa:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	661a      	str	r2, [r3, #96]	@ 0x60
}
 80030b2:	bf00      	nop
 80030b4:	3714      	adds	r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <VocAlgorithm__mox_model__process>:

static fix16_t VocAlgorithm__mox_model__process(VocAlgorithmParams* params,
                                                fix16_t sraw) {
 80030be:	b580      	push	{r7, lr}
 80030c0:	b082      	sub	sp, #8
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
 80030c6:	6039      	str	r1, [r7, #0]

    return (fix16_mul((fix16_div((sraw - params->m_Mox_Model__Sraw_Mean),
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	1ad2      	subs	r2, r2, r3
                                 (-(params->m_Mox_Model__Sraw_Std +
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
    return (fix16_mul((fix16_div((sraw - params->m_Mox_Model__Sraw_Mean),
 80030d4:	f1c3 437f 	rsb	r3, r3, #4278190080	@ 0xff000000
 80030d8:	f503 1310 	add.w	r3, r3, #2359296	@ 0x240000
 80030dc:	4619      	mov	r1, r3
 80030de:	4610      	mov	r0, r2
 80030e0:	f7ff fc5e 	bl	80029a0 <fix16_div>
 80030e4:	4603      	mov	r3, r0
 80030e6:	f44f 0166 	mov.w	r1, #15073280	@ 0xe60000
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff fbf4 	bl	80028d8 <fix16_mul>
 80030f0:	4603      	mov	r3, r0
                                    F16(VocAlgorithm_SRAW_STD_BONUS))))),
                      F16(VocAlgorithm_VOC_INDEX_GAIN)));
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
	...

080030fc <VocAlgorithm__sigmoid_scaled__process>:

    params->m_Sigmoid_Scaled__Offset = offset;
}

static fix16_t VocAlgorithm__sigmoid_scaled__process(VocAlgorithmParams* params,
                                                     fix16_t sample) {
 80030fc:	b590      	push	{r4, r7, lr}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]

    fix16_t x;
    fix16_t shift;

    x = (fix16_mul(F16(VocAlgorithm_SIGMOID_K),
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	f5a3 0355 	sub.w	r3, r3, #13959168	@ 0xd50000
 800310c:	4619      	mov	r1, r3
 800310e:	4829      	ldr	r0, [pc, #164]	@ (80031b4 <VocAlgorithm__sigmoid_scaled__process+0xb8>)
 8003110:	f7ff fbe2 	bl	80028d8 <fix16_mul>
 8003114:	60f8      	str	r0, [r7, #12]
                   (sample - F16(VocAlgorithm_SIGMOID_X0))));
    if ((x < F16(-50.))) {
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f513 1f48 	cmn.w	r3, #3276800	@ 0x320000
 800311c:	da02      	bge.n	8003124 <VocAlgorithm__sigmoid_scaled__process+0x28>
        return F16(VocAlgorithm_SIGMOID_L);
 800311e:	f04f 73fa 	mov.w	r3, #32768000	@ 0x1f40000
 8003122:	e042      	b.n	80031aa <VocAlgorithm__sigmoid_scaled__process+0xae>
    } else if ((x > F16(50.))) {
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 800312a:	dd01      	ble.n	8003130 <VocAlgorithm__sigmoid_scaled__process+0x34>
        return F16(0.);
 800312c:	2300      	movs	r3, #0
 800312e:	e03c      	b.n	80031aa <VocAlgorithm__sigmoid_scaled__process+0xae>
    } else {
        if ((sample >= F16(0.))) {
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	db20      	blt.n	8003178 <VocAlgorithm__sigmoid_scaled__process+0x7c>
            shift = (fix16_div(
                (F16(VocAlgorithm_SIGMOID_L) -
                 (fix16_mul(F16(5.), params->m_Sigmoid_Scaled__Offset))),
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800313a:	4619      	mov	r1, r3
 800313c:	f44f 20a0 	mov.w	r0, #327680	@ 0x50000
 8003140:	f7ff fbca 	bl	80028d8 <fix16_mul>
 8003144:	4603      	mov	r3, r0
            shift = (fix16_div(
 8003146:	f1c3 73fa 	rsb	r3, r3, #32768000	@ 0x1f40000
 800314a:	f44f 2180 	mov.w	r1, #262144	@ 0x40000
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff fc26 	bl	80029a0 <fix16_div>
 8003154:	60b8      	str	r0, [r7, #8]
                F16(4.)));
            return ((fix16_div((F16(VocAlgorithm_SIGMOID_L) + shift),
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	f103 74fa 	add.w	r4, r3, #32768000	@ 0x1f40000
                               (F16(1.) + fix16_exp(x)))) -
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f7ff fcfb 	bl	8002b58 <fix16_exp>
 8003162:	4603      	mov	r3, r0
            return ((fix16_div((F16(VocAlgorithm_SIGMOID_L) + shift),
 8003164:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8003168:	4619      	mov	r1, r3
 800316a:	4620      	mov	r0, r4
 800316c:	f7ff fc18 	bl	80029a0 <fix16_div>
 8003170:	4602      	mov	r2, r0
                               (F16(1.) + fix16_exp(x)))) -
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	e018      	b.n	80031aa <VocAlgorithm__sigmoid_scaled__process+0xae>
                    shift);
        } else {
            return (fix16_mul(
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800317c:	f44f 01c8 	mov.w	r1, #6553600	@ 0x640000
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff fc0d 	bl	80029a0 <fix16_div>
 8003186:	4604      	mov	r4, r0
                (fix16_div(params->m_Sigmoid_Scaled__Offset,
                           F16(VocAlgorithm_VOC_INDEX_OFFSET_DEFAULT))),
                (fix16_div(F16(VocAlgorithm_SIGMOID_L),
                           (F16(1.) + fix16_exp(x))))));
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f7ff fce5 	bl	8002b58 <fix16_exp>
 800318e:	4603      	mov	r3, r0
            return (fix16_mul(
 8003190:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8003194:	4619      	mov	r1, r3
 8003196:	f04f 70fa 	mov.w	r0, #32768000	@ 0x1f40000
 800319a:	f7ff fc01 	bl	80029a0 <fix16_div>
 800319e:	4603      	mov	r3, r0
 80031a0:	4619      	mov	r1, r3
 80031a2:	4620      	mov	r0, r4
 80031a4:	f7ff fb98 	bl	80028d8 <fix16_mul>
 80031a8:	4603      	mov	r3, r0
        }
    }
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd90      	pop	{r4, r7, pc}
 80031b2:	bf00      	nop
 80031b4:	fffffe56 	.word	0xfffffe56

080031b8 <VocAlgorithm__adaptive_lowpass__process>:
    params->m_Adaptive_Lowpass___Initialized = false;
}

static fix16_t
VocAlgorithm__adaptive_lowpass__process(VocAlgorithmParams* params,
                                        fix16_t sample) {
 80031b8:	b590      	push	{r4, r7, lr}
 80031ba:	b087      	sub	sp, #28
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
    fix16_t abs_delta;
    fix16_t F1;
    fix16_t tau_a;
    fix16_t a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80031c8:	f083 0301 	eor.w	r3, r3, #1
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00c      	beq.n	80031ec <VocAlgorithm__adaptive_lowpass__process+0x34>
        params->m_Adaptive_Lowpass___X1 = sample;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	675a      	str	r2, [r3, #116]	@ 0x74
        params->m_Adaptive_Lowpass___X2 = sample;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	679a      	str	r2, [r3, #120]	@ 0x78
        params->m_Adaptive_Lowpass___X3 = sample;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	67da      	str	r2, [r3, #124]	@ 0x7c
        params->m_Adaptive_Lowpass___Initialized = true;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
    }
    params->m_Adaptive_Lowpass___X1 =
        ((fix16_mul((F16(1.) - params->m_Adaptive_Lowpass__A1),
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80031f0:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031f8:	4619      	mov	r1, r3
 80031fa:	4610      	mov	r0, r2
 80031fc:	f7ff fb6c 	bl	80028d8 <fix16_mul>
 8003200:	4604      	mov	r4, r0
                    params->m_Adaptive_Lowpass___X1)) +
         (fix16_mul(params->m_Adaptive_Lowpass__A1, sample)));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003206:	6839      	ldr	r1, [r7, #0]
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff fb65 	bl	80028d8 <fix16_mul>
 800320e:	4603      	mov	r3, r0
                    params->m_Adaptive_Lowpass___X1)) +
 8003210:	18e2      	adds	r2, r4, r3
    params->m_Adaptive_Lowpass___X1 =
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	675a      	str	r2, [r3, #116]	@ 0x74
    params->m_Adaptive_Lowpass___X2 =
        ((fix16_mul((F16(1.) - params->m_Adaptive_Lowpass__A2),
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800321a:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003222:	4619      	mov	r1, r3
 8003224:	4610      	mov	r0, r2
 8003226:	f7ff fb57 	bl	80028d8 <fix16_mul>
 800322a:	4604      	mov	r4, r0
                    params->m_Adaptive_Lowpass___X2)) +
         (fix16_mul(params->m_Adaptive_Lowpass__A2, sample)));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003230:	6839      	ldr	r1, [r7, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f7ff fb50 	bl	80028d8 <fix16_mul>
 8003238:	4603      	mov	r3, r0
                    params->m_Adaptive_Lowpass___X2)) +
 800323a:	18e2      	adds	r2, r4, r3
    params->m_Adaptive_Lowpass___X2 =
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	679a      	str	r2, [r3, #120]	@ 0x78
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
    abs_delta =
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	617b      	str	r3, [r7, #20]
    if ((abs_delta < F16(0.))) {
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	2b00      	cmp	r3, #0
 8003250:	da02      	bge.n	8003258 <VocAlgorithm__adaptive_lowpass__process+0xa0>
        abs_delta = (-abs_delta);
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	425b      	negs	r3, r3
 8003256:	617b      	str	r3, [r7, #20]
    }
    F1 = fix16_exp((fix16_mul(F16(VocAlgorithm_LP_ALPHA), abs_delta)));
 8003258:	6979      	ldr	r1, [r7, #20]
 800325a:	4819      	ldr	r0, [pc, #100]	@ (80032c0 <VocAlgorithm__adaptive_lowpass__process+0x108>)
 800325c:	f7ff fb3c 	bl	80028d8 <fix16_mul>
 8003260:	4603      	mov	r3, r0
 8003262:	4618      	mov	r0, r3
 8003264:	f7ff fc78 	bl	8002b58 <fix16_exp>
 8003268:	6138      	str	r0, [r7, #16]
    tau_a =
        ((fix16_mul(F16((VocAlgorithm_LP_TAU_SLOW - VocAlgorithm_LP_TAU_FAST)),
 800326a:	6939      	ldr	r1, [r7, #16]
 800326c:	f04f 70f0 	mov.w	r0, #31457280	@ 0x1e00000
 8003270:	f7ff fb32 	bl	80028d8 <fix16_mul>
 8003274:	4603      	mov	r3, r0
    tau_a =
 8003276:	f503 13a0 	add.w	r3, r3, #1310720	@ 0x140000
 800327a:	60fb      	str	r3, [r7, #12]
                    F1)) +
         F16(VocAlgorithm_LP_TAU_FAST));
    a3 = (fix16_div(F16(VocAlgorithm_SAMPLING_INTERVAL),
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8003282:	4619      	mov	r1, r3
 8003284:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8003288:	f7ff fb8a 	bl	80029a0 <fix16_div>
 800328c:	60b8      	str	r0, [r7, #8]
                    (F16(VocAlgorithm_SAMPLING_INTERVAL) + tau_a)));
    params->m_Adaptive_Lowpass___X3 =
        ((fix16_mul((F16(1.) - a3), params->m_Adaptive_Lowpass___X3)) +
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003298:	4619      	mov	r1, r3
 800329a:	4610      	mov	r0, r2
 800329c:	f7ff fb1c 	bl	80028d8 <fix16_mul>
 80032a0:	4604      	mov	r4, r0
         (fix16_mul(a3, sample)));
 80032a2:	6839      	ldr	r1, [r7, #0]
 80032a4:	68b8      	ldr	r0, [r7, #8]
 80032a6:	f7ff fb17 	bl	80028d8 <fix16_mul>
 80032aa:	4603      	mov	r3, r0
        ((fix16_mul((F16(1.) - a3), params->m_Adaptive_Lowpass___X3)) +
 80032ac:	18e2      	adds	r2, r4, r3
    params->m_Adaptive_Lowpass___X3 =
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	67da      	str	r2, [r3, #124]	@ 0x7c
    return params->m_Adaptive_Lowpass___X3;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	371c      	adds	r7, #28
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd90      	pop	{r4, r7, pc}
 80032be:	bf00      	nop
 80032c0:	ffffcccd 	.word	0xffffcccd

080032c4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80032c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003338 <MX_SPI2_Init+0x74>)
 80032ca:	4a1c      	ldr	r2, [pc, #112]	@ (800333c <MX_SPI2_Init+0x78>)
 80032cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80032ce:	4b1a      	ldr	r3, [pc, #104]	@ (8003338 <MX_SPI2_Init+0x74>)
 80032d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80032d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80032d6:	4b18      	ldr	r3, [pc, #96]	@ (8003338 <MX_SPI2_Init+0x74>)
 80032d8:	2200      	movs	r2, #0
 80032da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80032dc:	4b16      	ldr	r3, [pc, #88]	@ (8003338 <MX_SPI2_Init+0x74>)
 80032de:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80032e2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80032e4:	4b14      	ldr	r3, [pc, #80]	@ (8003338 <MX_SPI2_Init+0x74>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80032ea:	4b13      	ldr	r3, [pc, #76]	@ (8003338 <MX_SPI2_Init+0x74>)
 80032ec:	2201      	movs	r2, #1
 80032ee:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80032f0:	4b11      	ldr	r3, [pc, #68]	@ (8003338 <MX_SPI2_Init+0x74>)
 80032f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032f6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80032f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003338 <MX_SPI2_Init+0x74>)
 80032fa:	2228      	movs	r2, #40	@ 0x28
 80032fc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80032fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003338 <MX_SPI2_Init+0x74>)
 8003300:	2200      	movs	r2, #0
 8003302:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003304:	4b0c      	ldr	r3, [pc, #48]	@ (8003338 <MX_SPI2_Init+0x74>)
 8003306:	2200      	movs	r2, #0
 8003308:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800330a:	4b0b      	ldr	r3, [pc, #44]	@ (8003338 <MX_SPI2_Init+0x74>)
 800330c:	2200      	movs	r2, #0
 800330e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003310:	4b09      	ldr	r3, [pc, #36]	@ (8003338 <MX_SPI2_Init+0x74>)
 8003312:	2207      	movs	r2, #7
 8003314:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003316:	4b08      	ldr	r3, [pc, #32]	@ (8003338 <MX_SPI2_Init+0x74>)
 8003318:	2200      	movs	r2, #0
 800331a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800331c:	4b06      	ldr	r3, [pc, #24]	@ (8003338 <MX_SPI2_Init+0x74>)
 800331e:	2200      	movs	r2, #0
 8003320:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003322:	4805      	ldr	r0, [pc, #20]	@ (8003338 <MX_SPI2_Init+0x74>)
 8003324:	f006 fc0a 	bl	8009b3c <HAL_SPI_Init>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800332e:	f7ff facd 	bl	80028cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003332:	bf00      	nop
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	20000a58 	.word	0x20000a58
 800333c:	40003800 	.word	0x40003800

08003340 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b08a      	sub	sp, #40	@ 0x28
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003348:	f107 0314 	add.w	r3, r7, #20
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	605a      	str	r2, [r3, #4]
 8003352:	609a      	str	r2, [r3, #8]
 8003354:	60da      	str	r2, [r3, #12]
 8003356:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a25      	ldr	r2, [pc, #148]	@ (80033f4 <HAL_SPI_MspInit+0xb4>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d144      	bne.n	80033ec <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003362:	4b25      	ldr	r3, [pc, #148]	@ (80033f8 <HAL_SPI_MspInit+0xb8>)
 8003364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003366:	4a24      	ldr	r2, [pc, #144]	@ (80033f8 <HAL_SPI_MspInit+0xb8>)
 8003368:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800336c:	6593      	str	r3, [r2, #88]	@ 0x58
 800336e:	4b22      	ldr	r3, [pc, #136]	@ (80033f8 <HAL_SPI_MspInit+0xb8>)
 8003370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003372:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003376:	613b      	str	r3, [r7, #16]
 8003378:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800337a:	4b1f      	ldr	r3, [pc, #124]	@ (80033f8 <HAL_SPI_MspInit+0xb8>)
 800337c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800337e:	4a1e      	ldr	r2, [pc, #120]	@ (80033f8 <HAL_SPI_MspInit+0xb8>)
 8003380:	f043 0304 	orr.w	r3, r3, #4
 8003384:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003386:	4b1c      	ldr	r3, [pc, #112]	@ (80033f8 <HAL_SPI_MspInit+0xb8>)
 8003388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800338a:	f003 0304 	and.w	r3, r3, #4
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003392:	4b19      	ldr	r3, [pc, #100]	@ (80033f8 <HAL_SPI_MspInit+0xb8>)
 8003394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003396:	4a18      	ldr	r2, [pc, #96]	@ (80033f8 <HAL_SPI_MspInit+0xb8>)
 8003398:	f043 0302 	orr.w	r3, r3, #2
 800339c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800339e:	4b16      	ldr	r3, [pc, #88]	@ (80033f8 <HAL_SPI_MspInit+0xb8>)
 80033a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	60bb      	str	r3, [r7, #8]
 80033a8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80033aa:	230c      	movs	r3, #12
 80033ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ae:	2302      	movs	r3, #2
 80033b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b2:	2300      	movs	r3, #0
 80033b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033b6:	2303      	movs	r3, #3
 80033b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80033ba:	2305      	movs	r3, #5
 80033bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033be:	f107 0314 	add.w	r3, r7, #20
 80033c2:	4619      	mov	r1, r3
 80033c4:	480d      	ldr	r0, [pc, #52]	@ (80033fc <HAL_SPI_MspInit+0xbc>)
 80033c6:	f003 ffd3 	bl	8007370 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80033ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80033ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d0:	2302      	movs	r3, #2
 80033d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d4:	2300      	movs	r3, #0
 80033d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033d8:	2303      	movs	r3, #3
 80033da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80033dc:	2305      	movs	r3, #5
 80033de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033e0:	f107 0314 	add.w	r3, r7, #20
 80033e4:	4619      	mov	r1, r3
 80033e6:	4806      	ldr	r0, [pc, #24]	@ (8003400 <HAL_SPI_MspInit+0xc0>)
 80033e8:	f003 ffc2 	bl	8007370 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80033ec:	bf00      	nop
 80033ee:	3728      	adds	r7, #40	@ 0x28
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40003800 	.word	0x40003800
 80033f8:	40021000 	.word	0x40021000
 80033fc:	48000800 	.word	0x48000800
 8003400:	48000400 	.word	0x48000400

08003404 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800340a:	f000 fa27 	bl	800385c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800340e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8003412:	2201      	movs	r2, #1
 8003414:	2178      	movs	r1, #120	@ 0x78
 8003416:	485b      	ldr	r0, [pc, #364]	@ (8003584 <SSD1306_Init+0x180>)
 8003418:	f004 fc46 	bl	8007ca8 <HAL_I2C_IsDeviceReady>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8003422:	2300      	movs	r3, #0
 8003424:	e0a9      	b.n	800357a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8003426:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800342a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800342c:	e002      	b.n	8003434 <SSD1306_Init+0x30>
		p--;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	3b01      	subs	r3, #1
 8003432:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1f9      	bne.n	800342e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800343a:	22ae      	movs	r2, #174	@ 0xae
 800343c:	2100      	movs	r1, #0
 800343e:	2078      	movs	r0, #120	@ 0x78
 8003440:	f000 fa88 	bl	8003954 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8003444:	2220      	movs	r2, #32
 8003446:	2100      	movs	r1, #0
 8003448:	2078      	movs	r0, #120	@ 0x78
 800344a:	f000 fa83 	bl	8003954 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800344e:	2210      	movs	r2, #16
 8003450:	2100      	movs	r1, #0
 8003452:	2078      	movs	r0, #120	@ 0x78
 8003454:	f000 fa7e 	bl	8003954 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003458:	22b0      	movs	r2, #176	@ 0xb0
 800345a:	2100      	movs	r1, #0
 800345c:	2078      	movs	r0, #120	@ 0x78
 800345e:	f000 fa79 	bl	8003954 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8003462:	22c8      	movs	r2, #200	@ 0xc8
 8003464:	2100      	movs	r1, #0
 8003466:	2078      	movs	r0, #120	@ 0x78
 8003468:	f000 fa74 	bl	8003954 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800346c:	2200      	movs	r2, #0
 800346e:	2100      	movs	r1, #0
 8003470:	2078      	movs	r0, #120	@ 0x78
 8003472:	f000 fa6f 	bl	8003954 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8003476:	2210      	movs	r2, #16
 8003478:	2100      	movs	r1, #0
 800347a:	2078      	movs	r0, #120	@ 0x78
 800347c:	f000 fa6a 	bl	8003954 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8003480:	2240      	movs	r2, #64	@ 0x40
 8003482:	2100      	movs	r1, #0
 8003484:	2078      	movs	r0, #120	@ 0x78
 8003486:	f000 fa65 	bl	8003954 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800348a:	2281      	movs	r2, #129	@ 0x81
 800348c:	2100      	movs	r1, #0
 800348e:	2078      	movs	r0, #120	@ 0x78
 8003490:	f000 fa60 	bl	8003954 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8003494:	22ff      	movs	r2, #255	@ 0xff
 8003496:	2100      	movs	r1, #0
 8003498:	2078      	movs	r0, #120	@ 0x78
 800349a:	f000 fa5b 	bl	8003954 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800349e:	22a1      	movs	r2, #161	@ 0xa1
 80034a0:	2100      	movs	r1, #0
 80034a2:	2078      	movs	r0, #120	@ 0x78
 80034a4:	f000 fa56 	bl	8003954 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80034a8:	22a6      	movs	r2, #166	@ 0xa6
 80034aa:	2100      	movs	r1, #0
 80034ac:	2078      	movs	r0, #120	@ 0x78
 80034ae:	f000 fa51 	bl	8003954 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80034b2:	22a8      	movs	r2, #168	@ 0xa8
 80034b4:	2100      	movs	r1, #0
 80034b6:	2078      	movs	r0, #120	@ 0x78
 80034b8:	f000 fa4c 	bl	8003954 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80034bc:	223f      	movs	r2, #63	@ 0x3f
 80034be:	2100      	movs	r1, #0
 80034c0:	2078      	movs	r0, #120	@ 0x78
 80034c2:	f000 fa47 	bl	8003954 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80034c6:	22a4      	movs	r2, #164	@ 0xa4
 80034c8:	2100      	movs	r1, #0
 80034ca:	2078      	movs	r0, #120	@ 0x78
 80034cc:	f000 fa42 	bl	8003954 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80034d0:	22d3      	movs	r2, #211	@ 0xd3
 80034d2:	2100      	movs	r1, #0
 80034d4:	2078      	movs	r0, #120	@ 0x78
 80034d6:	f000 fa3d 	bl	8003954 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80034da:	2200      	movs	r2, #0
 80034dc:	2100      	movs	r1, #0
 80034de:	2078      	movs	r0, #120	@ 0x78
 80034e0:	f000 fa38 	bl	8003954 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80034e4:	22d5      	movs	r2, #213	@ 0xd5
 80034e6:	2100      	movs	r1, #0
 80034e8:	2078      	movs	r0, #120	@ 0x78
 80034ea:	f000 fa33 	bl	8003954 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80034ee:	22f0      	movs	r2, #240	@ 0xf0
 80034f0:	2100      	movs	r1, #0
 80034f2:	2078      	movs	r0, #120	@ 0x78
 80034f4:	f000 fa2e 	bl	8003954 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80034f8:	22d9      	movs	r2, #217	@ 0xd9
 80034fa:	2100      	movs	r1, #0
 80034fc:	2078      	movs	r0, #120	@ 0x78
 80034fe:	f000 fa29 	bl	8003954 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8003502:	2222      	movs	r2, #34	@ 0x22
 8003504:	2100      	movs	r1, #0
 8003506:	2078      	movs	r0, #120	@ 0x78
 8003508:	f000 fa24 	bl	8003954 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800350c:	22da      	movs	r2, #218	@ 0xda
 800350e:	2100      	movs	r1, #0
 8003510:	2078      	movs	r0, #120	@ 0x78
 8003512:	f000 fa1f 	bl	8003954 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8003516:	2212      	movs	r2, #18
 8003518:	2100      	movs	r1, #0
 800351a:	2078      	movs	r0, #120	@ 0x78
 800351c:	f000 fa1a 	bl	8003954 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8003520:	22db      	movs	r2, #219	@ 0xdb
 8003522:	2100      	movs	r1, #0
 8003524:	2078      	movs	r0, #120	@ 0x78
 8003526:	f000 fa15 	bl	8003954 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800352a:	2220      	movs	r2, #32
 800352c:	2100      	movs	r1, #0
 800352e:	2078      	movs	r0, #120	@ 0x78
 8003530:	f000 fa10 	bl	8003954 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8003534:	228d      	movs	r2, #141	@ 0x8d
 8003536:	2100      	movs	r1, #0
 8003538:	2078      	movs	r0, #120	@ 0x78
 800353a:	f000 fa0b 	bl	8003954 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800353e:	2214      	movs	r2, #20
 8003540:	2100      	movs	r1, #0
 8003542:	2078      	movs	r0, #120	@ 0x78
 8003544:	f000 fa06 	bl	8003954 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8003548:	22af      	movs	r2, #175	@ 0xaf
 800354a:	2100      	movs	r1, #0
 800354c:	2078      	movs	r0, #120	@ 0x78
 800354e:	f000 fa01 	bl	8003954 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8003552:	222e      	movs	r2, #46	@ 0x2e
 8003554:	2100      	movs	r1, #0
 8003556:	2078      	movs	r0, #120	@ 0x78
 8003558:	f000 f9fc 	bl	8003954 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800355c:	2000      	movs	r0, #0
 800355e:	f000 f843 	bl	80035e8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8003562:	f000 f813 	bl	800358c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8003566:	4b08      	ldr	r3, [pc, #32]	@ (8003588 <SSD1306_Init+0x184>)
 8003568:	2200      	movs	r2, #0
 800356a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800356c:	4b06      	ldr	r3, [pc, #24]	@ (8003588 <SSD1306_Init+0x184>)
 800356e:	2200      	movs	r2, #0
 8003570:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8003572:	4b05      	ldr	r3, [pc, #20]	@ (8003588 <SSD1306_Init+0x184>)
 8003574:	2201      	movs	r2, #1
 8003576:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8003578:	2301      	movs	r3, #1
}
 800357a:	4618      	mov	r0, r3
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	20000480 	.word	0x20000480
 8003588:	20000ebc 	.word	0x20000ebc

0800358c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8003592:	2300      	movs	r3, #0
 8003594:	71fb      	strb	r3, [r7, #7]
 8003596:	e01d      	b.n	80035d4 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8003598:	79fb      	ldrb	r3, [r7, #7]
 800359a:	3b50      	subs	r3, #80	@ 0x50
 800359c:	b2db      	uxtb	r3, r3
 800359e:	461a      	mov	r2, r3
 80035a0:	2100      	movs	r1, #0
 80035a2:	2078      	movs	r0, #120	@ 0x78
 80035a4:	f000 f9d6 	bl	8003954 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80035a8:	2200      	movs	r2, #0
 80035aa:	2100      	movs	r1, #0
 80035ac:	2078      	movs	r0, #120	@ 0x78
 80035ae:	f000 f9d1 	bl	8003954 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80035b2:	2210      	movs	r2, #16
 80035b4:	2100      	movs	r1, #0
 80035b6:	2078      	movs	r0, #120	@ 0x78
 80035b8:	f000 f9cc 	bl	8003954 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80035bc:	79fb      	ldrb	r3, [r7, #7]
 80035be:	01db      	lsls	r3, r3, #7
 80035c0:	4a08      	ldr	r2, [pc, #32]	@ (80035e4 <SSD1306_UpdateScreen+0x58>)
 80035c2:	441a      	add	r2, r3
 80035c4:	2380      	movs	r3, #128	@ 0x80
 80035c6:	2140      	movs	r1, #64	@ 0x40
 80035c8:	2078      	movs	r0, #120	@ 0x78
 80035ca:	f000 f95d 	bl	8003888 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80035ce:	79fb      	ldrb	r3, [r7, #7]
 80035d0:	3301      	adds	r3, #1
 80035d2:	71fb      	strb	r3, [r7, #7]
 80035d4:	79fb      	ldrb	r3, [r7, #7]
 80035d6:	2b07      	cmp	r3, #7
 80035d8:	d9de      	bls.n	8003598 <SSD1306_UpdateScreen+0xc>
	}
}
 80035da:	bf00      	nop
 80035dc:	bf00      	nop
 80035de:	3708      	adds	r7, #8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	20000abc 	.word	0x20000abc

080035e8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	4603      	mov	r3, r0
 80035f0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80035f2:	79fb      	ldrb	r3, [r7, #7]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <SSD1306_Fill+0x14>
 80035f8:	2300      	movs	r3, #0
 80035fa:	e000      	b.n	80035fe <SSD1306_Fill+0x16>
 80035fc:	23ff      	movs	r3, #255	@ 0xff
 80035fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003602:	4619      	mov	r1, r3
 8003604:	4803      	ldr	r0, [pc, #12]	@ (8003614 <SSD1306_Fill+0x2c>)
 8003606:	f010 ffd7 	bl	80145b8 <memset>
}
 800360a:	bf00      	nop
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	20000abc 	.word	0x20000abc

08003618 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	4603      	mov	r3, r0
 8003620:	80fb      	strh	r3, [r7, #6]
 8003622:	460b      	mov	r3, r1
 8003624:	80bb      	strh	r3, [r7, #4]
 8003626:	4613      	mov	r3, r2
 8003628:	70fb      	strb	r3, [r7, #3]
	if (
 800362a:	88fb      	ldrh	r3, [r7, #6]
 800362c:	2b7f      	cmp	r3, #127	@ 0x7f
 800362e:	d848      	bhi.n	80036c2 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8003630:	88bb      	ldrh	r3, [r7, #4]
 8003632:	2b3f      	cmp	r3, #63	@ 0x3f
 8003634:	d845      	bhi.n	80036c2 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8003636:	4b26      	ldr	r3, [pc, #152]	@ (80036d0 <SSD1306_DrawPixel+0xb8>)
 8003638:	791b      	ldrb	r3, [r3, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d006      	beq.n	800364c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800363e:	78fb      	ldrb	r3, [r7, #3]
 8003640:	2b00      	cmp	r3, #0
 8003642:	bf0c      	ite	eq
 8003644:	2301      	moveq	r3, #1
 8003646:	2300      	movne	r3, #0
 8003648:	b2db      	uxtb	r3, r3
 800364a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800364c:	78fb      	ldrb	r3, [r7, #3]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d11a      	bne.n	8003688 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003652:	88fa      	ldrh	r2, [r7, #6]
 8003654:	88bb      	ldrh	r3, [r7, #4]
 8003656:	08db      	lsrs	r3, r3, #3
 8003658:	b298      	uxth	r0, r3
 800365a:	4603      	mov	r3, r0
 800365c:	01db      	lsls	r3, r3, #7
 800365e:	4413      	add	r3, r2
 8003660:	4a1c      	ldr	r2, [pc, #112]	@ (80036d4 <SSD1306_DrawPixel+0xbc>)
 8003662:	5cd3      	ldrb	r3, [r2, r3]
 8003664:	b25a      	sxtb	r2, r3
 8003666:	88bb      	ldrh	r3, [r7, #4]
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	2101      	movs	r1, #1
 800366e:	fa01 f303 	lsl.w	r3, r1, r3
 8003672:	b25b      	sxtb	r3, r3
 8003674:	4313      	orrs	r3, r2
 8003676:	b259      	sxtb	r1, r3
 8003678:	88fa      	ldrh	r2, [r7, #6]
 800367a:	4603      	mov	r3, r0
 800367c:	01db      	lsls	r3, r3, #7
 800367e:	4413      	add	r3, r2
 8003680:	b2c9      	uxtb	r1, r1
 8003682:	4a14      	ldr	r2, [pc, #80]	@ (80036d4 <SSD1306_DrawPixel+0xbc>)
 8003684:	54d1      	strb	r1, [r2, r3]
 8003686:	e01d      	b.n	80036c4 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003688:	88fa      	ldrh	r2, [r7, #6]
 800368a:	88bb      	ldrh	r3, [r7, #4]
 800368c:	08db      	lsrs	r3, r3, #3
 800368e:	b298      	uxth	r0, r3
 8003690:	4603      	mov	r3, r0
 8003692:	01db      	lsls	r3, r3, #7
 8003694:	4413      	add	r3, r2
 8003696:	4a0f      	ldr	r2, [pc, #60]	@ (80036d4 <SSD1306_DrawPixel+0xbc>)
 8003698:	5cd3      	ldrb	r3, [r2, r3]
 800369a:	b25a      	sxtb	r2, r3
 800369c:	88bb      	ldrh	r3, [r7, #4]
 800369e:	f003 0307 	and.w	r3, r3, #7
 80036a2:	2101      	movs	r1, #1
 80036a4:	fa01 f303 	lsl.w	r3, r1, r3
 80036a8:	b25b      	sxtb	r3, r3
 80036aa:	43db      	mvns	r3, r3
 80036ac:	b25b      	sxtb	r3, r3
 80036ae:	4013      	ands	r3, r2
 80036b0:	b259      	sxtb	r1, r3
 80036b2:	88fa      	ldrh	r2, [r7, #6]
 80036b4:	4603      	mov	r3, r0
 80036b6:	01db      	lsls	r3, r3, #7
 80036b8:	4413      	add	r3, r2
 80036ba:	b2c9      	uxtb	r1, r1
 80036bc:	4a05      	ldr	r2, [pc, #20]	@ (80036d4 <SSD1306_DrawPixel+0xbc>)
 80036be:	54d1      	strb	r1, [r2, r3]
 80036c0:	e000      	b.n	80036c4 <SSD1306_DrawPixel+0xac>
		return;
 80036c2:	bf00      	nop
	}
}
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	20000ebc 	.word	0x20000ebc
 80036d4:	20000abc 	.word	0x20000abc

080036d8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	4603      	mov	r3, r0
 80036e0:	460a      	mov	r2, r1
 80036e2:	80fb      	strh	r3, [r7, #6]
 80036e4:	4613      	mov	r3, r2
 80036e6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80036e8:	4a05      	ldr	r2, [pc, #20]	@ (8003700 <SSD1306_GotoXY+0x28>)
 80036ea:	88fb      	ldrh	r3, [r7, #6]
 80036ec:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80036ee:	4a04      	ldr	r2, [pc, #16]	@ (8003700 <SSD1306_GotoXY+0x28>)
 80036f0:	88bb      	ldrh	r3, [r7, #4]
 80036f2:	8053      	strh	r3, [r2, #2]
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	20000ebc 	.word	0x20000ebc

08003704 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	4603      	mov	r3, r0
 800370c:	6039      	str	r1, [r7, #0]
 800370e:	71fb      	strb	r3, [r7, #7]
 8003710:	4613      	mov	r3, r2
 8003712:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003714:	4b39      	ldr	r3, [pc, #228]	@ (80037fc <SSD1306_Putc+0xf8>)
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	461a      	mov	r2, r3
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	4413      	add	r3, r2
	if (
 8003720:	2b7f      	cmp	r3, #127	@ 0x7f
 8003722:	dc07      	bgt.n	8003734 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8003724:	4b35      	ldr	r3, [pc, #212]	@ (80037fc <SSD1306_Putc+0xf8>)
 8003726:	885b      	ldrh	r3, [r3, #2]
 8003728:	461a      	mov	r2, r3
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	785b      	ldrb	r3, [r3, #1]
 800372e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003730:	2b3f      	cmp	r3, #63	@ 0x3f
 8003732:	dd01      	ble.n	8003738 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8003734:	2300      	movs	r3, #0
 8003736:	e05d      	b.n	80037f4 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8003738:	2300      	movs	r3, #0
 800373a:	617b      	str	r3, [r7, #20]
 800373c:	e04b      	b.n	80037d6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685a      	ldr	r2, [r3, #4]
 8003742:	79fb      	ldrb	r3, [r7, #7]
 8003744:	3b20      	subs	r3, #32
 8003746:	6839      	ldr	r1, [r7, #0]
 8003748:	7849      	ldrb	r1, [r1, #1]
 800374a:	fb01 f303 	mul.w	r3, r1, r3
 800374e:	4619      	mov	r1, r3
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	440b      	add	r3, r1
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	4413      	add	r3, r2
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800375c:	2300      	movs	r3, #0
 800375e:	613b      	str	r3, [r7, #16]
 8003760:	e030      	b.n	80037c4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	fa02 f303 	lsl.w	r3, r2, r3
 800376a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d010      	beq.n	8003794 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8003772:	4b22      	ldr	r3, [pc, #136]	@ (80037fc <SSD1306_Putc+0xf8>)
 8003774:	881a      	ldrh	r2, [r3, #0]
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	b29b      	uxth	r3, r3
 800377a:	4413      	add	r3, r2
 800377c:	b298      	uxth	r0, r3
 800377e:	4b1f      	ldr	r3, [pc, #124]	@ (80037fc <SSD1306_Putc+0xf8>)
 8003780:	885a      	ldrh	r2, [r3, #2]
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	b29b      	uxth	r3, r3
 8003786:	4413      	add	r3, r2
 8003788:	b29b      	uxth	r3, r3
 800378a:	79ba      	ldrb	r2, [r7, #6]
 800378c:	4619      	mov	r1, r3
 800378e:	f7ff ff43 	bl	8003618 <SSD1306_DrawPixel>
 8003792:	e014      	b.n	80037be <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8003794:	4b19      	ldr	r3, [pc, #100]	@ (80037fc <SSD1306_Putc+0xf8>)
 8003796:	881a      	ldrh	r2, [r3, #0]
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	b29b      	uxth	r3, r3
 800379c:	4413      	add	r3, r2
 800379e:	b298      	uxth	r0, r3
 80037a0:	4b16      	ldr	r3, [pc, #88]	@ (80037fc <SSD1306_Putc+0xf8>)
 80037a2:	885a      	ldrh	r2, [r3, #2]
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	4413      	add	r3, r2
 80037aa:	b299      	uxth	r1, r3
 80037ac:	79bb      	ldrb	r3, [r7, #6]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	bf0c      	ite	eq
 80037b2:	2301      	moveq	r3, #1
 80037b4:	2300      	movne	r3, #0
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	461a      	mov	r2, r3
 80037ba:	f7ff ff2d 	bl	8003618 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	3301      	adds	r3, #1
 80037c2:	613b      	str	r3, [r7, #16]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	461a      	mov	r2, r3
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d3c8      	bcc.n	8003762 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	3301      	adds	r3, #1
 80037d4:	617b      	str	r3, [r7, #20]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	785b      	ldrb	r3, [r3, #1]
 80037da:	461a      	mov	r2, r3
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	4293      	cmp	r3, r2
 80037e0:	d3ad      	bcc.n	800373e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80037e2:	4b06      	ldr	r3, [pc, #24]	@ (80037fc <SSD1306_Putc+0xf8>)
 80037e4:	881b      	ldrh	r3, [r3, #0]
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	7812      	ldrb	r2, [r2, #0]
 80037ea:	4413      	add	r3, r2
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	4b03      	ldr	r3, [pc, #12]	@ (80037fc <SSD1306_Putc+0xf8>)
 80037f0:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80037f2:	79fb      	ldrb	r3, [r7, #7]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3718      	adds	r7, #24
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	20000ebc 	.word	0x20000ebc

08003800 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	4613      	mov	r3, r2
 800380c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800380e:	e012      	b.n	8003836 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	79fa      	ldrb	r2, [r7, #7]
 8003816:	68b9      	ldr	r1, [r7, #8]
 8003818:	4618      	mov	r0, r3
 800381a:	f7ff ff73 	bl	8003704 <SSD1306_Putc>
 800381e:	4603      	mov	r3, r0
 8003820:	461a      	mov	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d002      	beq.n	8003830 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	e008      	b.n	8003842 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	3301      	adds	r3, #1
 8003834:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1e8      	bne.n	8003810 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	781b      	ldrb	r3, [r3, #0]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800384e:	2000      	movs	r0, #0
 8003850:	f7ff feca 	bl	80035e8 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8003854:	f7ff fe9a 	bl	800358c <SSD1306_UpdateScreen>
}
 8003858:	bf00      	nop
 800385a:	bd80      	pop	{r7, pc}

0800385c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8003862:	4b08      	ldr	r3, [pc, #32]	@ (8003884 <ssd1306_I2C_Init+0x28>)
 8003864:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003866:	e002      	b.n	800386e <ssd1306_I2C_Init+0x12>
		p--;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3b01      	subs	r3, #1
 800386c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1f9      	bne.n	8003868 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8003874:	bf00      	nop
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	0003d090 	.word	0x0003d090

08003888 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8003888:	b590      	push	{r4, r7, lr}
 800388a:	b0c7      	sub	sp, #284	@ 0x11c
 800388c:	af02      	add	r7, sp, #8
 800388e:	4604      	mov	r4, r0
 8003890:	4608      	mov	r0, r1
 8003892:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8003896:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 800389a:	600a      	str	r2, [r1, #0]
 800389c:	4619      	mov	r1, r3
 800389e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80038a2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80038a6:	4622      	mov	r2, r4
 80038a8:	701a      	strb	r2, [r3, #0]
 80038aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80038ae:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80038b2:	4602      	mov	r2, r0
 80038b4:	701a      	strb	r2, [r3, #0]
 80038b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80038ba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80038be:	460a      	mov	r2, r1
 80038c0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80038c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80038c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80038ca:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80038ce:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80038d2:	7812      	ldrb	r2, [r2, #0]
 80038d4:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80038d6:	2300      	movs	r3, #0
 80038d8:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80038dc:	e015      	b.n	800390a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80038de:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80038e2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80038e6:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80038ea:	6812      	ldr	r2, [r2, #0]
 80038ec:	441a      	add	r2, r3
 80038ee:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80038f2:	3301      	adds	r3, #1
 80038f4:	7811      	ldrb	r1, [r2, #0]
 80038f6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80038fa:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80038fe:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8003900:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003904:	3301      	adds	r3, #1
 8003906:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800390a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800390e:	b29b      	uxth	r3, r3
 8003910:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003914:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8003918:	8812      	ldrh	r2, [r2, #0]
 800391a:	429a      	cmp	r2, r3
 800391c:	d8df      	bhi.n	80038de <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800391e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003922:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	b299      	uxth	r1, r3
 800392a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800392e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003932:	881b      	ldrh	r3, [r3, #0]
 8003934:	3301      	adds	r3, #1
 8003936:	b29b      	uxth	r3, r3
 8003938:	f107 020c 	add.w	r2, r7, #12
 800393c:	200a      	movs	r0, #10
 800393e:	9000      	str	r0, [sp, #0]
 8003940:	4803      	ldr	r0, [pc, #12]	@ (8003950 <ssd1306_I2C_WriteMulti+0xc8>)
 8003942:	f003 ffa3 	bl	800788c <HAL_I2C_Master_Transmit>
}
 8003946:	bf00      	nop
 8003948:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800394c:	46bd      	mov	sp, r7
 800394e:	bd90      	pop	{r4, r7, pc}
 8003950:	20000480 	.word	0x20000480

08003954 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af02      	add	r7, sp, #8
 800395a:	4603      	mov	r3, r0
 800395c:	71fb      	strb	r3, [r7, #7]
 800395e:	460b      	mov	r3, r1
 8003960:	71bb      	strb	r3, [r7, #6]
 8003962:	4613      	mov	r3, r2
 8003964:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8003966:	79bb      	ldrb	r3, [r7, #6]
 8003968:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800396a:	797b      	ldrb	r3, [r7, #5]
 800396c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800396e:	79fb      	ldrb	r3, [r7, #7]
 8003970:	b299      	uxth	r1, r3
 8003972:	f107 020c 	add.w	r2, r7, #12
 8003976:	230a      	movs	r3, #10
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	2302      	movs	r3, #2
 800397c:	4803      	ldr	r0, [pc, #12]	@ (800398c <ssd1306_I2C_Write+0x38>)
 800397e:	f003 ff85 	bl	800788c <HAL_I2C_Master_Transmit>
}
 8003982:	bf00      	nop
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	20000480 	.word	0x20000480

08003990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003996:	4b0f      	ldr	r3, [pc, #60]	@ (80039d4 <HAL_MspInit+0x44>)
 8003998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800399a:	4a0e      	ldr	r2, [pc, #56]	@ (80039d4 <HAL_MspInit+0x44>)
 800399c:	f043 0301 	orr.w	r3, r3, #1
 80039a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80039a2:	4b0c      	ldr	r3, [pc, #48]	@ (80039d4 <HAL_MspInit+0x44>)
 80039a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	607b      	str	r3, [r7, #4]
 80039ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039ae:	4b09      	ldr	r3, [pc, #36]	@ (80039d4 <HAL_MspInit+0x44>)
 80039b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039b2:	4a08      	ldr	r2, [pc, #32]	@ (80039d4 <HAL_MspInit+0x44>)
 80039b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80039ba:	4b06      	ldr	r3, [pc, #24]	@ (80039d4 <HAL_MspInit+0x44>)
 80039bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039c2:	603b      	str	r3, [r7, #0]
 80039c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039c6:	bf00      	nop
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	40021000 	.word	0x40021000

080039d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80039dc:	bf00      	nop
 80039de:	e7fd      	b.n	80039dc <NMI_Handler+0x4>

080039e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039e4:	bf00      	nop
 80039e6:	e7fd      	b.n	80039e4 <HardFault_Handler+0x4>

080039e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039ec:	bf00      	nop
 80039ee:	e7fd      	b.n	80039ec <MemManage_Handler+0x4>

080039f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039f4:	bf00      	nop
 80039f6:	e7fd      	b.n	80039f4 <BusFault_Handler+0x4>

080039f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039fc:	bf00      	nop
 80039fe:	e7fd      	b.n	80039fc <UsageFault_Handler+0x4>

08003a00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a04:	bf00      	nop
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr

08003a0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a12:	bf00      	nop
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a20:	bf00      	nop
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a2e:	f000 ff23 	bl	8004878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a32:	bf00      	nop
 8003a34:	bd80      	pop	{r7, pc}
	...

08003a38 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8003a3c:	4802      	ldr	r0, [pc, #8]	@ (8003a48 <DMA1_Channel3_IRQHandler+0x10>)
 8003a3e:	f003 fbb8 	bl	80071b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003a42:	bf00      	nop
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	20001044 	.word	0x20001044

08003a4c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003a50:	4802      	ldr	r0, [pc, #8]	@ (8003a5c <ADC1_2_IRQHandler+0x10>)
 8003a52:	f001 fbd7 	bl	8005204 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003a56:	bf00      	nop
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	200003e0 	.word	0x200003e0

08003a60 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003a64:	4802      	ldr	r0, [pc, #8]	@ (8003a70 <CAN1_TX_IRQHandler+0x10>)
 8003a66:	f002 fecc 	bl	8006802 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8003a6a:	bf00      	nop
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	20000458 	.word	0x20000458

08003a74 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003a78:	4802      	ldr	r0, [pc, #8]	@ (8003a84 <CAN1_RX0_IRQHandler+0x10>)
 8003a7a:	f002 fec2 	bl	8006802 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003a7e:	bf00      	nop
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	20000458 	.word	0x20000458

08003a88 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003a8c:	4802      	ldr	r0, [pc, #8]	@ (8003a98 <CAN1_RX1_IRQHandler+0x10>)
 8003a8e:	f002 feb8 	bl	8006802 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8003a92:	bf00      	nop
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	20000458 	.word	0x20000458

08003a9c <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003aa0:	4802      	ldr	r0, [pc, #8]	@ (8003aac <CAN1_SCE_IRQHandler+0x10>)
 8003aa2:	f002 feae 	bl	8006802 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8003aa6:	bf00      	nop
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	20000458 	.word	0x20000458

08003ab0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003ab4:	4802      	ldr	r0, [pc, #8]	@ (8003ac0 <TIM3_IRQHandler+0x10>)
 8003ab6:	f007 fe09 	bl	800b6cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003aba:	bf00      	nop
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	20000f14 	.word	0x20000f14

08003ac4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003ac8:	4802      	ldr	r0, [pc, #8]	@ (8003ad4 <TIM4_IRQHandler+0x10>)
 8003aca:	f007 fdff 	bl	800b6cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003ace:	bf00      	nop
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	20000f60 	.word	0x20000f60

08003ad8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INTOF1_Pin);
 8003adc:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003ae0:	f003 fe20 	bl	8007724 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003ae4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003ae8:	f003 fe1c 	bl	8007724 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(btn_Pin_Pin);
 8003aec:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003af0:	f003 fe18 	bl	8007724 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003af4:	bf00      	nop
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003afc:	4802      	ldr	r0, [pc, #8]	@ (8003b08 <TIM6_DAC_IRQHandler+0x10>)
 8003afe:	f007 fde5 	bl	800b6cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003b02:	bf00      	nop
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	20000fac 	.word	0x20000fac

08003b0c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8003b10:	4802      	ldr	r0, [pc, #8]	@ (8003b1c <LPUART1_IRQHandler+0x10>)
 8003b12:	f009 f919 	bl	800cd48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8003b16:	bf00      	nop
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	200010d0 	.word	0x200010d0

08003b20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  return 1;
 8003b24:	2301      	movs	r3, #1
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <_kill>:

int _kill(int pid, int sig)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003b3a:	f010 fda3 	bl	8014684 <__errno>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2216      	movs	r2, #22
 8003b42:	601a      	str	r2, [r3, #0]
  return -1;
 8003b44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3708      	adds	r7, #8
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <_exit>:

void _exit (int status)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003b58:	f04f 31ff 	mov.w	r1, #4294967295
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f7ff ffe7 	bl	8003b30 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003b62:	bf00      	nop
 8003b64:	e7fd      	b.n	8003b62 <_exit+0x12>

08003b66 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b086      	sub	sp, #24
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	60f8      	str	r0, [r7, #12]
 8003b6e:	60b9      	str	r1, [r7, #8]
 8003b70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b72:	2300      	movs	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]
 8003b76:	e00a      	b.n	8003b8e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003b78:	f3af 8000 	nop.w
 8003b7c:	4601      	mov	r1, r0
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	1c5a      	adds	r2, r3, #1
 8003b82:	60ba      	str	r2, [r7, #8]
 8003b84:	b2ca      	uxtb	r2, r1
 8003b86:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	617b      	str	r3, [r7, #20]
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	dbf0      	blt.n	8003b78 <_read+0x12>
  }

  return len;
 8003b96:	687b      	ldr	r3, [r7, #4]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3718      	adds	r7, #24
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bac:	2300      	movs	r3, #0
 8003bae:	617b      	str	r3, [r7, #20]
 8003bb0:	e009      	b.n	8003bc6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	1c5a      	adds	r2, r3, #1
 8003bb6:	60ba      	str	r2, [r7, #8]
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	617b      	str	r3, [r7, #20]
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	dbf1      	blt.n	8003bb2 <_write+0x12>
  }
  return len;
 8003bce:	687b      	ldr	r3, [r7, #4]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3718      	adds	r7, #24
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <_close>:

int _close(int file)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003be0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003c00:	605a      	str	r2, [r3, #4]
  return 0;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <_isatty>:

int _isatty(int file)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003c18:	2301      	movs	r3, #1
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b085      	sub	sp, #20
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	60f8      	str	r0, [r7, #12]
 8003c2e:	60b9      	str	r1, [r7, #8]
 8003c30:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3714      	adds	r7, #20
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c48:	4a14      	ldr	r2, [pc, #80]	@ (8003c9c <_sbrk+0x5c>)
 8003c4a:	4b15      	ldr	r3, [pc, #84]	@ (8003ca0 <_sbrk+0x60>)
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c54:	4b13      	ldr	r3, [pc, #76]	@ (8003ca4 <_sbrk+0x64>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d102      	bne.n	8003c62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c5c:	4b11      	ldr	r3, [pc, #68]	@ (8003ca4 <_sbrk+0x64>)
 8003c5e:	4a12      	ldr	r2, [pc, #72]	@ (8003ca8 <_sbrk+0x68>)
 8003c60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c62:	4b10      	ldr	r3, [pc, #64]	@ (8003ca4 <_sbrk+0x64>)
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4413      	add	r3, r2
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d207      	bcs.n	8003c80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c70:	f010 fd08 	bl	8014684 <__errno>
 8003c74:	4603      	mov	r3, r0
 8003c76:	220c      	movs	r2, #12
 8003c78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c7e:	e009      	b.n	8003c94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c80:	4b08      	ldr	r3, [pc, #32]	@ (8003ca4 <_sbrk+0x64>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c86:	4b07      	ldr	r3, [pc, #28]	@ (8003ca4 <_sbrk+0x64>)
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	4a05      	ldr	r2, [pc, #20]	@ (8003ca4 <_sbrk+0x64>)
 8003c90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c92:	68fb      	ldr	r3, [r7, #12]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	20018000 	.word	0x20018000
 8003ca0:	00000400 	.word	0x00000400
 8003ca4:	20000ec4 	.word	0x20000ec4
 8003ca8:	20001430 	.word	0x20001430

08003cac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003cb0:	4b06      	ldr	r3, [pc, #24]	@ (8003ccc <SystemInit+0x20>)
 8003cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cb6:	4a05      	ldr	r2, [pc, #20]	@ (8003ccc <SystemInit+0x20>)
 8003cb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003cbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003cc0:	bf00      	nop
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	e000ed00 	.word	0xe000ed00

08003cd0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim8;
DMA_HandleTypeDef hdma_tim3_ch4_up;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b08e      	sub	sp, #56	@ 0x38
 8003cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003cd6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003cda:	2200      	movs	r2, #0
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	605a      	str	r2, [r3, #4]
 8003ce0:	609a      	str	r2, [r3, #8]
 8003ce2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ce4:	f107 031c 	add.w	r3, r7, #28
 8003ce8:	2200      	movs	r2, #0
 8003cea:	601a      	str	r2, [r3, #0]
 8003cec:	605a      	str	r2, [r3, #4]
 8003cee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003cf0:	463b      	mov	r3, r7
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	605a      	str	r2, [r3, #4]
 8003cf8:	609a      	str	r2, [r3, #8]
 8003cfa:	60da      	str	r2, [r3, #12]
 8003cfc:	611a      	str	r2, [r3, #16]
 8003cfe:	615a      	str	r2, [r3, #20]
 8003d00:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003d02:	4b2d      	ldr	r3, [pc, #180]	@ (8003db8 <MX_TIM2_Init+0xe8>)
 8003d04:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003d08:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003d0a:	4b2b      	ldr	r3, [pc, #172]	@ (8003db8 <MX_TIM2_Init+0xe8>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d10:	4b29      	ldr	r3, [pc, #164]	@ (8003db8 <MX_TIM2_Init+0xe8>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 80000-1;
 8003d16:	4b28      	ldr	r3, [pc, #160]	@ (8003db8 <MX_TIM2_Init+0xe8>)
 8003d18:	4a28      	ldr	r2, [pc, #160]	@ (8003dbc <MX_TIM2_Init+0xec>)
 8003d1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d1c:	4b26      	ldr	r3, [pc, #152]	@ (8003db8 <MX_TIM2_Init+0xe8>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d22:	4b25      	ldr	r3, [pc, #148]	@ (8003db8 <MX_TIM2_Init+0xe8>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003d28:	4823      	ldr	r0, [pc, #140]	@ (8003db8 <MX_TIM2_Init+0xe8>)
 8003d2a:	f006 fe33 	bl	800a994 <HAL_TIM_Base_Init>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003d34:	f7fe fdca 	bl	80028cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003d3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003d42:	4619      	mov	r1, r3
 8003d44:	481c      	ldr	r0, [pc, #112]	@ (8003db8 <MX_TIM2_Init+0xe8>)
 8003d46:	f007 fedd 	bl	800bb04 <HAL_TIM_ConfigClockSource>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d001      	beq.n	8003d54 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003d50:	f7fe fdbc 	bl	80028cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003d54:	4818      	ldr	r0, [pc, #96]	@ (8003db8 <MX_TIM2_Init+0xe8>)
 8003d56:	f006 fee5 	bl	800ab24 <HAL_TIM_PWM_Init>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003d60:	f7fe fdb4 	bl	80028cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d64:	2300      	movs	r3, #0
 8003d66:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003d6c:	f107 031c 	add.w	r3, r7, #28
 8003d70:	4619      	mov	r1, r3
 8003d72:	4811      	ldr	r0, [pc, #68]	@ (8003db8 <MX_TIM2_Init+0xe8>)
 8003d74:	f008 fcce 	bl	800c714 <HAL_TIMEx_MasterConfigSynchronization>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8003d7e:	f7fe fda5 	bl	80028cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d82:	2360      	movs	r3, #96	@ 0x60
 8003d84:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003d86:	2300      	movs	r3, #0
 8003d88:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d92:	463b      	mov	r3, r7
 8003d94:	2200      	movs	r2, #0
 8003d96:	4619      	mov	r1, r3
 8003d98:	4807      	ldr	r0, [pc, #28]	@ (8003db8 <MX_TIM2_Init+0xe8>)
 8003d9a:	f007 fd9f 	bl	800b8dc <HAL_TIM_PWM_ConfigChannel>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8003da4:	f7fe fd92 	bl	80028cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003da8:	4803      	ldr	r0, [pc, #12]	@ (8003db8 <MX_TIM2_Init+0xe8>)
 8003daa:	f000 fa8f 	bl	80042cc <HAL_TIM_MspPostInit>

}
 8003dae:	bf00      	nop
 8003db0:	3738      	adds	r7, #56	@ 0x38
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	20000ec8 	.word	0x20000ec8
 8003dbc:	0001387f 	.word	0x0001387f

08003dc0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b08e      	sub	sp, #56	@ 0x38
 8003dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003dc6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003dca:	2200      	movs	r2, #0
 8003dcc:	601a      	str	r2, [r3, #0]
 8003dce:	605a      	str	r2, [r3, #4]
 8003dd0:	609a      	str	r2, [r3, #8]
 8003dd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dd4:	f107 031c 	add.w	r3, r7, #28
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]
 8003ddc:	605a      	str	r2, [r3, #4]
 8003dde:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003de0:	463b      	mov	r3, r7
 8003de2:	2200      	movs	r2, #0
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	605a      	str	r2, [r3, #4]
 8003de8:	609a      	str	r2, [r3, #8]
 8003dea:	60da      	str	r2, [r3, #12]
 8003dec:	611a      	str	r2, [r3, #16]
 8003dee:	615a      	str	r2, [r3, #20]
 8003df0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003df2:	4b2c      	ldr	r3, [pc, #176]	@ (8003ea4 <MX_TIM3_Init+0xe4>)
 8003df4:	4a2c      	ldr	r2, [pc, #176]	@ (8003ea8 <MX_TIM3_Init+0xe8>)
 8003df6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 8003df8:	4b2a      	ldr	r3, [pc, #168]	@ (8003ea4 <MX_TIM3_Init+0xe4>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dfe:	4b29      	ldr	r3, [pc, #164]	@ (8003ea4 <MX_TIM3_Init+0xe4>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8003e04:	4b27      	ldr	r3, [pc, #156]	@ (8003ea4 <MX_TIM3_Init+0xe4>)
 8003e06:	2263      	movs	r2, #99	@ 0x63
 8003e08:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e0a:	4b26      	ldr	r3, [pc, #152]	@ (8003ea4 <MX_TIM3_Init+0xe4>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e10:	4b24      	ldr	r3, [pc, #144]	@ (8003ea4 <MX_TIM3_Init+0xe4>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003e16:	4823      	ldr	r0, [pc, #140]	@ (8003ea4 <MX_TIM3_Init+0xe4>)
 8003e18:	f006 fdbc 	bl	800a994 <HAL_TIM_Base_Init>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003e22:	f7fe fd53 	bl	80028cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003e2c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003e30:	4619      	mov	r1, r3
 8003e32:	481c      	ldr	r0, [pc, #112]	@ (8003ea4 <MX_TIM3_Init+0xe4>)
 8003e34:	f007 fe66 	bl	800bb04 <HAL_TIM_ConfigClockSource>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003e3e:	f7fe fd45 	bl	80028cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003e42:	4818      	ldr	r0, [pc, #96]	@ (8003ea4 <MX_TIM3_Init+0xe4>)
 8003e44:	f006 fe6e 	bl	800ab24 <HAL_TIM_PWM_Init>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003e4e:	f7fe fd3d 	bl	80028cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e52:	2300      	movs	r3, #0
 8003e54:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e56:	2300      	movs	r3, #0
 8003e58:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003e5a:	f107 031c 	add.w	r3, r7, #28
 8003e5e:	4619      	mov	r1, r3
 8003e60:	4810      	ldr	r0, [pc, #64]	@ (8003ea4 <MX_TIM3_Init+0xe4>)
 8003e62:	f008 fc57 	bl	800c714 <HAL_TIMEx_MasterConfigSynchronization>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003e6c:	f7fe fd2e 	bl	80028cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e70:	2360      	movs	r3, #96	@ 0x60
 8003e72:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003e74:	2300      	movs	r3, #0
 8003e76:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003e80:	463b      	mov	r3, r7
 8003e82:	220c      	movs	r2, #12
 8003e84:	4619      	mov	r1, r3
 8003e86:	4807      	ldr	r0, [pc, #28]	@ (8003ea4 <MX_TIM3_Init+0xe4>)
 8003e88:	f007 fd28 	bl	800b8dc <HAL_TIM_PWM_ConfigChannel>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d001      	beq.n	8003e96 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8003e92:	f7fe fd1b 	bl	80028cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003e96:	4803      	ldr	r0, [pc, #12]	@ (8003ea4 <MX_TIM3_Init+0xe4>)
 8003e98:	f000 fa18 	bl	80042cc <HAL_TIM_MspPostInit>

}
 8003e9c:	bf00      	nop
 8003e9e:	3738      	adds	r7, #56	@ 0x38
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	20000f14 	.word	0x20000f14
 8003ea8:	40000400 	.word	0x40000400

08003eac <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b08e      	sub	sp, #56	@ 0x38
 8003eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003eb2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	605a      	str	r2, [r3, #4]
 8003ebc:	609a      	str	r2, [r3, #8]
 8003ebe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ec0:	f107 031c 	add.w	r3, r7, #28
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	605a      	str	r2, [r3, #4]
 8003eca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ecc:	463b      	mov	r3, r7
 8003ece:	2200      	movs	r2, #0
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	605a      	str	r2, [r3, #4]
 8003ed4:	609a      	str	r2, [r3, #8]
 8003ed6:	60da      	str	r2, [r3, #12]
 8003ed8:	611a      	str	r2, [r3, #16]
 8003eda:	615a      	str	r2, [r3, #20]
 8003edc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003ede:	4b2c      	ldr	r3, [pc, #176]	@ (8003f90 <MX_TIM4_Init+0xe4>)
 8003ee0:	4a2c      	ldr	r2, [pc, #176]	@ (8003f94 <MX_TIM4_Init+0xe8>)
 8003ee2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 800-1;
 8003ee4:	4b2a      	ldr	r3, [pc, #168]	@ (8003f90 <MX_TIM4_Init+0xe4>)
 8003ee6:	f240 321f 	movw	r2, #799	@ 0x31f
 8003eea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003eec:	4b28      	ldr	r3, [pc, #160]	@ (8003f90 <MX_TIM4_Init+0xe4>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8003ef2:	4b27      	ldr	r3, [pc, #156]	@ (8003f90 <MX_TIM4_Init+0xe4>)
 8003ef4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003ef8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003efa:	4b25      	ldr	r3, [pc, #148]	@ (8003f90 <MX_TIM4_Init+0xe4>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f00:	4b23      	ldr	r3, [pc, #140]	@ (8003f90 <MX_TIM4_Init+0xe4>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003f06:	4822      	ldr	r0, [pc, #136]	@ (8003f90 <MX_TIM4_Init+0xe4>)
 8003f08:	f006 fd44 	bl	800a994 <HAL_TIM_Base_Init>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 8003f12:	f7fe fcdb 	bl	80028cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003f1c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003f20:	4619      	mov	r1, r3
 8003f22:	481b      	ldr	r0, [pc, #108]	@ (8003f90 <MX_TIM4_Init+0xe4>)
 8003f24:	f007 fdee 	bl	800bb04 <HAL_TIM_ConfigClockSource>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d001      	beq.n	8003f32 <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 8003f2e:	f7fe fccd 	bl	80028cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003f32:	4817      	ldr	r0, [pc, #92]	@ (8003f90 <MX_TIM4_Init+0xe4>)
 8003f34:	f006 fdf6 	bl	800ab24 <HAL_TIM_PWM_Init>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8003f3e:	f7fe fcc5 	bl	80028cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f42:	2300      	movs	r3, #0
 8003f44:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f46:	2300      	movs	r3, #0
 8003f48:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003f4a:	f107 031c 	add.w	r3, r7, #28
 8003f4e:	4619      	mov	r1, r3
 8003f50:	480f      	ldr	r0, [pc, #60]	@ (8003f90 <MX_TIM4_Init+0xe4>)
 8003f52:	f008 fbdf 	bl	800c714 <HAL_TIMEx_MasterConfigSynchronization>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8003f5c:	f7fe fcb6 	bl	80028cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f60:	2360      	movs	r3, #96	@ 0x60
 8003f62:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003f64:	2300      	movs	r3, #0
 8003f66:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f70:	463b      	mov	r3, r7
 8003f72:	2200      	movs	r2, #0
 8003f74:	4619      	mov	r1, r3
 8003f76:	4806      	ldr	r0, [pc, #24]	@ (8003f90 <MX_TIM4_Init+0xe4>)
 8003f78:	f007 fcb0 	bl	800b8dc <HAL_TIM_PWM_ConfigChannel>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8003f82:	f7fe fca3 	bl	80028cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003f86:	bf00      	nop
 8003f88:	3738      	adds	r7, #56	@ 0x38
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	20000f60 	.word	0x20000f60
 8003f94:	40000800 	.word	0x40000800

08003f98 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f9e:	1d3b      	adds	r3, r7, #4
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	605a      	str	r2, [r3, #4]
 8003fa6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003fa8:	4b15      	ldr	r3, [pc, #84]	@ (8004000 <MX_TIM6_Init+0x68>)
 8003faa:	4a16      	ldr	r2, [pc, #88]	@ (8004004 <MX_TIM6_Init+0x6c>)
 8003fac:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8000-1;
 8003fae:	4b14      	ldr	r3, [pc, #80]	@ (8004000 <MX_TIM6_Init+0x68>)
 8003fb0:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8003fb4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fb6:	4b12      	ldr	r3, [pc, #72]	@ (8004000 <MX_TIM6_Init+0x68>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 8003fbc:	4b10      	ldr	r3, [pc, #64]	@ (8004000 <MX_TIM6_Init+0x68>)
 8003fbe:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003fc2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8004000 <MX_TIM6_Init+0x68>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003fca:	480d      	ldr	r0, [pc, #52]	@ (8004000 <MX_TIM6_Init+0x68>)
 8003fcc:	f006 fce2 	bl	800a994 <HAL_TIM_Base_Init>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8003fd6:	f7fe fc79 	bl	80028cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003fe2:	1d3b      	adds	r3, r7, #4
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	4806      	ldr	r0, [pc, #24]	@ (8004000 <MX_TIM6_Init+0x68>)
 8003fe8:	f008 fb94 	bl	800c714 <HAL_TIMEx_MasterConfigSynchronization>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8003ff2:	f7fe fc6b 	bl	80028cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003ff6:	bf00      	nop
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	20000fac 	.word	0x20000fac
 8004004:	40001000 	.word	0x40001000

08004008 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b09a      	sub	sp, #104	@ 0x68
 800400c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800400e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]
 8004016:	605a      	str	r2, [r3, #4]
 8004018:	609a      	str	r2, [r3, #8]
 800401a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800401c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8004020:	2200      	movs	r2, #0
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	605a      	str	r2, [r3, #4]
 8004026:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004028:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800402c:	2200      	movs	r2, #0
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	605a      	str	r2, [r3, #4]
 8004032:	609a      	str	r2, [r3, #8]
 8004034:	60da      	str	r2, [r3, #12]
 8004036:	611a      	str	r2, [r3, #16]
 8004038:	615a      	str	r2, [r3, #20]
 800403a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800403c:	1d3b      	adds	r3, r7, #4
 800403e:	222c      	movs	r2, #44	@ 0x2c
 8004040:	2100      	movs	r1, #0
 8004042:	4618      	mov	r0, r3
 8004044:	f010 fab8 	bl	80145b8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004048:	4b42      	ldr	r3, [pc, #264]	@ (8004154 <MX_TIM8_Init+0x14c>)
 800404a:	4a43      	ldr	r2, [pc, #268]	@ (8004158 <MX_TIM8_Init+0x150>)
 800404c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 2-1;
 800404e:	4b41      	ldr	r3, [pc, #260]	@ (8004154 <MX_TIM8_Init+0x14c>)
 8004050:	2201      	movs	r2, #1
 8004052:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004054:	4b3f      	ldr	r3, [pc, #252]	@ (8004154 <MX_TIM8_Init+0x14c>)
 8004056:	2200      	movs	r2, #0
 8004058:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 40000-1;
 800405a:	4b3e      	ldr	r3, [pc, #248]	@ (8004154 <MX_TIM8_Init+0x14c>)
 800405c:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8004060:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004062:	4b3c      	ldr	r3, [pc, #240]	@ (8004154 <MX_TIM8_Init+0x14c>)
 8004064:	2200      	movs	r2, #0
 8004066:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004068:	4b3a      	ldr	r3, [pc, #232]	@ (8004154 <MX_TIM8_Init+0x14c>)
 800406a:	2200      	movs	r2, #0
 800406c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800406e:	4b39      	ldr	r3, [pc, #228]	@ (8004154 <MX_TIM8_Init+0x14c>)
 8004070:	2200      	movs	r2, #0
 8004072:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8004074:	4837      	ldr	r0, [pc, #220]	@ (8004154 <MX_TIM8_Init+0x14c>)
 8004076:	f006 fc8d 	bl	800a994 <HAL_TIM_Base_Init>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8004080:	f7fe fc24 	bl	80028cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004084:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004088:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800408a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800408e:	4619      	mov	r1, r3
 8004090:	4830      	ldr	r0, [pc, #192]	@ (8004154 <MX_TIM8_Init+0x14c>)
 8004092:	f007 fd37 	bl	800bb04 <HAL_TIM_ConfigClockSource>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 800409c:	f7fe fc16 	bl	80028cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80040a0:	482c      	ldr	r0, [pc, #176]	@ (8004154 <MX_TIM8_Init+0x14c>)
 80040a2:	f006 fd3f 	bl	800ab24 <HAL_TIM_PWM_Init>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80040ac:	f7fe fc0e 	bl	80028cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040b0:	2300      	movs	r3, #0
 80040b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80040b4:	2300      	movs	r3, #0
 80040b6:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040b8:	2300      	movs	r3, #0
 80040ba:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80040bc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80040c0:	4619      	mov	r1, r3
 80040c2:	4824      	ldr	r0, [pc, #144]	@ (8004154 <MX_TIM8_Init+0x14c>)
 80040c4:	f008 fb26 	bl	800c714 <HAL_TIMEx_MasterConfigSynchronization>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80040ce:	f7fe fbfd 	bl	80028cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040d2:	2360      	movs	r3, #96	@ 0x60
 80040d4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80040d6:	2300      	movs	r3, #0
 80040d8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040da:	2300      	movs	r3, #0
 80040dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040de:	2300      	movs	r3, #0
 80040e0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80040e2:	2300      	movs	r3, #0
 80040e4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80040e6:	2300      	movs	r3, #0
 80040e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80040ea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80040ee:	220c      	movs	r2, #12
 80040f0:	4619      	mov	r1, r3
 80040f2:	4818      	ldr	r0, [pc, #96]	@ (8004154 <MX_TIM8_Init+0x14c>)
 80040f4:	f007 fbf2 	bl	800b8dc <HAL_TIM_PWM_ConfigChannel>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 80040fe:	f7fe fbe5 	bl	80028cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004102:	2300      	movs	r3, #0
 8004104:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004106:	2300      	movs	r3, #0
 8004108:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800410a:	2300      	movs	r3, #0
 800410c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800410e:	2300      	movs	r3, #0
 8004110:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004112:	2300      	movs	r3, #0
 8004114:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004116:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800411a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800411c:	2300      	movs	r3, #0
 800411e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004120:	2300      	movs	r3, #0
 8004122:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004124:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004128:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800412a:	2300      	movs	r3, #0
 800412c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800412e:	2300      	movs	r3, #0
 8004130:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8004132:	1d3b      	adds	r3, r7, #4
 8004134:	4619      	mov	r1, r3
 8004136:	4807      	ldr	r0, [pc, #28]	@ (8004154 <MX_TIM8_Init+0x14c>)
 8004138:	f008 fb74 	bl	800c824 <HAL_TIMEx_ConfigBreakDeadTime>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8004142:	f7fe fbc3 	bl	80028cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8004146:	4803      	ldr	r0, [pc, #12]	@ (8004154 <MX_TIM8_Init+0x14c>)
 8004148:	f000 f8c0 	bl	80042cc <HAL_TIM_MspPostInit>

}
 800414c:	bf00      	nop
 800414e:	3768      	adds	r7, #104	@ 0x68
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	20000ff8 	.word	0x20000ff8
 8004158:	40013400 	.word	0x40013400

0800415c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b088      	sub	sp, #32
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800416c:	d10c      	bne.n	8004188 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800416e:	4b50      	ldr	r3, [pc, #320]	@ (80042b0 <HAL_TIM_Base_MspInit+0x154>)
 8004170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004172:	4a4f      	ldr	r2, [pc, #316]	@ (80042b0 <HAL_TIM_Base_MspInit+0x154>)
 8004174:	f043 0301 	orr.w	r3, r3, #1
 8004178:	6593      	str	r3, [r2, #88]	@ 0x58
 800417a:	4b4d      	ldr	r3, [pc, #308]	@ (80042b0 <HAL_TIM_Base_MspInit+0x154>)
 800417c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	61fb      	str	r3, [r7, #28]
 8004184:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8004186:	e08f      	b.n	80042a8 <HAL_TIM_Base_MspInit+0x14c>
  else if(tim_baseHandle->Instance==TIM3)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a49      	ldr	r2, [pc, #292]	@ (80042b4 <HAL_TIM_Base_MspInit+0x158>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d145      	bne.n	800421e <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004192:	4b47      	ldr	r3, [pc, #284]	@ (80042b0 <HAL_TIM_Base_MspInit+0x154>)
 8004194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004196:	4a46      	ldr	r2, [pc, #280]	@ (80042b0 <HAL_TIM_Base_MspInit+0x154>)
 8004198:	f043 0302 	orr.w	r3, r3, #2
 800419c:	6593      	str	r3, [r2, #88]	@ 0x58
 800419e:	4b44      	ldr	r3, [pc, #272]	@ (80042b0 <HAL_TIM_Base_MspInit+0x154>)
 80041a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	61bb      	str	r3, [r7, #24]
 80041a8:	69bb      	ldr	r3, [r7, #24]
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 80041aa:	4b43      	ldr	r3, [pc, #268]	@ (80042b8 <HAL_TIM_Base_MspInit+0x15c>)
 80041ac:	4a43      	ldr	r2, [pc, #268]	@ (80042bc <HAL_TIM_Base_MspInit+0x160>)
 80041ae:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Request = DMA_REQUEST_5;
 80041b0:	4b41      	ldr	r3, [pc, #260]	@ (80042b8 <HAL_TIM_Base_MspInit+0x15c>)
 80041b2:	2205      	movs	r2, #5
 80041b4:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80041b6:	4b40      	ldr	r3, [pc, #256]	@ (80042b8 <HAL_TIM_Base_MspInit+0x15c>)
 80041b8:	2210      	movs	r2, #16
 80041ba:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80041bc:	4b3e      	ldr	r3, [pc, #248]	@ (80042b8 <HAL_TIM_Base_MspInit+0x15c>)
 80041be:	2200      	movs	r2, #0
 80041c0:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 80041c2:	4b3d      	ldr	r3, [pc, #244]	@ (80042b8 <HAL_TIM_Base_MspInit+0x15c>)
 80041c4:	2280      	movs	r2, #128	@ 0x80
 80041c6:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80041c8:	4b3b      	ldr	r3, [pc, #236]	@ (80042b8 <HAL_TIM_Base_MspInit+0x15c>)
 80041ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80041ce:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80041d0:	4b39      	ldr	r3, [pc, #228]	@ (80042b8 <HAL_TIM_Base_MspInit+0x15c>)
 80041d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80041d6:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 80041d8:	4b37      	ldr	r3, [pc, #220]	@ (80042b8 <HAL_TIM_Base_MspInit+0x15c>)
 80041da:	2200      	movs	r2, #0
 80041dc:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 80041de:	4b36      	ldr	r3, [pc, #216]	@ (80042b8 <HAL_TIM_Base_MspInit+0x15c>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 80041e4:	4834      	ldr	r0, [pc, #208]	@ (80042b8 <HAL_TIM_Base_MspInit+0x15c>)
 80041e6:	f002 fe4d 	bl	8006e84 <HAL_DMA_Init>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d001      	beq.n	80041f4 <HAL_TIM_Base_MspInit+0x98>
      Error_Handler();
 80041f0:	f7fe fb6c 	bl	80028cc <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a30      	ldr	r2, [pc, #192]	@ (80042b8 <HAL_TIM_Base_MspInit+0x15c>)
 80041f8:	631a      	str	r2, [r3, #48]	@ 0x30
 80041fa:	4a2f      	ldr	r2, [pc, #188]	@ (80042b8 <HAL_TIM_Base_MspInit+0x15c>)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a2d      	ldr	r2, [pc, #180]	@ (80042b8 <HAL_TIM_Base_MspInit+0x15c>)
 8004204:	621a      	str	r2, [r3, #32]
 8004206:	4a2c      	ldr	r2, [pc, #176]	@ (80042b8 <HAL_TIM_Base_MspInit+0x15c>)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800420c:	2200      	movs	r2, #0
 800420e:	2100      	movs	r1, #0
 8004210:	201d      	movs	r0, #29
 8004212:	f002 fe00 	bl	8006e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004216:	201d      	movs	r0, #29
 8004218:	f002 fe19 	bl	8006e4e <HAL_NVIC_EnableIRQ>
}
 800421c:	e044      	b.n	80042a8 <HAL_TIM_Base_MspInit+0x14c>
  else if(tim_baseHandle->Instance==TIM4)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a27      	ldr	r2, [pc, #156]	@ (80042c0 <HAL_TIM_Base_MspInit+0x164>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d114      	bne.n	8004252 <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004228:	4b21      	ldr	r3, [pc, #132]	@ (80042b0 <HAL_TIM_Base_MspInit+0x154>)
 800422a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800422c:	4a20      	ldr	r2, [pc, #128]	@ (80042b0 <HAL_TIM_Base_MspInit+0x154>)
 800422e:	f043 0304 	orr.w	r3, r3, #4
 8004232:	6593      	str	r3, [r2, #88]	@ 0x58
 8004234:	4b1e      	ldr	r3, [pc, #120]	@ (80042b0 <HAL_TIM_Base_MspInit+0x154>)
 8004236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004238:	f003 0304 	and.w	r3, r3, #4
 800423c:	617b      	str	r3, [r7, #20]
 800423e:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004240:	2200      	movs	r2, #0
 8004242:	2100      	movs	r1, #0
 8004244:	201e      	movs	r0, #30
 8004246:	f002 fde6 	bl	8006e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800424a:	201e      	movs	r0, #30
 800424c:	f002 fdff 	bl	8006e4e <HAL_NVIC_EnableIRQ>
}
 8004250:	e02a      	b.n	80042a8 <HAL_TIM_Base_MspInit+0x14c>
  else if(tim_baseHandle->Instance==TIM6)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a1b      	ldr	r2, [pc, #108]	@ (80042c4 <HAL_TIM_Base_MspInit+0x168>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d114      	bne.n	8004286 <HAL_TIM_Base_MspInit+0x12a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800425c:	4b14      	ldr	r3, [pc, #80]	@ (80042b0 <HAL_TIM_Base_MspInit+0x154>)
 800425e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004260:	4a13      	ldr	r2, [pc, #76]	@ (80042b0 <HAL_TIM_Base_MspInit+0x154>)
 8004262:	f043 0310 	orr.w	r3, r3, #16
 8004266:	6593      	str	r3, [r2, #88]	@ 0x58
 8004268:	4b11      	ldr	r3, [pc, #68]	@ (80042b0 <HAL_TIM_Base_MspInit+0x154>)
 800426a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800426c:	f003 0310 	and.w	r3, r3, #16
 8004270:	613b      	str	r3, [r7, #16]
 8004272:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004274:	2200      	movs	r2, #0
 8004276:	2100      	movs	r1, #0
 8004278:	2036      	movs	r0, #54	@ 0x36
 800427a:	f002 fdcc 	bl	8006e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800427e:	2036      	movs	r0, #54	@ 0x36
 8004280:	f002 fde5 	bl	8006e4e <HAL_NVIC_EnableIRQ>
}
 8004284:	e010      	b.n	80042a8 <HAL_TIM_Base_MspInit+0x14c>
  else if(tim_baseHandle->Instance==TIM8)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a0f      	ldr	r2, [pc, #60]	@ (80042c8 <HAL_TIM_Base_MspInit+0x16c>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d10b      	bne.n	80042a8 <HAL_TIM_Base_MspInit+0x14c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004290:	4b07      	ldr	r3, [pc, #28]	@ (80042b0 <HAL_TIM_Base_MspInit+0x154>)
 8004292:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004294:	4a06      	ldr	r2, [pc, #24]	@ (80042b0 <HAL_TIM_Base_MspInit+0x154>)
 8004296:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800429a:	6613      	str	r3, [r2, #96]	@ 0x60
 800429c:	4b04      	ldr	r3, [pc, #16]	@ (80042b0 <HAL_TIM_Base_MspInit+0x154>)
 800429e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042a4:	60fb      	str	r3, [r7, #12]
 80042a6:	68fb      	ldr	r3, [r7, #12]
}
 80042a8:	bf00      	nop
 80042aa:	3720      	adds	r7, #32
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	40021000 	.word	0x40021000
 80042b4:	40000400 	.word	0x40000400
 80042b8:	20001044 	.word	0x20001044
 80042bc:	40020030 	.word	0x40020030
 80042c0:	40000800 	.word	0x40000800
 80042c4:	40001000 	.word	0x40001000
 80042c8:	40013400 	.word	0x40013400

080042cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b08a      	sub	sp, #40	@ 0x28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042d4:	f107 0314 	add.w	r3, r7, #20
 80042d8:	2200      	movs	r2, #0
 80042da:	601a      	str	r2, [r3, #0]
 80042dc:	605a      	str	r2, [r3, #4]
 80042de:	609a      	str	r2, [r3, #8]
 80042e0:	60da      	str	r2, [r3, #12]
 80042e2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042ec:	d11d      	bne.n	800432a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042ee:	4b33      	ldr	r3, [pc, #204]	@ (80043bc <HAL_TIM_MspPostInit+0xf0>)
 80042f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042f2:	4a32      	ldr	r2, [pc, #200]	@ (80043bc <HAL_TIM_MspPostInit+0xf0>)
 80042f4:	f043 0301 	orr.w	r3, r3, #1
 80042f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042fa:	4b30      	ldr	r3, [pc, #192]	@ (80043bc <HAL_TIM_MspPostInit+0xf0>)
 80042fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	613b      	str	r3, [r7, #16]
 8004304:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWM_Pin;
 8004306:	2320      	movs	r3, #32
 8004308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800430a:	2302      	movs	r3, #2
 800430c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800430e:	2300      	movs	r3, #0
 8004310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004312:	2300      	movs	r3, #0
 8004314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004316:	2301      	movs	r3, #1
 8004318:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 800431a:	f107 0314 	add.w	r3, r7, #20
 800431e:	4619      	mov	r1, r3
 8004320:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004324:	f003 f824 	bl	8007370 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8004328:	e043      	b.n	80043b2 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM3)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a24      	ldr	r2, [pc, #144]	@ (80043c0 <HAL_TIM_MspPostInit+0xf4>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d11c      	bne.n	800436e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004334:	4b21      	ldr	r3, [pc, #132]	@ (80043bc <HAL_TIM_MspPostInit+0xf0>)
 8004336:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004338:	4a20      	ldr	r2, [pc, #128]	@ (80043bc <HAL_TIM_MspPostInit+0xf0>)
 800433a:	f043 0302 	orr.w	r3, r3, #2
 800433e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004340:	4b1e      	ldr	r3, [pc, #120]	@ (80043bc <HAL_TIM_MspPostInit+0xf0>)
 8004342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	60fb      	str	r3, [r7, #12]
 800434a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Led_adressable_Pin;
 800434c:	2302      	movs	r3, #2
 800434e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004350:	2302      	movs	r3, #2
 8004352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004354:	2300      	movs	r3, #0
 8004356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004358:	2300      	movs	r3, #0
 800435a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800435c:	2302      	movs	r3, #2
 800435e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Led_adressable_GPIO_Port, &GPIO_InitStruct);
 8004360:	f107 0314 	add.w	r3, r7, #20
 8004364:	4619      	mov	r1, r3
 8004366:	4817      	ldr	r0, [pc, #92]	@ (80043c4 <HAL_TIM_MspPostInit+0xf8>)
 8004368:	f003 f802 	bl	8007370 <HAL_GPIO_Init>
}
 800436c:	e021      	b.n	80043b2 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM8)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a15      	ldr	r2, [pc, #84]	@ (80043c8 <HAL_TIM_MspPostInit+0xfc>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d11c      	bne.n	80043b2 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004378:	4b10      	ldr	r3, [pc, #64]	@ (80043bc <HAL_TIM_MspPostInit+0xf0>)
 800437a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800437c:	4a0f      	ldr	r2, [pc, #60]	@ (80043bc <HAL_TIM_MspPostInit+0xf0>)
 800437e:	f043 0304 	orr.w	r3, r3, #4
 8004382:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004384:	4b0d      	ldr	r3, [pc, #52]	@ (80043bc <HAL_TIM_MspPostInit+0xf0>)
 8004386:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004388:	f003 0304 	and.w	r3, r3, #4
 800438c:	60bb      	str	r3, [r7, #8]
 800438e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004390:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004396:	2302      	movs	r3, #2
 8004398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800439a:	2300      	movs	r3, #0
 800439c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800439e:	2300      	movs	r3, #0
 80043a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80043a2:	2303      	movs	r3, #3
 80043a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043a6:	f107 0314 	add.w	r3, r7, #20
 80043aa:	4619      	mov	r1, r3
 80043ac:	4807      	ldr	r0, [pc, #28]	@ (80043cc <HAL_TIM_MspPostInit+0x100>)
 80043ae:	f002 ffdf 	bl	8007370 <HAL_GPIO_Init>
}
 80043b2:	bf00      	nop
 80043b4:	3728      	adds	r7, #40	@ 0x28
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	40021000 	.word	0x40021000
 80043c0:	40000400 	.word	0x40000400
 80043c4:	48000400 	.word	0x48000400
 80043c8:	40013400 	.word	0x40013400
 80043cc:	48000800 	.word	0x48000800

080043d0 <MX_TSC_Init>:

TSC_HandleTypeDef htsc;

/* TSC init function */
void MX_TSC_Init(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0

  /* USER CODE END TSC_Init 1 */

  /** Configure the TSC peripheral
  */
  htsc.Instance = TSC;
 80043d4:	4b1e      	ldr	r3, [pc, #120]	@ (8004450 <MX_TSC_Init+0x80>)
 80043d6:	4a1f      	ldr	r2, [pc, #124]	@ (8004454 <MX_TSC_Init+0x84>)
 80043d8:	601a      	str	r2, [r3, #0]
  htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 80043da:	4b1d      	ldr	r3, [pc, #116]	@ (8004450 <MX_TSC_Init+0x80>)
 80043dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043e0:	605a      	str	r2, [r3, #4]
  htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 80043e2:	4b1b      	ldr	r3, [pc, #108]	@ (8004450 <MX_TSC_Init+0x80>)
 80043e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80043e8:	609a      	str	r2, [r3, #8]
  htsc.Init.SpreadSpectrum = DISABLE;
 80043ea:	4b19      	ldr	r3, [pc, #100]	@ (8004450 <MX_TSC_Init+0x80>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	731a      	strb	r2, [r3, #12]
  htsc.Init.SpreadSpectrumDeviation = 1;
 80043f0:	4b17      	ldr	r3, [pc, #92]	@ (8004450 <MX_TSC_Init+0x80>)
 80043f2:	2201      	movs	r2, #1
 80043f4:	611a      	str	r2, [r3, #16]
  htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 80043f6:	4b16      	ldr	r3, [pc, #88]	@ (8004450 <MX_TSC_Init+0x80>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	615a      	str	r2, [r3, #20]
  htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 80043fc:	4b14      	ldr	r3, [pc, #80]	@ (8004450 <MX_TSC_Init+0x80>)
 80043fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004402:	619a      	str	r2, [r3, #24]
  htsc.Init.MaxCountValue = TSC_MCV_8191;
 8004404:	4b12      	ldr	r3, [pc, #72]	@ (8004450 <MX_TSC_Init+0x80>)
 8004406:	22a0      	movs	r2, #160	@ 0xa0
 8004408:	61da      	str	r2, [r3, #28]
  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 800440a:	4b11      	ldr	r3, [pc, #68]	@ (8004450 <MX_TSC_Init+0x80>)
 800440c:	2200      	movs	r2, #0
 800440e:	621a      	str	r2, [r3, #32]
  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 8004410:	4b0f      	ldr	r3, [pc, #60]	@ (8004450 <MX_TSC_Init+0x80>)
 8004412:	2200      	movs	r2, #0
 8004414:	625a      	str	r2, [r3, #36]	@ 0x24
  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 8004416:	4b0e      	ldr	r3, [pc, #56]	@ (8004450 <MX_TSC_Init+0x80>)
 8004418:	2200      	movs	r2, #0
 800441a:	629a      	str	r2, [r3, #40]	@ 0x28
  htsc.Init.MaxCountInterrupt = DISABLE;
 800441c:	4b0c      	ldr	r3, [pc, #48]	@ (8004450 <MX_TSC_Init+0x80>)
 800441e:	2200      	movs	r2, #0
 8004420:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  htsc.Init.ChannelIOs = TSC_GROUP1_IO1|TSC_GROUP1_IO2|TSC_GROUP1_IO3|TSC_GROUP4_IO1
 8004424:	4b0a      	ldr	r3, [pc, #40]	@ (8004450 <MX_TSC_Init+0x80>)
 8004426:	f243 0207 	movw	r2, #12295	@ 0x3007
 800442a:	631a      	str	r2, [r3, #48]	@ 0x30
                    |TSC_GROUP4_IO2;
  htsc.Init.ShieldIOs = 0;
 800442c:	4b08      	ldr	r3, [pc, #32]	@ (8004450 <MX_TSC_Init+0x80>)
 800442e:	2200      	movs	r2, #0
 8004430:	635a      	str	r2, [r3, #52]	@ 0x34
  htsc.Init.SamplingIOs = TSC_GROUP1_IO4|TSC_GROUP4_IO3;
 8004432:	4b07      	ldr	r3, [pc, #28]	@ (8004450 <MX_TSC_Init+0x80>)
 8004434:	f244 0208 	movw	r2, #16392	@ 0x4008
 8004438:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 800443a:	4805      	ldr	r0, [pc, #20]	@ (8004450 <MX_TSC_Init+0x80>)
 800443c:	f008 fa8e 	bl	800c95c <HAL_TSC_Init>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <MX_TSC_Init+0x7a>
  {
    Error_Handler();
 8004446:	f7fe fa41 	bl	80028cc <Error_Handler>
  }
  /* USER CODE BEGIN TSC_Init 2 */

  /* USER CODE END TSC_Init 2 */

}
 800444a:	bf00      	nop
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	2000108c 	.word	0x2000108c
 8004454:	40024000 	.word	0x40024000

08004458 <HAL_TSC_MspInit>:

void HAL_TSC_MspInit(TSC_HandleTypeDef* tscHandle)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b08a      	sub	sp, #40	@ 0x28
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004460:	f107 0314 	add.w	r3, r7, #20
 8004464:	2200      	movs	r2, #0
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	605a      	str	r2, [r3, #4]
 800446a:	609a      	str	r2, [r3, #8]
 800446c:	60da      	str	r2, [r3, #12]
 800446e:	611a      	str	r2, [r3, #16]
  if(tscHandle->Instance==TSC)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a36      	ldr	r2, [pc, #216]	@ (8004550 <HAL_TSC_MspInit+0xf8>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d166      	bne.n	8004548 <HAL_TSC_MspInit+0xf0>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* TSC clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 800447a:	4b36      	ldr	r3, [pc, #216]	@ (8004554 <HAL_TSC_MspInit+0xfc>)
 800447c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800447e:	4a35      	ldr	r2, [pc, #212]	@ (8004554 <HAL_TSC_MspInit+0xfc>)
 8004480:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004484:	6493      	str	r3, [r2, #72]	@ 0x48
 8004486:	4b33      	ldr	r3, [pc, #204]	@ (8004554 <HAL_TSC_MspInit+0xfc>)
 8004488:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800448a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800448e:	613b      	str	r3, [r7, #16]
 8004490:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004492:	4b30      	ldr	r3, [pc, #192]	@ (8004554 <HAL_TSC_MspInit+0xfc>)
 8004494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004496:	4a2f      	ldr	r2, [pc, #188]	@ (8004554 <HAL_TSC_MspInit+0xfc>)
 8004498:	f043 0302 	orr.w	r3, r3, #2
 800449c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800449e:	4b2d      	ldr	r3, [pc, #180]	@ (8004554 <HAL_TSC_MspInit+0xfc>)
 80044a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044aa:	4b2a      	ldr	r3, [pc, #168]	@ (8004554 <HAL_TSC_MspInit+0xfc>)
 80044ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044ae:	4a29      	ldr	r2, [pc, #164]	@ (8004554 <HAL_TSC_MspInit+0xfc>)
 80044b0:	f043 0304 	orr.w	r3, r3, #4
 80044b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80044b6:	4b27      	ldr	r3, [pc, #156]	@ (8004554 <HAL_TSC_MspInit+0xfc>)
 80044b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044ba:	f003 0304 	and.w	r3, r3, #4
 80044be:	60bb      	str	r3, [r7, #8]
 80044c0:	68bb      	ldr	r3, [r7, #8]
    PB15     ------> TSC_G1_IO4
    PC6     ------> TSC_G4_IO1
    PC7     ------> TSC_G4_IO2
    PC8     ------> TSC_G4_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80044c2:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80044c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044c8:	2302      	movs	r3, #2
 80044ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044cc:	2300      	movs	r3, #0
 80044ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044d0:	2300      	movs	r3, #0
 80044d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 80044d4:	2309      	movs	r3, #9
 80044d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044d8:	f107 0314 	add.w	r3, r7, #20
 80044dc:	4619      	mov	r1, r3
 80044de:	481e      	ldr	r0, [pc, #120]	@ (8004558 <HAL_TSC_MspInit+0x100>)
 80044e0:	f002 ff46 	bl	8007370 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80044e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044ea:	2312      	movs	r3, #18
 80044ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ee:	2300      	movs	r3, #0
 80044f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044f2:	2300      	movs	r3, #0
 80044f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 80044f6:	2309      	movs	r3, #9
 80044f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044fa:	f107 0314 	add.w	r3, r7, #20
 80044fe:	4619      	mov	r1, r3
 8004500:	4815      	ldr	r0, [pc, #84]	@ (8004558 <HAL_TSC_MspInit+0x100>)
 8004502:	f002 ff35 	bl	8007370 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004506:	23c0      	movs	r3, #192	@ 0xc0
 8004508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800450a:	2302      	movs	r3, #2
 800450c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800450e:	2300      	movs	r3, #0
 8004510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004512:	2300      	movs	r3, #0
 8004514:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 8004516:	2309      	movs	r3, #9
 8004518:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800451a:	f107 0314 	add.w	r3, r7, #20
 800451e:	4619      	mov	r1, r3
 8004520:	480e      	ldr	r0, [pc, #56]	@ (800455c <HAL_TSC_MspInit+0x104>)
 8004522:	f002 ff25 	bl	8007370 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004526:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800452a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800452c:	2312      	movs	r3, #18
 800452e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004530:	2300      	movs	r3, #0
 8004532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004534:	2300      	movs	r3, #0
 8004536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 8004538:	2309      	movs	r3, #9
 800453a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800453c:	f107 0314 	add.w	r3, r7, #20
 8004540:	4619      	mov	r1, r3
 8004542:	4806      	ldr	r0, [pc, #24]	@ (800455c <HAL_TSC_MspInit+0x104>)
 8004544:	f002 ff14 	bl	8007370 <HAL_GPIO_Init>

  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }
}
 8004548:	bf00      	nop
 800454a:	3728      	adds	r7, #40	@ 0x28
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	40024000 	.word	0x40024000
 8004554:	40021000 	.word	0x40021000
 8004558:	48000400 	.word	0x48000400
 800455c:	48000800 	.word	0x48000800

08004560 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart2;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8004564:	4b12      	ldr	r3, [pc, #72]	@ (80045b0 <MX_LPUART1_UART_Init+0x50>)
 8004566:	4a13      	ldr	r2, [pc, #76]	@ (80045b4 <MX_LPUART1_UART_Init+0x54>)
 8004568:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 800456a:	4b11      	ldr	r3, [pc, #68]	@ (80045b0 <MX_LPUART1_UART_Init+0x50>)
 800456c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8004570:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004572:	4b0f      	ldr	r3, [pc, #60]	@ (80045b0 <MX_LPUART1_UART_Init+0x50>)
 8004574:	2200      	movs	r2, #0
 8004576:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8004578:	4b0d      	ldr	r3, [pc, #52]	@ (80045b0 <MX_LPUART1_UART_Init+0x50>)
 800457a:	2200      	movs	r2, #0
 800457c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800457e:	4b0c      	ldr	r3, [pc, #48]	@ (80045b0 <MX_LPUART1_UART_Init+0x50>)
 8004580:	2200      	movs	r2, #0
 8004582:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8004584:	4b0a      	ldr	r3, [pc, #40]	@ (80045b0 <MX_LPUART1_UART_Init+0x50>)
 8004586:	220c      	movs	r2, #12
 8004588:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800458a:	4b09      	ldr	r3, [pc, #36]	@ (80045b0 <MX_LPUART1_UART_Init+0x50>)
 800458c:	2200      	movs	r2, #0
 800458e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004590:	4b07      	ldr	r3, [pc, #28]	@ (80045b0 <MX_LPUART1_UART_Init+0x50>)
 8004592:	2200      	movs	r2, #0
 8004594:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004596:	4b06      	ldr	r3, [pc, #24]	@ (80045b0 <MX_LPUART1_UART_Init+0x50>)
 8004598:	2200      	movs	r2, #0
 800459a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800459c:	4804      	ldr	r0, [pc, #16]	@ (80045b0 <MX_LPUART1_UART_Init+0x50>)
 800459e:	f008 fb38 	bl	800cc12 <HAL_UART_Init>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80045a8:	f7fe f990 	bl	80028cc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80045ac:	bf00      	nop
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	200010d0 	.word	0x200010d0
 80045b4:	40008000 	.word	0x40008000

080045b8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80045bc:	4b14      	ldr	r3, [pc, #80]	@ (8004610 <MX_USART2_UART_Init+0x58>)
 80045be:	4a15      	ldr	r2, [pc, #84]	@ (8004614 <MX_USART2_UART_Init+0x5c>)
 80045c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80045c2:	4b13      	ldr	r3, [pc, #76]	@ (8004610 <MX_USART2_UART_Init+0x58>)
 80045c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80045c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80045ca:	4b11      	ldr	r3, [pc, #68]	@ (8004610 <MX_USART2_UART_Init+0x58>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80045d0:	4b0f      	ldr	r3, [pc, #60]	@ (8004610 <MX_USART2_UART_Init+0x58>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80045d6:	4b0e      	ldr	r3, [pc, #56]	@ (8004610 <MX_USART2_UART_Init+0x58>)
 80045d8:	2200      	movs	r2, #0
 80045da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80045dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004610 <MX_USART2_UART_Init+0x58>)
 80045de:	220c      	movs	r2, #12
 80045e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004610 <MX_USART2_UART_Init+0x58>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80045e8:	4b09      	ldr	r3, [pc, #36]	@ (8004610 <MX_USART2_UART_Init+0x58>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80045ee:	4b08      	ldr	r3, [pc, #32]	@ (8004610 <MX_USART2_UART_Init+0x58>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80045f4:	4b06      	ldr	r3, [pc, #24]	@ (8004610 <MX_USART2_UART_Init+0x58>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80045fa:	4805      	ldr	r0, [pc, #20]	@ (8004610 <MX_USART2_UART_Init+0x58>)
 80045fc:	f008 fb09 	bl	800cc12 <HAL_UART_Init>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004606:	f7fe f961 	bl	80028cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800460a:	bf00      	nop
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	20001158 	.word	0x20001158
 8004614:	40004400 	.word	0x40004400

08004618 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b0ae      	sub	sp, #184	@ 0xb8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004620:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	605a      	str	r2, [r3, #4]
 800462a:	609a      	str	r2, [r3, #8]
 800462c:	60da      	str	r2, [r3, #12]
 800462e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004630:	f107 031c 	add.w	r3, r7, #28
 8004634:	2288      	movs	r2, #136	@ 0x88
 8004636:	2100      	movs	r1, #0
 8004638:	4618      	mov	r0, r3
 800463a:	f00f ffbd 	bl	80145b8 <memset>
  if(uartHandle->Instance==LPUART1)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a46      	ldr	r2, [pc, #280]	@ (800475c <HAL_UART_MspInit+0x144>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d144      	bne.n	80046d2 <HAL_UART_MspInit+0xba>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8004648:	2320      	movs	r3, #32
 800464a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 800464c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004650:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004652:	f107 031c 	add.w	r3, r7, #28
 8004656:	4618      	mov	r0, r3
 8004658:	f004 fdb4 	bl	80091c4 <HAL_RCCEx_PeriphCLKConfig>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004662:	f7fe f933 	bl	80028cc <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8004666:	4b3e      	ldr	r3, [pc, #248]	@ (8004760 <HAL_UART_MspInit+0x148>)
 8004668:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800466a:	4a3d      	ldr	r2, [pc, #244]	@ (8004760 <HAL_UART_MspInit+0x148>)
 800466c:	f043 0301 	orr.w	r3, r3, #1
 8004670:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8004672:	4b3b      	ldr	r3, [pc, #236]	@ (8004760 <HAL_UART_MspInit+0x148>)
 8004674:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	61bb      	str	r3, [r7, #24]
 800467c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800467e:	4b38      	ldr	r3, [pc, #224]	@ (8004760 <HAL_UART_MspInit+0x148>)
 8004680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004682:	4a37      	ldr	r2, [pc, #220]	@ (8004760 <HAL_UART_MspInit+0x148>)
 8004684:	f043 0304 	orr.w	r3, r3, #4
 8004688:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800468a:	4b35      	ldr	r3, [pc, #212]	@ (8004760 <HAL_UART_MspInit+0x148>)
 800468c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800468e:	f003 0304 	and.w	r3, r3, #4
 8004692:	617b      	str	r3, [r7, #20]
 8004694:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004696:	2303      	movs	r3, #3
 8004698:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800469c:	2302      	movs	r3, #2
 800469e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046a2:	2300      	movs	r3, #0
 80046a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046a8:	2303      	movs	r3, #3
 80046aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80046ae:	2308      	movs	r3, #8
 80046b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046b4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80046b8:	4619      	mov	r1, r3
 80046ba:	482a      	ldr	r0, [pc, #168]	@ (8004764 <HAL_UART_MspInit+0x14c>)
 80046bc:	f002 fe58 	bl	8007370 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80046c0:	2200      	movs	r2, #0
 80046c2:	2100      	movs	r1, #0
 80046c4:	2046      	movs	r0, #70	@ 0x46
 80046c6:	f002 fba6 	bl	8006e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80046ca:	2046      	movs	r0, #70	@ 0x46
 80046cc:	f002 fbbf 	bl	8006e4e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80046d0:	e040      	b.n	8004754 <HAL_UART_MspInit+0x13c>
  else if(uartHandle->Instance==USART2)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a24      	ldr	r2, [pc, #144]	@ (8004768 <HAL_UART_MspInit+0x150>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d13b      	bne.n	8004754 <HAL_UART_MspInit+0x13c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80046dc:	2302      	movs	r3, #2
 80046de:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80046e0:	2300      	movs	r3, #0
 80046e2:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80046e4:	f107 031c 	add.w	r3, r7, #28
 80046e8:	4618      	mov	r0, r3
 80046ea:	f004 fd6b 	bl	80091c4 <HAL_RCCEx_PeriphCLKConfig>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80046f4:	f7fe f8ea 	bl	80028cc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80046f8:	4b19      	ldr	r3, [pc, #100]	@ (8004760 <HAL_UART_MspInit+0x148>)
 80046fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046fc:	4a18      	ldr	r2, [pc, #96]	@ (8004760 <HAL_UART_MspInit+0x148>)
 80046fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004702:	6593      	str	r3, [r2, #88]	@ 0x58
 8004704:	4b16      	ldr	r3, [pc, #88]	@ (8004760 <HAL_UART_MspInit+0x148>)
 8004706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004708:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800470c:	613b      	str	r3, [r7, #16]
 800470e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004710:	4b13      	ldr	r3, [pc, #76]	@ (8004760 <HAL_UART_MspInit+0x148>)
 8004712:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004714:	4a12      	ldr	r2, [pc, #72]	@ (8004760 <HAL_UART_MspInit+0x148>)
 8004716:	f043 0301 	orr.w	r3, r3, #1
 800471a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800471c:	4b10      	ldr	r3, [pc, #64]	@ (8004760 <HAL_UART_MspInit+0x148>)
 800471e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	60fb      	str	r3, [r7, #12]
 8004726:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004728:	230c      	movs	r3, #12
 800472a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800472e:	2302      	movs	r3, #2
 8004730:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004734:	2300      	movs	r3, #0
 8004736:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800473a:	2303      	movs	r3, #3
 800473c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004740:	2307      	movs	r3, #7
 8004742:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004746:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800474a:	4619      	mov	r1, r3
 800474c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004750:	f002 fe0e 	bl	8007370 <HAL_GPIO_Init>
}
 8004754:	bf00      	nop
 8004756:	37b8      	adds	r7, #184	@ 0xb8
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	40008000 	.word	0x40008000
 8004760:	40021000 	.word	0x40021000
 8004764:	48000800 	.word	0x48000800
 8004768:	40004400 	.word	0x40004400

0800476c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800476c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80047a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004770:	f7ff fa9c 	bl	8003cac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004774:	480c      	ldr	r0, [pc, #48]	@ (80047a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8004776:	490d      	ldr	r1, [pc, #52]	@ (80047ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8004778:	4a0d      	ldr	r2, [pc, #52]	@ (80047b0 <LoopForever+0xe>)
  movs r3, #0
 800477a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800477c:	e002      	b.n	8004784 <LoopCopyDataInit>

0800477e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800477e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004782:	3304      	adds	r3, #4

08004784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004788:	d3f9      	bcc.n	800477e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800478a:	4a0a      	ldr	r2, [pc, #40]	@ (80047b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800478c:	4c0a      	ldr	r4, [pc, #40]	@ (80047b8 <LoopForever+0x16>)
  movs r3, #0
 800478e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004790:	e001      	b.n	8004796 <LoopFillZerobss>

08004792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004794:	3204      	adds	r2, #4

08004796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004798:	d3fb      	bcc.n	8004792 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800479a:	f00f ff79 	bl	8014690 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800479e:	f7fd f9cd 	bl	8001b3c <main>

080047a2 <LoopForever>:

LoopForever:
    b LoopForever
 80047a2:	e7fe      	b.n	80047a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80047a4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80047a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80047ac:	20000344 	.word	0x20000344
  ldr r2, =_sidata
 80047b0:	08019cc4 	.word	0x08019cc4
  ldr r2, =_sbss
 80047b4:	20000344 	.word	0x20000344
  ldr r4, =_ebss
 80047b8:	20001430 	.word	0x20001430

080047bc <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80047bc:	e7fe      	b.n	80047bc <ADC3_IRQHandler>
	...

080047c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80047c6:	2300      	movs	r3, #0
 80047c8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80047ca:	4b0c      	ldr	r3, [pc, #48]	@ (80047fc <HAL_Init+0x3c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a0b      	ldr	r2, [pc, #44]	@ (80047fc <HAL_Init+0x3c>)
 80047d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047d4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047d6:	2003      	movs	r0, #3
 80047d8:	f002 fb12 	bl	8006e00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80047dc:	2000      	movs	r0, #0
 80047de:	f000 f80f 	bl	8004800 <HAL_InitTick>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	71fb      	strb	r3, [r7, #7]
 80047ec:	e001      	b.n	80047f2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80047ee:	f7ff f8cf 	bl	8003990 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80047f2:	79fb      	ldrb	r3, [r7, #7]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3708      	adds	r7, #8
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	40022000 	.word	0x40022000

08004800 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004808:	2300      	movs	r3, #0
 800480a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800480c:	4b17      	ldr	r3, [pc, #92]	@ (800486c <HAL_InitTick+0x6c>)
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d023      	beq.n	800485c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004814:	4b16      	ldr	r3, [pc, #88]	@ (8004870 <HAL_InitTick+0x70>)
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	4b14      	ldr	r3, [pc, #80]	@ (800486c <HAL_InitTick+0x6c>)
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	4619      	mov	r1, r3
 800481e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004822:	fbb3 f3f1 	udiv	r3, r3, r1
 8004826:	fbb2 f3f3 	udiv	r3, r2, r3
 800482a:	4618      	mov	r0, r3
 800482c:	f002 fb1d 	bl	8006e6a <HAL_SYSTICK_Config>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10f      	bne.n	8004856 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b0f      	cmp	r3, #15
 800483a:	d809      	bhi.n	8004850 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800483c:	2200      	movs	r2, #0
 800483e:	6879      	ldr	r1, [r7, #4]
 8004840:	f04f 30ff 	mov.w	r0, #4294967295
 8004844:	f002 fae7 	bl	8006e16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004848:	4a0a      	ldr	r2, [pc, #40]	@ (8004874 <HAL_InitTick+0x74>)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6013      	str	r3, [r2, #0]
 800484e:	e007      	b.n	8004860 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	73fb      	strb	r3, [r7, #15]
 8004854:	e004      	b.n	8004860 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	73fb      	strb	r3, [r7, #15]
 800485a:	e001      	b.n	8004860 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004860:	7bfb      	ldrb	r3, [r7, #15]
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	20000148 	.word	0x20000148
 8004870:	20000140 	.word	0x20000140
 8004874:	20000144 	.word	0x20000144

08004878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800487c:	4b06      	ldr	r3, [pc, #24]	@ (8004898 <HAL_IncTick+0x20>)
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	461a      	mov	r2, r3
 8004882:	4b06      	ldr	r3, [pc, #24]	@ (800489c <HAL_IncTick+0x24>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4413      	add	r3, r2
 8004888:	4a04      	ldr	r2, [pc, #16]	@ (800489c <HAL_IncTick+0x24>)
 800488a:	6013      	str	r3, [r2, #0]
}
 800488c:	bf00      	nop
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	20000148 	.word	0x20000148
 800489c:	200011e0 	.word	0x200011e0

080048a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048a0:	b480      	push	{r7}
 80048a2:	af00      	add	r7, sp, #0
  return uwTick;
 80048a4:	4b03      	ldr	r3, [pc, #12]	@ (80048b4 <HAL_GetTick+0x14>)
 80048a6:	681b      	ldr	r3, [r3, #0]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	200011e0 	.word	0x200011e0

080048b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80048c0:	f7ff ffee 	bl	80048a0 <HAL_GetTick>
 80048c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d0:	d005      	beq.n	80048de <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80048d2:	4b0a      	ldr	r3, [pc, #40]	@ (80048fc <HAL_Delay+0x44>)
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	461a      	mov	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4413      	add	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80048de:	bf00      	nop
 80048e0:	f7ff ffde 	bl	80048a0 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d8f7      	bhi.n	80048e0 <HAL_Delay+0x28>
  {
  }
}
 80048f0:	bf00      	nop
 80048f2:	bf00      	nop
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	20000148 	.word	0x20000148

08004900 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	431a      	orrs	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	609a      	str	r2, [r3, #8]
}
 800491a:	bf00      	nop
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004926:	b480      	push	{r7}
 8004928:	b083      	sub	sp, #12
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
 800492e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	431a      	orrs	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	609a      	str	r2, [r3, #8]
}
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800495c:	4618      	mov	r0, r3
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004968:	b480      	push	{r7}
 800496a:	b087      	sub	sp, #28
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
 8004974:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	3360      	adds	r3, #96	@ 0x60
 800497a:	461a      	mov	r2, r3
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4413      	add	r3, r2
 8004982:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	4b08      	ldr	r3, [pc, #32]	@ (80049ac <LL_ADC_SetOffset+0x44>)
 800498a:	4013      	ands	r3, r2
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	430a      	orrs	r2, r1
 8004996:	4313      	orrs	r3, r2
 8004998:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80049a0:	bf00      	nop
 80049a2:	371c      	adds	r7, #28
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	03fff000 	.word	0x03fff000

080049b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	3360      	adds	r3, #96	@ 0x60
 80049be:	461a      	mov	r2, r3
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4413      	add	r3, r2
 80049c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3714      	adds	r7, #20
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80049dc:	b480      	push	{r7}
 80049de:	b087      	sub	sp, #28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	3360      	adds	r3, #96	@ 0x60
 80049ec:	461a      	mov	r2, r3
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	431a      	orrs	r2, r3
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004a06:	bf00      	nop
 8004a08:	371c      	adds	r7, #28
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr

08004a12 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004a12:	b480      	push	{r7}
 8004a14:	b083      	sub	sp, #12
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004a26:	2301      	movs	r3, #1
 8004a28:	e000      	b.n	8004a2c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b087      	sub	sp, #28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	3330      	adds	r3, #48	@ 0x30
 8004a48:	461a      	mov	r2, r3
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	0a1b      	lsrs	r3, r3, #8
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	f003 030c 	and.w	r3, r3, #12
 8004a54:	4413      	add	r3, r2
 8004a56:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	f003 031f 	and.w	r3, r3, #31
 8004a62:	211f      	movs	r1, #31
 8004a64:	fa01 f303 	lsl.w	r3, r1, r3
 8004a68:	43db      	mvns	r3, r3
 8004a6a:	401a      	ands	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	0e9b      	lsrs	r3, r3, #26
 8004a70:	f003 011f 	and.w	r1, r3, #31
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	f003 031f 	and.w	r3, r3, #31
 8004a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004a84:	bf00      	nop
 8004a86:	371c      	adds	r7, #28
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a9c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e000      	b.n	8004aaa <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr

08004ab6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b087      	sub	sp, #28
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	60f8      	str	r0, [r7, #12]
 8004abe:	60b9      	str	r1, [r7, #8]
 8004ac0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	3314      	adds	r3, #20
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	0e5b      	lsrs	r3, r3, #25
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	f003 0304 	and.w	r3, r3, #4
 8004ad2:	4413      	add	r3, r2
 8004ad4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	0d1b      	lsrs	r3, r3, #20
 8004ade:	f003 031f 	and.w	r3, r3, #31
 8004ae2:	2107      	movs	r1, #7
 8004ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae8:	43db      	mvns	r3, r3
 8004aea:	401a      	ands	r2, r3
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	0d1b      	lsrs	r3, r3, #20
 8004af0:	f003 031f 	and.w	r3, r3, #31
 8004af4:	6879      	ldr	r1, [r7, #4]
 8004af6:	fa01 f303 	lsl.w	r3, r1, r3
 8004afa:	431a      	orrs	r2, r3
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004b00:	bf00      	nop
 8004b02:	371c      	adds	r7, #28
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b24:	43db      	mvns	r3, r3
 8004b26:	401a      	ands	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f003 0318 	and.w	r3, r3, #24
 8004b2e:	4908      	ldr	r1, [pc, #32]	@ (8004b50 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004b30:	40d9      	lsrs	r1, r3
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	400b      	ands	r3, r1
 8004b36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b3a:	431a      	orrs	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004b42:	bf00      	nop
 8004b44:	3714      	adds	r7, #20
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	0007ffff 	.word	0x0007ffff

08004b54 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f003 031f 	and.w	r3, r3, #31
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004b9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	6093      	str	r3, [r2, #8]
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bc4:	d101      	bne.n	8004bca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e000      	b.n	8004bcc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004be8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004bec:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c14:	d101      	bne.n	8004c1a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004c16:	2301      	movs	r3, #1
 8004c18:	e000      	b.n	8004c1c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004c38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004c3c:	f043 0201 	orr.w	r2, r3, #1
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d101      	bne.n	8004c68 <LL_ADC_IsEnabled+0x18>
 8004c64:	2301      	movs	r3, #1
 8004c66:	e000      	b.n	8004c6a <LL_ADC_IsEnabled+0x1a>
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr

08004c76 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004c76:	b480      	push	{r7}
 8004c78:	b083      	sub	sp, #12
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004c86:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004c8a:	f043 0204 	orr.w	r2, r3, #4
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004c92:	bf00      	nop
 8004c94:	370c      	adds	r7, #12
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr

08004c9e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b083      	sub	sp, #12
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f003 0304 	and.w	r3, r3, #4
 8004cae:	2b04      	cmp	r3, #4
 8004cb0:	d101      	bne.n	8004cb6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e000      	b.n	8004cb8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f003 0308 	and.w	r3, r3, #8
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	d101      	bne.n	8004cdc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e000      	b.n	8004cde <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
	...

08004cec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004cec:	b590      	push	{r4, r7, lr}
 8004cee:	b089      	sub	sp, #36	@ 0x24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e130      	b.n	8004f68 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d109      	bne.n	8004d28 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f7fc fa9f 	bl	8001258 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7ff ff3f 	bl	8004bb0 <LL_ADC_IsDeepPowerDownEnabled>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d004      	beq.n	8004d42 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7ff ff25 	bl	8004b8c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7ff ff5a 	bl	8004c00 <LL_ADC_IsInternalRegulatorEnabled>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d115      	bne.n	8004d7e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7ff ff3e 	bl	8004bd8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d5c:	4b84      	ldr	r3, [pc, #528]	@ (8004f70 <HAL_ADC_Init+0x284>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	099b      	lsrs	r3, r3, #6
 8004d62:	4a84      	ldr	r2, [pc, #528]	@ (8004f74 <HAL_ADC_Init+0x288>)
 8004d64:	fba2 2303 	umull	r2, r3, r2, r3
 8004d68:	099b      	lsrs	r3, r3, #6
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	005b      	lsls	r3, r3, #1
 8004d6e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004d70:	e002      	b.n	8004d78 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	3b01      	subs	r3, #1
 8004d76:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1f9      	bne.n	8004d72 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7ff ff3c 	bl	8004c00 <LL_ADC_IsInternalRegulatorEnabled>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10d      	bne.n	8004daa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d92:	f043 0210 	orr.w	r2, r3, #16
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d9e:	f043 0201 	orr.w	r2, r3, #1
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7ff ff75 	bl	8004c9e <LL_ADC_REG_IsConversionOngoing>
 8004db4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dba:	f003 0310 	and.w	r3, r3, #16
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f040 80c9 	bne.w	8004f56 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f040 80c5 	bne.w	8004f56 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dd0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004dd4:	f043 0202 	orr.w	r2, r3, #2
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7ff ff35 	bl	8004c50 <LL_ADC_IsEnabled>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d115      	bne.n	8004e18 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004dec:	4862      	ldr	r0, [pc, #392]	@ (8004f78 <HAL_ADC_Init+0x28c>)
 8004dee:	f7ff ff2f 	bl	8004c50 <LL_ADC_IsEnabled>
 8004df2:	4604      	mov	r4, r0
 8004df4:	4861      	ldr	r0, [pc, #388]	@ (8004f7c <HAL_ADC_Init+0x290>)
 8004df6:	f7ff ff2b 	bl	8004c50 <LL_ADC_IsEnabled>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	431c      	orrs	r4, r3
 8004dfe:	4860      	ldr	r0, [pc, #384]	@ (8004f80 <HAL_ADC_Init+0x294>)
 8004e00:	f7ff ff26 	bl	8004c50 <LL_ADC_IsEnabled>
 8004e04:	4603      	mov	r3, r0
 8004e06:	4323      	orrs	r3, r4
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d105      	bne.n	8004e18 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	4619      	mov	r1, r3
 8004e12:	485c      	ldr	r0, [pc, #368]	@ (8004f84 <HAL_ADC_Init+0x298>)
 8004e14:	f7ff fd74 	bl	8004900 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	7e5b      	ldrb	r3, [r3, #25]
 8004e1c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004e22:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004e28:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004e2e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e36:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d106      	bne.n	8004e54 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	045b      	lsls	r3, r3, #17
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d009      	beq.n	8004e70 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e60:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e68:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004e6a:	69ba      	ldr	r2, [r7, #24]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68da      	ldr	r2, [r3, #12]
 8004e76:	4b44      	ldr	r3, [pc, #272]	@ (8004f88 <HAL_ADC_Init+0x29c>)
 8004e78:	4013      	ands	r3, r2
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	6812      	ldr	r2, [r2, #0]
 8004e7e:	69b9      	ldr	r1, [r7, #24]
 8004e80:	430b      	orrs	r3, r1
 8004e82:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7ff ff1b 	bl	8004cc4 <LL_ADC_INJ_IsConversionOngoing>
 8004e8e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d13d      	bne.n	8004f12 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d13a      	bne.n	8004f12 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004ea0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004ea8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004eb8:	f023 0302 	bic.w	r3, r3, #2
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	6812      	ldr	r2, [r2, #0]
 8004ec0:	69b9      	ldr	r1, [r7, #24]
 8004ec2:	430b      	orrs	r3, r1
 8004ec4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d118      	bne.n	8004f02 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004eda:	f023 0304 	bic.w	r3, r3, #4
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004ee6:	4311      	orrs	r1, r2
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004eec:	4311      	orrs	r1, r2
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f042 0201 	orr.w	r2, r2, #1
 8004efe:	611a      	str	r2, [r3, #16]
 8004f00:	e007      	b.n	8004f12 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	691a      	ldr	r2, [r3, #16]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f022 0201 	bic.w	r2, r2, #1
 8004f10:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d10c      	bne.n	8004f34 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f20:	f023 010f 	bic.w	r1, r3, #15
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	69db      	ldr	r3, [r3, #28]
 8004f28:	1e5a      	subs	r2, r3, #1
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f32:	e007      	b.n	8004f44 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f022 020f 	bic.w	r2, r2, #15
 8004f42:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f48:	f023 0303 	bic.w	r3, r3, #3
 8004f4c:	f043 0201 	orr.w	r2, r3, #1
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	655a      	str	r2, [r3, #84]	@ 0x54
 8004f54:	e007      	b.n	8004f66 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f5a:	f043 0210 	orr.w	r2, r3, #16
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004f66:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3724      	adds	r7, #36	@ 0x24
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd90      	pop	{r4, r7, pc}
 8004f70:	20000140 	.word	0x20000140
 8004f74:	053e2d63 	.word	0x053e2d63
 8004f78:	50040000 	.word	0x50040000
 8004f7c:	50040100 	.word	0x50040100
 8004f80:	50040200 	.word	0x50040200
 8004f84:	50040300 	.word	0x50040300
 8004f88:	fff0c007 	.word	0xfff0c007

08004f8c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f94:	4891      	ldr	r0, [pc, #580]	@ (80051dc <HAL_ADC_Start_IT+0x250>)
 8004f96:	f7ff fddd 	bl	8004b54 <LL_ADC_GetMultimode>
 8004f9a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7ff fe7c 	bl	8004c9e <LL_ADC_REG_IsConversionOngoing>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f040 8110 	bne.w	80051ce <HAL_ADC_Start_IT+0x242>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d101      	bne.n	8004fbc <HAL_ADC_Start_IT+0x30>
 8004fb8:	2302      	movs	r3, #2
 8004fba:	e10b      	b.n	80051d4 <HAL_ADC_Start_IT+0x248>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 ff3d 	bl	8005e44 <ADC_Enable>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004fce:	7dfb      	ldrb	r3, [r7, #23]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f040 80f7 	bne.w	80051c4 <HAL_ADC_Start_IT+0x238>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fda:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004fde:	f023 0301 	bic.w	r3, r3, #1
 8004fe2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a7c      	ldr	r2, [pc, #496]	@ (80051e0 <HAL_ADC_Start_IT+0x254>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d002      	beq.n	8004ffa <HAL_ADC_Start_IT+0x6e>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	e000      	b.n	8004ffc <HAL_ADC_Start_IT+0x70>
 8004ffa:	4b7a      	ldr	r3, [pc, #488]	@ (80051e4 <HAL_ADC_Start_IT+0x258>)
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	6812      	ldr	r2, [r2, #0]
 8005000:	4293      	cmp	r3, r2
 8005002:	d002      	beq.n	800500a <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d105      	bne.n	8005016 <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800500e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800501a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d006      	beq.n	8005030 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005026:	f023 0206 	bic.w	r2, r3, #6
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	659a      	str	r2, [r3, #88]	@ 0x58
 800502e:	e002      	b.n	8005036 <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	221c      	movs	r2, #28
 800503c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 021c 	bic.w	r2, r2, #28
 8005054:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	2b08      	cmp	r3, #8
 800505c:	d108      	bne.n	8005070 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f042 0208 	orr.w	r2, r2, #8
 800506c:	605a      	str	r2, [r3, #4]
          break;
 800506e:	e008      	b.n	8005082 <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	685a      	ldr	r2, [r3, #4]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f042 0204 	orr.w	r2, r2, #4
 800507e:	605a      	str	r2, [r3, #4]
          break;
 8005080:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005086:	2b00      	cmp	r3, #0
 8005088:	d107      	bne.n	800509a <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f042 0210 	orr.w	r2, r2, #16
 8005098:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a50      	ldr	r2, [pc, #320]	@ (80051e0 <HAL_ADC_Start_IT+0x254>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d002      	beq.n	80050aa <HAL_ADC_Start_IT+0x11e>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	e000      	b.n	80050ac <HAL_ADC_Start_IT+0x120>
 80050aa:	4b4e      	ldr	r3, [pc, #312]	@ (80051e4 <HAL_ADC_Start_IT+0x258>)
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	6812      	ldr	r2, [r2, #0]
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d008      	beq.n	80050c6 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d005      	beq.n	80050c6 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	2b05      	cmp	r3, #5
 80050be:	d002      	beq.n	80050c6 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	2b09      	cmp	r3, #9
 80050c4:	d13a      	bne.n	800513c <HAL_ADC_Start_IT+0x1b0>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d02d      	beq.n	8005130 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050d8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80050dc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	2b08      	cmp	r3, #8
 80050ea:	d110      	bne.n	800510e <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	685a      	ldr	r2, [r3, #4]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f022 0220 	bic.w	r2, r2, #32
 80050fa:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800510a:	605a      	str	r2, [r3, #4]
              break;
 800510c:	e010      	b.n	8005130 <HAL_ADC_Start_IT+0x1a4>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	685a      	ldr	r2, [r3, #4]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800511c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	685a      	ldr	r2, [r3, #4]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f042 0220 	orr.w	r2, r2, #32
 800512c:	605a      	str	r2, [r3, #4]
              break;
 800512e:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4618      	mov	r0, r3
 8005136:	f7ff fd9e 	bl	8004c76 <LL_ADC_REG_StartConversion>
 800513a:	e04a      	b.n	80051d2 <HAL_ADC_Start_IT+0x246>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005140:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a24      	ldr	r2, [pc, #144]	@ (80051e0 <HAL_ADC_Start_IT+0x254>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d002      	beq.n	8005158 <HAL_ADC_Start_IT+0x1cc>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	e000      	b.n	800515a <HAL_ADC_Start_IT+0x1ce>
 8005158:	4b22      	ldr	r3, [pc, #136]	@ (80051e4 <HAL_ADC_Start_IT+0x258>)
 800515a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d034      	beq.n	80051d2 <HAL_ADC_Start_IT+0x246>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800516c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005170:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	655a      	str	r2, [r3, #84]	@ 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	695b      	ldr	r3, [r3, #20]
 800517c:	2b08      	cmp	r3, #8
 800517e:	d110      	bne.n	80051a2 <HAL_ADC_Start_IT+0x216>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 0220 	bic.w	r2, r2, #32
 800518e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800519e:	605a      	str	r2, [r3, #4]
              break;
 80051a0:	e017      	b.n	80051d2 <HAL_ADC_Start_IT+0x246>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	685a      	ldr	r2, [r3, #4]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051b0:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f042 0220 	orr.w	r2, r2, #32
 80051c0:	605a      	str	r2, [r3, #4]
              break;
 80051c2:	e006      	b.n	80051d2 <HAL_ADC_Start_IT+0x246>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80051cc:	e001      	b.n	80051d2 <HAL_ADC_Start_IT+0x246>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80051ce:	2302      	movs	r3, #2
 80051d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80051d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3718      	adds	r7, #24
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	50040300 	.word	0x50040300
 80051e0:	50040100 	.word	0x50040100
 80051e4:	50040000 	.word	0x50040000

080051e8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
	...

08005204 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b08a      	sub	sp, #40	@ 0x28
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800520c:	2300      	movs	r3, #0
 800520e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005220:	4882      	ldr	r0, [pc, #520]	@ (800542c <HAL_ADC_IRQHandler+0x228>)
 8005222:	f7ff fc97 	bl	8004b54 <LL_ADC_GetMultimode>
 8005226:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d017      	beq.n	8005262 <HAL_ADC_IRQHandler+0x5e>
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	f003 0302 	and.w	r3, r3, #2
 8005238:	2b00      	cmp	r3, #0
 800523a:	d012      	beq.n	8005262 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005240:	f003 0310 	and.w	r3, r3, #16
 8005244:	2b00      	cmp	r3, #0
 8005246:	d105      	bne.n	8005254 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800524c:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 fec9 	bl	8005fec <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2202      	movs	r2, #2
 8005260:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	f003 0304 	and.w	r3, r3, #4
 8005268:	2b00      	cmp	r3, #0
 800526a:	d004      	beq.n	8005276 <HAL_ADC_IRQHandler+0x72>
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	f003 0304 	and.w	r3, r3, #4
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10a      	bne.n	800528c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800527c:	2b00      	cmp	r3, #0
 800527e:	f000 8083 	beq.w	8005388 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	f003 0308 	and.w	r3, r3, #8
 8005288:	2b00      	cmp	r3, #0
 800528a:	d07d      	beq.n	8005388 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005290:	f003 0310 	and.w	r3, r3, #16
 8005294:	2b00      	cmp	r3, #0
 8005296:	d105      	bne.n	80052a4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800529c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7ff fbb2 	bl	8004a12 <LL_ADC_REG_IsTriggerSourceSWStart>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d062      	beq.n	800537a <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a5d      	ldr	r2, [pc, #372]	@ (8005430 <HAL_ADC_IRQHandler+0x22c>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d002      	beq.n	80052c4 <HAL_ADC_IRQHandler+0xc0>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	e000      	b.n	80052c6 <HAL_ADC_IRQHandler+0xc2>
 80052c4:	4b5b      	ldr	r3, [pc, #364]	@ (8005434 <HAL_ADC_IRQHandler+0x230>)
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	6812      	ldr	r2, [r2, #0]
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d008      	beq.n	80052e0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d005      	beq.n	80052e0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	2b05      	cmp	r3, #5
 80052d8:	d002      	beq.n	80052e0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	2b09      	cmp	r3, #9
 80052de:	d104      	bne.n	80052ea <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	623b      	str	r3, [r7, #32]
 80052e8:	e00c      	b.n	8005304 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a50      	ldr	r2, [pc, #320]	@ (8005430 <HAL_ADC_IRQHandler+0x22c>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d002      	beq.n	80052fa <HAL_ADC_IRQHandler+0xf6>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	e000      	b.n	80052fc <HAL_ADC_IRQHandler+0xf8>
 80052fa:	4b4e      	ldr	r3, [pc, #312]	@ (8005434 <HAL_ADC_IRQHandler+0x230>)
 80052fc:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005304:	6a3b      	ldr	r3, [r7, #32]
 8005306:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d135      	bne.n	800537a <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0308 	and.w	r3, r3, #8
 8005318:	2b08      	cmp	r3, #8
 800531a:	d12e      	bne.n	800537a <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4618      	mov	r0, r3
 8005322:	f7ff fcbc 	bl	8004c9e <LL_ADC_REG_IsConversionOngoing>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d11a      	bne.n	8005362 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	685a      	ldr	r2, [r3, #4]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f022 020c 	bic.w	r2, r2, #12
 800533a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005340:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800534c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d112      	bne.n	800537a <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005358:	f043 0201 	orr.w	r2, r3, #1
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	655a      	str	r2, [r3, #84]	@ 0x54
 8005360:	e00b      	b.n	800537a <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005366:	f043 0210 	orr.w	r2, r3, #16
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005372:	f043 0201 	orr.w	r2, r3, #1
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f7fd fa56 	bl	800282c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	220c      	movs	r2, #12
 8005386:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	f003 0320 	and.w	r3, r3, #32
 800538e:	2b00      	cmp	r3, #0
 8005390:	d004      	beq.n	800539c <HAL_ADC_IRQHandler+0x198>
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	f003 0320 	and.w	r3, r3, #32
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10b      	bne.n	80053b4 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	f000 809f 	beq.w	80054e6 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	f000 8099 	beq.w	80054e6 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053b8:	f003 0310 	and.w	r3, r3, #16
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d105      	bne.n	80053cc <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053c4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7ff fb5d 	bl	8004a90 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80053d6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4618      	mov	r0, r3
 80053de:	f7ff fb18 	bl	8004a12 <LL_ADC_REG_IsTriggerSourceSWStart>
 80053e2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a11      	ldr	r2, [pc, #68]	@ (8005430 <HAL_ADC_IRQHandler+0x22c>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d002      	beq.n	80053f4 <HAL_ADC_IRQHandler+0x1f0>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	e000      	b.n	80053f6 <HAL_ADC_IRQHandler+0x1f2>
 80053f4:	4b0f      	ldr	r3, [pc, #60]	@ (8005434 <HAL_ADC_IRQHandler+0x230>)
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	6812      	ldr	r2, [r2, #0]
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d008      	beq.n	8005410 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d005      	beq.n	8005410 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	2b06      	cmp	r3, #6
 8005408:	d002      	beq.n	8005410 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	2b07      	cmp	r3, #7
 800540e:	d104      	bne.n	800541a <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	623b      	str	r3, [r7, #32]
 8005418:	e013      	b.n	8005442 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a04      	ldr	r2, [pc, #16]	@ (8005430 <HAL_ADC_IRQHandler+0x22c>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d009      	beq.n	8005438 <HAL_ADC_IRQHandler+0x234>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	e007      	b.n	800543a <HAL_ADC_IRQHandler+0x236>
 800542a:	bf00      	nop
 800542c:	50040300 	.word	0x50040300
 8005430:	50040100 	.word	0x50040100
 8005434:	50040000 	.word	0x50040000
 8005438:	4b7d      	ldr	r3, [pc, #500]	@ (8005630 <HAL_ADC_IRQHandler+0x42c>)
 800543a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d047      	beq.n	80054d8 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005448:	6a3b      	ldr	r3, [r7, #32]
 800544a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d007      	beq.n	8005462 <HAL_ADC_IRQHandler+0x25e>
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d03f      	beq.n	80054d8 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005458:	6a3b      	ldr	r3, [r7, #32]
 800545a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800545e:	2b00      	cmp	r3, #0
 8005460:	d13a      	bne.n	80054d8 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800546c:	2b40      	cmp	r3, #64	@ 0x40
 800546e:	d133      	bne.n	80054d8 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005470:	6a3b      	ldr	r3, [r7, #32]
 8005472:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d12e      	bne.n	80054d8 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4618      	mov	r0, r3
 8005480:	f7ff fc20 	bl	8004cc4 <LL_ADC_INJ_IsConversionOngoing>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d11a      	bne.n	80054c0 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685a      	ldr	r2, [r3, #4]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005498:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800549e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d112      	bne.n	80054d8 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054b6:	f043 0201 	orr.w	r2, r3, #1
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	655a      	str	r2, [r3, #84]	@ 0x54
 80054be:	e00b      	b.n	80054d8 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054c4:	f043 0210 	orr.w	r2, r3, #16
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054d0:	f043 0201 	orr.w	r2, r3, #1
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 fd5f 	bl	8005f9c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2260      	movs	r2, #96	@ 0x60
 80054e4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d011      	beq.n	8005514 <HAL_ADC_IRQHandler+0x310>
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00c      	beq.n	8005514 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054fe:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 f896 	bl	8005638 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2280      	movs	r2, #128	@ 0x80
 8005512:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800551a:	2b00      	cmp	r3, #0
 800551c:	d012      	beq.n	8005544 <HAL_ADC_IRQHandler+0x340>
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00d      	beq.n	8005544 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800552c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 fd45 	bl	8005fc4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005542:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800554a:	2b00      	cmp	r3, #0
 800554c:	d012      	beq.n	8005574 <HAL_ADC_IRQHandler+0x370>
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00d      	beq.n	8005574 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800555c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 fd37 	bl	8005fd8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005572:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	f003 0310 	and.w	r3, r3, #16
 800557a:	2b00      	cmp	r3, #0
 800557c:	d036      	beq.n	80055ec <HAL_ADC_IRQHandler+0x3e8>
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	f003 0310 	and.w	r3, r3, #16
 8005584:	2b00      	cmp	r3, #0
 8005586:	d031      	beq.n	80055ec <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800558c:	2b00      	cmp	r3, #0
 800558e:	d102      	bne.n	8005596 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8005590:	2301      	movs	r3, #1
 8005592:	627b      	str	r3, [r7, #36]	@ 0x24
 8005594:	e014      	b.n	80055c0 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d008      	beq.n	80055ae <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800559c:	4825      	ldr	r0, [pc, #148]	@ (8005634 <HAL_ADC_IRQHandler+0x430>)
 800559e:	f7ff fae7 	bl	8004b70 <LL_ADC_GetMultiDMATransfer>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00b      	beq.n	80055c0 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80055a8:	2301      	movs	r3, #1
 80055aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80055ac:	e008      	b.n	80055c0 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	f003 0301 	and.w	r3, r3, #1
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d001      	beq.n	80055c0 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80055bc:	2301      	movs	r3, #1
 80055be:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80055c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d10e      	bne.n	80055e4 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055ca:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055d6:	f043 0202 	orr.w	r2, r3, #2
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f834 	bl	800564c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2210      	movs	r2, #16
 80055ea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d018      	beq.n	8005628 <HAL_ADC_IRQHandler+0x424>
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d013      	beq.n	8005628 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005604:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005610:	f043 0208 	orr.w	r2, r3, #8
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005620:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 fcc4 	bl	8005fb0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005628:	bf00      	nop
 800562a:	3728      	adds	r7, #40	@ 0x28
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	50040000 	.word	0x50040000
 8005634:	50040300 	.word	0x50040300

08005638 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b0b6      	sub	sp, #216	@ 0xd8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800566a:	2300      	movs	r3, #0
 800566c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005670:	2300      	movs	r3, #0
 8005672:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800567a:	2b01      	cmp	r3, #1
 800567c:	d101      	bne.n	8005682 <HAL_ADC_ConfigChannel+0x22>
 800567e:	2302      	movs	r3, #2
 8005680:	e3c9      	b.n	8005e16 <HAL_ADC_ConfigChannel+0x7b6>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4618      	mov	r0, r3
 8005690:	f7ff fb05 	bl	8004c9e <LL_ADC_REG_IsConversionOngoing>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	f040 83aa 	bne.w	8005df0 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	2b05      	cmp	r3, #5
 80056aa:	d824      	bhi.n	80056f6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	3b02      	subs	r3, #2
 80056b2:	2b03      	cmp	r3, #3
 80056b4:	d81b      	bhi.n	80056ee <HAL_ADC_ConfigChannel+0x8e>
 80056b6:	a201      	add	r2, pc, #4	@ (adr r2, 80056bc <HAL_ADC_ConfigChannel+0x5c>)
 80056b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056bc:	080056cd 	.word	0x080056cd
 80056c0:	080056d5 	.word	0x080056d5
 80056c4:	080056dd 	.word	0x080056dd
 80056c8:	080056e5 	.word	0x080056e5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80056cc:	230c      	movs	r3, #12
 80056ce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80056d2:	e010      	b.n	80056f6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80056d4:	2312      	movs	r3, #18
 80056d6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80056da:	e00c      	b.n	80056f6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80056dc:	2318      	movs	r3, #24
 80056de:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80056e2:	e008      	b.n	80056f6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80056e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80056e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80056ec:	e003      	b.n	80056f6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80056ee:	2306      	movs	r3, #6
 80056f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80056f4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6818      	ldr	r0, [r3, #0]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	461a      	mov	r2, r3
 8005700:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8005704:	f7ff f998 	bl	8004a38 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4618      	mov	r0, r3
 800570e:	f7ff fac6 	bl	8004c9e <LL_ADC_REG_IsConversionOngoing>
 8005712:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4618      	mov	r0, r3
 800571c:	f7ff fad2 	bl	8004cc4 <LL_ADC_INJ_IsConversionOngoing>
 8005720:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005724:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005728:	2b00      	cmp	r3, #0
 800572a:	f040 81a4 	bne.w	8005a76 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800572e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005732:	2b00      	cmp	r3, #0
 8005734:	f040 819f 	bne.w	8005a76 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6818      	ldr	r0, [r3, #0]
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	6819      	ldr	r1, [r3, #0]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	461a      	mov	r2, r3
 8005746:	f7ff f9b6 	bl	8004ab6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	695a      	ldr	r2, [r3, #20]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	08db      	lsrs	r3, r3, #3
 8005756:	f003 0303 	and.w	r3, r3, #3
 800575a:	005b      	lsls	r3, r3, #1
 800575c:	fa02 f303 	lsl.w	r3, r2, r3
 8005760:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	2b04      	cmp	r3, #4
 800576a:	d00a      	beq.n	8005782 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6818      	ldr	r0, [r3, #0]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	6919      	ldr	r1, [r3, #16]
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800577c:	f7ff f8f4 	bl	8004968 <LL_ADC_SetOffset>
 8005780:	e179      	b.n	8005a76 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2100      	movs	r1, #0
 8005788:	4618      	mov	r0, r3
 800578a:	f7ff f911 	bl	80049b0 <LL_ADC_GetOffsetChannel>
 800578e:	4603      	mov	r3, r0
 8005790:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005794:	2b00      	cmp	r3, #0
 8005796:	d10a      	bne.n	80057ae <HAL_ADC_ConfigChannel+0x14e>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2100      	movs	r1, #0
 800579e:	4618      	mov	r0, r3
 80057a0:	f7ff f906 	bl	80049b0 <LL_ADC_GetOffsetChannel>
 80057a4:	4603      	mov	r3, r0
 80057a6:	0e9b      	lsrs	r3, r3, #26
 80057a8:	f003 021f 	and.w	r2, r3, #31
 80057ac:	e01e      	b.n	80057ec <HAL_ADC_ConfigChannel+0x18c>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2100      	movs	r1, #0
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7ff f8fb 	bl	80049b0 <LL_ADC_GetOffsetChannel>
 80057ba:	4603      	mov	r3, r0
 80057bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80057c4:	fa93 f3a3 	rbit	r3, r3
 80057c8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80057cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80057d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80057d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d101      	bne.n	80057e0 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80057dc:	2320      	movs	r3, #32
 80057de:	e004      	b.n	80057ea <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80057e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80057e4:	fab3 f383 	clz	r3, r3
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d105      	bne.n	8005804 <HAL_ADC_ConfigChannel+0x1a4>
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	0e9b      	lsrs	r3, r3, #26
 80057fe:	f003 031f 	and.w	r3, r3, #31
 8005802:	e018      	b.n	8005836 <HAL_ADC_ConfigChannel+0x1d6>
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800580c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005810:	fa93 f3a3 	rbit	r3, r3
 8005814:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8005818:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800581c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8005820:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d101      	bne.n	800582c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8005828:	2320      	movs	r3, #32
 800582a:	e004      	b.n	8005836 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800582c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005830:	fab3 f383 	clz	r3, r3
 8005834:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005836:	429a      	cmp	r2, r3
 8005838:	d106      	bne.n	8005848 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2200      	movs	r2, #0
 8005840:	2100      	movs	r1, #0
 8005842:	4618      	mov	r0, r3
 8005844:	f7ff f8ca 	bl	80049dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2101      	movs	r1, #1
 800584e:	4618      	mov	r0, r3
 8005850:	f7ff f8ae 	bl	80049b0 <LL_ADC_GetOffsetChannel>
 8005854:	4603      	mov	r3, r0
 8005856:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800585a:	2b00      	cmp	r3, #0
 800585c:	d10a      	bne.n	8005874 <HAL_ADC_ConfigChannel+0x214>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2101      	movs	r1, #1
 8005864:	4618      	mov	r0, r3
 8005866:	f7ff f8a3 	bl	80049b0 <LL_ADC_GetOffsetChannel>
 800586a:	4603      	mov	r3, r0
 800586c:	0e9b      	lsrs	r3, r3, #26
 800586e:	f003 021f 	and.w	r2, r3, #31
 8005872:	e01e      	b.n	80058b2 <HAL_ADC_ConfigChannel+0x252>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2101      	movs	r1, #1
 800587a:	4618      	mov	r0, r3
 800587c:	f7ff f898 	bl	80049b0 <LL_ADC_GetOffsetChannel>
 8005880:	4603      	mov	r3, r0
 8005882:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005886:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800588a:	fa93 f3a3 	rbit	r3, r3
 800588e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8005892:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005896:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800589a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80058a2:	2320      	movs	r3, #32
 80058a4:	e004      	b.n	80058b0 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80058a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80058aa:	fab3 f383 	clz	r3, r3
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d105      	bne.n	80058ca <HAL_ADC_ConfigChannel+0x26a>
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	0e9b      	lsrs	r3, r3, #26
 80058c4:	f003 031f 	and.w	r3, r3, #31
 80058c8:	e018      	b.n	80058fc <HAL_ADC_ConfigChannel+0x29c>
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80058d6:	fa93 f3a3 	rbit	r3, r3
 80058da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80058de:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80058e2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80058e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d101      	bne.n	80058f2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80058ee:	2320      	movs	r3, #32
 80058f0:	e004      	b.n	80058fc <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80058f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80058f6:	fab3 f383 	clz	r3, r3
 80058fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d106      	bne.n	800590e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2200      	movs	r2, #0
 8005906:	2101      	movs	r1, #1
 8005908:	4618      	mov	r0, r3
 800590a:	f7ff f867 	bl	80049dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2102      	movs	r1, #2
 8005914:	4618      	mov	r0, r3
 8005916:	f7ff f84b 	bl	80049b0 <LL_ADC_GetOffsetChannel>
 800591a:	4603      	mov	r3, r0
 800591c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005920:	2b00      	cmp	r3, #0
 8005922:	d10a      	bne.n	800593a <HAL_ADC_ConfigChannel+0x2da>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2102      	movs	r1, #2
 800592a:	4618      	mov	r0, r3
 800592c:	f7ff f840 	bl	80049b0 <LL_ADC_GetOffsetChannel>
 8005930:	4603      	mov	r3, r0
 8005932:	0e9b      	lsrs	r3, r3, #26
 8005934:	f003 021f 	and.w	r2, r3, #31
 8005938:	e01e      	b.n	8005978 <HAL_ADC_ConfigChannel+0x318>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2102      	movs	r1, #2
 8005940:	4618      	mov	r0, r3
 8005942:	f7ff f835 	bl	80049b0 <LL_ADC_GetOffsetChannel>
 8005946:	4603      	mov	r3, r0
 8005948:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800594c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005950:	fa93 f3a3 	rbit	r3, r3
 8005954:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8005958:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800595c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8005960:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005964:	2b00      	cmp	r3, #0
 8005966:	d101      	bne.n	800596c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8005968:	2320      	movs	r3, #32
 800596a:	e004      	b.n	8005976 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800596c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005970:	fab3 f383 	clz	r3, r3
 8005974:	b2db      	uxtb	r3, r3
 8005976:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005980:	2b00      	cmp	r3, #0
 8005982:	d105      	bne.n	8005990 <HAL_ADC_ConfigChannel+0x330>
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	0e9b      	lsrs	r3, r3, #26
 800598a:	f003 031f 	and.w	r3, r3, #31
 800598e:	e014      	b.n	80059ba <HAL_ADC_ConfigChannel+0x35a>
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005996:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005998:	fa93 f3a3 	rbit	r3, r3
 800599c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800599e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80059a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d101      	bne.n	80059b0 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80059ac:	2320      	movs	r3, #32
 80059ae:	e004      	b.n	80059ba <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80059b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80059b4:	fab3 f383 	clz	r3, r3
 80059b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d106      	bne.n	80059cc <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2200      	movs	r2, #0
 80059c4:	2102      	movs	r1, #2
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7ff f808 	bl	80049dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2103      	movs	r1, #3
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7fe ffec 	bl	80049b0 <LL_ADC_GetOffsetChannel>
 80059d8:	4603      	mov	r3, r0
 80059da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d10a      	bne.n	80059f8 <HAL_ADC_ConfigChannel+0x398>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2103      	movs	r1, #3
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7fe ffe1 	bl	80049b0 <LL_ADC_GetOffsetChannel>
 80059ee:	4603      	mov	r3, r0
 80059f0:	0e9b      	lsrs	r3, r3, #26
 80059f2:	f003 021f 	and.w	r2, r3, #31
 80059f6:	e017      	b.n	8005a28 <HAL_ADC_ConfigChannel+0x3c8>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2103      	movs	r1, #3
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7fe ffd6 	bl	80049b0 <LL_ADC_GetOffsetChannel>
 8005a04:	4603      	mov	r3, r0
 8005a06:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a08:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a0a:	fa93 f3a3 	rbit	r3, r3
 8005a0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8005a10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a12:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8005a14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d101      	bne.n	8005a1e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8005a1a:	2320      	movs	r3, #32
 8005a1c:	e003      	b.n	8005a26 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8005a1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a20:	fab3 f383 	clz	r3, r3
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d105      	bne.n	8005a40 <HAL_ADC_ConfigChannel+0x3e0>
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	0e9b      	lsrs	r3, r3, #26
 8005a3a:	f003 031f 	and.w	r3, r3, #31
 8005a3e:	e011      	b.n	8005a64 <HAL_ADC_ConfigChannel+0x404>
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a48:	fa93 f3a3 	rbit	r3, r3
 8005a4c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8005a4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a50:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8005a52:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d101      	bne.n	8005a5c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8005a58:	2320      	movs	r3, #32
 8005a5a:	e003      	b.n	8005a64 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8005a5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a5e:	fab3 f383 	clz	r3, r3
 8005a62:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d106      	bne.n	8005a76 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	2103      	movs	r1, #3
 8005a70:	4618      	mov	r0, r3
 8005a72:	f7fe ffb3 	bl	80049dc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7ff f8e8 	bl	8004c50 <LL_ADC_IsEnabled>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f040 8140 	bne.w	8005d08 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6818      	ldr	r0, [r3, #0]
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	6819      	ldr	r1, [r3, #0]
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	461a      	mov	r2, r3
 8005a96:	f7ff f839 	bl	8004b0c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	4a8f      	ldr	r2, [pc, #572]	@ (8005cdc <HAL_ADC_ConfigChannel+0x67c>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	f040 8131 	bne.w	8005d08 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d10b      	bne.n	8005ace <HAL_ADC_ConfigChannel+0x46e>
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	0e9b      	lsrs	r3, r3, #26
 8005abc:	3301      	adds	r3, #1
 8005abe:	f003 031f 	and.w	r3, r3, #31
 8005ac2:	2b09      	cmp	r3, #9
 8005ac4:	bf94      	ite	ls
 8005ac6:	2301      	movls	r3, #1
 8005ac8:	2300      	movhi	r3, #0
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	e019      	b.n	8005b02 <HAL_ADC_ConfigChannel+0x4a2>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ad4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ad6:	fa93 f3a3 	rbit	r3, r3
 8005ada:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8005adc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ade:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8005ae0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d101      	bne.n	8005aea <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8005ae6:	2320      	movs	r3, #32
 8005ae8:	e003      	b.n	8005af2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8005aea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005aec:	fab3 f383 	clz	r3, r3
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	3301      	adds	r3, #1
 8005af4:	f003 031f 	and.w	r3, r3, #31
 8005af8:	2b09      	cmp	r3, #9
 8005afa:	bf94      	ite	ls
 8005afc:	2301      	movls	r3, #1
 8005afe:	2300      	movhi	r3, #0
 8005b00:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d079      	beq.n	8005bfa <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d107      	bne.n	8005b22 <HAL_ADC_ConfigChannel+0x4c2>
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	0e9b      	lsrs	r3, r3, #26
 8005b18:	3301      	adds	r3, #1
 8005b1a:	069b      	lsls	r3, r3, #26
 8005b1c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005b20:	e015      	b.n	8005b4e <HAL_ADC_ConfigChannel+0x4ee>
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b2a:	fa93 f3a3 	rbit	r3, r3
 8005b2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8005b30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b32:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8005b34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d101      	bne.n	8005b3e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8005b3a:	2320      	movs	r3, #32
 8005b3c:	e003      	b.n	8005b46 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8005b3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b40:	fab3 f383 	clz	r3, r3
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	3301      	adds	r3, #1
 8005b48:	069b      	lsls	r3, r3, #26
 8005b4a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d109      	bne.n	8005b6e <HAL_ADC_ConfigChannel+0x50e>
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	0e9b      	lsrs	r3, r3, #26
 8005b60:	3301      	adds	r3, #1
 8005b62:	f003 031f 	and.w	r3, r3, #31
 8005b66:	2101      	movs	r1, #1
 8005b68:	fa01 f303 	lsl.w	r3, r1, r3
 8005b6c:	e017      	b.n	8005b9e <HAL_ADC_ConfigChannel+0x53e>
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b76:	fa93 f3a3 	rbit	r3, r3
 8005b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8005b7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b7e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8005b80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d101      	bne.n	8005b8a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8005b86:	2320      	movs	r3, #32
 8005b88:	e003      	b.n	8005b92 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8005b8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b8c:	fab3 f383 	clz	r3, r3
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	3301      	adds	r3, #1
 8005b94:	f003 031f 	and.w	r3, r3, #31
 8005b98:	2101      	movs	r1, #1
 8005b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b9e:	ea42 0103 	orr.w	r1, r2, r3
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10a      	bne.n	8005bc4 <HAL_ADC_ConfigChannel+0x564>
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	0e9b      	lsrs	r3, r3, #26
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	f003 021f 	and.w	r2, r3, #31
 8005bba:	4613      	mov	r3, r2
 8005bbc:	005b      	lsls	r3, r3, #1
 8005bbe:	4413      	add	r3, r2
 8005bc0:	051b      	lsls	r3, r3, #20
 8005bc2:	e018      	b.n	8005bf6 <HAL_ADC_ConfigChannel+0x596>
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bcc:	fa93 f3a3 	rbit	r3, r3
 8005bd0:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8005bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8005bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d101      	bne.n	8005be0 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8005bdc:	2320      	movs	r3, #32
 8005bde:	e003      	b.n	8005be8 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8005be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005be2:	fab3 f383 	clz	r3, r3
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	3301      	adds	r3, #1
 8005bea:	f003 021f 	and.w	r2, r3, #31
 8005bee:	4613      	mov	r3, r2
 8005bf0:	005b      	lsls	r3, r3, #1
 8005bf2:	4413      	add	r3, r2
 8005bf4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005bf6:	430b      	orrs	r3, r1
 8005bf8:	e081      	b.n	8005cfe <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d107      	bne.n	8005c16 <HAL_ADC_ConfigChannel+0x5b6>
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	0e9b      	lsrs	r3, r3, #26
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	069b      	lsls	r3, r3, #26
 8005c10:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005c14:	e015      	b.n	8005c42 <HAL_ADC_ConfigChannel+0x5e2>
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c1e:	fa93 f3a3 	rbit	r3, r3
 8005c22:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8005c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8005c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d101      	bne.n	8005c32 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8005c2e:	2320      	movs	r3, #32
 8005c30:	e003      	b.n	8005c3a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8005c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c34:	fab3 f383 	clz	r3, r3
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	069b      	lsls	r3, r3, #26
 8005c3e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d109      	bne.n	8005c62 <HAL_ADC_ConfigChannel+0x602>
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	0e9b      	lsrs	r3, r3, #26
 8005c54:	3301      	adds	r3, #1
 8005c56:	f003 031f 	and.w	r3, r3, #31
 8005c5a:	2101      	movs	r1, #1
 8005c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c60:	e017      	b.n	8005c92 <HAL_ADC_ConfigChannel+0x632>
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	fa93 f3a3 	rbit	r3, r3
 8005c6e:	61bb      	str	r3, [r7, #24]
  return result;
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005c74:	6a3b      	ldr	r3, [r7, #32]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8005c7a:	2320      	movs	r3, #32
 8005c7c:	e003      	b.n	8005c86 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8005c7e:	6a3b      	ldr	r3, [r7, #32]
 8005c80:	fab3 f383 	clz	r3, r3
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	3301      	adds	r3, #1
 8005c88:	f003 031f 	and.w	r3, r3, #31
 8005c8c:	2101      	movs	r1, #1
 8005c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c92:	ea42 0103 	orr.w	r1, r2, r3
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10d      	bne.n	8005cbe <HAL_ADC_ConfigChannel+0x65e>
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	0e9b      	lsrs	r3, r3, #26
 8005ca8:	3301      	adds	r3, #1
 8005caa:	f003 021f 	and.w	r2, r3, #31
 8005cae:	4613      	mov	r3, r2
 8005cb0:	005b      	lsls	r3, r3, #1
 8005cb2:	4413      	add	r3, r2
 8005cb4:	3b1e      	subs	r3, #30
 8005cb6:	051b      	lsls	r3, r3, #20
 8005cb8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005cbc:	e01e      	b.n	8005cfc <HAL_ADC_ConfigChannel+0x69c>
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	fa93 f3a3 	rbit	r3, r3
 8005cca:	60fb      	str	r3, [r7, #12]
  return result;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d104      	bne.n	8005ce0 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8005cd6:	2320      	movs	r3, #32
 8005cd8:	e006      	b.n	8005ce8 <HAL_ADC_ConfigChannel+0x688>
 8005cda:	bf00      	nop
 8005cdc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	fab3 f383 	clz	r3, r3
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	3301      	adds	r3, #1
 8005cea:	f003 021f 	and.w	r2, r3, #31
 8005cee:	4613      	mov	r3, r2
 8005cf0:	005b      	lsls	r3, r3, #1
 8005cf2:	4413      	add	r3, r2
 8005cf4:	3b1e      	subs	r3, #30
 8005cf6:	051b      	lsls	r3, r3, #20
 8005cf8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005cfc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005cfe:	683a      	ldr	r2, [r7, #0]
 8005d00:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d02:	4619      	mov	r1, r3
 8005d04:	f7fe fed7 	bl	8004ab6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	4b44      	ldr	r3, [pc, #272]	@ (8005e20 <HAL_ADC_ConfigChannel+0x7c0>)
 8005d0e:	4013      	ands	r3, r2
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d07a      	beq.n	8005e0a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005d14:	4843      	ldr	r0, [pc, #268]	@ (8005e24 <HAL_ADC_ConfigChannel+0x7c4>)
 8005d16:	f7fe fe19 	bl	800494c <LL_ADC_GetCommonPathInternalCh>
 8005d1a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a41      	ldr	r2, [pc, #260]	@ (8005e28 <HAL_ADC_ConfigChannel+0x7c8>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d12c      	bne.n	8005d82 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005d28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005d2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d126      	bne.n	8005d82 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a3c      	ldr	r2, [pc, #240]	@ (8005e2c <HAL_ADC_ConfigChannel+0x7cc>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d004      	beq.n	8005d48 <HAL_ADC_ConfigChannel+0x6e8>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a3b      	ldr	r2, [pc, #236]	@ (8005e30 <HAL_ADC_ConfigChannel+0x7d0>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d15d      	bne.n	8005e04 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005d48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005d4c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005d50:	4619      	mov	r1, r3
 8005d52:	4834      	ldr	r0, [pc, #208]	@ (8005e24 <HAL_ADC_ConfigChannel+0x7c4>)
 8005d54:	f7fe fde7 	bl	8004926 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005d58:	4b36      	ldr	r3, [pc, #216]	@ (8005e34 <HAL_ADC_ConfigChannel+0x7d4>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	099b      	lsrs	r3, r3, #6
 8005d5e:	4a36      	ldr	r2, [pc, #216]	@ (8005e38 <HAL_ADC_ConfigChannel+0x7d8>)
 8005d60:	fba2 2303 	umull	r2, r3, r2, r3
 8005d64:	099b      	lsrs	r3, r3, #6
 8005d66:	1c5a      	adds	r2, r3, #1
 8005d68:	4613      	mov	r3, r2
 8005d6a:	005b      	lsls	r3, r3, #1
 8005d6c:	4413      	add	r3, r2
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005d72:	e002      	b.n	8005d7a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	3b01      	subs	r3, #1
 8005d78:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d1f9      	bne.n	8005d74 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005d80:	e040      	b.n	8005e04 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a2d      	ldr	r2, [pc, #180]	@ (8005e3c <HAL_ADC_ConfigChannel+0x7dc>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d118      	bne.n	8005dbe <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005d8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005d90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d112      	bne.n	8005dbe <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a23      	ldr	r2, [pc, #140]	@ (8005e2c <HAL_ADC_ConfigChannel+0x7cc>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d004      	beq.n	8005dac <HAL_ADC_ConfigChannel+0x74c>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a22      	ldr	r2, [pc, #136]	@ (8005e30 <HAL_ADC_ConfigChannel+0x7d0>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d12d      	bne.n	8005e08 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005dac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005db0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005db4:	4619      	mov	r1, r3
 8005db6:	481b      	ldr	r0, [pc, #108]	@ (8005e24 <HAL_ADC_ConfigChannel+0x7c4>)
 8005db8:	f7fe fdb5 	bl	8004926 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005dbc:	e024      	b.n	8005e08 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a1f      	ldr	r2, [pc, #124]	@ (8005e40 <HAL_ADC_ConfigChannel+0x7e0>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d120      	bne.n	8005e0a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005dc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005dcc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d11a      	bne.n	8005e0a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a14      	ldr	r2, [pc, #80]	@ (8005e2c <HAL_ADC_ConfigChannel+0x7cc>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d115      	bne.n	8005e0a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005dde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005de2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005de6:	4619      	mov	r1, r3
 8005de8:	480e      	ldr	r0, [pc, #56]	@ (8005e24 <HAL_ADC_ConfigChannel+0x7c4>)
 8005dea:	f7fe fd9c 	bl	8004926 <LL_ADC_SetCommonPathInternalCh>
 8005dee:	e00c      	b.n	8005e0a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005df4:	f043 0220 	orr.w	r2, r3, #32
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005e02:	e002      	b.n	8005e0a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005e04:	bf00      	nop
 8005e06:	e000      	b.n	8005e0a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005e08:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8005e12:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	37d8      	adds	r7, #216	@ 0xd8
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	80080000 	.word	0x80080000
 8005e24:	50040300 	.word	0x50040300
 8005e28:	c7520000 	.word	0xc7520000
 8005e2c:	50040000 	.word	0x50040000
 8005e30:	50040200 	.word	0x50040200
 8005e34:	20000140 	.word	0x20000140
 8005e38:	053e2d63 	.word	0x053e2d63
 8005e3c:	cb840000 	.word	0xcb840000
 8005e40:	80000001 	.word	0x80000001

08005e44 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4618      	mov	r0, r3
 8005e56:	f7fe fefb 	bl	8004c50 <LL_ADC_IsEnabled>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d169      	bne.n	8005f34 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689a      	ldr	r2, [r3, #8]
 8005e66:	4b36      	ldr	r3, [pc, #216]	@ (8005f40 <ADC_Enable+0xfc>)
 8005e68:	4013      	ands	r3, r2
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00d      	beq.n	8005e8a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e72:	f043 0210 	orr.w	r2, r3, #16
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e7e:	f043 0201 	orr.w	r2, r3, #1
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e055      	b.n	8005f36 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7fe feca 	bl	8004c28 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005e94:	482b      	ldr	r0, [pc, #172]	@ (8005f44 <ADC_Enable+0x100>)
 8005e96:	f7fe fd59 	bl	800494c <LL_ADC_GetCommonPathInternalCh>
 8005e9a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005e9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d013      	beq.n	8005ecc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005ea4:	4b28      	ldr	r3, [pc, #160]	@ (8005f48 <ADC_Enable+0x104>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	099b      	lsrs	r3, r3, #6
 8005eaa:	4a28      	ldr	r2, [pc, #160]	@ (8005f4c <ADC_Enable+0x108>)
 8005eac:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb0:	099b      	lsrs	r3, r3, #6
 8005eb2:	1c5a      	adds	r2, r3, #1
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	005b      	lsls	r3, r3, #1
 8005eb8:	4413      	add	r3, r2
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005ebe:	e002      	b.n	8005ec6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1f9      	bne.n	8005ec0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005ecc:	f7fe fce8 	bl	80048a0 <HAL_GetTick>
 8005ed0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ed2:	e028      	b.n	8005f26 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7fe feb9 	bl	8004c50 <LL_ADC_IsEnabled>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d104      	bne.n	8005eee <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7fe fe9d 	bl	8004c28 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005eee:	f7fe fcd7 	bl	80048a0 <HAL_GetTick>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d914      	bls.n	8005f26 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0301 	and.w	r3, r3, #1
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d00d      	beq.n	8005f26 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f0e:	f043 0210 	orr.w	r2, r3, #16
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f1a:	f043 0201 	orr.w	r2, r3, #1
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e007      	b.n	8005f36 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0301 	and.w	r3, r3, #1
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d1cf      	bne.n	8005ed4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	8000003f 	.word	0x8000003f
 8005f44:	50040300 	.word	0x50040300
 8005f48:	20000140 	.word	0x20000140
 8005f4c:	053e2d63 	.word	0x053e2d63

08005f50 <LL_ADC_IsEnabled>:
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f003 0301 	and.w	r3, r3, #1
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d101      	bne.n	8005f68 <LL_ADC_IsEnabled+0x18>
 8005f64:	2301      	movs	r3, #1
 8005f66:	e000      	b.n	8005f6a <LL_ADC_IsEnabled+0x1a>
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	370c      	adds	r7, #12
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr

08005f76 <LL_ADC_REG_IsConversionOngoing>:
{
 8005f76:	b480      	push	{r7}
 8005f78:	b083      	sub	sp, #12
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f003 0304 	and.w	r3, r3, #4
 8005f86:	2b04      	cmp	r3, #4
 8005f88:	d101      	bne.n	8005f8e <LL_ADC_REG_IsConversionOngoing+0x18>
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e000      	b.n	8005f90 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005fb8:	bf00      	nop
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005fcc:	bf00      	nop
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005ff4:	bf00      	nop
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8006000:	b590      	push	{r4, r7, lr}
 8006002:	b09f      	sub	sp, #124	@ 0x7c
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800600a:	2300      	movs	r3, #0
 800600c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006016:	2b01      	cmp	r3, #1
 8006018:	d101      	bne.n	800601e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800601a:	2302      	movs	r3, #2
 800601c:	e093      	b.n	8006146 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8006026:	2300      	movs	r3, #0
 8006028:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800602a:	2300      	movs	r3, #0
 800602c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a47      	ldr	r2, [pc, #284]	@ (8006150 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d102      	bne.n	800603e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006038:	4b46      	ldr	r3, [pc, #280]	@ (8006154 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800603a:	60bb      	str	r3, [r7, #8]
 800603c:	e001      	b.n	8006042 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800603e:	2300      	movs	r3, #0
 8006040:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d10b      	bne.n	8006060 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800604c:	f043 0220 	orr.w	r2, r3, #32
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	e072      	b.n	8006146 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	4618      	mov	r0, r3
 8006064:	f7ff ff87 	bl	8005f76 <LL_ADC_REG_IsConversionOngoing>
 8006068:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4618      	mov	r0, r3
 8006070:	f7ff ff81 	bl	8005f76 <LL_ADC_REG_IsConversionOngoing>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d154      	bne.n	8006124 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800607a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800607c:	2b00      	cmp	r3, #0
 800607e:	d151      	bne.n	8006124 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006080:	4b35      	ldr	r3, [pc, #212]	@ (8006158 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8006082:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d02c      	beq.n	80060e6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800608c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	6859      	ldr	r1, [r3, #4]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800609e:	035b      	lsls	r3, r3, #13
 80060a0:	430b      	orrs	r3, r1
 80060a2:	431a      	orrs	r2, r3
 80060a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060a6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80060a8:	4829      	ldr	r0, [pc, #164]	@ (8006150 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80060aa:	f7ff ff51 	bl	8005f50 <LL_ADC_IsEnabled>
 80060ae:	4604      	mov	r4, r0
 80060b0:	4828      	ldr	r0, [pc, #160]	@ (8006154 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80060b2:	f7ff ff4d 	bl	8005f50 <LL_ADC_IsEnabled>
 80060b6:	4603      	mov	r3, r0
 80060b8:	431c      	orrs	r4, r3
 80060ba:	4828      	ldr	r0, [pc, #160]	@ (800615c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80060bc:	f7ff ff48 	bl	8005f50 <LL_ADC_IsEnabled>
 80060c0:	4603      	mov	r3, r0
 80060c2:	4323      	orrs	r3, r4
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d137      	bne.n	8006138 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80060c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80060d0:	f023 030f 	bic.w	r3, r3, #15
 80060d4:	683a      	ldr	r2, [r7, #0]
 80060d6:	6811      	ldr	r1, [r2, #0]
 80060d8:	683a      	ldr	r2, [r7, #0]
 80060da:	6892      	ldr	r2, [r2, #8]
 80060dc:	430a      	orrs	r2, r1
 80060de:	431a      	orrs	r2, r3
 80060e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060e2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80060e4:	e028      	b.n	8006138 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80060e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80060ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060f0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80060f2:	4817      	ldr	r0, [pc, #92]	@ (8006150 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80060f4:	f7ff ff2c 	bl	8005f50 <LL_ADC_IsEnabled>
 80060f8:	4604      	mov	r4, r0
 80060fa:	4816      	ldr	r0, [pc, #88]	@ (8006154 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80060fc:	f7ff ff28 	bl	8005f50 <LL_ADC_IsEnabled>
 8006100:	4603      	mov	r3, r0
 8006102:	431c      	orrs	r4, r3
 8006104:	4815      	ldr	r0, [pc, #84]	@ (800615c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8006106:	f7ff ff23 	bl	8005f50 <LL_ADC_IsEnabled>
 800610a:	4603      	mov	r3, r0
 800610c:	4323      	orrs	r3, r4
 800610e:	2b00      	cmp	r3, #0
 8006110:	d112      	bne.n	8006138 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006112:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800611a:	f023 030f 	bic.w	r3, r3, #15
 800611e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006120:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006122:	e009      	b.n	8006138 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006128:	f043 0220 	orr.w	r2, r3, #32
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8006136:	e000      	b.n	800613a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006138:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8006142:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8006146:	4618      	mov	r0, r3
 8006148:	377c      	adds	r7, #124	@ 0x7c
 800614a:	46bd      	mov	sp, r7
 800614c:	bd90      	pop	{r4, r7, pc}
 800614e:	bf00      	nop
 8006150:	50040000 	.word	0x50040000
 8006154:	50040100 	.word	0x50040100
 8006158:	50040300 	.word	0x50040300
 800615c:	50040200 	.word	0x50040200

08006160 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e0ed      	b.n	800634e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	d102      	bne.n	8006184 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7fb fa6a 	bl	8001658 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f042 0201 	orr.w	r2, r2, #1
 8006192:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006194:	f7fe fb84 	bl	80048a0 <HAL_GetTick>
 8006198:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800619a:	e012      	b.n	80061c2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800619c:	f7fe fb80 	bl	80048a0 <HAL_GetTick>
 80061a0:	4602      	mov	r2, r0
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	2b0a      	cmp	r3, #10
 80061a8:	d90b      	bls.n	80061c2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ae:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2205      	movs	r2, #5
 80061ba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e0c5      	b.n	800634e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	f003 0301 	and.w	r3, r3, #1
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d0e5      	beq.n	800619c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f022 0202 	bic.w	r2, r2, #2
 80061de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80061e0:	f7fe fb5e 	bl	80048a0 <HAL_GetTick>
 80061e4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80061e6:	e012      	b.n	800620e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80061e8:	f7fe fb5a 	bl	80048a0 <HAL_GetTick>
 80061ec:	4602      	mov	r2, r0
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	2b0a      	cmp	r3, #10
 80061f4:	d90b      	bls.n	800620e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061fa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2205      	movs	r2, #5
 8006206:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e09f      	b.n	800634e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	f003 0302 	and.w	r3, r3, #2
 8006218:	2b00      	cmp	r3, #0
 800621a:	d1e5      	bne.n	80061e8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	7e1b      	ldrb	r3, [r3, #24]
 8006220:	2b01      	cmp	r3, #1
 8006222:	d108      	bne.n	8006236 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006232:	601a      	str	r2, [r3, #0]
 8006234:	e007      	b.n	8006246 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006244:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	7e5b      	ldrb	r3, [r3, #25]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d108      	bne.n	8006260 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800625c:	601a      	str	r2, [r3, #0]
 800625e:	e007      	b.n	8006270 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800626e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	7e9b      	ldrb	r3, [r3, #26]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d108      	bne.n	800628a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f042 0220 	orr.w	r2, r2, #32
 8006286:	601a      	str	r2, [r3, #0]
 8006288:	e007      	b.n	800629a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f022 0220 	bic.w	r2, r2, #32
 8006298:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	7edb      	ldrb	r3, [r3, #27]
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d108      	bne.n	80062b4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f022 0210 	bic.w	r2, r2, #16
 80062b0:	601a      	str	r2, [r3, #0]
 80062b2:	e007      	b.n	80062c4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f042 0210 	orr.w	r2, r2, #16
 80062c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	7f1b      	ldrb	r3, [r3, #28]
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d108      	bne.n	80062de <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f042 0208 	orr.w	r2, r2, #8
 80062da:	601a      	str	r2, [r3, #0]
 80062dc:	e007      	b.n	80062ee <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f022 0208 	bic.w	r2, r2, #8
 80062ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	7f5b      	ldrb	r3, [r3, #29]
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d108      	bne.n	8006308 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f042 0204 	orr.w	r2, r2, #4
 8006304:	601a      	str	r2, [r3, #0]
 8006306:	e007      	b.n	8006318 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f022 0204 	bic.w	r2, r2, #4
 8006316:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	689a      	ldr	r2, [r3, #8]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	431a      	orrs	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	431a      	orrs	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	695b      	ldr	r3, [r3, #20]
 800632c:	ea42 0103 	orr.w	r1, r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	1e5a      	subs	r2, r3, #1
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	430a      	orrs	r2, r1
 800633c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8006356:	b480      	push	{r7}
 8006358:	b087      	sub	sp, #28
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
 800635e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f893 3020 	ldrb.w	r3, [r3, #32]
 800636c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800636e:	7cfb      	ldrb	r3, [r7, #19]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d003      	beq.n	800637c <HAL_CAN_ConfigFilter+0x26>
 8006374:	7cfb      	ldrb	r3, [r7, #19]
 8006376:	2b02      	cmp	r3, #2
 8006378:	f040 80aa 	bne.w	80064d0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006382:	f043 0201 	orr.w	r2, r3, #1
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	695b      	ldr	r3, [r3, #20]
 8006390:	f003 031f 	and.w	r3, r3, #31
 8006394:	2201      	movs	r2, #1
 8006396:	fa02 f303 	lsl.w	r3, r2, r3
 800639a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	43db      	mvns	r3, r3
 80063a6:	401a      	ands	r2, r3
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	69db      	ldr	r3, [r3, #28]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d123      	bne.n	80063fe <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	43db      	mvns	r3, r3
 80063c0:	401a      	ands	r2, r3
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80063d4:	683a      	ldr	r2, [r7, #0]
 80063d6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80063d8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	3248      	adds	r2, #72	@ 0x48
 80063de:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80063f2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80063f4:	6979      	ldr	r1, [r7, #20]
 80063f6:	3348      	adds	r3, #72	@ 0x48
 80063f8:	00db      	lsls	r3, r3, #3
 80063fa:	440b      	add	r3, r1
 80063fc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	69db      	ldr	r3, [r3, #28]
 8006402:	2b01      	cmp	r3, #1
 8006404:	d122      	bne.n	800644c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	431a      	orrs	r2, r3
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006422:	683a      	ldr	r2, [r7, #0]
 8006424:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006426:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	3248      	adds	r2, #72	@ 0x48
 800642c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006440:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006442:	6979      	ldr	r1, [r7, #20]
 8006444:	3348      	adds	r3, #72	@ 0x48
 8006446:	00db      	lsls	r3, r3, #3
 8006448:	440b      	add	r3, r1
 800644a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d109      	bne.n	8006468 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	43db      	mvns	r3, r3
 800645e:	401a      	ands	r2, r3
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8006466:	e007      	b.n	8006478 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	431a      	orrs	r2, r3
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d109      	bne.n	8006494 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	43db      	mvns	r3, r3
 800648a:	401a      	ands	r2, r3
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8006492:	e007      	b.n	80064a4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	431a      	orrs	r2, r3
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	6a1b      	ldr	r3, [r3, #32]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d107      	bne.n	80064bc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	431a      	orrs	r2, r3
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80064c2:	f023 0201 	bic.w	r2, r3, #1
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80064cc:	2300      	movs	r3, #0
 80064ce:	e006      	b.n	80064de <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
  }
}
 80064de:	4618      	mov	r0, r3
 80064e0:	371c      	adds	r7, #28
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr

080064ea <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b084      	sub	sp, #16
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d12e      	bne.n	800655c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2202      	movs	r2, #2
 8006502:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f022 0201 	bic.w	r2, r2, #1
 8006514:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006516:	f7fe f9c3 	bl	80048a0 <HAL_GetTick>
 800651a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800651c:	e012      	b.n	8006544 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800651e:	f7fe f9bf 	bl	80048a0 <HAL_GetTick>
 8006522:	4602      	mov	r2, r0
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	2b0a      	cmp	r3, #10
 800652a:	d90b      	bls.n	8006544 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006530:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2205      	movs	r2, #5
 800653c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e012      	b.n	800656a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1e5      	bne.n	800651e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8006558:	2300      	movs	r3, #0
 800655a:	e006      	b.n	800656a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006560:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006568:	2301      	movs	r3, #1
  }
}
 800656a:	4618      	mov	r0, r3
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8006572:	b480      	push	{r7}
 8006574:	b087      	sub	sp, #28
 8006576:	af00      	add	r7, sp, #0
 8006578:	60f8      	str	r0, [r7, #12]
 800657a:	60b9      	str	r1, [r7, #8]
 800657c:	607a      	str	r2, [r7, #4]
 800657e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006586:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8006588:	7dfb      	ldrb	r3, [r7, #23]
 800658a:	2b01      	cmp	r3, #1
 800658c:	d003      	beq.n	8006596 <HAL_CAN_GetRxMessage+0x24>
 800658e:	7dfb      	ldrb	r3, [r7, #23]
 8006590:	2b02      	cmp	r3, #2
 8006592:	f040 8103 	bne.w	800679c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d10e      	bne.n	80065ba <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	f003 0303 	and.w	r3, r3, #3
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d116      	bne.n	80065d8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ae:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e0f7      	b.n	80067aa <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	f003 0303 	and.w	r3, r3, #3
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d107      	bne.n	80065d8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065cc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e0e8      	b.n	80067aa <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	331b      	adds	r3, #27
 80065e0:	011b      	lsls	r3, r3, #4
 80065e2:	4413      	add	r3, r2
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 0204 	and.w	r2, r3, #4
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d10c      	bne.n	8006610 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	331b      	adds	r3, #27
 80065fe:	011b      	lsls	r3, r3, #4
 8006600:	4413      	add	r3, r2
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	0d5b      	lsrs	r3, r3, #21
 8006606:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	601a      	str	r2, [r3, #0]
 800660e:	e00b      	b.n	8006628 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	331b      	adds	r3, #27
 8006618:	011b      	lsls	r3, r3, #4
 800661a:	4413      	add	r3, r2
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	08db      	lsrs	r3, r3, #3
 8006620:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	331b      	adds	r3, #27
 8006630:	011b      	lsls	r3, r3, #4
 8006632:	4413      	add	r3, r2
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 0202 	and.w	r2, r3, #2
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	331b      	adds	r3, #27
 8006646:	011b      	lsls	r3, r3, #4
 8006648:	4413      	add	r3, r2
 800664a:	3304      	adds	r3, #4
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 0308 	and.w	r3, r3, #8
 8006652:	2b00      	cmp	r3, #0
 8006654:	d003      	beq.n	800665e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2208      	movs	r2, #8
 800665a:	611a      	str	r2, [r3, #16]
 800665c:	e00b      	b.n	8006676 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	331b      	adds	r3, #27
 8006666:	011b      	lsls	r3, r3, #4
 8006668:	4413      	add	r3, r2
 800666a:	3304      	adds	r3, #4
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 020f 	and.w	r2, r3, #15
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	331b      	adds	r3, #27
 800667e:	011b      	lsls	r3, r3, #4
 8006680:	4413      	add	r3, r2
 8006682:	3304      	adds	r3, #4
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	0a1b      	lsrs	r3, r3, #8
 8006688:	b2da      	uxtb	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	331b      	adds	r3, #27
 8006696:	011b      	lsls	r3, r3, #4
 8006698:	4413      	add	r3, r2
 800669a:	3304      	adds	r3, #4
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	0c1b      	lsrs	r3, r3, #16
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	011b      	lsls	r3, r3, #4
 80066ae:	4413      	add	r3, r2
 80066b0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	b2da      	uxtb	r2, r3
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	011b      	lsls	r3, r3, #4
 80066c4:	4413      	add	r3, r2
 80066c6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	0a1a      	lsrs	r2, r3, #8
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	3301      	adds	r3, #1
 80066d2:	b2d2      	uxtb	r2, r2
 80066d4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	011b      	lsls	r3, r3, #4
 80066de:	4413      	add	r3, r2
 80066e0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	0c1a      	lsrs	r2, r3, #16
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	3302      	adds	r3, #2
 80066ec:	b2d2      	uxtb	r2, r2
 80066ee:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	011b      	lsls	r3, r3, #4
 80066f8:	4413      	add	r3, r2
 80066fa:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	0e1a      	lsrs	r2, r3, #24
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	3303      	adds	r3, #3
 8006706:	b2d2      	uxtb	r2, r2
 8006708:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	011b      	lsls	r3, r3, #4
 8006712:	4413      	add	r3, r2
 8006714:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	3304      	adds	r3, #4
 800671e:	b2d2      	uxtb	r2, r2
 8006720:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	011b      	lsls	r3, r3, #4
 800672a:	4413      	add	r3, r2
 800672c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	0a1a      	lsrs	r2, r3, #8
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	3305      	adds	r3, #5
 8006738:	b2d2      	uxtb	r2, r2
 800673a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	011b      	lsls	r3, r3, #4
 8006744:	4413      	add	r3, r2
 8006746:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	0c1a      	lsrs	r2, r3, #16
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	3306      	adds	r3, #6
 8006752:	b2d2      	uxtb	r2, r2
 8006754:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	011b      	lsls	r3, r3, #4
 800675e:	4413      	add	r3, r2
 8006760:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	0e1a      	lsrs	r2, r3, #24
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	3307      	adds	r3, #7
 800676c:	b2d2      	uxtb	r2, r2
 800676e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d108      	bne.n	8006788 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68da      	ldr	r2, [r3, #12]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f042 0220 	orr.w	r2, r2, #32
 8006784:	60da      	str	r2, [r3, #12]
 8006786:	e007      	b.n	8006798 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	691a      	ldr	r2, [r3, #16]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f042 0220 	orr.w	r2, r2, #32
 8006796:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8006798:	2300      	movs	r3, #0
 800679a:	e006      	b.n	80067aa <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067a0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
  }
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	371c      	adds	r7, #28
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr

080067b6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80067b6:	b480      	push	{r7}
 80067b8:	b085      	sub	sp, #20
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
 80067be:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80067c6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80067c8:	7bfb      	ldrb	r3, [r7, #15]
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d002      	beq.n	80067d4 <HAL_CAN_ActivateNotification+0x1e>
 80067ce:	7bfb      	ldrb	r3, [r7, #15]
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d109      	bne.n	80067e8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6959      	ldr	r1, [r3, #20]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	683a      	ldr	r2, [r7, #0]
 80067e0:	430a      	orrs	r2, r1
 80067e2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80067e4:	2300      	movs	r3, #0
 80067e6:	e006      	b.n	80067f6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ec:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
  }
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3714      	adds	r7, #20
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b08a      	sub	sp, #40	@ 0x28
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800680a:	2300      	movs	r3, #0
 800680c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	695b      	ldr	r3, [r3, #20]
 8006814:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	699b      	ldr	r3, [r3, #24]
 800683c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800683e:	6a3b      	ldr	r3, [r7, #32]
 8006840:	f003 0301 	and.w	r3, r3, #1
 8006844:	2b00      	cmp	r3, #0
 8006846:	d07c      	beq.n	8006942 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	f003 0301 	and.w	r3, r3, #1
 800684e:	2b00      	cmp	r3, #0
 8006850:	d023      	beq.n	800689a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2201      	movs	r2, #1
 8006858:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	f003 0302 	and.w	r3, r3, #2
 8006860:	2b00      	cmp	r3, #0
 8006862:	d003      	beq.n	800686c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 f983 	bl	8006b70 <HAL_CAN_TxMailbox0CompleteCallback>
 800686a:	e016      	b.n	800689a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	f003 0304 	and.w	r3, r3, #4
 8006872:	2b00      	cmp	r3, #0
 8006874:	d004      	beq.n	8006880 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8006876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006878:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800687c:	627b      	str	r3, [r7, #36]	@ 0x24
 800687e:	e00c      	b.n	800689a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	f003 0308 	and.w	r3, r3, #8
 8006886:	2b00      	cmp	r3, #0
 8006888:	d004      	beq.n	8006894 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800688a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006890:	627b      	str	r3, [r7, #36]	@ 0x24
 8006892:	e002      	b.n	800689a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 f989 	bl	8006bac <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d024      	beq.n	80068ee <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80068ac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d003      	beq.n	80068c0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 f963 	bl	8006b84 <HAL_CAN_TxMailbox1CompleteCallback>
 80068be:	e016      	b.n	80068ee <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d004      	beq.n	80068d4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80068ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068cc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80068d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80068d2:	e00c      	b.n	80068ee <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d004      	beq.n	80068e8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80068de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80068e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80068e6:	e002      	b.n	80068ee <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 f969 	bl	8006bc0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d024      	beq.n	8006942 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8006900:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006908:	2b00      	cmp	r3, #0
 800690a:	d003      	beq.n	8006914 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 f943 	bl	8006b98 <HAL_CAN_TxMailbox2CompleteCallback>
 8006912:	e016      	b.n	8006942 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800691a:	2b00      	cmp	r3, #0
 800691c:	d004      	beq.n	8006928 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800691e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006920:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006924:	627b      	str	r3, [r7, #36]	@ 0x24
 8006926:	e00c      	b.n	8006942 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800692e:	2b00      	cmp	r3, #0
 8006930:	d004      	beq.n	800693c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8006932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006934:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006938:	627b      	str	r3, [r7, #36]	@ 0x24
 800693a:	e002      	b.n	8006942 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 f949 	bl	8006bd4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8006942:	6a3b      	ldr	r3, [r7, #32]
 8006944:	f003 0308 	and.w	r3, r3, #8
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00c      	beq.n	8006966 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	f003 0310 	and.w	r3, r3, #16
 8006952:	2b00      	cmp	r3, #0
 8006954:	d007      	beq.n	8006966 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8006956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006958:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800695c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2210      	movs	r2, #16
 8006964:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8006966:	6a3b      	ldr	r3, [r7, #32]
 8006968:	f003 0304 	and.w	r3, r3, #4
 800696c:	2b00      	cmp	r3, #0
 800696e:	d00b      	beq.n	8006988 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	f003 0308 	and.w	r3, r3, #8
 8006976:	2b00      	cmp	r3, #0
 8006978:	d006      	beq.n	8006988 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2208      	movs	r2, #8
 8006980:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 f930 	bl	8006be8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8006988:	6a3b      	ldr	r3, [r7, #32]
 800698a:	f003 0302 	and.w	r3, r3, #2
 800698e:	2b00      	cmp	r3, #0
 8006990:	d009      	beq.n	80069a6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	f003 0303 	and.w	r3, r3, #3
 800699c:	2b00      	cmp	r3, #0
 800699e:	d002      	beq.n	80069a6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f7fb fc57 	bl	8002254 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80069a6:	6a3b      	ldr	r3, [r7, #32]
 80069a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00c      	beq.n	80069ca <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	f003 0310 	and.w	r3, r3, #16
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d007      	beq.n	80069ca <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80069ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80069c0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2210      	movs	r2, #16
 80069c8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80069ca:	6a3b      	ldr	r3, [r7, #32]
 80069cc:	f003 0320 	and.w	r3, r3, #32
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00b      	beq.n	80069ec <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	f003 0308 	and.w	r3, r3, #8
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d006      	beq.n	80069ec <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2208      	movs	r2, #8
 80069e4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 f912 	bl	8006c10 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80069ec:	6a3b      	ldr	r3, [r7, #32]
 80069ee:	f003 0310 	and.w	r3, r3, #16
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d009      	beq.n	8006a0a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	f003 0303 	and.w	r3, r3, #3
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d002      	beq.n	8006a0a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 f8f9 	bl	8006bfc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8006a0a:	6a3b      	ldr	r3, [r7, #32]
 8006a0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00b      	beq.n	8006a2c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	f003 0310 	and.w	r3, r3, #16
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d006      	beq.n	8006a2c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	2210      	movs	r2, #16
 8006a24:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f8fc 	bl	8006c24 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8006a2c:	6a3b      	ldr	r3, [r7, #32]
 8006a2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00b      	beq.n	8006a4e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	f003 0308 	and.w	r3, r3, #8
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d006      	beq.n	8006a4e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2208      	movs	r2, #8
 8006a46:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 f8f5 	bl	8006c38 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8006a4e:	6a3b      	ldr	r3, [r7, #32]
 8006a50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d07b      	beq.n	8006b50 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	f003 0304 	and.w	r3, r3, #4
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d072      	beq.n	8006b48 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006a62:	6a3b      	ldr	r3, [r7, #32]
 8006a64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d008      	beq.n	8006a7e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d003      	beq.n	8006a7e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8006a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a78:	f043 0301 	orr.w	r3, r3, #1
 8006a7c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006a7e:	6a3b      	ldr	r3, [r7, #32]
 8006a80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d008      	beq.n	8006a9a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d003      	beq.n	8006a9a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8006a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a94:	f043 0302 	orr.w	r3, r3, #2
 8006a98:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006a9a:	6a3b      	ldr	r3, [r7, #32]
 8006a9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d008      	beq.n	8006ab6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d003      	beq.n	8006ab6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8006aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab0:	f043 0304 	orr.w	r3, r3, #4
 8006ab4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006ab6:	6a3b      	ldr	r3, [r7, #32]
 8006ab8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d043      	beq.n	8006b48 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d03e      	beq.n	8006b48 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ad0:	2b60      	cmp	r3, #96	@ 0x60
 8006ad2:	d02b      	beq.n	8006b2c <HAL_CAN_IRQHandler+0x32a>
 8006ad4:	2b60      	cmp	r3, #96	@ 0x60
 8006ad6:	d82e      	bhi.n	8006b36 <HAL_CAN_IRQHandler+0x334>
 8006ad8:	2b50      	cmp	r3, #80	@ 0x50
 8006ada:	d022      	beq.n	8006b22 <HAL_CAN_IRQHandler+0x320>
 8006adc:	2b50      	cmp	r3, #80	@ 0x50
 8006ade:	d82a      	bhi.n	8006b36 <HAL_CAN_IRQHandler+0x334>
 8006ae0:	2b40      	cmp	r3, #64	@ 0x40
 8006ae2:	d019      	beq.n	8006b18 <HAL_CAN_IRQHandler+0x316>
 8006ae4:	2b40      	cmp	r3, #64	@ 0x40
 8006ae6:	d826      	bhi.n	8006b36 <HAL_CAN_IRQHandler+0x334>
 8006ae8:	2b30      	cmp	r3, #48	@ 0x30
 8006aea:	d010      	beq.n	8006b0e <HAL_CAN_IRQHandler+0x30c>
 8006aec:	2b30      	cmp	r3, #48	@ 0x30
 8006aee:	d822      	bhi.n	8006b36 <HAL_CAN_IRQHandler+0x334>
 8006af0:	2b10      	cmp	r3, #16
 8006af2:	d002      	beq.n	8006afa <HAL_CAN_IRQHandler+0x2f8>
 8006af4:	2b20      	cmp	r3, #32
 8006af6:	d005      	beq.n	8006b04 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8006af8:	e01d      	b.n	8006b36 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8006afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006afc:	f043 0308 	orr.w	r3, r3, #8
 8006b00:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006b02:	e019      	b.n	8006b38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8006b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b06:	f043 0310 	orr.w	r3, r3, #16
 8006b0a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006b0c:	e014      	b.n	8006b38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b10:	f043 0320 	orr.w	r3, r3, #32
 8006b14:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006b16:	e00f      	b.n	8006b38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8006b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b1e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006b20:	e00a      	b.n	8006b38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8006b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b28:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006b2a:	e005      	b.n	8006b38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8006b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b32:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006b34:	e000      	b.n	8006b38 <HAL_CAN_IRQHandler+0x336>
            break;
 8006b36:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	699a      	ldr	r2, [r3, #24]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006b46:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2204      	movs	r2, #4
 8006b4e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8006b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d008      	beq.n	8006b68 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5c:	431a      	orrs	r2, r3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 f872 	bl	8006c4c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8006b68:	bf00      	nop
 8006b6a:	3728      	adds	r7, #40	@ 0x28
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8006b78:	bf00      	nop
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8006b8c:	bf00      	nop
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8006bb4:	bf00      	nop
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8006bc8:	bf00      	nop
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8006bdc:	bf00      	nop
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8006bf0:	bf00      	nop
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8006c04:	bf00      	nop
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8006c18:	bf00      	nop
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8006c2c:	bf00      	nop
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8006c54:	bf00      	nop
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f003 0307 	and.w	r3, r3, #7
 8006c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006c70:	4b0c      	ldr	r3, [pc, #48]	@ (8006ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006c76:	68ba      	ldr	r2, [r7, #8]
 8006c78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006c88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006c8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006c92:	4a04      	ldr	r2, [pc, #16]	@ (8006ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	60d3      	str	r3, [r2, #12]
}
 8006c98:	bf00      	nop
 8006c9a:	3714      	adds	r7, #20
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr
 8006ca4:	e000ed00 	.word	0xe000ed00

08006ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006cac:	4b04      	ldr	r3, [pc, #16]	@ (8006cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	0a1b      	lsrs	r3, r3, #8
 8006cb2:	f003 0307 	and.w	r3, r3, #7
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr
 8006cc0:	e000ed00 	.word	0xe000ed00

08006cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	4603      	mov	r3, r0
 8006ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	db0b      	blt.n	8006cee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006cd6:	79fb      	ldrb	r3, [r7, #7]
 8006cd8:	f003 021f 	and.w	r2, r3, #31
 8006cdc:	4907      	ldr	r1, [pc, #28]	@ (8006cfc <__NVIC_EnableIRQ+0x38>)
 8006cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ce2:	095b      	lsrs	r3, r3, #5
 8006ce4:	2001      	movs	r0, #1
 8006ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8006cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006cee:	bf00      	nop
 8006cf0:	370c      	adds	r7, #12
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	e000e100 	.word	0xe000e100

08006d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	4603      	mov	r3, r0
 8006d08:	6039      	str	r1, [r7, #0]
 8006d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	db0a      	blt.n	8006d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	b2da      	uxtb	r2, r3
 8006d18:	490c      	ldr	r1, [pc, #48]	@ (8006d4c <__NVIC_SetPriority+0x4c>)
 8006d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d1e:	0112      	lsls	r2, r2, #4
 8006d20:	b2d2      	uxtb	r2, r2
 8006d22:	440b      	add	r3, r1
 8006d24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006d28:	e00a      	b.n	8006d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	b2da      	uxtb	r2, r3
 8006d2e:	4908      	ldr	r1, [pc, #32]	@ (8006d50 <__NVIC_SetPriority+0x50>)
 8006d30:	79fb      	ldrb	r3, [r7, #7]
 8006d32:	f003 030f 	and.w	r3, r3, #15
 8006d36:	3b04      	subs	r3, #4
 8006d38:	0112      	lsls	r2, r2, #4
 8006d3a:	b2d2      	uxtb	r2, r2
 8006d3c:	440b      	add	r3, r1
 8006d3e:	761a      	strb	r2, [r3, #24]
}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr
 8006d4c:	e000e100 	.word	0xe000e100
 8006d50:	e000ed00 	.word	0xe000ed00

08006d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b089      	sub	sp, #36	@ 0x24
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f003 0307 	and.w	r3, r3, #7
 8006d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	f1c3 0307 	rsb	r3, r3, #7
 8006d6e:	2b04      	cmp	r3, #4
 8006d70:	bf28      	it	cs
 8006d72:	2304      	movcs	r3, #4
 8006d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	3304      	adds	r3, #4
 8006d7a:	2b06      	cmp	r3, #6
 8006d7c:	d902      	bls.n	8006d84 <NVIC_EncodePriority+0x30>
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	3b03      	subs	r3, #3
 8006d82:	e000      	b.n	8006d86 <NVIC_EncodePriority+0x32>
 8006d84:	2300      	movs	r3, #0
 8006d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d88:	f04f 32ff 	mov.w	r2, #4294967295
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d92:	43da      	mvns	r2, r3
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	401a      	ands	r2, r3
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	fa01 f303 	lsl.w	r3, r1, r3
 8006da6:	43d9      	mvns	r1, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006dac:	4313      	orrs	r3, r2
         );
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3724      	adds	r7, #36	@ 0x24
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr
	...

08006dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006dcc:	d301      	bcc.n	8006dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e00f      	b.n	8006df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8006dfc <SysTick_Config+0x40>)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006dda:	210f      	movs	r1, #15
 8006ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8006de0:	f7ff ff8e 	bl	8006d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006de4:	4b05      	ldr	r3, [pc, #20]	@ (8006dfc <SysTick_Config+0x40>)
 8006de6:	2200      	movs	r2, #0
 8006de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006dea:	4b04      	ldr	r3, [pc, #16]	@ (8006dfc <SysTick_Config+0x40>)
 8006dec:	2207      	movs	r2, #7
 8006dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006df0:	2300      	movs	r3, #0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3708      	adds	r7, #8
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	e000e010 	.word	0xe000e010

08006e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f7ff ff29 	bl	8006c60 <__NVIC_SetPriorityGrouping>
}
 8006e0e:	bf00      	nop
 8006e10:	3708      	adds	r7, #8
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b086      	sub	sp, #24
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	60b9      	str	r1, [r7, #8]
 8006e20:	607a      	str	r2, [r7, #4]
 8006e22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006e24:	2300      	movs	r3, #0
 8006e26:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006e28:	f7ff ff3e 	bl	8006ca8 <__NVIC_GetPriorityGrouping>
 8006e2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	68b9      	ldr	r1, [r7, #8]
 8006e32:	6978      	ldr	r0, [r7, #20]
 8006e34:	f7ff ff8e 	bl	8006d54 <NVIC_EncodePriority>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e3e:	4611      	mov	r1, r2
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7ff ff5d 	bl	8006d00 <__NVIC_SetPriority>
}
 8006e46:	bf00      	nop
 8006e48:	3718      	adds	r7, #24
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b082      	sub	sp, #8
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	4603      	mov	r3, r0
 8006e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f7ff ff31 	bl	8006cc4 <__NVIC_EnableIRQ>
}
 8006e62:	bf00      	nop
 8006e64:	3708      	adds	r7, #8
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b082      	sub	sp, #8
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f7ff ffa2 	bl	8006dbc <SysTick_Config>
 8006e78:	4603      	mov	r3, r0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3708      	adds	r7, #8
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
	...

08006e84 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b085      	sub	sp, #20
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d101      	bne.n	8006e96 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e098      	b.n	8006fc8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	4b4d      	ldr	r3, [pc, #308]	@ (8006fd4 <HAL_DMA_Init+0x150>)
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d80f      	bhi.n	8006ec2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	4b4b      	ldr	r3, [pc, #300]	@ (8006fd8 <HAL_DMA_Init+0x154>)
 8006eaa:	4413      	add	r3, r2
 8006eac:	4a4b      	ldr	r2, [pc, #300]	@ (8006fdc <HAL_DMA_Init+0x158>)
 8006eae:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb2:	091b      	lsrs	r3, r3, #4
 8006eb4:	009a      	lsls	r2, r3, #2
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a48      	ldr	r2, [pc, #288]	@ (8006fe0 <HAL_DMA_Init+0x15c>)
 8006ebe:	641a      	str	r2, [r3, #64]	@ 0x40
 8006ec0:	e00e      	b.n	8006ee0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	4b46      	ldr	r3, [pc, #280]	@ (8006fe4 <HAL_DMA_Init+0x160>)
 8006eca:	4413      	add	r3, r2
 8006ecc:	4a43      	ldr	r2, [pc, #268]	@ (8006fdc <HAL_DMA_Init+0x158>)
 8006ece:	fba2 2303 	umull	r2, r3, r2, r3
 8006ed2:	091b      	lsrs	r3, r3, #4
 8006ed4:	009a      	lsls	r2, r3, #2
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a42      	ldr	r2, [pc, #264]	@ (8006fe8 <HAL_DMA_Init+0x164>)
 8006ede:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2202      	movs	r2, #2
 8006ee4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006ef6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006efa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006f04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a1b      	ldr	r3, [r3, #32]
 8006f22:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f3a:	d039      	beq.n	8006fb0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f40:	4a27      	ldr	r2, [pc, #156]	@ (8006fe0 <HAL_DMA_Init+0x15c>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d11a      	bne.n	8006f7c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006f46:	4b29      	ldr	r3, [pc, #164]	@ (8006fec <HAL_DMA_Init+0x168>)
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f4e:	f003 031c 	and.w	r3, r3, #28
 8006f52:	210f      	movs	r1, #15
 8006f54:	fa01 f303 	lsl.w	r3, r1, r3
 8006f58:	43db      	mvns	r3, r3
 8006f5a:	4924      	ldr	r1, [pc, #144]	@ (8006fec <HAL_DMA_Init+0x168>)
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006f60:	4b22      	ldr	r3, [pc, #136]	@ (8006fec <HAL_DMA_Init+0x168>)
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6859      	ldr	r1, [r3, #4]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f6c:	f003 031c 	and.w	r3, r3, #28
 8006f70:	fa01 f303 	lsl.w	r3, r1, r3
 8006f74:	491d      	ldr	r1, [pc, #116]	@ (8006fec <HAL_DMA_Init+0x168>)
 8006f76:	4313      	orrs	r3, r2
 8006f78:	600b      	str	r3, [r1, #0]
 8006f7a:	e019      	b.n	8006fb0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006f7c:	4b1c      	ldr	r3, [pc, #112]	@ (8006ff0 <HAL_DMA_Init+0x16c>)
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f84:	f003 031c 	and.w	r3, r3, #28
 8006f88:	210f      	movs	r1, #15
 8006f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f8e:	43db      	mvns	r3, r3
 8006f90:	4917      	ldr	r1, [pc, #92]	@ (8006ff0 <HAL_DMA_Init+0x16c>)
 8006f92:	4013      	ands	r3, r2
 8006f94:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006f96:	4b16      	ldr	r3, [pc, #88]	@ (8006ff0 <HAL_DMA_Init+0x16c>)
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6859      	ldr	r1, [r3, #4]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fa2:	f003 031c 	and.w	r3, r3, #28
 8006fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8006faa:	4911      	ldr	r1, [pc, #68]	@ (8006ff0 <HAL_DMA_Init+0x16c>)
 8006fac:	4313      	orrs	r3, r2
 8006fae:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3714      	adds	r7, #20
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr
 8006fd4:	40020407 	.word	0x40020407
 8006fd8:	bffdfff8 	.word	0xbffdfff8
 8006fdc:	cccccccd 	.word	0xcccccccd
 8006fe0:	40020000 	.word	0x40020000
 8006fe4:	bffdfbf8 	.word	0xbffdfbf8
 8006fe8:	40020400 	.word	0x40020400
 8006fec:	400200a8 	.word	0x400200a8
 8006ff0:	400204a8 	.word	0x400204a8

08006ff4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]
 8007000:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007002:	2300      	movs	r3, #0
 8007004:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800700c:	2b01      	cmp	r3, #1
 800700e:	d101      	bne.n	8007014 <HAL_DMA_Start_IT+0x20>
 8007010:	2302      	movs	r3, #2
 8007012:	e04b      	b.n	80070ac <HAL_DMA_Start_IT+0xb8>
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007022:	b2db      	uxtb	r3, r3
 8007024:	2b01      	cmp	r3, #1
 8007026:	d13a      	bne.n	800709e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2202      	movs	r2, #2
 800702c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2200      	movs	r2, #0
 8007034:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f022 0201 	bic.w	r2, r2, #1
 8007044:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	68b9      	ldr	r1, [r7, #8]
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	f000 f95f 	bl	8007310 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007056:	2b00      	cmp	r3, #0
 8007058:	d008      	beq.n	800706c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f042 020e 	orr.w	r2, r2, #14
 8007068:	601a      	str	r2, [r3, #0]
 800706a:	e00f      	b.n	800708c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f022 0204 	bic.w	r2, r2, #4
 800707a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f042 020a 	orr.w	r2, r2, #10
 800708a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f042 0201 	orr.w	r2, r2, #1
 800709a:	601a      	str	r2, [r3, #0]
 800709c:	e005      	b.n	80070aa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80070a6:	2302      	movs	r3, #2
 80070a8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80070aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3718      	adds	r7, #24
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b085      	sub	sp, #20
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070bc:	2300      	movs	r3, #0
 80070be:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d008      	beq.n	80070de <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2204      	movs	r2, #4
 80070d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	e022      	b.n	8007124 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f022 020e 	bic.w	r2, r2, #14
 80070ec:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f022 0201 	bic.w	r2, r2, #1
 80070fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007102:	f003 021c 	and.w	r2, r3, #28
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800710a:	2101      	movs	r1, #1
 800710c:	fa01 f202 	lsl.w	r2, r1, r2
 8007110:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2201      	movs	r2, #1
 8007116:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8007122:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8007124:	4618      	mov	r0, r3
 8007126:	3714      	adds	r7, #20
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007138:	2300      	movs	r3, #0
 800713a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007142:	b2db      	uxtb	r3, r3
 8007144:	2b02      	cmp	r3, #2
 8007146:	d005      	beq.n	8007154 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2204      	movs	r2, #4
 800714c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	73fb      	strb	r3, [r7, #15]
 8007152:	e029      	b.n	80071a8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f022 020e 	bic.w	r2, r2, #14
 8007162:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f022 0201 	bic.w	r2, r2, #1
 8007172:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007178:	f003 021c 	and.w	r2, r3, #28
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007180:	2101      	movs	r1, #1
 8007182:	fa01 f202 	lsl.w	r2, r1, r2
 8007186:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800719c:	2b00      	cmp	r3, #0
 800719e:	d003      	beq.n	80071a8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	4798      	blx	r3
    }
  }
  return status;
 80071a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b084      	sub	sp, #16
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071ce:	f003 031c 	and.w	r3, r3, #28
 80071d2:	2204      	movs	r2, #4
 80071d4:	409a      	lsls	r2, r3
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	4013      	ands	r3, r2
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d026      	beq.n	800722c <HAL_DMA_IRQHandler+0x7a>
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	f003 0304 	and.w	r3, r3, #4
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d021      	beq.n	800722c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 0320 	and.w	r3, r3, #32
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d107      	bne.n	8007206 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f022 0204 	bic.w	r2, r2, #4
 8007204:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800720a:	f003 021c 	and.w	r2, r3, #28
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007212:	2104      	movs	r1, #4
 8007214:	fa01 f202 	lsl.w	r2, r1, r2
 8007218:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800721e:	2b00      	cmp	r3, #0
 8007220:	d071      	beq.n	8007306 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800722a:	e06c      	b.n	8007306 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007230:	f003 031c 	and.w	r3, r3, #28
 8007234:	2202      	movs	r2, #2
 8007236:	409a      	lsls	r2, r3
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	4013      	ands	r3, r2
 800723c:	2b00      	cmp	r3, #0
 800723e:	d02e      	beq.n	800729e <HAL_DMA_IRQHandler+0xec>
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	f003 0302 	and.w	r3, r3, #2
 8007246:	2b00      	cmp	r3, #0
 8007248:	d029      	beq.n	800729e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 0320 	and.w	r3, r3, #32
 8007254:	2b00      	cmp	r3, #0
 8007256:	d10b      	bne.n	8007270 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f022 020a 	bic.w	r2, r2, #10
 8007266:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007274:	f003 021c 	and.w	r2, r3, #28
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800727c:	2102      	movs	r1, #2
 800727e:	fa01 f202 	lsl.w	r2, r1, r2
 8007282:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007290:	2b00      	cmp	r3, #0
 8007292:	d038      	beq.n	8007306 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800729c:	e033      	b.n	8007306 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072a2:	f003 031c 	and.w	r3, r3, #28
 80072a6:	2208      	movs	r2, #8
 80072a8:	409a      	lsls	r2, r3
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	4013      	ands	r3, r2
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d02a      	beq.n	8007308 <HAL_DMA_IRQHandler+0x156>
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	f003 0308 	and.w	r3, r3, #8
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d025      	beq.n	8007308 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f022 020e 	bic.w	r2, r2, #14
 80072ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072d0:	f003 021c 	and.w	r2, r3, #28
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072d8:	2101      	movs	r1, #1
 80072da:	fa01 f202 	lsl.w	r2, r1, r2
 80072de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2201      	movs	r2, #1
 80072ea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d004      	beq.n	8007308 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007306:	bf00      	nop
 8007308:	bf00      	nop
}
 800730a:	3710      	adds	r7, #16
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	607a      	str	r2, [r7, #4]
 800731c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007322:	f003 021c 	and.w	r2, r3, #28
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800732a:	2101      	movs	r1, #1
 800732c:	fa01 f202 	lsl.w	r2, r1, r2
 8007330:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	683a      	ldr	r2, [r7, #0]
 8007338:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	2b10      	cmp	r3, #16
 8007340:	d108      	bne.n	8007354 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	68ba      	ldr	r2, [r7, #8]
 8007350:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007352:	e007      	b.n	8007364 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68ba      	ldr	r2, [r7, #8]
 800735a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	60da      	str	r2, [r3, #12]
}
 8007364:	bf00      	nop
 8007366:	3714      	adds	r7, #20
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007370:	b480      	push	{r7}
 8007372:	b087      	sub	sp, #28
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800737a:	2300      	movs	r3, #0
 800737c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800737e:	e17f      	b.n	8007680 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	2101      	movs	r1, #1
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	fa01 f303 	lsl.w	r3, r1, r3
 800738c:	4013      	ands	r3, r2
 800738e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2b00      	cmp	r3, #0
 8007394:	f000 8171 	beq.w	800767a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	f003 0303 	and.w	r3, r3, #3
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d005      	beq.n	80073b0 <HAL_GPIO_Init+0x40>
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	f003 0303 	and.w	r3, r3, #3
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	d130      	bne.n	8007412 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	005b      	lsls	r3, r3, #1
 80073ba:	2203      	movs	r2, #3
 80073bc:	fa02 f303 	lsl.w	r3, r2, r3
 80073c0:	43db      	mvns	r3, r3
 80073c2:	693a      	ldr	r2, [r7, #16]
 80073c4:	4013      	ands	r3, r2
 80073c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	68da      	ldr	r2, [r3, #12]
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	005b      	lsls	r3, r3, #1
 80073d0:	fa02 f303 	lsl.w	r3, r2, r3
 80073d4:	693a      	ldr	r2, [r7, #16]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	693a      	ldr	r2, [r7, #16]
 80073de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80073e6:	2201      	movs	r2, #1
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	fa02 f303 	lsl.w	r3, r2, r3
 80073ee:	43db      	mvns	r3, r3
 80073f0:	693a      	ldr	r2, [r7, #16]
 80073f2:	4013      	ands	r3, r2
 80073f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	091b      	lsrs	r3, r3, #4
 80073fc:	f003 0201 	and.w	r2, r3, #1
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	fa02 f303 	lsl.w	r3, r2, r3
 8007406:	693a      	ldr	r2, [r7, #16]
 8007408:	4313      	orrs	r3, r2
 800740a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	693a      	ldr	r2, [r7, #16]
 8007410:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	f003 0303 	and.w	r3, r3, #3
 800741a:	2b03      	cmp	r3, #3
 800741c:	d118      	bne.n	8007450 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007422:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8007424:	2201      	movs	r2, #1
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	fa02 f303 	lsl.w	r3, r2, r3
 800742c:	43db      	mvns	r3, r3
 800742e:	693a      	ldr	r2, [r7, #16]
 8007430:	4013      	ands	r3, r2
 8007432:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	08db      	lsrs	r3, r3, #3
 800743a:	f003 0201 	and.w	r2, r3, #1
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	fa02 f303 	lsl.w	r3, r2, r3
 8007444:	693a      	ldr	r2, [r7, #16]
 8007446:	4313      	orrs	r3, r2
 8007448:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	693a      	ldr	r2, [r7, #16]
 800744e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	f003 0303 	and.w	r3, r3, #3
 8007458:	2b03      	cmp	r3, #3
 800745a:	d017      	beq.n	800748c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	005b      	lsls	r3, r3, #1
 8007466:	2203      	movs	r2, #3
 8007468:	fa02 f303 	lsl.w	r3, r2, r3
 800746c:	43db      	mvns	r3, r3
 800746e:	693a      	ldr	r2, [r7, #16]
 8007470:	4013      	ands	r3, r2
 8007472:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	689a      	ldr	r2, [r3, #8]
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	005b      	lsls	r3, r3, #1
 800747c:	fa02 f303 	lsl.w	r3, r2, r3
 8007480:	693a      	ldr	r2, [r7, #16]
 8007482:	4313      	orrs	r3, r2
 8007484:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	693a      	ldr	r2, [r7, #16]
 800748a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	f003 0303 	and.w	r3, r3, #3
 8007494:	2b02      	cmp	r3, #2
 8007496:	d123      	bne.n	80074e0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	08da      	lsrs	r2, r3, #3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	3208      	adds	r2, #8
 80074a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	f003 0307 	and.w	r3, r3, #7
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	220f      	movs	r2, #15
 80074b0:	fa02 f303 	lsl.w	r3, r2, r3
 80074b4:	43db      	mvns	r3, r3
 80074b6:	693a      	ldr	r2, [r7, #16]
 80074b8:	4013      	ands	r3, r2
 80074ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	691a      	ldr	r2, [r3, #16]
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	f003 0307 	and.w	r3, r3, #7
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	fa02 f303 	lsl.w	r3, r2, r3
 80074cc:	693a      	ldr	r2, [r7, #16]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	08da      	lsrs	r2, r3, #3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	3208      	adds	r2, #8
 80074da:	6939      	ldr	r1, [r7, #16]
 80074dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	005b      	lsls	r3, r3, #1
 80074ea:	2203      	movs	r2, #3
 80074ec:	fa02 f303 	lsl.w	r3, r2, r3
 80074f0:	43db      	mvns	r3, r3
 80074f2:	693a      	ldr	r2, [r7, #16]
 80074f4:	4013      	ands	r3, r2
 80074f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	f003 0203 	and.w	r2, r3, #3
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	005b      	lsls	r3, r3, #1
 8007504:	fa02 f303 	lsl.w	r3, r2, r3
 8007508:	693a      	ldr	r2, [r7, #16]
 800750a:	4313      	orrs	r3, r2
 800750c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	693a      	ldr	r2, [r7, #16]
 8007512:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800751c:	2b00      	cmp	r3, #0
 800751e:	f000 80ac 	beq.w	800767a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007522:	4b5f      	ldr	r3, [pc, #380]	@ (80076a0 <HAL_GPIO_Init+0x330>)
 8007524:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007526:	4a5e      	ldr	r2, [pc, #376]	@ (80076a0 <HAL_GPIO_Init+0x330>)
 8007528:	f043 0301 	orr.w	r3, r3, #1
 800752c:	6613      	str	r3, [r2, #96]	@ 0x60
 800752e:	4b5c      	ldr	r3, [pc, #368]	@ (80076a0 <HAL_GPIO_Init+0x330>)
 8007530:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007532:	f003 0301 	and.w	r3, r3, #1
 8007536:	60bb      	str	r3, [r7, #8]
 8007538:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800753a:	4a5a      	ldr	r2, [pc, #360]	@ (80076a4 <HAL_GPIO_Init+0x334>)
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	089b      	lsrs	r3, r3, #2
 8007540:	3302      	adds	r3, #2
 8007542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007546:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	f003 0303 	and.w	r3, r3, #3
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	220f      	movs	r2, #15
 8007552:	fa02 f303 	lsl.w	r3, r2, r3
 8007556:	43db      	mvns	r3, r3
 8007558:	693a      	ldr	r2, [r7, #16]
 800755a:	4013      	ands	r3, r2
 800755c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007564:	d025      	beq.n	80075b2 <HAL_GPIO_Init+0x242>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a4f      	ldr	r2, [pc, #316]	@ (80076a8 <HAL_GPIO_Init+0x338>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d01f      	beq.n	80075ae <HAL_GPIO_Init+0x23e>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a4e      	ldr	r2, [pc, #312]	@ (80076ac <HAL_GPIO_Init+0x33c>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d019      	beq.n	80075aa <HAL_GPIO_Init+0x23a>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a4d      	ldr	r2, [pc, #308]	@ (80076b0 <HAL_GPIO_Init+0x340>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d013      	beq.n	80075a6 <HAL_GPIO_Init+0x236>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a4c      	ldr	r2, [pc, #304]	@ (80076b4 <HAL_GPIO_Init+0x344>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d00d      	beq.n	80075a2 <HAL_GPIO_Init+0x232>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a4b      	ldr	r2, [pc, #300]	@ (80076b8 <HAL_GPIO_Init+0x348>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d007      	beq.n	800759e <HAL_GPIO_Init+0x22e>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a4a      	ldr	r2, [pc, #296]	@ (80076bc <HAL_GPIO_Init+0x34c>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d101      	bne.n	800759a <HAL_GPIO_Init+0x22a>
 8007596:	2306      	movs	r3, #6
 8007598:	e00c      	b.n	80075b4 <HAL_GPIO_Init+0x244>
 800759a:	2307      	movs	r3, #7
 800759c:	e00a      	b.n	80075b4 <HAL_GPIO_Init+0x244>
 800759e:	2305      	movs	r3, #5
 80075a0:	e008      	b.n	80075b4 <HAL_GPIO_Init+0x244>
 80075a2:	2304      	movs	r3, #4
 80075a4:	e006      	b.n	80075b4 <HAL_GPIO_Init+0x244>
 80075a6:	2303      	movs	r3, #3
 80075a8:	e004      	b.n	80075b4 <HAL_GPIO_Init+0x244>
 80075aa:	2302      	movs	r3, #2
 80075ac:	e002      	b.n	80075b4 <HAL_GPIO_Init+0x244>
 80075ae:	2301      	movs	r3, #1
 80075b0:	e000      	b.n	80075b4 <HAL_GPIO_Init+0x244>
 80075b2:	2300      	movs	r3, #0
 80075b4:	697a      	ldr	r2, [r7, #20]
 80075b6:	f002 0203 	and.w	r2, r2, #3
 80075ba:	0092      	lsls	r2, r2, #2
 80075bc:	4093      	lsls	r3, r2
 80075be:	693a      	ldr	r2, [r7, #16]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80075c4:	4937      	ldr	r1, [pc, #220]	@ (80076a4 <HAL_GPIO_Init+0x334>)
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	089b      	lsrs	r3, r3, #2
 80075ca:	3302      	adds	r3, #2
 80075cc:	693a      	ldr	r2, [r7, #16]
 80075ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80075d2:	4b3b      	ldr	r3, [pc, #236]	@ (80076c0 <HAL_GPIO_Init+0x350>)
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	43db      	mvns	r3, r3
 80075dc:	693a      	ldr	r2, [r7, #16]
 80075de:	4013      	ands	r3, r2
 80075e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d003      	beq.n	80075f6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80075ee:	693a      	ldr	r2, [r7, #16]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80075f6:	4a32      	ldr	r2, [pc, #200]	@ (80076c0 <HAL_GPIO_Init+0x350>)
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80075fc:	4b30      	ldr	r3, [pc, #192]	@ (80076c0 <HAL_GPIO_Init+0x350>)
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	43db      	mvns	r3, r3
 8007606:	693a      	ldr	r2, [r7, #16]
 8007608:	4013      	ands	r3, r2
 800760a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007614:	2b00      	cmp	r3, #0
 8007616:	d003      	beq.n	8007620 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8007618:	693a      	ldr	r2, [r7, #16]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	4313      	orrs	r3, r2
 800761e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007620:	4a27      	ldr	r2, [pc, #156]	@ (80076c0 <HAL_GPIO_Init+0x350>)
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007626:	4b26      	ldr	r3, [pc, #152]	@ (80076c0 <HAL_GPIO_Init+0x350>)
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	43db      	mvns	r3, r3
 8007630:	693a      	ldr	r2, [r7, #16]
 8007632:	4013      	ands	r3, r2
 8007634:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800763e:	2b00      	cmp	r3, #0
 8007640:	d003      	beq.n	800764a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8007642:	693a      	ldr	r2, [r7, #16]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	4313      	orrs	r3, r2
 8007648:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800764a:	4a1d      	ldr	r2, [pc, #116]	@ (80076c0 <HAL_GPIO_Init+0x350>)
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8007650:	4b1b      	ldr	r3, [pc, #108]	@ (80076c0 <HAL_GPIO_Init+0x350>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	43db      	mvns	r3, r3
 800765a:	693a      	ldr	r2, [r7, #16]
 800765c:	4013      	ands	r3, r2
 800765e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007668:	2b00      	cmp	r3, #0
 800766a:	d003      	beq.n	8007674 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800766c:	693a      	ldr	r2, [r7, #16]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	4313      	orrs	r3, r2
 8007672:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007674:	4a12      	ldr	r2, [pc, #72]	@ (80076c0 <HAL_GPIO_Init+0x350>)
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	3301      	adds	r3, #1
 800767e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	fa22 f303 	lsr.w	r3, r2, r3
 800768a:	2b00      	cmp	r3, #0
 800768c:	f47f ae78 	bne.w	8007380 <HAL_GPIO_Init+0x10>
  }
}
 8007690:	bf00      	nop
 8007692:	bf00      	nop
 8007694:	371c      	adds	r7, #28
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr
 800769e:	bf00      	nop
 80076a0:	40021000 	.word	0x40021000
 80076a4:	40010000 	.word	0x40010000
 80076a8:	48000400 	.word	0x48000400
 80076ac:	48000800 	.word	0x48000800
 80076b0:	48000c00 	.word	0x48000c00
 80076b4:	48001000 	.word	0x48001000
 80076b8:	48001400 	.word	0x48001400
 80076bc:	48001800 	.word	0x48001800
 80076c0:	40010400 	.word	0x40010400

080076c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	460b      	mov	r3, r1
 80076ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	691a      	ldr	r2, [r3, #16]
 80076d4:	887b      	ldrh	r3, [r7, #2]
 80076d6:	4013      	ands	r3, r2
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d002      	beq.n	80076e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80076dc:	2301      	movs	r3, #1
 80076de:	73fb      	strb	r3, [r7, #15]
 80076e0:	e001      	b.n	80076e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80076e2:	2300      	movs	r3, #0
 80076e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80076e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3714      	adds	r7, #20
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	460b      	mov	r3, r1
 80076fe:	807b      	strh	r3, [r7, #2]
 8007700:	4613      	mov	r3, r2
 8007702:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007704:	787b      	ldrb	r3, [r7, #1]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d003      	beq.n	8007712 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800770a:	887a      	ldrh	r2, [r7, #2]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007710:	e002      	b.n	8007718 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007712:	887a      	ldrh	r2, [r7, #2]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007718:	bf00      	nop
 800771a:	370c      	adds	r7, #12
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
 800772a:	4603      	mov	r3, r0
 800772c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800772e:	4b08      	ldr	r3, [pc, #32]	@ (8007750 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007730:	695a      	ldr	r2, [r3, #20]
 8007732:	88fb      	ldrh	r3, [r7, #6]
 8007734:	4013      	ands	r3, r2
 8007736:	2b00      	cmp	r3, #0
 8007738:	d006      	beq.n	8007748 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800773a:	4a05      	ldr	r2, [pc, #20]	@ (8007750 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800773c:	88fb      	ldrh	r3, [r7, #6]
 800773e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007740:	88fb      	ldrh	r3, [r7, #6]
 8007742:	4618      	mov	r0, r3
 8007744:	f7fa fd4c 	bl	80021e0 <HAL_GPIO_EXTI_Callback>
  }
}
 8007748:	bf00      	nop
 800774a:	3708      	adds	r7, #8
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}
 8007750:	40010400 	.word	0x40010400

08007754 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d101      	bne.n	8007766 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e08d      	b.n	8007882 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800776c:	b2db      	uxtb	r3, r3
 800776e:	2b00      	cmp	r3, #0
 8007770:	d106      	bne.n	8007780 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f7fa f980 	bl	8001a80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2224      	movs	r2, #36	@ 0x24
 8007784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f022 0201 	bic.w	r2, r2, #1
 8007796:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	685a      	ldr	r2, [r3, #4]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80077a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	689a      	ldr	r2, [r3, #8]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80077b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d107      	bne.n	80077ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	689a      	ldr	r2, [r3, #8]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80077ca:	609a      	str	r2, [r3, #8]
 80077cc:	e006      	b.n	80077dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	689a      	ldr	r2, [r3, #8]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80077da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	d108      	bne.n	80077f6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	685a      	ldr	r2, [r3, #4]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80077f2:	605a      	str	r2, [r3, #4]
 80077f4:	e007      	b.n	8007806 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	685a      	ldr	r2, [r3, #4]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007804:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	6812      	ldr	r2, [r2, #0]
 8007810:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007814:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007818:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	68da      	ldr	r2, [r3, #12]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007828:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	691a      	ldr	r2, [r3, #16]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	695b      	ldr	r3, [r3, #20]
 8007832:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	699b      	ldr	r3, [r3, #24]
 800783a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	430a      	orrs	r2, r1
 8007842:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	69d9      	ldr	r1, [r3, #28]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6a1a      	ldr	r2, [r3, #32]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	430a      	orrs	r2, r1
 8007852:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f042 0201 	orr.w	r2, r2, #1
 8007862:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2220      	movs	r2, #32
 800786e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3708      	adds	r7, #8
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
	...

0800788c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b088      	sub	sp, #32
 8007890:	af02      	add	r7, sp, #8
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	607a      	str	r2, [r7, #4]
 8007896:	461a      	mov	r2, r3
 8007898:	460b      	mov	r3, r1
 800789a:	817b      	strh	r3, [r7, #10]
 800789c:	4613      	mov	r3, r2
 800789e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	2b20      	cmp	r3, #32
 80078aa:	f040 80fd 	bne.w	8007aa8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d101      	bne.n	80078bc <HAL_I2C_Master_Transmit+0x30>
 80078b8:	2302      	movs	r3, #2
 80078ba:	e0f6      	b.n	8007aaa <HAL_I2C_Master_Transmit+0x21e>
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80078c4:	f7fc ffec 	bl	80048a0 <HAL_GetTick>
 80078c8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	9300      	str	r3, [sp, #0]
 80078ce:	2319      	movs	r3, #25
 80078d0:	2201      	movs	r2, #1
 80078d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80078d6:	68f8      	ldr	r0, [r7, #12]
 80078d8:	f000 faf6 	bl	8007ec8 <I2C_WaitOnFlagUntilTimeout>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d001      	beq.n	80078e6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	e0e1      	b.n	8007aaa <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2221      	movs	r2, #33	@ 0x21
 80078ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2210      	movs	r2, #16
 80078f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2200      	movs	r2, #0
 80078fa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	893a      	ldrh	r2, [r7, #8]
 8007906:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2200      	movs	r2, #0
 800790c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007912:	b29b      	uxth	r3, r3
 8007914:	2bff      	cmp	r3, #255	@ 0xff
 8007916:	d906      	bls.n	8007926 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	22ff      	movs	r2, #255	@ 0xff
 800791c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800791e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007922:	617b      	str	r3, [r7, #20]
 8007924:	e007      	b.n	8007936 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800792a:	b29a      	uxth	r2, r3
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007930:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007934:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800793a:	2b00      	cmp	r3, #0
 800793c:	d024      	beq.n	8007988 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007942:	781a      	ldrb	r2, [r3, #0]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800794e:	1c5a      	adds	r2, r3, #1
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007958:	b29b      	uxth	r3, r3
 800795a:	3b01      	subs	r3, #1
 800795c:	b29a      	uxth	r2, r3
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007966:	3b01      	subs	r3, #1
 8007968:	b29a      	uxth	r2, r3
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007972:	b2db      	uxtb	r3, r3
 8007974:	3301      	adds	r3, #1
 8007976:	b2da      	uxtb	r2, r3
 8007978:	8979      	ldrh	r1, [r7, #10]
 800797a:	4b4e      	ldr	r3, [pc, #312]	@ (8007ab4 <HAL_I2C_Master_Transmit+0x228>)
 800797c:	9300      	str	r3, [sp, #0]
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	68f8      	ldr	r0, [r7, #12]
 8007982:	f000 fcf1 	bl	8008368 <I2C_TransferConfig>
 8007986:	e066      	b.n	8007a56 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800798c:	b2da      	uxtb	r2, r3
 800798e:	8979      	ldrh	r1, [r7, #10]
 8007990:	4b48      	ldr	r3, [pc, #288]	@ (8007ab4 <HAL_I2C_Master_Transmit+0x228>)
 8007992:	9300      	str	r3, [sp, #0]
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	68f8      	ldr	r0, [r7, #12]
 8007998:	f000 fce6 	bl	8008368 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800799c:	e05b      	b.n	8007a56 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800799e:	693a      	ldr	r2, [r7, #16]
 80079a0:	6a39      	ldr	r1, [r7, #32]
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f000 fae9 	bl	8007f7a <I2C_WaitOnTXISFlagUntilTimeout>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d001      	beq.n	80079b2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e07b      	b.n	8007aaa <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079b6:	781a      	ldrb	r2, [r3, #0]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079c2:	1c5a      	adds	r2, r3, #1
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	3b01      	subs	r3, #1
 80079d0:	b29a      	uxth	r2, r3
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079da:	3b01      	subs	r3, #1
 80079dc:	b29a      	uxth	r2, r3
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d034      	beq.n	8007a56 <HAL_I2C_Master_Transmit+0x1ca>
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d130      	bne.n	8007a56 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	9300      	str	r3, [sp, #0]
 80079f8:	6a3b      	ldr	r3, [r7, #32]
 80079fa:	2200      	movs	r2, #0
 80079fc:	2180      	movs	r1, #128	@ 0x80
 80079fe:	68f8      	ldr	r0, [r7, #12]
 8007a00:	f000 fa62 	bl	8007ec8 <I2C_WaitOnFlagUntilTimeout>
 8007a04:	4603      	mov	r3, r0
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d001      	beq.n	8007a0e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e04d      	b.n	8007aaa <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	2bff      	cmp	r3, #255	@ 0xff
 8007a16:	d90e      	bls.n	8007a36 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	22ff      	movs	r2, #255	@ 0xff
 8007a1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a22:	b2da      	uxtb	r2, r3
 8007a24:	8979      	ldrh	r1, [r7, #10]
 8007a26:	2300      	movs	r3, #0
 8007a28:	9300      	str	r3, [sp, #0]
 8007a2a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	f000 fc9a 	bl	8008368 <I2C_TransferConfig>
 8007a34:	e00f      	b.n	8007a56 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a3a:	b29a      	uxth	r2, r3
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a44:	b2da      	uxtb	r2, r3
 8007a46:	8979      	ldrh	r1, [r7, #10]
 8007a48:	2300      	movs	r3, #0
 8007a4a:	9300      	str	r3, [sp, #0]
 8007a4c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007a50:	68f8      	ldr	r0, [r7, #12]
 8007a52:	f000 fc89 	bl	8008368 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d19e      	bne.n	800799e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a60:	693a      	ldr	r2, [r7, #16]
 8007a62:	6a39      	ldr	r1, [r7, #32]
 8007a64:	68f8      	ldr	r0, [r7, #12]
 8007a66:	f000 facf 	bl	8008008 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d001      	beq.n	8007a74 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	e01a      	b.n	8007aaa <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2220      	movs	r2, #32
 8007a7a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6859      	ldr	r1, [r3, #4]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	4b0c      	ldr	r3, [pc, #48]	@ (8007ab8 <HAL_I2C_Master_Transmit+0x22c>)
 8007a88:	400b      	ands	r3, r1
 8007a8a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2220      	movs	r2, #32
 8007a90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	e000      	b.n	8007aaa <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8007aa8:	2302      	movs	r3, #2
  }
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3718      	adds	r7, #24
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	80002000 	.word	0x80002000
 8007ab8:	fe00e800 	.word	0xfe00e800

08007abc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b088      	sub	sp, #32
 8007ac0:	af02      	add	r7, sp, #8
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	607a      	str	r2, [r7, #4]
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	460b      	mov	r3, r1
 8007aca:	817b      	strh	r3, [r7, #10]
 8007acc:	4613      	mov	r3, r2
 8007ace:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	2b20      	cmp	r3, #32
 8007ada:	f040 80db 	bne.w	8007c94 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d101      	bne.n	8007aec <HAL_I2C_Master_Receive+0x30>
 8007ae8:	2302      	movs	r3, #2
 8007aea:	e0d4      	b.n	8007c96 <HAL_I2C_Master_Receive+0x1da>
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007af4:	f7fc fed4 	bl	80048a0 <HAL_GetTick>
 8007af8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	9300      	str	r3, [sp, #0]
 8007afe:	2319      	movs	r3, #25
 8007b00:	2201      	movs	r2, #1
 8007b02:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007b06:	68f8      	ldr	r0, [r7, #12]
 8007b08:	f000 f9de 	bl	8007ec8 <I2C_WaitOnFlagUntilTimeout>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d001      	beq.n	8007b16 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	e0bf      	b.n	8007c96 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2222      	movs	r2, #34	@ 0x22
 8007b1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2210      	movs	r2, #16
 8007b22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	893a      	ldrh	r2, [r7, #8]
 8007b36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	2bff      	cmp	r3, #255	@ 0xff
 8007b46:	d90e      	bls.n	8007b66 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b52:	b2da      	uxtb	r2, r3
 8007b54:	8979      	ldrh	r1, [r7, #10]
 8007b56:	4b52      	ldr	r3, [pc, #328]	@ (8007ca0 <HAL_I2C_Master_Receive+0x1e4>)
 8007b58:	9300      	str	r3, [sp, #0]
 8007b5a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007b5e:	68f8      	ldr	r0, [r7, #12]
 8007b60:	f000 fc02 	bl	8008368 <I2C_TransferConfig>
 8007b64:	e06d      	b.n	8007c42 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b6a:	b29a      	uxth	r2, r3
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b74:	b2da      	uxtb	r2, r3
 8007b76:	8979      	ldrh	r1, [r7, #10]
 8007b78:	4b49      	ldr	r3, [pc, #292]	@ (8007ca0 <HAL_I2C_Master_Receive+0x1e4>)
 8007b7a:	9300      	str	r3, [sp, #0]
 8007b7c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	f000 fbf1 	bl	8008368 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007b86:	e05c      	b.n	8007c42 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b88:	697a      	ldr	r2, [r7, #20]
 8007b8a:	6a39      	ldr	r1, [r7, #32]
 8007b8c:	68f8      	ldr	r0, [r7, #12]
 8007b8e:	f000 fa7f 	bl	8008090 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d001      	beq.n	8007b9c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e07c      	b.n	8007c96 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ba6:	b2d2      	uxtb	r2, r2
 8007ba8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bae:	1c5a      	adds	r2, r3, #1
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	b29a      	uxth	r2, r3
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	3b01      	subs	r3, #1
 8007bc8:	b29a      	uxth	r2, r3
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d034      	beq.n	8007c42 <HAL_I2C_Master_Receive+0x186>
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d130      	bne.n	8007c42 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	9300      	str	r3, [sp, #0]
 8007be4:	6a3b      	ldr	r3, [r7, #32]
 8007be6:	2200      	movs	r2, #0
 8007be8:	2180      	movs	r1, #128	@ 0x80
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	f000 f96c 	bl	8007ec8 <I2C_WaitOnFlagUntilTimeout>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d001      	beq.n	8007bfa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e04d      	b.n	8007c96 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	2bff      	cmp	r3, #255	@ 0xff
 8007c02:	d90e      	bls.n	8007c22 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	22ff      	movs	r2, #255	@ 0xff
 8007c08:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c0e:	b2da      	uxtb	r2, r3
 8007c10:	8979      	ldrh	r1, [r7, #10]
 8007c12:	2300      	movs	r3, #0
 8007c14:	9300      	str	r3, [sp, #0]
 8007c16:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007c1a:	68f8      	ldr	r0, [r7, #12]
 8007c1c:	f000 fba4 	bl	8008368 <I2C_TransferConfig>
 8007c20:	e00f      	b.n	8007c42 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c26:	b29a      	uxth	r2, r3
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c30:	b2da      	uxtb	r2, r3
 8007c32:	8979      	ldrh	r1, [r7, #10]
 8007c34:	2300      	movs	r3, #0
 8007c36:	9300      	str	r3, [sp, #0]
 8007c38:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f000 fb93 	bl	8008368 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d19d      	bne.n	8007b88 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c4c:	697a      	ldr	r2, [r7, #20]
 8007c4e:	6a39      	ldr	r1, [r7, #32]
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f000 f9d9 	bl	8008008 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d001      	beq.n	8007c60 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e01a      	b.n	8007c96 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	2220      	movs	r2, #32
 8007c66:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	6859      	ldr	r1, [r3, #4]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	4b0c      	ldr	r3, [pc, #48]	@ (8007ca4 <HAL_I2C_Master_Receive+0x1e8>)
 8007c74:	400b      	ands	r3, r1
 8007c76:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2220      	movs	r2, #32
 8007c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2200      	movs	r2, #0
 8007c84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007c90:	2300      	movs	r3, #0
 8007c92:	e000      	b.n	8007c96 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007c94:	2302      	movs	r3, #2
  }
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3718      	adds	r7, #24
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	80002400 	.word	0x80002400
 8007ca4:	fe00e800 	.word	0xfe00e800

08007ca8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b08a      	sub	sp, #40	@ 0x28
 8007cac:	af02      	add	r7, sp, #8
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	607a      	str	r2, [r7, #4]
 8007cb2:	603b      	str	r3, [r7, #0]
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	2b20      	cmp	r3, #32
 8007cc6:	f040 80d6 	bne.w	8007e76 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	699b      	ldr	r3, [r3, #24]
 8007cd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007cd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cd8:	d101      	bne.n	8007cde <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8007cda:	2302      	movs	r3, #2
 8007cdc:	e0cc      	b.n	8007e78 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d101      	bne.n	8007cec <HAL_I2C_IsDeviceReady+0x44>
 8007ce8:	2302      	movs	r3, #2
 8007cea:	e0c5      	b.n	8007e78 <HAL_I2C_IsDeviceReady+0x1d0>
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2224      	movs	r2, #36	@ 0x24
 8007cf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d107      	bne.n	8007d1a <HAL_I2C_IsDeviceReady+0x72>
 8007d0a:	897b      	ldrh	r3, [r7, #10]
 8007d0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d10:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007d14:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007d18:	e006      	b.n	8007d28 <HAL_I2C_IsDeviceReady+0x80>
 8007d1a:	897b      	ldrh	r3, [r7, #10]
 8007d1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d20:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007d24:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8007d28:	68fa      	ldr	r2, [r7, #12]
 8007d2a:	6812      	ldr	r2, [r2, #0]
 8007d2c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8007d2e:	f7fc fdb7 	bl	80048a0 <HAL_GetTick>
 8007d32:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	699b      	ldr	r3, [r3, #24]
 8007d3a:	f003 0320 	and.w	r3, r3, #32
 8007d3e:	2b20      	cmp	r3, #32
 8007d40:	bf0c      	ite	eq
 8007d42:	2301      	moveq	r3, #1
 8007d44:	2300      	movne	r3, #0
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	699b      	ldr	r3, [r3, #24]
 8007d50:	f003 0310 	and.w	r3, r3, #16
 8007d54:	2b10      	cmp	r3, #16
 8007d56:	bf0c      	ite	eq
 8007d58:	2301      	moveq	r3, #1
 8007d5a:	2300      	movne	r3, #0
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007d60:	e034      	b.n	8007dcc <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d68:	d01a      	beq.n	8007da0 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007d6a:	f7fc fd99 	bl	80048a0 <HAL_GetTick>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	1ad3      	subs	r3, r2, r3
 8007d74:	683a      	ldr	r2, [r7, #0]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d302      	bcc.n	8007d80 <HAL_I2C_IsDeviceReady+0xd8>
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d10f      	bne.n	8007da0 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2220      	movs	r2, #32
 8007d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d8c:	f043 0220 	orr.w	r2, r3, #32
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	e06b      	b.n	8007e78 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	699b      	ldr	r3, [r3, #24]
 8007da6:	f003 0320 	and.w	r3, r3, #32
 8007daa:	2b20      	cmp	r3, #32
 8007dac:	bf0c      	ite	eq
 8007dae:	2301      	moveq	r3, #1
 8007db0:	2300      	movne	r3, #0
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	699b      	ldr	r3, [r3, #24]
 8007dbc:	f003 0310 	and.w	r3, r3, #16
 8007dc0:	2b10      	cmp	r3, #16
 8007dc2:	bf0c      	ite	eq
 8007dc4:	2301      	moveq	r3, #1
 8007dc6:	2300      	movne	r3, #0
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007dcc:	7ffb      	ldrb	r3, [r7, #31]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d102      	bne.n	8007dd8 <HAL_I2C_IsDeviceReady+0x130>
 8007dd2:	7fbb      	ldrb	r3, [r7, #30]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d0c4      	beq.n	8007d62 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	699b      	ldr	r3, [r3, #24]
 8007dde:	f003 0310 	and.w	r3, r3, #16
 8007de2:	2b10      	cmp	r3, #16
 8007de4:	d01a      	beq.n	8007e1c <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	9300      	str	r3, [sp, #0]
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	2200      	movs	r2, #0
 8007dee:	2120      	movs	r1, #32
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f000 f869 	bl	8007ec8 <I2C_WaitOnFlagUntilTimeout>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d001      	beq.n	8007e00 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	e03b      	b.n	8007e78 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2220      	movs	r2, #32
 8007e06:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2220      	movs	r2, #32
 8007e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	e02d      	b.n	8007e78 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007e1c:	69bb      	ldr	r3, [r7, #24]
 8007e1e:	9300      	str	r3, [sp, #0]
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	2200      	movs	r2, #0
 8007e24:	2120      	movs	r1, #32
 8007e26:	68f8      	ldr	r0, [r7, #12]
 8007e28:	f000 f84e 	bl	8007ec8 <I2C_WaitOnFlagUntilTimeout>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d001      	beq.n	8007e36 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	e020      	b.n	8007e78 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2210      	movs	r2, #16
 8007e3c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2220      	movs	r2, #32
 8007e44:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	f63f af56 	bhi.w	8007d02 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2220      	movs	r2, #32
 8007e5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e62:	f043 0220 	orr.w	r2, r3, #32
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8007e72:	2301      	movs	r3, #1
 8007e74:	e000      	b.n	8007e78 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8007e76:	2302      	movs	r3, #2
  }
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3720      	adds	r7, #32
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b083      	sub	sp, #12
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	699b      	ldr	r3, [r3, #24]
 8007e8e:	f003 0302 	and.w	r3, r3, #2
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	d103      	bne.n	8007e9e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	699b      	ldr	r3, [r3, #24]
 8007ea4:	f003 0301 	and.w	r3, r3, #1
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d007      	beq.n	8007ebc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	699a      	ldr	r2, [r3, #24]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f042 0201 	orr.w	r2, r2, #1
 8007eba:	619a      	str	r2, [r3, #24]
  }
}
 8007ebc:	bf00      	nop
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	603b      	str	r3, [r7, #0]
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ed8:	e03b      	b.n	8007f52 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007eda:	69ba      	ldr	r2, [r7, #24]
 8007edc:	6839      	ldr	r1, [r7, #0]
 8007ede:	68f8      	ldr	r0, [r7, #12]
 8007ee0:	f000 f962 	bl	80081a8 <I2C_IsErrorOccurred>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d001      	beq.n	8007eee <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e041      	b.n	8007f72 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ef4:	d02d      	beq.n	8007f52 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ef6:	f7fc fcd3 	bl	80048a0 <HAL_GetTick>
 8007efa:	4602      	mov	r2, r0
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	1ad3      	subs	r3, r2, r3
 8007f00:	683a      	ldr	r2, [r7, #0]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d302      	bcc.n	8007f0c <I2C_WaitOnFlagUntilTimeout+0x44>
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d122      	bne.n	8007f52 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	699a      	ldr	r2, [r3, #24]
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	4013      	ands	r3, r2
 8007f16:	68ba      	ldr	r2, [r7, #8]
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	bf0c      	ite	eq
 8007f1c:	2301      	moveq	r3, #1
 8007f1e:	2300      	movne	r3, #0
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	461a      	mov	r2, r3
 8007f24:	79fb      	ldrb	r3, [r7, #7]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d113      	bne.n	8007f52 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f2e:	f043 0220 	orr.w	r2, r3, #32
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2220      	movs	r2, #32
 8007f3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e00f      	b.n	8007f72 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	699a      	ldr	r2, [r3, #24]
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	4013      	ands	r3, r2
 8007f5c:	68ba      	ldr	r2, [r7, #8]
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	bf0c      	ite	eq
 8007f62:	2301      	moveq	r3, #1
 8007f64:	2300      	movne	r3, #0
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	461a      	mov	r2, r3
 8007f6a:	79fb      	ldrb	r3, [r7, #7]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d0b4      	beq.n	8007eda <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007f7a:	b580      	push	{r7, lr}
 8007f7c:	b084      	sub	sp, #16
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	60f8      	str	r0, [r7, #12]
 8007f82:	60b9      	str	r1, [r7, #8]
 8007f84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007f86:	e033      	b.n	8007ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	68b9      	ldr	r1, [r7, #8]
 8007f8c:	68f8      	ldr	r0, [r7, #12]
 8007f8e:	f000 f90b 	bl	80081a8 <I2C_IsErrorOccurred>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d001      	beq.n	8007f9c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	e031      	b.n	8008000 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fa2:	d025      	beq.n	8007ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fa4:	f7fc fc7c 	bl	80048a0 <HAL_GetTick>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	1ad3      	subs	r3, r2, r3
 8007fae:	68ba      	ldr	r2, [r7, #8]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d302      	bcc.n	8007fba <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d11a      	bne.n	8007ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	699b      	ldr	r3, [r3, #24]
 8007fc0:	f003 0302 	and.w	r3, r3, #2
 8007fc4:	2b02      	cmp	r3, #2
 8007fc6:	d013      	beq.n	8007ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fcc:	f043 0220 	orr.w	r2, r3, #32
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2220      	movs	r2, #32
 8007fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	e007      	b.n	8008000 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	699b      	ldr	r3, [r3, #24]
 8007ff6:	f003 0302 	and.w	r3, r3, #2
 8007ffa:	2b02      	cmp	r3, #2
 8007ffc:	d1c4      	bne.n	8007f88 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007ffe:	2300      	movs	r3, #0
}
 8008000:	4618      	mov	r0, r3
 8008002:	3710      	adds	r7, #16
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	60b9      	str	r1, [r7, #8]
 8008012:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008014:	e02f      	b.n	8008076 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	68b9      	ldr	r1, [r7, #8]
 800801a:	68f8      	ldr	r0, [r7, #12]
 800801c:	f000 f8c4 	bl	80081a8 <I2C_IsErrorOccurred>
 8008020:	4603      	mov	r3, r0
 8008022:	2b00      	cmp	r3, #0
 8008024:	d001      	beq.n	800802a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008026:	2301      	movs	r3, #1
 8008028:	e02d      	b.n	8008086 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800802a:	f7fc fc39 	bl	80048a0 <HAL_GetTick>
 800802e:	4602      	mov	r2, r0
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	1ad3      	subs	r3, r2, r3
 8008034:	68ba      	ldr	r2, [r7, #8]
 8008036:	429a      	cmp	r2, r3
 8008038:	d302      	bcc.n	8008040 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d11a      	bne.n	8008076 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	699b      	ldr	r3, [r3, #24]
 8008046:	f003 0320 	and.w	r3, r3, #32
 800804a:	2b20      	cmp	r3, #32
 800804c:	d013      	beq.n	8008076 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008052:	f043 0220 	orr.w	r2, r3, #32
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2220      	movs	r2, #32
 800805e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2200      	movs	r2, #0
 8008066:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2200      	movs	r2, #0
 800806e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	e007      	b.n	8008086 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	699b      	ldr	r3, [r3, #24]
 800807c:	f003 0320 	and.w	r3, r3, #32
 8008080:	2b20      	cmp	r3, #32
 8008082:	d1c8      	bne.n	8008016 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008084:	2300      	movs	r3, #0
}
 8008086:	4618      	mov	r0, r3
 8008088:	3710      	adds	r7, #16
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
	...

08008090 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b086      	sub	sp, #24
 8008094:	af00      	add	r7, sp, #0
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800809c:	2300      	movs	r3, #0
 800809e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80080a0:	e071      	b.n	8008186 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	68b9      	ldr	r1, [r7, #8]
 80080a6:	68f8      	ldr	r0, [r7, #12]
 80080a8:	f000 f87e 	bl	80081a8 <I2C_IsErrorOccurred>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d001      	beq.n	80080b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	699b      	ldr	r3, [r3, #24]
 80080bc:	f003 0320 	and.w	r3, r3, #32
 80080c0:	2b20      	cmp	r3, #32
 80080c2:	d13b      	bne.n	800813c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80080c4:	7dfb      	ldrb	r3, [r7, #23]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d138      	bne.n	800813c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	699b      	ldr	r3, [r3, #24]
 80080d0:	f003 0304 	and.w	r3, r3, #4
 80080d4:	2b04      	cmp	r3, #4
 80080d6:	d105      	bne.n	80080e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d001      	beq.n	80080e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80080e0:	2300      	movs	r3, #0
 80080e2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	699b      	ldr	r3, [r3, #24]
 80080ea:	f003 0310 	and.w	r3, r3, #16
 80080ee:	2b10      	cmp	r3, #16
 80080f0:	d121      	bne.n	8008136 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2210      	movs	r2, #16
 80080f8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2204      	movs	r2, #4
 80080fe:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2220      	movs	r2, #32
 8008106:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	6859      	ldr	r1, [r3, #4]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	4b24      	ldr	r3, [pc, #144]	@ (80081a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8008114:	400b      	ands	r3, r1
 8008116:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2220      	movs	r2, #32
 800811c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2200      	movs	r2, #0
 8008124:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2200      	movs	r2, #0
 800812c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	75fb      	strb	r3, [r7, #23]
 8008134:	e002      	b.n	800813c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2200      	movs	r2, #0
 800813a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800813c:	f7fc fbb0 	bl	80048a0 <HAL_GetTick>
 8008140:	4602      	mov	r2, r0
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	1ad3      	subs	r3, r2, r3
 8008146:	68ba      	ldr	r2, [r7, #8]
 8008148:	429a      	cmp	r2, r3
 800814a:	d302      	bcc.n	8008152 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d119      	bne.n	8008186 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8008152:	7dfb      	ldrb	r3, [r7, #23]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d116      	bne.n	8008186 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	699b      	ldr	r3, [r3, #24]
 800815e:	f003 0304 	and.w	r3, r3, #4
 8008162:	2b04      	cmp	r3, #4
 8008164:	d00f      	beq.n	8008186 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800816a:	f043 0220 	orr.w	r2, r3, #32
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2220      	movs	r2, #32
 8008176:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2200      	movs	r2, #0
 800817e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	699b      	ldr	r3, [r3, #24]
 800818c:	f003 0304 	and.w	r3, r3, #4
 8008190:	2b04      	cmp	r3, #4
 8008192:	d002      	beq.n	800819a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8008194:	7dfb      	ldrb	r3, [r7, #23]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d083      	beq.n	80080a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800819a:	7dfb      	ldrb	r3, [r7, #23]
}
 800819c:	4618      	mov	r0, r3
 800819e:	3718      	adds	r7, #24
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	fe00e800 	.word	0xfe00e800

080081a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b08a      	sub	sp, #40	@ 0x28
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081b4:	2300      	movs	r3, #0
 80081b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	699b      	ldr	r3, [r3, #24]
 80081c0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80081c2:	2300      	movs	r3, #0
 80081c4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80081ca:	69bb      	ldr	r3, [r7, #24]
 80081cc:	f003 0310 	and.w	r3, r3, #16
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d068      	beq.n	80082a6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2210      	movs	r2, #16
 80081da:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80081dc:	e049      	b.n	8008272 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081e4:	d045      	beq.n	8008272 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80081e6:	f7fc fb5b 	bl	80048a0 <HAL_GetTick>
 80081ea:	4602      	mov	r2, r0
 80081ec:	69fb      	ldr	r3, [r7, #28]
 80081ee:	1ad3      	subs	r3, r2, r3
 80081f0:	68ba      	ldr	r2, [r7, #8]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d302      	bcc.n	80081fc <I2C_IsErrorOccurred+0x54>
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d13a      	bne.n	8008272 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008206:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800820e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	699b      	ldr	r3, [r3, #24]
 8008216:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800821a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800821e:	d121      	bne.n	8008264 <I2C_IsErrorOccurred+0xbc>
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008226:	d01d      	beq.n	8008264 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008228:	7cfb      	ldrb	r3, [r7, #19]
 800822a:	2b20      	cmp	r3, #32
 800822c:	d01a      	beq.n	8008264 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	685a      	ldr	r2, [r3, #4]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800823c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800823e:	f7fc fb2f 	bl	80048a0 <HAL_GetTick>
 8008242:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008244:	e00e      	b.n	8008264 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008246:	f7fc fb2b 	bl	80048a0 <HAL_GetTick>
 800824a:	4602      	mov	r2, r0
 800824c:	69fb      	ldr	r3, [r7, #28]
 800824e:	1ad3      	subs	r3, r2, r3
 8008250:	2b19      	cmp	r3, #25
 8008252:	d907      	bls.n	8008264 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008254:	6a3b      	ldr	r3, [r7, #32]
 8008256:	f043 0320 	orr.w	r3, r3, #32
 800825a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800825c:	2301      	movs	r3, #1
 800825e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8008262:	e006      	b.n	8008272 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	699b      	ldr	r3, [r3, #24]
 800826a:	f003 0320 	and.w	r3, r3, #32
 800826e:	2b20      	cmp	r3, #32
 8008270:	d1e9      	bne.n	8008246 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	699b      	ldr	r3, [r3, #24]
 8008278:	f003 0320 	and.w	r3, r3, #32
 800827c:	2b20      	cmp	r3, #32
 800827e:	d003      	beq.n	8008288 <I2C_IsErrorOccurred+0xe0>
 8008280:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008284:	2b00      	cmp	r3, #0
 8008286:	d0aa      	beq.n	80081de <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008288:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800828c:	2b00      	cmp	r3, #0
 800828e:	d103      	bne.n	8008298 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	2220      	movs	r2, #32
 8008296:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008298:	6a3b      	ldr	r3, [r7, #32]
 800829a:	f043 0304 	orr.w	r3, r3, #4
 800829e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80082a0:	2301      	movs	r3, #1
 80082a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	699b      	ldr	r3, [r3, #24]
 80082ac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80082ae:	69bb      	ldr	r3, [r7, #24]
 80082b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00b      	beq.n	80082d0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80082b8:	6a3b      	ldr	r3, [r7, #32]
 80082ba:	f043 0301 	orr.w	r3, r3, #1
 80082be:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80082c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80082d0:	69bb      	ldr	r3, [r7, #24]
 80082d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00b      	beq.n	80082f2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80082da:	6a3b      	ldr	r3, [r7, #32]
 80082dc:	f043 0308 	orr.w	r3, r3, #8
 80082e0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80082ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d00b      	beq.n	8008314 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80082fc:	6a3b      	ldr	r3, [r7, #32]
 80082fe:	f043 0302 	orr.w	r3, r3, #2
 8008302:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800830c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008314:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008318:	2b00      	cmp	r3, #0
 800831a:	d01c      	beq.n	8008356 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800831c:	68f8      	ldr	r0, [r7, #12]
 800831e:	f7ff fdaf 	bl	8007e80 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	6859      	ldr	r1, [r3, #4]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	4b0d      	ldr	r3, [pc, #52]	@ (8008364 <I2C_IsErrorOccurred+0x1bc>)
 800832e:	400b      	ands	r3, r1
 8008330:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008336:	6a3b      	ldr	r3, [r7, #32]
 8008338:	431a      	orrs	r2, r3
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2220      	movs	r2, #32
 8008342:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2200      	movs	r2, #0
 800834a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2200      	movs	r2, #0
 8008352:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8008356:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800835a:	4618      	mov	r0, r3
 800835c:	3728      	adds	r7, #40	@ 0x28
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	fe00e800 	.word	0xfe00e800

08008368 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008368:	b480      	push	{r7}
 800836a:	b087      	sub	sp, #28
 800836c:	af00      	add	r7, sp, #0
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	607b      	str	r3, [r7, #4]
 8008372:	460b      	mov	r3, r1
 8008374:	817b      	strh	r3, [r7, #10]
 8008376:	4613      	mov	r3, r2
 8008378:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800837a:	897b      	ldrh	r3, [r7, #10]
 800837c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008380:	7a7b      	ldrb	r3, [r7, #9]
 8008382:	041b      	lsls	r3, r3, #16
 8008384:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008388:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800838e:	6a3b      	ldr	r3, [r7, #32]
 8008390:	4313      	orrs	r3, r2
 8008392:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008396:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	685a      	ldr	r2, [r3, #4]
 800839e:	6a3b      	ldr	r3, [r7, #32]
 80083a0:	0d5b      	lsrs	r3, r3, #21
 80083a2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80083a6:	4b08      	ldr	r3, [pc, #32]	@ (80083c8 <I2C_TransferConfig+0x60>)
 80083a8:	430b      	orrs	r3, r1
 80083aa:	43db      	mvns	r3, r3
 80083ac:	ea02 0103 	and.w	r1, r2, r3
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	697a      	ldr	r2, [r7, #20]
 80083b6:	430a      	orrs	r2, r1
 80083b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80083ba:	bf00      	nop
 80083bc:	371c      	adds	r7, #28
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	03ff63ff 	.word	0x03ff63ff

080083cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	2b20      	cmp	r3, #32
 80083e0:	d138      	bne.n	8008454 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d101      	bne.n	80083f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80083ec:	2302      	movs	r3, #2
 80083ee:	e032      	b.n	8008456 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2224      	movs	r2, #36	@ 0x24
 80083fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f022 0201 	bic.w	r2, r2, #1
 800840e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800841e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	6819      	ldr	r1, [r3, #0]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	683a      	ldr	r2, [r7, #0]
 800842c:	430a      	orrs	r2, r1
 800842e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f042 0201 	orr.w	r2, r2, #1
 800843e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2220      	movs	r2, #32
 8008444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2200      	movs	r2, #0
 800844c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008450:	2300      	movs	r3, #0
 8008452:	e000      	b.n	8008456 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008454:	2302      	movs	r3, #2
  }
}
 8008456:	4618      	mov	r0, r3
 8008458:	370c      	adds	r7, #12
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr

08008462 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008462:	b480      	push	{r7}
 8008464:	b085      	sub	sp, #20
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
 800846a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008472:	b2db      	uxtb	r3, r3
 8008474:	2b20      	cmp	r3, #32
 8008476:	d139      	bne.n	80084ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800847e:	2b01      	cmp	r3, #1
 8008480:	d101      	bne.n	8008486 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008482:	2302      	movs	r3, #2
 8008484:	e033      	b.n	80084ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2201      	movs	r2, #1
 800848a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2224      	movs	r2, #36	@ 0x24
 8008492:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f022 0201 	bic.w	r2, r2, #1
 80084a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80084b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	021b      	lsls	r3, r3, #8
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	4313      	orrs	r3, r2
 80084be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	68fa      	ldr	r2, [r7, #12]
 80084c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f042 0201 	orr.w	r2, r2, #1
 80084d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2220      	movs	r2, #32
 80084dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80084e8:	2300      	movs	r3, #0
 80084ea:	e000      	b.n	80084ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80084ec:	2302      	movs	r3, #2
  }
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3714      	adds	r7, #20
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr
	...

080084fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80084fc:	b480      	push	{r7}
 80084fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008500:	4b04      	ldr	r3, [pc, #16]	@ (8008514 <HAL_PWREx_GetVoltageRange+0x18>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8008508:	4618      	mov	r0, r3
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr
 8008512:	bf00      	nop
 8008514:	40007000 	.word	0x40007000

08008518 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008518:	b480      	push	{r7}
 800851a:	b085      	sub	sp, #20
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008526:	d130      	bne.n	800858a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8008528:	4b23      	ldr	r3, [pc, #140]	@ (80085b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008530:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008534:	d038      	beq.n	80085a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008536:	4b20      	ldr	r3, [pc, #128]	@ (80085b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800853e:	4a1e      	ldr	r2, [pc, #120]	@ (80085b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008540:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008544:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008546:	4b1d      	ldr	r3, [pc, #116]	@ (80085bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2232      	movs	r2, #50	@ 0x32
 800854c:	fb02 f303 	mul.w	r3, r2, r3
 8008550:	4a1b      	ldr	r2, [pc, #108]	@ (80085c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8008552:	fba2 2303 	umull	r2, r3, r2, r3
 8008556:	0c9b      	lsrs	r3, r3, #18
 8008558:	3301      	adds	r3, #1
 800855a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800855c:	e002      	b.n	8008564 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	3b01      	subs	r3, #1
 8008562:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008564:	4b14      	ldr	r3, [pc, #80]	@ (80085b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008566:	695b      	ldr	r3, [r3, #20]
 8008568:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800856c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008570:	d102      	bne.n	8008578 <HAL_PWREx_ControlVoltageScaling+0x60>
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d1f2      	bne.n	800855e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008578:	4b0f      	ldr	r3, [pc, #60]	@ (80085b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800857a:	695b      	ldr	r3, [r3, #20]
 800857c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008580:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008584:	d110      	bne.n	80085a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8008586:	2303      	movs	r3, #3
 8008588:	e00f      	b.n	80085aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800858a:	4b0b      	ldr	r3, [pc, #44]	@ (80085b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008592:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008596:	d007      	beq.n	80085a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008598:	4b07      	ldr	r3, [pc, #28]	@ (80085b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80085a0:	4a05      	ldr	r2, [pc, #20]	@ (80085b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80085a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80085a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80085a8:	2300      	movs	r3, #0
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3714      	adds	r7, #20
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr
 80085b6:	bf00      	nop
 80085b8:	40007000 	.word	0x40007000
 80085bc:	20000140 	.word	0x20000140
 80085c0:	431bde83 	.word	0x431bde83

080085c4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b088      	sub	sp, #32
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d101      	bne.n	80085d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	e3ca      	b.n	8008d6c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80085d6:	4b97      	ldr	r3, [pc, #604]	@ (8008834 <HAL_RCC_OscConfig+0x270>)
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	f003 030c 	and.w	r3, r3, #12
 80085de:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80085e0:	4b94      	ldr	r3, [pc, #592]	@ (8008834 <HAL_RCC_OscConfig+0x270>)
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	f003 0303 	and.w	r3, r3, #3
 80085e8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f003 0310 	and.w	r3, r3, #16
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	f000 80e4 	beq.w	80087c0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d007      	beq.n	800860e <HAL_RCC_OscConfig+0x4a>
 80085fe:	69bb      	ldr	r3, [r7, #24]
 8008600:	2b0c      	cmp	r3, #12
 8008602:	f040 808b 	bne.w	800871c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	2b01      	cmp	r3, #1
 800860a:	f040 8087 	bne.w	800871c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800860e:	4b89      	ldr	r3, [pc, #548]	@ (8008834 <HAL_RCC_OscConfig+0x270>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f003 0302 	and.w	r3, r3, #2
 8008616:	2b00      	cmp	r3, #0
 8008618:	d005      	beq.n	8008626 <HAL_RCC_OscConfig+0x62>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	699b      	ldr	r3, [r3, #24]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d101      	bne.n	8008626 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8008622:	2301      	movs	r3, #1
 8008624:	e3a2      	b.n	8008d6c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6a1a      	ldr	r2, [r3, #32]
 800862a:	4b82      	ldr	r3, [pc, #520]	@ (8008834 <HAL_RCC_OscConfig+0x270>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f003 0308 	and.w	r3, r3, #8
 8008632:	2b00      	cmp	r3, #0
 8008634:	d004      	beq.n	8008640 <HAL_RCC_OscConfig+0x7c>
 8008636:	4b7f      	ldr	r3, [pc, #508]	@ (8008834 <HAL_RCC_OscConfig+0x270>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800863e:	e005      	b.n	800864c <HAL_RCC_OscConfig+0x88>
 8008640:	4b7c      	ldr	r3, [pc, #496]	@ (8008834 <HAL_RCC_OscConfig+0x270>)
 8008642:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008646:	091b      	lsrs	r3, r3, #4
 8008648:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800864c:	4293      	cmp	r3, r2
 800864e:	d223      	bcs.n	8008698 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6a1b      	ldr	r3, [r3, #32]
 8008654:	4618      	mov	r0, r3
 8008656:	f000 fd55 	bl	8009104 <RCC_SetFlashLatencyFromMSIRange>
 800865a:	4603      	mov	r3, r0
 800865c:	2b00      	cmp	r3, #0
 800865e:	d001      	beq.n	8008664 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8008660:	2301      	movs	r3, #1
 8008662:	e383      	b.n	8008d6c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008664:	4b73      	ldr	r3, [pc, #460]	@ (8008834 <HAL_RCC_OscConfig+0x270>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a72      	ldr	r2, [pc, #456]	@ (8008834 <HAL_RCC_OscConfig+0x270>)
 800866a:	f043 0308 	orr.w	r3, r3, #8
 800866e:	6013      	str	r3, [r2, #0]
 8008670:	4b70      	ldr	r3, [pc, #448]	@ (8008834 <HAL_RCC_OscConfig+0x270>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6a1b      	ldr	r3, [r3, #32]
 800867c:	496d      	ldr	r1, [pc, #436]	@ (8008834 <HAL_RCC_OscConfig+0x270>)
 800867e:	4313      	orrs	r3, r2
 8008680:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008682:	4b6c      	ldr	r3, [pc, #432]	@ (8008834 <HAL_RCC_OscConfig+0x270>)
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	69db      	ldr	r3, [r3, #28]
 800868e:	021b      	lsls	r3, r3, #8
 8008690:	4968      	ldr	r1, [pc, #416]	@ (8008834 <HAL_RCC_OscConfig+0x270>)
 8008692:	4313      	orrs	r3, r2
 8008694:	604b      	str	r3, [r1, #4]
 8008696:	e025      	b.n	80086e4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008698:	4b66      	ldr	r3, [pc, #408]	@ (8008834 <HAL_RCC_OscConfig+0x270>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a65      	ldr	r2, [pc, #404]	@ (8008834 <HAL_RCC_OscConfig+0x270>)
 800869e:	f043 0308 	orr.w	r3, r3, #8
 80086a2:	6013      	str	r3, [r2, #0]
 80086a4:	4b63      	ldr	r3, [pc, #396]	@ (8008834 <HAL_RCC_OscConfig+0x270>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6a1b      	ldr	r3, [r3, #32]
 80086b0:	4960      	ldr	r1, [pc, #384]	@ (8008834 <HAL_RCC_OscConfig+0x270>)
 80086b2:	4313      	orrs	r3, r2
 80086b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80086b6:	4b5f      	ldr	r3, [pc, #380]	@ (8008834 <HAL_RCC_OscConfig+0x270>)
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	69db      	ldr	r3, [r3, #28]
 80086c2:	021b      	lsls	r3, r3, #8
 80086c4:	495b      	ldr	r1, [pc, #364]	@ (8008834 <HAL_RCC_OscConfig+0x270>)
 80086c6:	4313      	orrs	r3, r2
 80086c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80086ca:	69bb      	ldr	r3, [r7, #24]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d109      	bne.n	80086e4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6a1b      	ldr	r3, [r3, #32]
 80086d4:	4618      	mov	r0, r3
 80086d6:	f000 fd15 	bl	8009104 <RCC_SetFlashLatencyFromMSIRange>
 80086da:	4603      	mov	r3, r0
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d001      	beq.n	80086e4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80086e0:	2301      	movs	r3, #1
 80086e2:	e343      	b.n	8008d6c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80086e4:	f000 fc4a 	bl	8008f7c <HAL_RCC_GetSysClockFreq>
 80086e8:	4602      	mov	r2, r0
 80086ea:	4b52      	ldr	r3, [pc, #328]	@ (8008834 <HAL_RCC_OscConfig+0x270>)
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	091b      	lsrs	r3, r3, #4
 80086f0:	f003 030f 	and.w	r3, r3, #15
 80086f4:	4950      	ldr	r1, [pc, #320]	@ (8008838 <HAL_RCC_OscConfig+0x274>)
 80086f6:	5ccb      	ldrb	r3, [r1, r3]
 80086f8:	f003 031f 	and.w	r3, r3, #31
 80086fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008700:	4a4e      	ldr	r2, [pc, #312]	@ (800883c <HAL_RCC_OscConfig+0x278>)
 8008702:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008704:	4b4e      	ldr	r3, [pc, #312]	@ (8008840 <HAL_RCC_OscConfig+0x27c>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4618      	mov	r0, r3
 800870a:	f7fc f879 	bl	8004800 <HAL_InitTick>
 800870e:	4603      	mov	r3, r0
 8008710:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008712:	7bfb      	ldrb	r3, [r7, #15]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d052      	beq.n	80087be <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8008718:	7bfb      	ldrb	r3, [r7, #15]
 800871a:	e327      	b.n	8008d6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	699b      	ldr	r3, [r3, #24]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d032      	beq.n	800878a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008724:	4b43      	ldr	r3, [pc, #268]	@ (8008834 <HAL_RCC_OscConfig+0x270>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a42      	ldr	r2, [pc, #264]	@ (8008834 <HAL_RCC_OscConfig+0x270>)
 800872a:	f043 0301 	orr.w	r3, r3, #1
 800872e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008730:	f7fc f8b6 	bl	80048a0 <HAL_GetTick>
 8008734:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008736:	e008      	b.n	800874a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008738:	f7fc f8b2 	bl	80048a0 <HAL_GetTick>
 800873c:	4602      	mov	r2, r0
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	1ad3      	subs	r3, r2, r3
 8008742:	2b02      	cmp	r3, #2
 8008744:	d901      	bls.n	800874a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8008746:	2303      	movs	r3, #3
 8008748:	e310      	b.n	8008d6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800874a:	4b3a      	ldr	r3, [pc, #232]	@ (8008834 <HAL_RCC_OscConfig+0x270>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f003 0302 	and.w	r3, r3, #2
 8008752:	2b00      	cmp	r3, #0
 8008754:	d0f0      	beq.n	8008738 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008756:	4b37      	ldr	r3, [pc, #220]	@ (8008834 <HAL_RCC_OscConfig+0x270>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a36      	ldr	r2, [pc, #216]	@ (8008834 <HAL_RCC_OscConfig+0x270>)
 800875c:	f043 0308 	orr.w	r3, r3, #8
 8008760:	6013      	str	r3, [r2, #0]
 8008762:	4b34      	ldr	r3, [pc, #208]	@ (8008834 <HAL_RCC_OscConfig+0x270>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6a1b      	ldr	r3, [r3, #32]
 800876e:	4931      	ldr	r1, [pc, #196]	@ (8008834 <HAL_RCC_OscConfig+0x270>)
 8008770:	4313      	orrs	r3, r2
 8008772:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008774:	4b2f      	ldr	r3, [pc, #188]	@ (8008834 <HAL_RCC_OscConfig+0x270>)
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	69db      	ldr	r3, [r3, #28]
 8008780:	021b      	lsls	r3, r3, #8
 8008782:	492c      	ldr	r1, [pc, #176]	@ (8008834 <HAL_RCC_OscConfig+0x270>)
 8008784:	4313      	orrs	r3, r2
 8008786:	604b      	str	r3, [r1, #4]
 8008788:	e01a      	b.n	80087c0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800878a:	4b2a      	ldr	r3, [pc, #168]	@ (8008834 <HAL_RCC_OscConfig+0x270>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a29      	ldr	r2, [pc, #164]	@ (8008834 <HAL_RCC_OscConfig+0x270>)
 8008790:	f023 0301 	bic.w	r3, r3, #1
 8008794:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008796:	f7fc f883 	bl	80048a0 <HAL_GetTick>
 800879a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800879c:	e008      	b.n	80087b0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800879e:	f7fc f87f 	bl	80048a0 <HAL_GetTick>
 80087a2:	4602      	mov	r2, r0
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	1ad3      	subs	r3, r2, r3
 80087a8:	2b02      	cmp	r3, #2
 80087aa:	d901      	bls.n	80087b0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80087ac:	2303      	movs	r3, #3
 80087ae:	e2dd      	b.n	8008d6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80087b0:	4b20      	ldr	r3, [pc, #128]	@ (8008834 <HAL_RCC_OscConfig+0x270>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f003 0302 	and.w	r3, r3, #2
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d1f0      	bne.n	800879e <HAL_RCC_OscConfig+0x1da>
 80087bc:	e000      	b.n	80087c0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80087be:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f003 0301 	and.w	r3, r3, #1
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d074      	beq.n	80088b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80087cc:	69bb      	ldr	r3, [r7, #24]
 80087ce:	2b08      	cmp	r3, #8
 80087d0:	d005      	beq.n	80087de <HAL_RCC_OscConfig+0x21a>
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	2b0c      	cmp	r3, #12
 80087d6:	d10e      	bne.n	80087f6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	2b03      	cmp	r3, #3
 80087dc:	d10b      	bne.n	80087f6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087de:	4b15      	ldr	r3, [pc, #84]	@ (8008834 <HAL_RCC_OscConfig+0x270>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d064      	beq.n	80088b4 <HAL_RCC_OscConfig+0x2f0>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d160      	bne.n	80088b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80087f2:	2301      	movs	r3, #1
 80087f4:	e2ba      	b.n	8008d6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087fe:	d106      	bne.n	800880e <HAL_RCC_OscConfig+0x24a>
 8008800:	4b0c      	ldr	r3, [pc, #48]	@ (8008834 <HAL_RCC_OscConfig+0x270>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a0b      	ldr	r2, [pc, #44]	@ (8008834 <HAL_RCC_OscConfig+0x270>)
 8008806:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800880a:	6013      	str	r3, [r2, #0]
 800880c:	e026      	b.n	800885c <HAL_RCC_OscConfig+0x298>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008816:	d115      	bne.n	8008844 <HAL_RCC_OscConfig+0x280>
 8008818:	4b06      	ldr	r3, [pc, #24]	@ (8008834 <HAL_RCC_OscConfig+0x270>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a05      	ldr	r2, [pc, #20]	@ (8008834 <HAL_RCC_OscConfig+0x270>)
 800881e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008822:	6013      	str	r3, [r2, #0]
 8008824:	4b03      	ldr	r3, [pc, #12]	@ (8008834 <HAL_RCC_OscConfig+0x270>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a02      	ldr	r2, [pc, #8]	@ (8008834 <HAL_RCC_OscConfig+0x270>)
 800882a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800882e:	6013      	str	r3, [r2, #0]
 8008830:	e014      	b.n	800885c <HAL_RCC_OscConfig+0x298>
 8008832:	bf00      	nop
 8008834:	40021000 	.word	0x40021000
 8008838:	080198dc 	.word	0x080198dc
 800883c:	20000140 	.word	0x20000140
 8008840:	20000144 	.word	0x20000144
 8008844:	4ba0      	ldr	r3, [pc, #640]	@ (8008ac8 <HAL_RCC_OscConfig+0x504>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a9f      	ldr	r2, [pc, #636]	@ (8008ac8 <HAL_RCC_OscConfig+0x504>)
 800884a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800884e:	6013      	str	r3, [r2, #0]
 8008850:	4b9d      	ldr	r3, [pc, #628]	@ (8008ac8 <HAL_RCC_OscConfig+0x504>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a9c      	ldr	r2, [pc, #624]	@ (8008ac8 <HAL_RCC_OscConfig+0x504>)
 8008856:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800885a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d013      	beq.n	800888c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008864:	f7fc f81c 	bl	80048a0 <HAL_GetTick>
 8008868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800886a:	e008      	b.n	800887e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800886c:	f7fc f818 	bl	80048a0 <HAL_GetTick>
 8008870:	4602      	mov	r2, r0
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	1ad3      	subs	r3, r2, r3
 8008876:	2b64      	cmp	r3, #100	@ 0x64
 8008878:	d901      	bls.n	800887e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800887a:	2303      	movs	r3, #3
 800887c:	e276      	b.n	8008d6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800887e:	4b92      	ldr	r3, [pc, #584]	@ (8008ac8 <HAL_RCC_OscConfig+0x504>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008886:	2b00      	cmp	r3, #0
 8008888:	d0f0      	beq.n	800886c <HAL_RCC_OscConfig+0x2a8>
 800888a:	e014      	b.n	80088b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800888c:	f7fc f808 	bl	80048a0 <HAL_GetTick>
 8008890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008892:	e008      	b.n	80088a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008894:	f7fc f804 	bl	80048a0 <HAL_GetTick>
 8008898:	4602      	mov	r2, r0
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	1ad3      	subs	r3, r2, r3
 800889e:	2b64      	cmp	r3, #100	@ 0x64
 80088a0:	d901      	bls.n	80088a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80088a2:	2303      	movs	r3, #3
 80088a4:	e262      	b.n	8008d6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80088a6:	4b88      	ldr	r3, [pc, #544]	@ (8008ac8 <HAL_RCC_OscConfig+0x504>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d1f0      	bne.n	8008894 <HAL_RCC_OscConfig+0x2d0>
 80088b2:	e000      	b.n	80088b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f003 0302 	and.w	r3, r3, #2
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d060      	beq.n	8008984 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80088c2:	69bb      	ldr	r3, [r7, #24]
 80088c4:	2b04      	cmp	r3, #4
 80088c6:	d005      	beq.n	80088d4 <HAL_RCC_OscConfig+0x310>
 80088c8:	69bb      	ldr	r3, [r7, #24]
 80088ca:	2b0c      	cmp	r3, #12
 80088cc:	d119      	bne.n	8008902 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	2b02      	cmp	r3, #2
 80088d2:	d116      	bne.n	8008902 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088d4:	4b7c      	ldr	r3, [pc, #496]	@ (8008ac8 <HAL_RCC_OscConfig+0x504>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d005      	beq.n	80088ec <HAL_RCC_OscConfig+0x328>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	68db      	ldr	r3, [r3, #12]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d101      	bne.n	80088ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	e23f      	b.n	8008d6c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088ec:	4b76      	ldr	r3, [pc, #472]	@ (8008ac8 <HAL_RCC_OscConfig+0x504>)
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	691b      	ldr	r3, [r3, #16]
 80088f8:	061b      	lsls	r3, r3, #24
 80088fa:	4973      	ldr	r1, [pc, #460]	@ (8008ac8 <HAL_RCC_OscConfig+0x504>)
 80088fc:	4313      	orrs	r3, r2
 80088fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008900:	e040      	b.n	8008984 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d023      	beq.n	8008952 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800890a:	4b6f      	ldr	r3, [pc, #444]	@ (8008ac8 <HAL_RCC_OscConfig+0x504>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a6e      	ldr	r2, [pc, #440]	@ (8008ac8 <HAL_RCC_OscConfig+0x504>)
 8008910:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008914:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008916:	f7fb ffc3 	bl	80048a0 <HAL_GetTick>
 800891a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800891c:	e008      	b.n	8008930 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800891e:	f7fb ffbf 	bl	80048a0 <HAL_GetTick>
 8008922:	4602      	mov	r2, r0
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	1ad3      	subs	r3, r2, r3
 8008928:	2b02      	cmp	r3, #2
 800892a:	d901      	bls.n	8008930 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800892c:	2303      	movs	r3, #3
 800892e:	e21d      	b.n	8008d6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008930:	4b65      	ldr	r3, [pc, #404]	@ (8008ac8 <HAL_RCC_OscConfig+0x504>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008938:	2b00      	cmp	r3, #0
 800893a:	d0f0      	beq.n	800891e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800893c:	4b62      	ldr	r3, [pc, #392]	@ (8008ac8 <HAL_RCC_OscConfig+0x504>)
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	691b      	ldr	r3, [r3, #16]
 8008948:	061b      	lsls	r3, r3, #24
 800894a:	495f      	ldr	r1, [pc, #380]	@ (8008ac8 <HAL_RCC_OscConfig+0x504>)
 800894c:	4313      	orrs	r3, r2
 800894e:	604b      	str	r3, [r1, #4]
 8008950:	e018      	b.n	8008984 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008952:	4b5d      	ldr	r3, [pc, #372]	@ (8008ac8 <HAL_RCC_OscConfig+0x504>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a5c      	ldr	r2, [pc, #368]	@ (8008ac8 <HAL_RCC_OscConfig+0x504>)
 8008958:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800895c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800895e:	f7fb ff9f 	bl	80048a0 <HAL_GetTick>
 8008962:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008964:	e008      	b.n	8008978 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008966:	f7fb ff9b 	bl	80048a0 <HAL_GetTick>
 800896a:	4602      	mov	r2, r0
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	1ad3      	subs	r3, r2, r3
 8008970:	2b02      	cmp	r3, #2
 8008972:	d901      	bls.n	8008978 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008974:	2303      	movs	r3, #3
 8008976:	e1f9      	b.n	8008d6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008978:	4b53      	ldr	r3, [pc, #332]	@ (8008ac8 <HAL_RCC_OscConfig+0x504>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008980:	2b00      	cmp	r3, #0
 8008982:	d1f0      	bne.n	8008966 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f003 0308 	and.w	r3, r3, #8
 800898c:	2b00      	cmp	r3, #0
 800898e:	d03c      	beq.n	8008a0a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	695b      	ldr	r3, [r3, #20]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d01c      	beq.n	80089d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008998:	4b4b      	ldr	r3, [pc, #300]	@ (8008ac8 <HAL_RCC_OscConfig+0x504>)
 800899a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800899e:	4a4a      	ldr	r2, [pc, #296]	@ (8008ac8 <HAL_RCC_OscConfig+0x504>)
 80089a0:	f043 0301 	orr.w	r3, r3, #1
 80089a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089a8:	f7fb ff7a 	bl	80048a0 <HAL_GetTick>
 80089ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80089ae:	e008      	b.n	80089c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80089b0:	f7fb ff76 	bl	80048a0 <HAL_GetTick>
 80089b4:	4602      	mov	r2, r0
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	1ad3      	subs	r3, r2, r3
 80089ba:	2b02      	cmp	r3, #2
 80089bc:	d901      	bls.n	80089c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80089be:	2303      	movs	r3, #3
 80089c0:	e1d4      	b.n	8008d6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80089c2:	4b41      	ldr	r3, [pc, #260]	@ (8008ac8 <HAL_RCC_OscConfig+0x504>)
 80089c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80089c8:	f003 0302 	and.w	r3, r3, #2
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d0ef      	beq.n	80089b0 <HAL_RCC_OscConfig+0x3ec>
 80089d0:	e01b      	b.n	8008a0a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80089d2:	4b3d      	ldr	r3, [pc, #244]	@ (8008ac8 <HAL_RCC_OscConfig+0x504>)
 80089d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80089d8:	4a3b      	ldr	r2, [pc, #236]	@ (8008ac8 <HAL_RCC_OscConfig+0x504>)
 80089da:	f023 0301 	bic.w	r3, r3, #1
 80089de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089e2:	f7fb ff5d 	bl	80048a0 <HAL_GetTick>
 80089e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80089e8:	e008      	b.n	80089fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80089ea:	f7fb ff59 	bl	80048a0 <HAL_GetTick>
 80089ee:	4602      	mov	r2, r0
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	1ad3      	subs	r3, r2, r3
 80089f4:	2b02      	cmp	r3, #2
 80089f6:	d901      	bls.n	80089fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80089f8:	2303      	movs	r3, #3
 80089fa:	e1b7      	b.n	8008d6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80089fc:	4b32      	ldr	r3, [pc, #200]	@ (8008ac8 <HAL_RCC_OscConfig+0x504>)
 80089fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a02:	f003 0302 	and.w	r3, r3, #2
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d1ef      	bne.n	80089ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f003 0304 	and.w	r3, r3, #4
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	f000 80a6 	beq.w	8008b64 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008a1c:	4b2a      	ldr	r3, [pc, #168]	@ (8008ac8 <HAL_RCC_OscConfig+0x504>)
 8008a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d10d      	bne.n	8008a44 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a28:	4b27      	ldr	r3, [pc, #156]	@ (8008ac8 <HAL_RCC_OscConfig+0x504>)
 8008a2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a2c:	4a26      	ldr	r2, [pc, #152]	@ (8008ac8 <HAL_RCC_OscConfig+0x504>)
 8008a2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a32:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a34:	4b24      	ldr	r3, [pc, #144]	@ (8008ac8 <HAL_RCC_OscConfig+0x504>)
 8008a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a3c:	60bb      	str	r3, [r7, #8]
 8008a3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008a40:	2301      	movs	r3, #1
 8008a42:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008a44:	4b21      	ldr	r3, [pc, #132]	@ (8008acc <HAL_RCC_OscConfig+0x508>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d118      	bne.n	8008a82 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008a50:	4b1e      	ldr	r3, [pc, #120]	@ (8008acc <HAL_RCC_OscConfig+0x508>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a1d      	ldr	r2, [pc, #116]	@ (8008acc <HAL_RCC_OscConfig+0x508>)
 8008a56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008a5c:	f7fb ff20 	bl	80048a0 <HAL_GetTick>
 8008a60:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008a62:	e008      	b.n	8008a76 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a64:	f7fb ff1c 	bl	80048a0 <HAL_GetTick>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	1ad3      	subs	r3, r2, r3
 8008a6e:	2b02      	cmp	r3, #2
 8008a70:	d901      	bls.n	8008a76 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8008a72:	2303      	movs	r3, #3
 8008a74:	e17a      	b.n	8008d6c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008a76:	4b15      	ldr	r3, [pc, #84]	@ (8008acc <HAL_RCC_OscConfig+0x508>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d0f0      	beq.n	8008a64 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	d108      	bne.n	8008a9c <HAL_RCC_OscConfig+0x4d8>
 8008a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8008ac8 <HAL_RCC_OscConfig+0x504>)
 8008a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a90:	4a0d      	ldr	r2, [pc, #52]	@ (8008ac8 <HAL_RCC_OscConfig+0x504>)
 8008a92:	f043 0301 	orr.w	r3, r3, #1
 8008a96:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008a9a:	e029      	b.n	8008af0 <HAL_RCC_OscConfig+0x52c>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	2b05      	cmp	r3, #5
 8008aa2:	d115      	bne.n	8008ad0 <HAL_RCC_OscConfig+0x50c>
 8008aa4:	4b08      	ldr	r3, [pc, #32]	@ (8008ac8 <HAL_RCC_OscConfig+0x504>)
 8008aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008aaa:	4a07      	ldr	r2, [pc, #28]	@ (8008ac8 <HAL_RCC_OscConfig+0x504>)
 8008aac:	f043 0304 	orr.w	r3, r3, #4
 8008ab0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008ab4:	4b04      	ldr	r3, [pc, #16]	@ (8008ac8 <HAL_RCC_OscConfig+0x504>)
 8008ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008aba:	4a03      	ldr	r2, [pc, #12]	@ (8008ac8 <HAL_RCC_OscConfig+0x504>)
 8008abc:	f043 0301 	orr.w	r3, r3, #1
 8008ac0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008ac4:	e014      	b.n	8008af0 <HAL_RCC_OscConfig+0x52c>
 8008ac6:	bf00      	nop
 8008ac8:	40021000 	.word	0x40021000
 8008acc:	40007000 	.word	0x40007000
 8008ad0:	4b9c      	ldr	r3, [pc, #624]	@ (8008d44 <HAL_RCC_OscConfig+0x780>)
 8008ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ad6:	4a9b      	ldr	r2, [pc, #620]	@ (8008d44 <HAL_RCC_OscConfig+0x780>)
 8008ad8:	f023 0301 	bic.w	r3, r3, #1
 8008adc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008ae0:	4b98      	ldr	r3, [pc, #608]	@ (8008d44 <HAL_RCC_OscConfig+0x780>)
 8008ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ae6:	4a97      	ldr	r2, [pc, #604]	@ (8008d44 <HAL_RCC_OscConfig+0x780>)
 8008ae8:	f023 0304 	bic.w	r3, r3, #4
 8008aec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d016      	beq.n	8008b26 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008af8:	f7fb fed2 	bl	80048a0 <HAL_GetTick>
 8008afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008afe:	e00a      	b.n	8008b16 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b00:	f7fb fece 	bl	80048a0 <HAL_GetTick>
 8008b04:	4602      	mov	r2, r0
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	1ad3      	subs	r3, r2, r3
 8008b0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d901      	bls.n	8008b16 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8008b12:	2303      	movs	r3, #3
 8008b14:	e12a      	b.n	8008d6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008b16:	4b8b      	ldr	r3, [pc, #556]	@ (8008d44 <HAL_RCC_OscConfig+0x780>)
 8008b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b1c:	f003 0302 	and.w	r3, r3, #2
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d0ed      	beq.n	8008b00 <HAL_RCC_OscConfig+0x53c>
 8008b24:	e015      	b.n	8008b52 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b26:	f7fb febb 	bl	80048a0 <HAL_GetTick>
 8008b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008b2c:	e00a      	b.n	8008b44 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b2e:	f7fb feb7 	bl	80048a0 <HAL_GetTick>
 8008b32:	4602      	mov	r2, r0
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	1ad3      	subs	r3, r2, r3
 8008b38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d901      	bls.n	8008b44 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008b40:	2303      	movs	r3, #3
 8008b42:	e113      	b.n	8008d6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008b44:	4b7f      	ldr	r3, [pc, #508]	@ (8008d44 <HAL_RCC_OscConfig+0x780>)
 8008b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b4a:	f003 0302 	and.w	r3, r3, #2
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d1ed      	bne.n	8008b2e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008b52:	7ffb      	ldrb	r3, [r7, #31]
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d105      	bne.n	8008b64 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b58:	4b7a      	ldr	r3, [pc, #488]	@ (8008d44 <HAL_RCC_OscConfig+0x780>)
 8008b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b5c:	4a79      	ldr	r2, [pc, #484]	@ (8008d44 <HAL_RCC_OscConfig+0x780>)
 8008b5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008b62:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	f000 80fe 	beq.w	8008d6a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b72:	2b02      	cmp	r3, #2
 8008b74:	f040 80d0 	bne.w	8008d18 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008b78:	4b72      	ldr	r3, [pc, #456]	@ (8008d44 <HAL_RCC_OscConfig+0x780>)
 8008b7a:	68db      	ldr	r3, [r3, #12]
 8008b7c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	f003 0203 	and.w	r2, r3, #3
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d130      	bne.n	8008bee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b96:	3b01      	subs	r3, #1
 8008b98:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d127      	bne.n	8008bee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ba8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d11f      	bne.n	8008bee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008bb8:	2a07      	cmp	r2, #7
 8008bba:	bf14      	ite	ne
 8008bbc:	2201      	movne	r2, #1
 8008bbe:	2200      	moveq	r2, #0
 8008bc0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d113      	bne.n	8008bee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bd0:	085b      	lsrs	r3, r3, #1
 8008bd2:	3b01      	subs	r3, #1
 8008bd4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d109      	bne.n	8008bee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008be4:	085b      	lsrs	r3, r3, #1
 8008be6:	3b01      	subs	r3, #1
 8008be8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d06e      	beq.n	8008ccc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008bee:	69bb      	ldr	r3, [r7, #24]
 8008bf0:	2b0c      	cmp	r3, #12
 8008bf2:	d069      	beq.n	8008cc8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008bf4:	4b53      	ldr	r3, [pc, #332]	@ (8008d44 <HAL_RCC_OscConfig+0x780>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d105      	bne.n	8008c0c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8008c00:	4b50      	ldr	r3, [pc, #320]	@ (8008d44 <HAL_RCC_OscConfig+0x780>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d001      	beq.n	8008c10 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	e0ad      	b.n	8008d6c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008c10:	4b4c      	ldr	r3, [pc, #304]	@ (8008d44 <HAL_RCC_OscConfig+0x780>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a4b      	ldr	r2, [pc, #300]	@ (8008d44 <HAL_RCC_OscConfig+0x780>)
 8008c16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008c1a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008c1c:	f7fb fe40 	bl	80048a0 <HAL_GetTick>
 8008c20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c22:	e008      	b.n	8008c36 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c24:	f7fb fe3c 	bl	80048a0 <HAL_GetTick>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	1ad3      	subs	r3, r2, r3
 8008c2e:	2b02      	cmp	r3, #2
 8008c30:	d901      	bls.n	8008c36 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8008c32:	2303      	movs	r3, #3
 8008c34:	e09a      	b.n	8008d6c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c36:	4b43      	ldr	r3, [pc, #268]	@ (8008d44 <HAL_RCC_OscConfig+0x780>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d1f0      	bne.n	8008c24 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008c42:	4b40      	ldr	r3, [pc, #256]	@ (8008d44 <HAL_RCC_OscConfig+0x780>)
 8008c44:	68da      	ldr	r2, [r3, #12]
 8008c46:	4b40      	ldr	r3, [pc, #256]	@ (8008d48 <HAL_RCC_OscConfig+0x784>)
 8008c48:	4013      	ands	r3, r2
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008c52:	3a01      	subs	r2, #1
 8008c54:	0112      	lsls	r2, r2, #4
 8008c56:	4311      	orrs	r1, r2
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008c5c:	0212      	lsls	r2, r2, #8
 8008c5e:	4311      	orrs	r1, r2
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008c64:	0852      	lsrs	r2, r2, #1
 8008c66:	3a01      	subs	r2, #1
 8008c68:	0552      	lsls	r2, r2, #21
 8008c6a:	4311      	orrs	r1, r2
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8008c70:	0852      	lsrs	r2, r2, #1
 8008c72:	3a01      	subs	r2, #1
 8008c74:	0652      	lsls	r2, r2, #25
 8008c76:	4311      	orrs	r1, r2
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008c7c:	0912      	lsrs	r2, r2, #4
 8008c7e:	0452      	lsls	r2, r2, #17
 8008c80:	430a      	orrs	r2, r1
 8008c82:	4930      	ldr	r1, [pc, #192]	@ (8008d44 <HAL_RCC_OscConfig+0x780>)
 8008c84:	4313      	orrs	r3, r2
 8008c86:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008c88:	4b2e      	ldr	r3, [pc, #184]	@ (8008d44 <HAL_RCC_OscConfig+0x780>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a2d      	ldr	r2, [pc, #180]	@ (8008d44 <HAL_RCC_OscConfig+0x780>)
 8008c8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008c92:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008c94:	4b2b      	ldr	r3, [pc, #172]	@ (8008d44 <HAL_RCC_OscConfig+0x780>)
 8008c96:	68db      	ldr	r3, [r3, #12]
 8008c98:	4a2a      	ldr	r2, [pc, #168]	@ (8008d44 <HAL_RCC_OscConfig+0x780>)
 8008c9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008c9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008ca0:	f7fb fdfe 	bl	80048a0 <HAL_GetTick>
 8008ca4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ca6:	e008      	b.n	8008cba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ca8:	f7fb fdfa 	bl	80048a0 <HAL_GetTick>
 8008cac:	4602      	mov	r2, r0
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	1ad3      	subs	r3, r2, r3
 8008cb2:	2b02      	cmp	r3, #2
 8008cb4:	d901      	bls.n	8008cba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8008cb6:	2303      	movs	r3, #3
 8008cb8:	e058      	b.n	8008d6c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008cba:	4b22      	ldr	r3, [pc, #136]	@ (8008d44 <HAL_RCC_OscConfig+0x780>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d0f0      	beq.n	8008ca8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008cc6:	e050      	b.n	8008d6a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	e04f      	b.n	8008d6c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ccc:	4b1d      	ldr	r3, [pc, #116]	@ (8008d44 <HAL_RCC_OscConfig+0x780>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d148      	bne.n	8008d6a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8008d44 <HAL_RCC_OscConfig+0x780>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a19      	ldr	r2, [pc, #100]	@ (8008d44 <HAL_RCC_OscConfig+0x780>)
 8008cde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008ce2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008ce4:	4b17      	ldr	r3, [pc, #92]	@ (8008d44 <HAL_RCC_OscConfig+0x780>)
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	4a16      	ldr	r2, [pc, #88]	@ (8008d44 <HAL_RCC_OscConfig+0x780>)
 8008cea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008cee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008cf0:	f7fb fdd6 	bl	80048a0 <HAL_GetTick>
 8008cf4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008cf6:	e008      	b.n	8008d0a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cf8:	f7fb fdd2 	bl	80048a0 <HAL_GetTick>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	1ad3      	subs	r3, r2, r3
 8008d02:	2b02      	cmp	r3, #2
 8008d04:	d901      	bls.n	8008d0a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8008d06:	2303      	movs	r3, #3
 8008d08:	e030      	b.n	8008d6c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8008d44 <HAL_RCC_OscConfig+0x780>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d0f0      	beq.n	8008cf8 <HAL_RCC_OscConfig+0x734>
 8008d16:	e028      	b.n	8008d6a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008d18:	69bb      	ldr	r3, [r7, #24]
 8008d1a:	2b0c      	cmp	r3, #12
 8008d1c:	d023      	beq.n	8008d66 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d1e:	4b09      	ldr	r3, [pc, #36]	@ (8008d44 <HAL_RCC_OscConfig+0x780>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a08      	ldr	r2, [pc, #32]	@ (8008d44 <HAL_RCC_OscConfig+0x780>)
 8008d24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008d28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d2a:	f7fb fdb9 	bl	80048a0 <HAL_GetTick>
 8008d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d30:	e00c      	b.n	8008d4c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d32:	f7fb fdb5 	bl	80048a0 <HAL_GetTick>
 8008d36:	4602      	mov	r2, r0
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	1ad3      	subs	r3, r2, r3
 8008d3c:	2b02      	cmp	r3, #2
 8008d3e:	d905      	bls.n	8008d4c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8008d40:	2303      	movs	r3, #3
 8008d42:	e013      	b.n	8008d6c <HAL_RCC_OscConfig+0x7a8>
 8008d44:	40021000 	.word	0x40021000
 8008d48:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d4c:	4b09      	ldr	r3, [pc, #36]	@ (8008d74 <HAL_RCC_OscConfig+0x7b0>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d1ec      	bne.n	8008d32 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008d58:	4b06      	ldr	r3, [pc, #24]	@ (8008d74 <HAL_RCC_OscConfig+0x7b0>)
 8008d5a:	68da      	ldr	r2, [r3, #12]
 8008d5c:	4905      	ldr	r1, [pc, #20]	@ (8008d74 <HAL_RCC_OscConfig+0x7b0>)
 8008d5e:	4b06      	ldr	r3, [pc, #24]	@ (8008d78 <HAL_RCC_OscConfig+0x7b4>)
 8008d60:	4013      	ands	r3, r2
 8008d62:	60cb      	str	r3, [r1, #12]
 8008d64:	e001      	b.n	8008d6a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008d66:	2301      	movs	r3, #1
 8008d68:	e000      	b.n	8008d6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8008d6a:	2300      	movs	r3, #0
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3720      	adds	r7, #32
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	40021000 	.word	0x40021000
 8008d78:	feeefffc 	.word	0xfeeefffc

08008d7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d101      	bne.n	8008d90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	e0e7      	b.n	8008f60 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008d90:	4b75      	ldr	r3, [pc, #468]	@ (8008f68 <HAL_RCC_ClockConfig+0x1ec>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f003 0307 	and.w	r3, r3, #7
 8008d98:	683a      	ldr	r2, [r7, #0]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d910      	bls.n	8008dc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d9e:	4b72      	ldr	r3, [pc, #456]	@ (8008f68 <HAL_RCC_ClockConfig+0x1ec>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f023 0207 	bic.w	r2, r3, #7
 8008da6:	4970      	ldr	r1, [pc, #448]	@ (8008f68 <HAL_RCC_ClockConfig+0x1ec>)
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	4313      	orrs	r3, r2
 8008dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008dae:	4b6e      	ldr	r3, [pc, #440]	@ (8008f68 <HAL_RCC_ClockConfig+0x1ec>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f003 0307 	and.w	r3, r3, #7
 8008db6:	683a      	ldr	r2, [r7, #0]
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d001      	beq.n	8008dc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	e0cf      	b.n	8008f60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f003 0302 	and.w	r3, r3, #2
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d010      	beq.n	8008dee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	689a      	ldr	r2, [r3, #8]
 8008dd0:	4b66      	ldr	r3, [pc, #408]	@ (8008f6c <HAL_RCC_ClockConfig+0x1f0>)
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d908      	bls.n	8008dee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ddc:	4b63      	ldr	r3, [pc, #396]	@ (8008f6c <HAL_RCC_ClockConfig+0x1f0>)
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	4960      	ldr	r1, [pc, #384]	@ (8008f6c <HAL_RCC_ClockConfig+0x1f0>)
 8008dea:	4313      	orrs	r3, r2
 8008dec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f003 0301 	and.w	r3, r3, #1
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d04c      	beq.n	8008e94 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	2b03      	cmp	r3, #3
 8008e00:	d107      	bne.n	8008e12 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008e02:	4b5a      	ldr	r3, [pc, #360]	@ (8008f6c <HAL_RCC_ClockConfig+0x1f0>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d121      	bne.n	8008e52 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e0a6      	b.n	8008f60 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	2b02      	cmp	r3, #2
 8008e18:	d107      	bne.n	8008e2a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008e1a:	4b54      	ldr	r3, [pc, #336]	@ (8008f6c <HAL_RCC_ClockConfig+0x1f0>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d115      	bne.n	8008e52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008e26:	2301      	movs	r3, #1
 8008e28:	e09a      	b.n	8008f60 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d107      	bne.n	8008e42 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008e32:	4b4e      	ldr	r3, [pc, #312]	@ (8008f6c <HAL_RCC_ClockConfig+0x1f0>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f003 0302 	and.w	r3, r3, #2
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d109      	bne.n	8008e52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e08e      	b.n	8008f60 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008e42:	4b4a      	ldr	r3, [pc, #296]	@ (8008f6c <HAL_RCC_ClockConfig+0x1f0>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d101      	bne.n	8008e52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e086      	b.n	8008f60 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008e52:	4b46      	ldr	r3, [pc, #280]	@ (8008f6c <HAL_RCC_ClockConfig+0x1f0>)
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	f023 0203 	bic.w	r2, r3, #3
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	4943      	ldr	r1, [pc, #268]	@ (8008f6c <HAL_RCC_ClockConfig+0x1f0>)
 8008e60:	4313      	orrs	r3, r2
 8008e62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e64:	f7fb fd1c 	bl	80048a0 <HAL_GetTick>
 8008e68:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e6a:	e00a      	b.n	8008e82 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e6c:	f7fb fd18 	bl	80048a0 <HAL_GetTick>
 8008e70:	4602      	mov	r2, r0
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	1ad3      	subs	r3, r2, r3
 8008e76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d901      	bls.n	8008e82 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8008e7e:	2303      	movs	r3, #3
 8008e80:	e06e      	b.n	8008f60 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e82:	4b3a      	ldr	r3, [pc, #232]	@ (8008f6c <HAL_RCC_ClockConfig+0x1f0>)
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	f003 020c 	and.w	r2, r3, #12
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d1eb      	bne.n	8008e6c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f003 0302 	and.w	r3, r3, #2
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d010      	beq.n	8008ec2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	689a      	ldr	r2, [r3, #8]
 8008ea4:	4b31      	ldr	r3, [pc, #196]	@ (8008f6c <HAL_RCC_ClockConfig+0x1f0>)
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d208      	bcs.n	8008ec2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008eb0:	4b2e      	ldr	r3, [pc, #184]	@ (8008f6c <HAL_RCC_ClockConfig+0x1f0>)
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	492b      	ldr	r1, [pc, #172]	@ (8008f6c <HAL_RCC_ClockConfig+0x1f0>)
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008ec2:	4b29      	ldr	r3, [pc, #164]	@ (8008f68 <HAL_RCC_ClockConfig+0x1ec>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f003 0307 	and.w	r3, r3, #7
 8008eca:	683a      	ldr	r2, [r7, #0]
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d210      	bcs.n	8008ef2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ed0:	4b25      	ldr	r3, [pc, #148]	@ (8008f68 <HAL_RCC_ClockConfig+0x1ec>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f023 0207 	bic.w	r2, r3, #7
 8008ed8:	4923      	ldr	r1, [pc, #140]	@ (8008f68 <HAL_RCC_ClockConfig+0x1ec>)
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	4313      	orrs	r3, r2
 8008ede:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ee0:	4b21      	ldr	r3, [pc, #132]	@ (8008f68 <HAL_RCC_ClockConfig+0x1ec>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f003 0307 	and.w	r3, r3, #7
 8008ee8:	683a      	ldr	r2, [r7, #0]
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d001      	beq.n	8008ef2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e036      	b.n	8008f60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f003 0304 	and.w	r3, r3, #4
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d008      	beq.n	8008f10 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008efe:	4b1b      	ldr	r3, [pc, #108]	@ (8008f6c <HAL_RCC_ClockConfig+0x1f0>)
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	68db      	ldr	r3, [r3, #12]
 8008f0a:	4918      	ldr	r1, [pc, #96]	@ (8008f6c <HAL_RCC_ClockConfig+0x1f0>)
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f003 0308 	and.w	r3, r3, #8
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d009      	beq.n	8008f30 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008f1c:	4b13      	ldr	r3, [pc, #76]	@ (8008f6c <HAL_RCC_ClockConfig+0x1f0>)
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	691b      	ldr	r3, [r3, #16]
 8008f28:	00db      	lsls	r3, r3, #3
 8008f2a:	4910      	ldr	r1, [pc, #64]	@ (8008f6c <HAL_RCC_ClockConfig+0x1f0>)
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008f30:	f000 f824 	bl	8008f7c <HAL_RCC_GetSysClockFreq>
 8008f34:	4602      	mov	r2, r0
 8008f36:	4b0d      	ldr	r3, [pc, #52]	@ (8008f6c <HAL_RCC_ClockConfig+0x1f0>)
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	091b      	lsrs	r3, r3, #4
 8008f3c:	f003 030f 	and.w	r3, r3, #15
 8008f40:	490b      	ldr	r1, [pc, #44]	@ (8008f70 <HAL_RCC_ClockConfig+0x1f4>)
 8008f42:	5ccb      	ldrb	r3, [r1, r3]
 8008f44:	f003 031f 	and.w	r3, r3, #31
 8008f48:	fa22 f303 	lsr.w	r3, r2, r3
 8008f4c:	4a09      	ldr	r2, [pc, #36]	@ (8008f74 <HAL_RCC_ClockConfig+0x1f8>)
 8008f4e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008f50:	4b09      	ldr	r3, [pc, #36]	@ (8008f78 <HAL_RCC_ClockConfig+0x1fc>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4618      	mov	r0, r3
 8008f56:	f7fb fc53 	bl	8004800 <HAL_InitTick>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	72fb      	strb	r3, [r7, #11]

  return status;
 8008f5e:	7afb      	ldrb	r3, [r7, #11]
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3710      	adds	r7, #16
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}
 8008f68:	40022000 	.word	0x40022000
 8008f6c:	40021000 	.word	0x40021000
 8008f70:	080198dc 	.word	0x080198dc
 8008f74:	20000140 	.word	0x20000140
 8008f78:	20000144 	.word	0x20000144

08008f7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b089      	sub	sp, #36	@ 0x24
 8008f80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008f82:	2300      	movs	r3, #0
 8008f84:	61fb      	str	r3, [r7, #28]
 8008f86:	2300      	movs	r3, #0
 8008f88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f8a:	4b3e      	ldr	r3, [pc, #248]	@ (8009084 <HAL_RCC_GetSysClockFreq+0x108>)
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	f003 030c 	and.w	r3, r3, #12
 8008f92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008f94:	4b3b      	ldr	r3, [pc, #236]	@ (8009084 <HAL_RCC_GetSysClockFreq+0x108>)
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	f003 0303 	and.w	r3, r3, #3
 8008f9c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d005      	beq.n	8008fb0 <HAL_RCC_GetSysClockFreq+0x34>
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	2b0c      	cmp	r3, #12
 8008fa8:	d121      	bne.n	8008fee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d11e      	bne.n	8008fee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008fb0:	4b34      	ldr	r3, [pc, #208]	@ (8009084 <HAL_RCC_GetSysClockFreq+0x108>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f003 0308 	and.w	r3, r3, #8
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d107      	bne.n	8008fcc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008fbc:	4b31      	ldr	r3, [pc, #196]	@ (8009084 <HAL_RCC_GetSysClockFreq+0x108>)
 8008fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008fc2:	0a1b      	lsrs	r3, r3, #8
 8008fc4:	f003 030f 	and.w	r3, r3, #15
 8008fc8:	61fb      	str	r3, [r7, #28]
 8008fca:	e005      	b.n	8008fd8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008fcc:	4b2d      	ldr	r3, [pc, #180]	@ (8009084 <HAL_RCC_GetSysClockFreq+0x108>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	091b      	lsrs	r3, r3, #4
 8008fd2:	f003 030f 	and.w	r3, r3, #15
 8008fd6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008fd8:	4a2b      	ldr	r2, [pc, #172]	@ (8009088 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008fda:	69fb      	ldr	r3, [r7, #28]
 8008fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fe0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d10d      	bne.n	8009004 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008fe8:	69fb      	ldr	r3, [r7, #28]
 8008fea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008fec:	e00a      	b.n	8009004 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	2b04      	cmp	r3, #4
 8008ff2:	d102      	bne.n	8008ffa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008ff4:	4b25      	ldr	r3, [pc, #148]	@ (800908c <HAL_RCC_GetSysClockFreq+0x110>)
 8008ff6:	61bb      	str	r3, [r7, #24]
 8008ff8:	e004      	b.n	8009004 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	2b08      	cmp	r3, #8
 8008ffe:	d101      	bne.n	8009004 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009000:	4b23      	ldr	r3, [pc, #140]	@ (8009090 <HAL_RCC_GetSysClockFreq+0x114>)
 8009002:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	2b0c      	cmp	r3, #12
 8009008:	d134      	bne.n	8009074 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800900a:	4b1e      	ldr	r3, [pc, #120]	@ (8009084 <HAL_RCC_GetSysClockFreq+0x108>)
 800900c:	68db      	ldr	r3, [r3, #12]
 800900e:	f003 0303 	and.w	r3, r3, #3
 8009012:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	2b02      	cmp	r3, #2
 8009018:	d003      	beq.n	8009022 <HAL_RCC_GetSysClockFreq+0xa6>
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	2b03      	cmp	r3, #3
 800901e:	d003      	beq.n	8009028 <HAL_RCC_GetSysClockFreq+0xac>
 8009020:	e005      	b.n	800902e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8009022:	4b1a      	ldr	r3, [pc, #104]	@ (800908c <HAL_RCC_GetSysClockFreq+0x110>)
 8009024:	617b      	str	r3, [r7, #20]
      break;
 8009026:	e005      	b.n	8009034 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8009028:	4b19      	ldr	r3, [pc, #100]	@ (8009090 <HAL_RCC_GetSysClockFreq+0x114>)
 800902a:	617b      	str	r3, [r7, #20]
      break;
 800902c:	e002      	b.n	8009034 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800902e:	69fb      	ldr	r3, [r7, #28]
 8009030:	617b      	str	r3, [r7, #20]
      break;
 8009032:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009034:	4b13      	ldr	r3, [pc, #76]	@ (8009084 <HAL_RCC_GetSysClockFreq+0x108>)
 8009036:	68db      	ldr	r3, [r3, #12]
 8009038:	091b      	lsrs	r3, r3, #4
 800903a:	f003 0307 	and.w	r3, r3, #7
 800903e:	3301      	adds	r3, #1
 8009040:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009042:	4b10      	ldr	r3, [pc, #64]	@ (8009084 <HAL_RCC_GetSysClockFreq+0x108>)
 8009044:	68db      	ldr	r3, [r3, #12]
 8009046:	0a1b      	lsrs	r3, r3, #8
 8009048:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800904c:	697a      	ldr	r2, [r7, #20]
 800904e:	fb03 f202 	mul.w	r2, r3, r2
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	fbb2 f3f3 	udiv	r3, r2, r3
 8009058:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800905a:	4b0a      	ldr	r3, [pc, #40]	@ (8009084 <HAL_RCC_GetSysClockFreq+0x108>)
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	0e5b      	lsrs	r3, r3, #25
 8009060:	f003 0303 	and.w	r3, r3, #3
 8009064:	3301      	adds	r3, #1
 8009066:	005b      	lsls	r3, r3, #1
 8009068:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800906a:	697a      	ldr	r2, [r7, #20]
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009072:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009074:	69bb      	ldr	r3, [r7, #24]
}
 8009076:	4618      	mov	r0, r3
 8009078:	3724      	adds	r7, #36	@ 0x24
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr
 8009082:	bf00      	nop
 8009084:	40021000 	.word	0x40021000
 8009088:	080198f4 	.word	0x080198f4
 800908c:	00f42400 	.word	0x00f42400
 8009090:	007a1200 	.word	0x007a1200

08009094 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009094:	b480      	push	{r7}
 8009096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009098:	4b03      	ldr	r3, [pc, #12]	@ (80090a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800909a:	681b      	ldr	r3, [r3, #0]
}
 800909c:	4618      	mov	r0, r3
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr
 80090a6:	bf00      	nop
 80090a8:	20000140 	.word	0x20000140

080090ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80090b0:	f7ff fff0 	bl	8009094 <HAL_RCC_GetHCLKFreq>
 80090b4:	4602      	mov	r2, r0
 80090b6:	4b06      	ldr	r3, [pc, #24]	@ (80090d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	0a1b      	lsrs	r3, r3, #8
 80090bc:	f003 0307 	and.w	r3, r3, #7
 80090c0:	4904      	ldr	r1, [pc, #16]	@ (80090d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80090c2:	5ccb      	ldrb	r3, [r1, r3]
 80090c4:	f003 031f 	and.w	r3, r3, #31
 80090c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	bd80      	pop	{r7, pc}
 80090d0:	40021000 	.word	0x40021000
 80090d4:	080198ec 	.word	0x080198ec

080090d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80090dc:	f7ff ffda 	bl	8009094 <HAL_RCC_GetHCLKFreq>
 80090e0:	4602      	mov	r2, r0
 80090e2:	4b06      	ldr	r3, [pc, #24]	@ (80090fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	0adb      	lsrs	r3, r3, #11
 80090e8:	f003 0307 	and.w	r3, r3, #7
 80090ec:	4904      	ldr	r1, [pc, #16]	@ (8009100 <HAL_RCC_GetPCLK2Freq+0x28>)
 80090ee:	5ccb      	ldrb	r3, [r1, r3]
 80090f0:	f003 031f 	and.w	r3, r3, #31
 80090f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	40021000 	.word	0x40021000
 8009100:	080198ec 	.word	0x080198ec

08009104 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b086      	sub	sp, #24
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800910c:	2300      	movs	r3, #0
 800910e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009110:	4b2a      	ldr	r3, [pc, #168]	@ (80091bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009114:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009118:	2b00      	cmp	r3, #0
 800911a:	d003      	beq.n	8009124 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800911c:	f7ff f9ee 	bl	80084fc <HAL_PWREx_GetVoltageRange>
 8009120:	6178      	str	r0, [r7, #20]
 8009122:	e014      	b.n	800914e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009124:	4b25      	ldr	r3, [pc, #148]	@ (80091bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009128:	4a24      	ldr	r2, [pc, #144]	@ (80091bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800912a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800912e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009130:	4b22      	ldr	r3, [pc, #136]	@ (80091bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009134:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009138:	60fb      	str	r3, [r7, #12]
 800913a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800913c:	f7ff f9de 	bl	80084fc <HAL_PWREx_GetVoltageRange>
 8009140:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009142:	4b1e      	ldr	r3, [pc, #120]	@ (80091bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009146:	4a1d      	ldr	r2, [pc, #116]	@ (80091bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009148:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800914c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009154:	d10b      	bne.n	800916e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2b80      	cmp	r3, #128	@ 0x80
 800915a:	d919      	bls.n	8009190 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2ba0      	cmp	r3, #160	@ 0xa0
 8009160:	d902      	bls.n	8009168 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009162:	2302      	movs	r3, #2
 8009164:	613b      	str	r3, [r7, #16]
 8009166:	e013      	b.n	8009190 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009168:	2301      	movs	r3, #1
 800916a:	613b      	str	r3, [r7, #16]
 800916c:	e010      	b.n	8009190 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2b80      	cmp	r3, #128	@ 0x80
 8009172:	d902      	bls.n	800917a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8009174:	2303      	movs	r3, #3
 8009176:	613b      	str	r3, [r7, #16]
 8009178:	e00a      	b.n	8009190 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2b80      	cmp	r3, #128	@ 0x80
 800917e:	d102      	bne.n	8009186 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009180:	2302      	movs	r3, #2
 8009182:	613b      	str	r3, [r7, #16]
 8009184:	e004      	b.n	8009190 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2b70      	cmp	r3, #112	@ 0x70
 800918a:	d101      	bne.n	8009190 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800918c:	2301      	movs	r3, #1
 800918e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009190:	4b0b      	ldr	r3, [pc, #44]	@ (80091c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f023 0207 	bic.w	r2, r3, #7
 8009198:	4909      	ldr	r1, [pc, #36]	@ (80091c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	4313      	orrs	r3, r2
 800919e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80091a0:	4b07      	ldr	r3, [pc, #28]	@ (80091c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f003 0307 	and.w	r3, r3, #7
 80091a8:	693a      	ldr	r2, [r7, #16]
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d001      	beq.n	80091b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80091ae:	2301      	movs	r3, #1
 80091b0:	e000      	b.n	80091b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80091b2:	2300      	movs	r3, #0
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3718      	adds	r7, #24
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}
 80091bc:	40021000 	.word	0x40021000
 80091c0:	40022000 	.word	0x40022000

080091c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b086      	sub	sp, #24
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80091cc:	2300      	movs	r3, #0
 80091ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80091d0:	2300      	movs	r3, #0
 80091d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d041      	beq.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091e4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80091e8:	d02a      	beq.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80091ea:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80091ee:	d824      	bhi.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80091f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80091f4:	d008      	beq.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80091f6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80091fa:	d81e      	bhi.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d00a      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009200:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009204:	d010      	beq.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009206:	e018      	b.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009208:	4b86      	ldr	r3, [pc, #536]	@ (8009424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	4a85      	ldr	r2, [pc, #532]	@ (8009424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800920e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009212:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009214:	e015      	b.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	3304      	adds	r3, #4
 800921a:	2100      	movs	r1, #0
 800921c:	4618      	mov	r0, r3
 800921e:	f000 fabb 	bl	8009798 <RCCEx_PLLSAI1_Config>
 8009222:	4603      	mov	r3, r0
 8009224:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009226:	e00c      	b.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	3320      	adds	r3, #32
 800922c:	2100      	movs	r1, #0
 800922e:	4618      	mov	r0, r3
 8009230:	f000 fba6 	bl	8009980 <RCCEx_PLLSAI2_Config>
 8009234:	4603      	mov	r3, r0
 8009236:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009238:	e003      	b.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800923a:	2301      	movs	r3, #1
 800923c:	74fb      	strb	r3, [r7, #19]
      break;
 800923e:	e000      	b.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009240:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009242:	7cfb      	ldrb	r3, [r7, #19]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d10b      	bne.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009248:	4b76      	ldr	r3, [pc, #472]	@ (8009424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800924a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800924e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009256:	4973      	ldr	r1, [pc, #460]	@ (8009424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009258:	4313      	orrs	r3, r2
 800925a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800925e:	e001      	b.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009260:	7cfb      	ldrb	r3, [r7, #19]
 8009262:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800926c:	2b00      	cmp	r3, #0
 800926e:	d041      	beq.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009274:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009278:	d02a      	beq.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800927a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800927e:	d824      	bhi.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8009280:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009284:	d008      	beq.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009286:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800928a:	d81e      	bhi.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 800928c:	2b00      	cmp	r3, #0
 800928e:	d00a      	beq.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8009290:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009294:	d010      	beq.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8009296:	e018      	b.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009298:	4b62      	ldr	r3, [pc, #392]	@ (8009424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800929a:	68db      	ldr	r3, [r3, #12]
 800929c:	4a61      	ldr	r2, [pc, #388]	@ (8009424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800929e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80092a2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80092a4:	e015      	b.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	3304      	adds	r3, #4
 80092aa:	2100      	movs	r1, #0
 80092ac:	4618      	mov	r0, r3
 80092ae:	f000 fa73 	bl	8009798 <RCCEx_PLLSAI1_Config>
 80092b2:	4603      	mov	r3, r0
 80092b4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80092b6:	e00c      	b.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	3320      	adds	r3, #32
 80092bc:	2100      	movs	r1, #0
 80092be:	4618      	mov	r0, r3
 80092c0:	f000 fb5e 	bl	8009980 <RCCEx_PLLSAI2_Config>
 80092c4:	4603      	mov	r3, r0
 80092c6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80092c8:	e003      	b.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	74fb      	strb	r3, [r7, #19]
      break;
 80092ce:	e000      	b.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80092d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092d2:	7cfb      	ldrb	r3, [r7, #19]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d10b      	bne.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80092d8:	4b52      	ldr	r3, [pc, #328]	@ (8009424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80092da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092de:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80092e6:	494f      	ldr	r1, [pc, #316]	@ (8009424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80092e8:	4313      	orrs	r3, r2
 80092ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80092ee:	e001      	b.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092f0:	7cfb      	ldrb	r3, [r7, #19]
 80092f2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	f000 80a0 	beq.w	8009442 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009302:	2300      	movs	r3, #0
 8009304:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009306:	4b47      	ldr	r3, [pc, #284]	@ (8009424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800930a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800930e:	2b00      	cmp	r3, #0
 8009310:	d101      	bne.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8009312:	2301      	movs	r3, #1
 8009314:	e000      	b.n	8009318 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8009316:	2300      	movs	r3, #0
 8009318:	2b00      	cmp	r3, #0
 800931a:	d00d      	beq.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800931c:	4b41      	ldr	r3, [pc, #260]	@ (8009424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800931e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009320:	4a40      	ldr	r2, [pc, #256]	@ (8009424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009322:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009326:	6593      	str	r3, [r2, #88]	@ 0x58
 8009328:	4b3e      	ldr	r3, [pc, #248]	@ (8009424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800932a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800932c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009330:	60bb      	str	r3, [r7, #8]
 8009332:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009334:	2301      	movs	r3, #1
 8009336:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009338:	4b3b      	ldr	r3, [pc, #236]	@ (8009428 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4a3a      	ldr	r2, [pc, #232]	@ (8009428 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800933e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009342:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009344:	f7fb faac 	bl	80048a0 <HAL_GetTick>
 8009348:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800934a:	e009      	b.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800934c:	f7fb faa8 	bl	80048a0 <HAL_GetTick>
 8009350:	4602      	mov	r2, r0
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	1ad3      	subs	r3, r2, r3
 8009356:	2b02      	cmp	r3, #2
 8009358:	d902      	bls.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800935a:	2303      	movs	r3, #3
 800935c:	74fb      	strb	r3, [r7, #19]
        break;
 800935e:	e005      	b.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009360:	4b31      	ldr	r3, [pc, #196]	@ (8009428 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009368:	2b00      	cmp	r3, #0
 800936a:	d0ef      	beq.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800936c:	7cfb      	ldrb	r3, [r7, #19]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d15c      	bne.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009372:	4b2c      	ldr	r3, [pc, #176]	@ (8009424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009374:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009378:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800937c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d01f      	beq.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800938a:	697a      	ldr	r2, [r7, #20]
 800938c:	429a      	cmp	r2, r3
 800938e:	d019      	beq.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009390:	4b24      	ldr	r3, [pc, #144]	@ (8009424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009396:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800939a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800939c:	4b21      	ldr	r3, [pc, #132]	@ (8009424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800939e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093a2:	4a20      	ldr	r2, [pc, #128]	@ (8009424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80093a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80093a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80093ac:	4b1d      	ldr	r3, [pc, #116]	@ (8009424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80093ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093b2:	4a1c      	ldr	r2, [pc, #112]	@ (8009424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80093b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80093b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80093bc:	4a19      	ldr	r2, [pc, #100]	@ (8009424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	f003 0301 	and.w	r3, r3, #1
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d016      	beq.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093ce:	f7fb fa67 	bl	80048a0 <HAL_GetTick>
 80093d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80093d4:	e00b      	b.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093d6:	f7fb fa63 	bl	80048a0 <HAL_GetTick>
 80093da:	4602      	mov	r2, r0
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	1ad3      	subs	r3, r2, r3
 80093e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d902      	bls.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80093e8:	2303      	movs	r3, #3
 80093ea:	74fb      	strb	r3, [r7, #19]
            break;
 80093ec:	e006      	b.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80093ee:	4b0d      	ldr	r3, [pc, #52]	@ (8009424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80093f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093f4:	f003 0302 	and.w	r3, r3, #2
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d0ec      	beq.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80093fc:	7cfb      	ldrb	r3, [r7, #19]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d10c      	bne.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009402:	4b08      	ldr	r3, [pc, #32]	@ (8009424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009408:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009412:	4904      	ldr	r1, [pc, #16]	@ (8009424 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009414:	4313      	orrs	r3, r2
 8009416:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800941a:	e009      	b.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800941c:	7cfb      	ldrb	r3, [r7, #19]
 800941e:	74bb      	strb	r3, [r7, #18]
 8009420:	e006      	b.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8009422:	bf00      	nop
 8009424:	40021000 	.word	0x40021000
 8009428:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800942c:	7cfb      	ldrb	r3, [r7, #19]
 800942e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009430:	7c7b      	ldrb	r3, [r7, #17]
 8009432:	2b01      	cmp	r3, #1
 8009434:	d105      	bne.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009436:	4b9e      	ldr	r3, [pc, #632]	@ (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800943a:	4a9d      	ldr	r2, [pc, #628]	@ (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800943c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009440:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f003 0301 	and.w	r3, r3, #1
 800944a:	2b00      	cmp	r3, #0
 800944c:	d00a      	beq.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800944e:	4b98      	ldr	r3, [pc, #608]	@ (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009450:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009454:	f023 0203 	bic.w	r2, r3, #3
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800945c:	4994      	ldr	r1, [pc, #592]	@ (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800945e:	4313      	orrs	r3, r2
 8009460:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f003 0302 	and.w	r3, r3, #2
 800946c:	2b00      	cmp	r3, #0
 800946e:	d00a      	beq.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009470:	4b8f      	ldr	r3, [pc, #572]	@ (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009476:	f023 020c 	bic.w	r2, r3, #12
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800947e:	498c      	ldr	r1, [pc, #560]	@ (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009480:	4313      	orrs	r3, r2
 8009482:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f003 0304 	and.w	r3, r3, #4
 800948e:	2b00      	cmp	r3, #0
 8009490:	d00a      	beq.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009492:	4b87      	ldr	r3, [pc, #540]	@ (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009494:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009498:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094a0:	4983      	ldr	r1, [pc, #524]	@ (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80094a2:	4313      	orrs	r3, r2
 80094a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f003 0308 	and.w	r3, r3, #8
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d00a      	beq.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80094b4:	4b7e      	ldr	r3, [pc, #504]	@ (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80094b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094ba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094c2:	497b      	ldr	r1, [pc, #492]	@ (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80094c4:	4313      	orrs	r3, r2
 80094c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f003 0310 	and.w	r3, r3, #16
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d00a      	beq.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80094d6:	4b76      	ldr	r3, [pc, #472]	@ (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80094d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094e4:	4972      	ldr	r1, [pc, #456]	@ (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80094e6:	4313      	orrs	r3, r2
 80094e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f003 0320 	and.w	r3, r3, #32
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d00a      	beq.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80094f8:	4b6d      	ldr	r3, [pc, #436]	@ (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80094fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009506:	496a      	ldr	r1, [pc, #424]	@ (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009508:	4313      	orrs	r3, r2
 800950a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009516:	2b00      	cmp	r3, #0
 8009518:	d00a      	beq.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800951a:	4b65      	ldr	r3, [pc, #404]	@ (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800951c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009520:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009528:	4961      	ldr	r1, [pc, #388]	@ (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800952a:	4313      	orrs	r3, r2
 800952c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009538:	2b00      	cmp	r3, #0
 800953a:	d00a      	beq.n	8009552 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800953c:	4b5c      	ldr	r3, [pc, #368]	@ (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800953e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009542:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800954a:	4959      	ldr	r1, [pc, #356]	@ (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800954c:	4313      	orrs	r3, r2
 800954e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800955a:	2b00      	cmp	r3, #0
 800955c:	d00a      	beq.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800955e:	4b54      	ldr	r3, [pc, #336]	@ (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009560:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009564:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800956c:	4950      	ldr	r1, [pc, #320]	@ (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800956e:	4313      	orrs	r3, r2
 8009570:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800957c:	2b00      	cmp	r3, #0
 800957e:	d00a      	beq.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009580:	4b4b      	ldr	r3, [pc, #300]	@ (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009586:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800958e:	4948      	ldr	r1, [pc, #288]	@ (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009590:	4313      	orrs	r3, r2
 8009592:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d00a      	beq.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80095a2:	4b43      	ldr	r3, [pc, #268]	@ (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80095a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095b0:	493f      	ldr	r1, [pc, #252]	@ (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80095b2:	4313      	orrs	r3, r2
 80095b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d028      	beq.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80095c4:	4b3a      	ldr	r3, [pc, #232]	@ (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80095c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80095d2:	4937      	ldr	r1, [pc, #220]	@ (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80095d4:	4313      	orrs	r3, r2
 80095d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80095de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095e2:	d106      	bne.n	80095f2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80095e4:	4b32      	ldr	r3, [pc, #200]	@ (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80095e6:	68db      	ldr	r3, [r3, #12]
 80095e8:	4a31      	ldr	r2, [pc, #196]	@ (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80095ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80095ee:	60d3      	str	r3, [r2, #12]
 80095f0:	e011      	b.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80095f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80095fa:	d10c      	bne.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	3304      	adds	r3, #4
 8009600:	2101      	movs	r1, #1
 8009602:	4618      	mov	r0, r3
 8009604:	f000 f8c8 	bl	8009798 <RCCEx_PLLSAI1_Config>
 8009608:	4603      	mov	r3, r0
 800960a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800960c:	7cfb      	ldrb	r3, [r7, #19]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d001      	beq.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8009612:	7cfb      	ldrb	r3, [r7, #19]
 8009614:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800961e:	2b00      	cmp	r3, #0
 8009620:	d028      	beq.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009622:	4b23      	ldr	r3, [pc, #140]	@ (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009628:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009630:	491f      	ldr	r1, [pc, #124]	@ (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009632:	4313      	orrs	r3, r2
 8009634:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800963c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009640:	d106      	bne.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009642:	4b1b      	ldr	r3, [pc, #108]	@ (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009644:	68db      	ldr	r3, [r3, #12]
 8009646:	4a1a      	ldr	r2, [pc, #104]	@ (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009648:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800964c:	60d3      	str	r3, [r2, #12]
 800964e:	e011      	b.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009654:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009658:	d10c      	bne.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	3304      	adds	r3, #4
 800965e:	2101      	movs	r1, #1
 8009660:	4618      	mov	r0, r3
 8009662:	f000 f899 	bl	8009798 <RCCEx_PLLSAI1_Config>
 8009666:	4603      	mov	r3, r0
 8009668:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800966a:	7cfb      	ldrb	r3, [r7, #19]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d001      	beq.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8009670:	7cfb      	ldrb	r3, [r7, #19]
 8009672:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800967c:	2b00      	cmp	r3, #0
 800967e:	d02b      	beq.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009680:	4b0b      	ldr	r3, [pc, #44]	@ (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009686:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800968e:	4908      	ldr	r1, [pc, #32]	@ (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009690:	4313      	orrs	r3, r2
 8009692:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800969a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800969e:	d109      	bne.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80096a0:	4b03      	ldr	r3, [pc, #12]	@ (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	4a02      	ldr	r2, [pc, #8]	@ (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80096a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80096aa:	60d3      	str	r3, [r2, #12]
 80096ac:	e014      	b.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80096ae:	bf00      	nop
 80096b0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80096bc:	d10c      	bne.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	3304      	adds	r3, #4
 80096c2:	2101      	movs	r1, #1
 80096c4:	4618      	mov	r0, r3
 80096c6:	f000 f867 	bl	8009798 <RCCEx_PLLSAI1_Config>
 80096ca:	4603      	mov	r3, r0
 80096cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80096ce:	7cfb      	ldrb	r3, [r7, #19]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d001      	beq.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80096d4:	7cfb      	ldrb	r3, [r7, #19]
 80096d6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d02f      	beq.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80096e4:	4b2b      	ldr	r3, [pc, #172]	@ (8009794 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80096e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096ea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80096f2:	4928      	ldr	r1, [pc, #160]	@ (8009794 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80096f4:	4313      	orrs	r3, r2
 80096f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80096fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009702:	d10d      	bne.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	3304      	adds	r3, #4
 8009708:	2102      	movs	r1, #2
 800970a:	4618      	mov	r0, r3
 800970c:	f000 f844 	bl	8009798 <RCCEx_PLLSAI1_Config>
 8009710:	4603      	mov	r3, r0
 8009712:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009714:	7cfb      	ldrb	r3, [r7, #19]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d014      	beq.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800971a:	7cfb      	ldrb	r3, [r7, #19]
 800971c:	74bb      	strb	r3, [r7, #18]
 800971e:	e011      	b.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009724:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009728:	d10c      	bne.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	3320      	adds	r3, #32
 800972e:	2102      	movs	r1, #2
 8009730:	4618      	mov	r0, r3
 8009732:	f000 f925 	bl	8009980 <RCCEx_PLLSAI2_Config>
 8009736:	4603      	mov	r3, r0
 8009738:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800973a:	7cfb      	ldrb	r3, [r7, #19]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d001      	beq.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8009740:	7cfb      	ldrb	r3, [r7, #19]
 8009742:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800974c:	2b00      	cmp	r3, #0
 800974e:	d00a      	beq.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009750:	4b10      	ldr	r3, [pc, #64]	@ (8009794 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009756:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800975e:	490d      	ldr	r1, [pc, #52]	@ (8009794 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009760:	4313      	orrs	r3, r2
 8009762:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800976e:	2b00      	cmp	r3, #0
 8009770:	d00b      	beq.n	800978a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009772:	4b08      	ldr	r3, [pc, #32]	@ (8009794 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009778:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009782:	4904      	ldr	r1, [pc, #16]	@ (8009794 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009784:	4313      	orrs	r3, r2
 8009786:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800978a:	7cbb      	ldrb	r3, [r7, #18]
}
 800978c:	4618      	mov	r0, r3
 800978e:	3718      	adds	r7, #24
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}
 8009794:	40021000 	.word	0x40021000

08009798 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80097a2:	2300      	movs	r3, #0
 80097a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80097a6:	4b75      	ldr	r3, [pc, #468]	@ (800997c <RCCEx_PLLSAI1_Config+0x1e4>)
 80097a8:	68db      	ldr	r3, [r3, #12]
 80097aa:	f003 0303 	and.w	r3, r3, #3
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d018      	beq.n	80097e4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80097b2:	4b72      	ldr	r3, [pc, #456]	@ (800997c <RCCEx_PLLSAI1_Config+0x1e4>)
 80097b4:	68db      	ldr	r3, [r3, #12]
 80097b6:	f003 0203 	and.w	r2, r3, #3
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	429a      	cmp	r2, r3
 80097c0:	d10d      	bne.n	80097de <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
       ||
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d009      	beq.n	80097de <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80097ca:	4b6c      	ldr	r3, [pc, #432]	@ (800997c <RCCEx_PLLSAI1_Config+0x1e4>)
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	091b      	lsrs	r3, r3, #4
 80097d0:	f003 0307 	and.w	r3, r3, #7
 80097d4:	1c5a      	adds	r2, r3, #1
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	685b      	ldr	r3, [r3, #4]
       ||
 80097da:	429a      	cmp	r2, r3
 80097dc:	d047      	beq.n	800986e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80097de:	2301      	movs	r3, #1
 80097e0:	73fb      	strb	r3, [r7, #15]
 80097e2:	e044      	b.n	800986e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	2b03      	cmp	r3, #3
 80097ea:	d018      	beq.n	800981e <RCCEx_PLLSAI1_Config+0x86>
 80097ec:	2b03      	cmp	r3, #3
 80097ee:	d825      	bhi.n	800983c <RCCEx_PLLSAI1_Config+0xa4>
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d002      	beq.n	80097fa <RCCEx_PLLSAI1_Config+0x62>
 80097f4:	2b02      	cmp	r3, #2
 80097f6:	d009      	beq.n	800980c <RCCEx_PLLSAI1_Config+0x74>
 80097f8:	e020      	b.n	800983c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80097fa:	4b60      	ldr	r3, [pc, #384]	@ (800997c <RCCEx_PLLSAI1_Config+0x1e4>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f003 0302 	and.w	r3, r3, #2
 8009802:	2b00      	cmp	r3, #0
 8009804:	d11d      	bne.n	8009842 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8009806:	2301      	movs	r3, #1
 8009808:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800980a:	e01a      	b.n	8009842 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800980c:	4b5b      	ldr	r3, [pc, #364]	@ (800997c <RCCEx_PLLSAI1_Config+0x1e4>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009814:	2b00      	cmp	r3, #0
 8009816:	d116      	bne.n	8009846 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8009818:	2301      	movs	r3, #1
 800981a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800981c:	e013      	b.n	8009846 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800981e:	4b57      	ldr	r3, [pc, #348]	@ (800997c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009826:	2b00      	cmp	r3, #0
 8009828:	d10f      	bne.n	800984a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800982a:	4b54      	ldr	r3, [pc, #336]	@ (800997c <RCCEx_PLLSAI1_Config+0x1e4>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009832:	2b00      	cmp	r3, #0
 8009834:	d109      	bne.n	800984a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8009836:	2301      	movs	r3, #1
 8009838:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800983a:	e006      	b.n	800984a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800983c:	2301      	movs	r3, #1
 800983e:	73fb      	strb	r3, [r7, #15]
      break;
 8009840:	e004      	b.n	800984c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009842:	bf00      	nop
 8009844:	e002      	b.n	800984c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009846:	bf00      	nop
 8009848:	e000      	b.n	800984c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800984a:	bf00      	nop
    }

    if(status == HAL_OK)
 800984c:	7bfb      	ldrb	r3, [r7, #15]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d10d      	bne.n	800986e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009852:	4b4a      	ldr	r3, [pc, #296]	@ (800997c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009854:	68db      	ldr	r3, [r3, #12]
 8009856:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6819      	ldr	r1, [r3, #0]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	3b01      	subs	r3, #1
 8009864:	011b      	lsls	r3, r3, #4
 8009866:	430b      	orrs	r3, r1
 8009868:	4944      	ldr	r1, [pc, #272]	@ (800997c <RCCEx_PLLSAI1_Config+0x1e4>)
 800986a:	4313      	orrs	r3, r2
 800986c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800986e:	7bfb      	ldrb	r3, [r7, #15]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d17d      	bne.n	8009970 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009874:	4b41      	ldr	r3, [pc, #260]	@ (800997c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a40      	ldr	r2, [pc, #256]	@ (800997c <RCCEx_PLLSAI1_Config+0x1e4>)
 800987a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800987e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009880:	f7fb f80e 	bl	80048a0 <HAL_GetTick>
 8009884:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009886:	e009      	b.n	800989c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009888:	f7fb f80a 	bl	80048a0 <HAL_GetTick>
 800988c:	4602      	mov	r2, r0
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	1ad3      	subs	r3, r2, r3
 8009892:	2b02      	cmp	r3, #2
 8009894:	d902      	bls.n	800989c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009896:	2303      	movs	r3, #3
 8009898:	73fb      	strb	r3, [r7, #15]
        break;
 800989a:	e005      	b.n	80098a8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800989c:	4b37      	ldr	r3, [pc, #220]	@ (800997c <RCCEx_PLLSAI1_Config+0x1e4>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d1ef      	bne.n	8009888 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80098a8:	7bfb      	ldrb	r3, [r7, #15]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d160      	bne.n	8009970 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d111      	bne.n	80098d8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80098b4:	4b31      	ldr	r3, [pc, #196]	@ (800997c <RCCEx_PLLSAI1_Config+0x1e4>)
 80098b6:	691b      	ldr	r3, [r3, #16]
 80098b8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80098bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	6892      	ldr	r2, [r2, #8]
 80098c4:	0211      	lsls	r1, r2, #8
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	68d2      	ldr	r2, [r2, #12]
 80098ca:	0912      	lsrs	r2, r2, #4
 80098cc:	0452      	lsls	r2, r2, #17
 80098ce:	430a      	orrs	r2, r1
 80098d0:	492a      	ldr	r1, [pc, #168]	@ (800997c <RCCEx_PLLSAI1_Config+0x1e4>)
 80098d2:	4313      	orrs	r3, r2
 80098d4:	610b      	str	r3, [r1, #16]
 80098d6:	e027      	b.n	8009928 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	2b01      	cmp	r3, #1
 80098dc:	d112      	bne.n	8009904 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80098de:	4b27      	ldr	r3, [pc, #156]	@ (800997c <RCCEx_PLLSAI1_Config+0x1e4>)
 80098e0:	691b      	ldr	r3, [r3, #16]
 80098e2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80098e6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80098ea:	687a      	ldr	r2, [r7, #4]
 80098ec:	6892      	ldr	r2, [r2, #8]
 80098ee:	0211      	lsls	r1, r2, #8
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	6912      	ldr	r2, [r2, #16]
 80098f4:	0852      	lsrs	r2, r2, #1
 80098f6:	3a01      	subs	r2, #1
 80098f8:	0552      	lsls	r2, r2, #21
 80098fa:	430a      	orrs	r2, r1
 80098fc:	491f      	ldr	r1, [pc, #124]	@ (800997c <RCCEx_PLLSAI1_Config+0x1e4>)
 80098fe:	4313      	orrs	r3, r2
 8009900:	610b      	str	r3, [r1, #16]
 8009902:	e011      	b.n	8009928 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009904:	4b1d      	ldr	r3, [pc, #116]	@ (800997c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009906:	691b      	ldr	r3, [r3, #16]
 8009908:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800990c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	6892      	ldr	r2, [r2, #8]
 8009914:	0211      	lsls	r1, r2, #8
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	6952      	ldr	r2, [r2, #20]
 800991a:	0852      	lsrs	r2, r2, #1
 800991c:	3a01      	subs	r2, #1
 800991e:	0652      	lsls	r2, r2, #25
 8009920:	430a      	orrs	r2, r1
 8009922:	4916      	ldr	r1, [pc, #88]	@ (800997c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009924:	4313      	orrs	r3, r2
 8009926:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009928:	4b14      	ldr	r3, [pc, #80]	@ (800997c <RCCEx_PLLSAI1_Config+0x1e4>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	4a13      	ldr	r2, [pc, #76]	@ (800997c <RCCEx_PLLSAI1_Config+0x1e4>)
 800992e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009932:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009934:	f7fa ffb4 	bl	80048a0 <HAL_GetTick>
 8009938:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800993a:	e009      	b.n	8009950 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800993c:	f7fa ffb0 	bl	80048a0 <HAL_GetTick>
 8009940:	4602      	mov	r2, r0
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	1ad3      	subs	r3, r2, r3
 8009946:	2b02      	cmp	r3, #2
 8009948:	d902      	bls.n	8009950 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800994a:	2303      	movs	r3, #3
 800994c:	73fb      	strb	r3, [r7, #15]
          break;
 800994e:	e005      	b.n	800995c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009950:	4b0a      	ldr	r3, [pc, #40]	@ (800997c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009958:	2b00      	cmp	r3, #0
 800995a:	d0ef      	beq.n	800993c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800995c:	7bfb      	ldrb	r3, [r7, #15]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d106      	bne.n	8009970 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009962:	4b06      	ldr	r3, [pc, #24]	@ (800997c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009964:	691a      	ldr	r2, [r3, #16]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	699b      	ldr	r3, [r3, #24]
 800996a:	4904      	ldr	r1, [pc, #16]	@ (800997c <RCCEx_PLLSAI1_Config+0x1e4>)
 800996c:	4313      	orrs	r3, r2
 800996e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009970:	7bfb      	ldrb	r3, [r7, #15]
}
 8009972:	4618      	mov	r0, r3
 8009974:	3710      	adds	r7, #16
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
 800997a:	bf00      	nop
 800997c:	40021000 	.word	0x40021000

08009980 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800998a:	2300      	movs	r3, #0
 800998c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800998e:	4b6a      	ldr	r3, [pc, #424]	@ (8009b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009990:	68db      	ldr	r3, [r3, #12]
 8009992:	f003 0303 	and.w	r3, r3, #3
 8009996:	2b00      	cmp	r3, #0
 8009998:	d018      	beq.n	80099cc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800999a:	4b67      	ldr	r3, [pc, #412]	@ (8009b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 800999c:	68db      	ldr	r3, [r3, #12]
 800999e:	f003 0203 	and.w	r2, r3, #3
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d10d      	bne.n	80099c6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
       ||
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d009      	beq.n	80099c6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80099b2:	4b61      	ldr	r3, [pc, #388]	@ (8009b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 80099b4:	68db      	ldr	r3, [r3, #12]
 80099b6:	091b      	lsrs	r3, r3, #4
 80099b8:	f003 0307 	and.w	r3, r3, #7
 80099bc:	1c5a      	adds	r2, r3, #1
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	685b      	ldr	r3, [r3, #4]
       ||
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d047      	beq.n	8009a56 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80099c6:	2301      	movs	r3, #1
 80099c8:	73fb      	strb	r3, [r7, #15]
 80099ca:	e044      	b.n	8009a56 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	2b03      	cmp	r3, #3
 80099d2:	d018      	beq.n	8009a06 <RCCEx_PLLSAI2_Config+0x86>
 80099d4:	2b03      	cmp	r3, #3
 80099d6:	d825      	bhi.n	8009a24 <RCCEx_PLLSAI2_Config+0xa4>
 80099d8:	2b01      	cmp	r3, #1
 80099da:	d002      	beq.n	80099e2 <RCCEx_PLLSAI2_Config+0x62>
 80099dc:	2b02      	cmp	r3, #2
 80099de:	d009      	beq.n	80099f4 <RCCEx_PLLSAI2_Config+0x74>
 80099e0:	e020      	b.n	8009a24 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80099e2:	4b55      	ldr	r3, [pc, #340]	@ (8009b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f003 0302 	and.w	r3, r3, #2
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d11d      	bne.n	8009a2a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80099ee:	2301      	movs	r3, #1
 80099f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80099f2:	e01a      	b.n	8009a2a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80099f4:	4b50      	ldr	r3, [pc, #320]	@ (8009b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d116      	bne.n	8009a2e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8009a00:	2301      	movs	r3, #1
 8009a02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009a04:	e013      	b.n	8009a2e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009a06:	4b4c      	ldr	r3, [pc, #304]	@ (8009b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d10f      	bne.n	8009a32 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009a12:	4b49      	ldr	r3, [pc, #292]	@ (8009b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d109      	bne.n	8009a32 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009a22:	e006      	b.n	8009a32 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009a24:	2301      	movs	r3, #1
 8009a26:	73fb      	strb	r3, [r7, #15]
      break;
 8009a28:	e004      	b.n	8009a34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009a2a:	bf00      	nop
 8009a2c:	e002      	b.n	8009a34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009a2e:	bf00      	nop
 8009a30:	e000      	b.n	8009a34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009a32:	bf00      	nop
    }

    if(status == HAL_OK)
 8009a34:	7bfb      	ldrb	r3, [r7, #15]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d10d      	bne.n	8009a56 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009a3a:	4b3f      	ldr	r3, [pc, #252]	@ (8009b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009a3c:	68db      	ldr	r3, [r3, #12]
 8009a3e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6819      	ldr	r1, [r3, #0]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	3b01      	subs	r3, #1
 8009a4c:	011b      	lsls	r3, r3, #4
 8009a4e:	430b      	orrs	r3, r1
 8009a50:	4939      	ldr	r1, [pc, #228]	@ (8009b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009a52:	4313      	orrs	r3, r2
 8009a54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009a56:	7bfb      	ldrb	r3, [r7, #15]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d167      	bne.n	8009b2c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8009a5c:	4b36      	ldr	r3, [pc, #216]	@ (8009b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a35      	ldr	r2, [pc, #212]	@ (8009b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009a62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a68:	f7fa ff1a 	bl	80048a0 <HAL_GetTick>
 8009a6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009a6e:	e009      	b.n	8009a84 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009a70:	f7fa ff16 	bl	80048a0 <HAL_GetTick>
 8009a74:	4602      	mov	r2, r0
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	1ad3      	subs	r3, r2, r3
 8009a7a:	2b02      	cmp	r3, #2
 8009a7c:	d902      	bls.n	8009a84 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009a7e:	2303      	movs	r3, #3
 8009a80:	73fb      	strb	r3, [r7, #15]
        break;
 8009a82:	e005      	b.n	8009a90 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009a84:	4b2c      	ldr	r3, [pc, #176]	@ (8009b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d1ef      	bne.n	8009a70 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009a90:	7bfb      	ldrb	r3, [r7, #15]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d14a      	bne.n	8009b2c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d111      	bne.n	8009ac0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009a9c:	4b26      	ldr	r3, [pc, #152]	@ (8009b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009a9e:	695b      	ldr	r3, [r3, #20]
 8009aa0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8009aa4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009aa8:	687a      	ldr	r2, [r7, #4]
 8009aaa:	6892      	ldr	r2, [r2, #8]
 8009aac:	0211      	lsls	r1, r2, #8
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	68d2      	ldr	r2, [r2, #12]
 8009ab2:	0912      	lsrs	r2, r2, #4
 8009ab4:	0452      	lsls	r2, r2, #17
 8009ab6:	430a      	orrs	r2, r1
 8009ab8:	491f      	ldr	r1, [pc, #124]	@ (8009b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009aba:	4313      	orrs	r3, r2
 8009abc:	614b      	str	r3, [r1, #20]
 8009abe:	e011      	b.n	8009ae4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8009b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009ac2:	695b      	ldr	r3, [r3, #20]
 8009ac4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8009ac8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	6892      	ldr	r2, [r2, #8]
 8009ad0:	0211      	lsls	r1, r2, #8
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	6912      	ldr	r2, [r2, #16]
 8009ad6:	0852      	lsrs	r2, r2, #1
 8009ad8:	3a01      	subs	r2, #1
 8009ada:	0652      	lsls	r2, r2, #25
 8009adc:	430a      	orrs	r2, r1
 8009ade:	4916      	ldr	r1, [pc, #88]	@ (8009b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8009ae4:	4b14      	ldr	r3, [pc, #80]	@ (8009b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	4a13      	ldr	r2, [pc, #76]	@ (8009b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009aea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009aee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009af0:	f7fa fed6 	bl	80048a0 <HAL_GetTick>
 8009af4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009af6:	e009      	b.n	8009b0c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009af8:	f7fa fed2 	bl	80048a0 <HAL_GetTick>
 8009afc:	4602      	mov	r2, r0
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	1ad3      	subs	r3, r2, r3
 8009b02:	2b02      	cmp	r3, #2
 8009b04:	d902      	bls.n	8009b0c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8009b06:	2303      	movs	r3, #3
 8009b08:	73fb      	strb	r3, [r7, #15]
          break;
 8009b0a:	e005      	b.n	8009b18 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8009b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d0ef      	beq.n	8009af8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8009b18:	7bfb      	ldrb	r3, [r7, #15]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d106      	bne.n	8009b2c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8009b1e:	4b06      	ldr	r3, [pc, #24]	@ (8009b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009b20:	695a      	ldr	r2, [r3, #20]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	695b      	ldr	r3, [r3, #20]
 8009b26:	4904      	ldr	r1, [pc, #16]	@ (8009b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8009b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3710      	adds	r7, #16
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	40021000 	.word	0x40021000

08009b3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d101      	bne.n	8009b4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	e095      	b.n	8009c7a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d108      	bne.n	8009b68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	685b      	ldr	r3, [r3, #4]
 8009b5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009b5e:	d009      	beq.n	8009b74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2200      	movs	r2, #0
 8009b64:	61da      	str	r2, [r3, #28]
 8009b66:	e005      	b.n	8009b74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2200      	movs	r2, #0
 8009b72:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2200      	movs	r2, #0
 8009b78:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009b80:	b2db      	uxtb	r3, r3
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d106      	bne.n	8009b94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f7f9 fbd6 	bl	8003340 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2202      	movs	r2, #2
 8009b98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009baa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	68db      	ldr	r3, [r3, #12]
 8009bb0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009bb4:	d902      	bls.n	8009bbc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	60fb      	str	r3, [r7, #12]
 8009bba:	e002      	b.n	8009bc2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009bbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009bc0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	68db      	ldr	r3, [r3, #12]
 8009bc6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009bca:	d007      	beq.n	8009bdc <HAL_SPI_Init+0xa0>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	68db      	ldr	r3, [r3, #12]
 8009bd0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009bd4:	d002      	beq.n	8009bdc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009bec:	431a      	orrs	r2, r3
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	691b      	ldr	r3, [r3, #16]
 8009bf2:	f003 0302 	and.w	r3, r3, #2
 8009bf6:	431a      	orrs	r2, r3
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	695b      	ldr	r3, [r3, #20]
 8009bfc:	f003 0301 	and.w	r3, r3, #1
 8009c00:	431a      	orrs	r2, r3
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	699b      	ldr	r3, [r3, #24]
 8009c06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009c0a:	431a      	orrs	r2, r3
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	69db      	ldr	r3, [r3, #28]
 8009c10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009c14:	431a      	orrs	r2, r3
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6a1b      	ldr	r3, [r3, #32]
 8009c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c1e:	ea42 0103 	orr.w	r1, r2, r3
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c26:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	430a      	orrs	r2, r1
 8009c30:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	699b      	ldr	r3, [r3, #24]
 8009c36:	0c1b      	lsrs	r3, r3, #16
 8009c38:	f003 0204 	and.w	r2, r3, #4
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c40:	f003 0310 	and.w	r3, r3, #16
 8009c44:	431a      	orrs	r2, r3
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c4a:	f003 0308 	and.w	r3, r3, #8
 8009c4e:	431a      	orrs	r2, r3
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	68db      	ldr	r3, [r3, #12]
 8009c54:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009c58:	ea42 0103 	orr.w	r1, r2, r3
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	430a      	orrs	r2, r1
 8009c68:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2201      	movs	r2, #1
 8009c74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8009c78:	2300      	movs	r3, #0
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3710      	adds	r7, #16
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}

08009c82 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c82:	b580      	push	{r7, lr}
 8009c84:	b088      	sub	sp, #32
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	60f8      	str	r0, [r7, #12]
 8009c8a:	60b9      	str	r1, [r7, #8]
 8009c8c:	603b      	str	r3, [r7, #0]
 8009c8e:	4613      	mov	r3, r2
 8009c90:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009c92:	f7fa fe05 	bl	80048a0 <HAL_GetTick>
 8009c96:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8009c98:	88fb      	ldrh	r3, [r7, #6]
 8009c9a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009ca2:	b2db      	uxtb	r3, r3
 8009ca4:	2b01      	cmp	r3, #1
 8009ca6:	d001      	beq.n	8009cac <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8009ca8:	2302      	movs	r3, #2
 8009caa:	e15c      	b.n	8009f66 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d002      	beq.n	8009cb8 <HAL_SPI_Transmit+0x36>
 8009cb2:	88fb      	ldrh	r3, [r7, #6]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d101      	bne.n	8009cbc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	e154      	b.n	8009f66 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009cc2:	2b01      	cmp	r3, #1
 8009cc4:	d101      	bne.n	8009cca <HAL_SPI_Transmit+0x48>
 8009cc6:	2302      	movs	r3, #2
 8009cc8:	e14d      	b.n	8009f66 <HAL_SPI_Transmit+0x2e4>
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2201      	movs	r2, #1
 8009cce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2203      	movs	r2, #3
 8009cd6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	68ba      	ldr	r2, [r7, #8]
 8009ce4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	88fa      	ldrh	r2, [r7, #6]
 8009cea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	88fa      	ldrh	r2, [r7, #6]
 8009cf0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2200      	movs	r2, #0
 8009d04:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2200      	movs	r2, #0
 8009d12:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	689b      	ldr	r3, [r3, #8]
 8009d18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d1c:	d10f      	bne.n	8009d3e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	681a      	ldr	r2, [r3, #0]
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009d2c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	681a      	ldr	r2, [r3, #0]
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009d3c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d48:	2b40      	cmp	r3, #64	@ 0x40
 8009d4a:	d007      	beq.n	8009d5c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	681a      	ldr	r2, [r3, #0]
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009d5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009d64:	d952      	bls.n	8009e0c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d002      	beq.n	8009d74 <HAL_SPI_Transmit+0xf2>
 8009d6e:	8b7b      	ldrh	r3, [r7, #26]
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	d145      	bne.n	8009e00 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d78:	881a      	ldrh	r2, [r3, #0]
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d84:	1c9a      	adds	r2, r3, #2
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d8e:	b29b      	uxth	r3, r3
 8009d90:	3b01      	subs	r3, #1
 8009d92:	b29a      	uxth	r2, r3
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009d98:	e032      	b.n	8009e00 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	689b      	ldr	r3, [r3, #8]
 8009da0:	f003 0302 	and.w	r3, r3, #2
 8009da4:	2b02      	cmp	r3, #2
 8009da6:	d112      	bne.n	8009dce <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dac:	881a      	ldrh	r2, [r3, #0]
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009db8:	1c9a      	adds	r2, r3, #2
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	3b01      	subs	r3, #1
 8009dc6:	b29a      	uxth	r2, r3
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009dcc:	e018      	b.n	8009e00 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009dce:	f7fa fd67 	bl	80048a0 <HAL_GetTick>
 8009dd2:	4602      	mov	r2, r0
 8009dd4:	69fb      	ldr	r3, [r7, #28]
 8009dd6:	1ad3      	subs	r3, r2, r3
 8009dd8:	683a      	ldr	r2, [r7, #0]
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d803      	bhi.n	8009de6 <HAL_SPI_Transmit+0x164>
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009de4:	d102      	bne.n	8009dec <HAL_SPI_Transmit+0x16a>
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d109      	bne.n	8009e00 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2201      	movs	r2, #1
 8009df0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2200      	movs	r2, #0
 8009df8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8009dfc:	2303      	movs	r3, #3
 8009dfe:	e0b2      	b.n	8009f66 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d1c7      	bne.n	8009d9a <HAL_SPI_Transmit+0x118>
 8009e0a:	e083      	b.n	8009f14 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d002      	beq.n	8009e1a <HAL_SPI_Transmit+0x198>
 8009e14:	8b7b      	ldrh	r3, [r7, #26]
 8009e16:	2b01      	cmp	r3, #1
 8009e18:	d177      	bne.n	8009f0a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e1e:	b29b      	uxth	r3, r3
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	d912      	bls.n	8009e4a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e28:	881a      	ldrh	r2, [r3, #0]
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e34:	1c9a      	adds	r2, r3, #2
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	3b02      	subs	r3, #2
 8009e42:	b29a      	uxth	r2, r3
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009e48:	e05f      	b.n	8009f0a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	330c      	adds	r3, #12
 8009e54:	7812      	ldrb	r2, [r2, #0]
 8009e56:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e5c:	1c5a      	adds	r2, r3, #1
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e66:	b29b      	uxth	r3, r3
 8009e68:	3b01      	subs	r3, #1
 8009e6a:	b29a      	uxth	r2, r3
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009e70:	e04b      	b.n	8009f0a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	689b      	ldr	r3, [r3, #8]
 8009e78:	f003 0302 	and.w	r3, r3, #2
 8009e7c:	2b02      	cmp	r3, #2
 8009e7e:	d12b      	bne.n	8009ed8 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	2b01      	cmp	r3, #1
 8009e88:	d912      	bls.n	8009eb0 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e8e:	881a      	ldrh	r2, [r3, #0]
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e9a:	1c9a      	adds	r2, r3, #2
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	3b02      	subs	r3, #2
 8009ea8:	b29a      	uxth	r2, r3
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009eae:	e02c      	b.n	8009f0a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	330c      	adds	r3, #12
 8009eba:	7812      	ldrb	r2, [r2, #0]
 8009ebc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ec2:	1c5a      	adds	r2, r3, #1
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	3b01      	subs	r3, #1
 8009ed0:	b29a      	uxth	r2, r3
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009ed6:	e018      	b.n	8009f0a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ed8:	f7fa fce2 	bl	80048a0 <HAL_GetTick>
 8009edc:	4602      	mov	r2, r0
 8009ede:	69fb      	ldr	r3, [r7, #28]
 8009ee0:	1ad3      	subs	r3, r2, r3
 8009ee2:	683a      	ldr	r2, [r7, #0]
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d803      	bhi.n	8009ef0 <HAL_SPI_Transmit+0x26e>
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eee:	d102      	bne.n	8009ef6 <HAL_SPI_Transmit+0x274>
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d109      	bne.n	8009f0a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	2201      	movs	r2, #1
 8009efa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2200      	movs	r2, #0
 8009f02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8009f06:	2303      	movs	r3, #3
 8009f08:	e02d      	b.n	8009f66 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d1ae      	bne.n	8009e72 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009f14:	69fa      	ldr	r2, [r7, #28]
 8009f16:	6839      	ldr	r1, [r7, #0]
 8009f18:	68f8      	ldr	r0, [r7, #12]
 8009f1a:	f000 fcf5 	bl	800a908 <SPI_EndRxTxTransaction>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d002      	beq.n	8009f2a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2220      	movs	r2, #32
 8009f28:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	689b      	ldr	r3, [r3, #8]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d10a      	bne.n	8009f48 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009f32:	2300      	movs	r3, #0
 8009f34:	617b      	str	r3, [r7, #20]
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	68db      	ldr	r3, [r3, #12]
 8009f3c:	617b      	str	r3, [r7, #20]
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	689b      	ldr	r3, [r3, #8]
 8009f44:	617b      	str	r3, [r7, #20]
 8009f46:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	2200      	movs	r2, #0
 8009f54:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d001      	beq.n	8009f64 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8009f60:	2301      	movs	r3, #1
 8009f62:	e000      	b.n	8009f66 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8009f64:	2300      	movs	r3, #0
  }
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3720      	adds	r7, #32
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}

08009f6e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f6e:	b580      	push	{r7, lr}
 8009f70:	b088      	sub	sp, #32
 8009f72:	af02      	add	r7, sp, #8
 8009f74:	60f8      	str	r0, [r7, #12]
 8009f76:	60b9      	str	r1, [r7, #8]
 8009f78:	603b      	str	r3, [r7, #0]
 8009f7a:	4613      	mov	r3, r2
 8009f7c:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009f84:	b2db      	uxtb	r3, r3
 8009f86:	2b01      	cmp	r3, #1
 8009f88:	d001      	beq.n	8009f8e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8009f8a:	2302      	movs	r3, #2
 8009f8c:	e123      	b.n	800a1d6 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009f96:	d112      	bne.n	8009fbe <HAL_SPI_Receive+0x50>
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	689b      	ldr	r3, [r3, #8]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d10e      	bne.n	8009fbe <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2204      	movs	r2, #4
 8009fa4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009fa8:	88fa      	ldrh	r2, [r7, #6]
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	9300      	str	r3, [sp, #0]
 8009fae:	4613      	mov	r3, r2
 8009fb0:	68ba      	ldr	r2, [r7, #8]
 8009fb2:	68b9      	ldr	r1, [r7, #8]
 8009fb4:	68f8      	ldr	r0, [r7, #12]
 8009fb6:	f000 f912 	bl	800a1de <HAL_SPI_TransmitReceive>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	e10b      	b.n	800a1d6 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009fbe:	f7fa fc6f 	bl	80048a0 <HAL_GetTick>
 8009fc2:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d002      	beq.n	8009fd0 <HAL_SPI_Receive+0x62>
 8009fca:	88fb      	ldrh	r3, [r7, #6]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d101      	bne.n	8009fd4 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	e100      	b.n	800a1d6 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009fda:	2b01      	cmp	r3, #1
 8009fdc:	d101      	bne.n	8009fe2 <HAL_SPI_Receive+0x74>
 8009fde:	2302      	movs	r3, #2
 8009fe0:	e0f9      	b.n	800a1d6 <HAL_SPI_Receive+0x268>
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	2204      	movs	r2, #4
 8009fee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	68ba      	ldr	r2, [r7, #8]
 8009ffc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	88fa      	ldrh	r2, [r7, #6]
 800a002:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	88fa      	ldrh	r2, [r7, #6]
 800a00a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2200      	movs	r2, #0
 800a012:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2200      	movs	r2, #0
 800a018:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2200      	movs	r2, #0
 800a01e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2200      	movs	r2, #0
 800a024:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	2200      	movs	r2, #0
 800a02a:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	68db      	ldr	r3, [r3, #12]
 800a030:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a034:	d908      	bls.n	800a048 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	685a      	ldr	r2, [r3, #4]
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a044:	605a      	str	r2, [r3, #4]
 800a046:	e007      	b.n	800a058 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	685a      	ldr	r2, [r3, #4]
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a056:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	689b      	ldr	r3, [r3, #8]
 800a05c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a060:	d10f      	bne.n	800a082 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	681a      	ldr	r2, [r3, #0]
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a070:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a080:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a08c:	2b40      	cmp	r3, #64	@ 0x40
 800a08e:	d007      	beq.n	800a0a0 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	681a      	ldr	r2, [r3, #0]
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a09e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	68db      	ldr	r3, [r3, #12]
 800a0a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a0a8:	d875      	bhi.n	800a196 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800a0aa:	e037      	b.n	800a11c <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	689b      	ldr	r3, [r3, #8]
 800a0b2:	f003 0301 	and.w	r3, r3, #1
 800a0b6:	2b01      	cmp	r3, #1
 800a0b8:	d117      	bne.n	800a0ea <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f103 020c 	add.w	r2, r3, #12
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0c6:	7812      	ldrb	r2, [r2, #0]
 800a0c8:	b2d2      	uxtb	r2, r2
 800a0ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0d0:	1c5a      	adds	r2, r3, #1
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	3b01      	subs	r3, #1
 800a0e0:	b29a      	uxth	r2, r3
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800a0e8:	e018      	b.n	800a11c <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a0ea:	f7fa fbd9 	bl	80048a0 <HAL_GetTick>
 800a0ee:	4602      	mov	r2, r0
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	1ad3      	subs	r3, r2, r3
 800a0f4:	683a      	ldr	r2, [r7, #0]
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d803      	bhi.n	800a102 <HAL_SPI_Receive+0x194>
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a100:	d102      	bne.n	800a108 <HAL_SPI_Receive+0x19a>
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d109      	bne.n	800a11c <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2201      	movs	r2, #1
 800a10c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2200      	movs	r2, #0
 800a114:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800a118:	2303      	movs	r3, #3
 800a11a:	e05c      	b.n	800a1d6 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a122:	b29b      	uxth	r3, r3
 800a124:	2b00      	cmp	r3, #0
 800a126:	d1c1      	bne.n	800a0ac <HAL_SPI_Receive+0x13e>
 800a128:	e03b      	b.n	800a1a2 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	689b      	ldr	r3, [r3, #8]
 800a130:	f003 0301 	and.w	r3, r3, #1
 800a134:	2b01      	cmp	r3, #1
 800a136:	d115      	bne.n	800a164 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	68da      	ldr	r2, [r3, #12]
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a142:	b292      	uxth	r2, r2
 800a144:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a14a:	1c9a      	adds	r2, r3, #2
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a156:	b29b      	uxth	r3, r3
 800a158:	3b01      	subs	r3, #1
 800a15a:	b29a      	uxth	r2, r3
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800a162:	e018      	b.n	800a196 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a164:	f7fa fb9c 	bl	80048a0 <HAL_GetTick>
 800a168:	4602      	mov	r2, r0
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	1ad3      	subs	r3, r2, r3
 800a16e:	683a      	ldr	r2, [r7, #0]
 800a170:	429a      	cmp	r2, r3
 800a172:	d803      	bhi.n	800a17c <HAL_SPI_Receive+0x20e>
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a17a:	d102      	bne.n	800a182 <HAL_SPI_Receive+0x214>
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d109      	bne.n	800a196 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2201      	movs	r2, #1
 800a186:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2200      	movs	r2, #0
 800a18e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800a192:	2303      	movs	r3, #3
 800a194:	e01f      	b.n	800a1d6 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a19c:	b29b      	uxth	r3, r3
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d1c3      	bne.n	800a12a <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a1a2:	697a      	ldr	r2, [r7, #20]
 800a1a4:	6839      	ldr	r1, [r7, #0]
 800a1a6:	68f8      	ldr	r0, [r7, #12]
 800a1a8:	f000 fb56 	bl	800a858 <SPI_EndRxTransaction>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d002      	beq.n	800a1b8 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2220      	movs	r2, #32
 800a1b6:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d001      	beq.n	800a1d4 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	e000      	b.n	800a1d6 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 800a1d4:	2300      	movs	r3, #0
  }
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3718      	adds	r7, #24
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}

0800a1de <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800a1de:	b580      	push	{r7, lr}
 800a1e0:	b08a      	sub	sp, #40	@ 0x28
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	60f8      	str	r0, [r7, #12]
 800a1e6:	60b9      	str	r1, [r7, #8]
 800a1e8:	607a      	str	r2, [r7, #4]
 800a1ea:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a1f0:	f7fa fb56 	bl	80048a0 <HAL_GetTick>
 800a1f4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a1fc:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800a204:	887b      	ldrh	r3, [r7, #2]
 800a206:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800a208:	887b      	ldrh	r3, [r7, #2]
 800a20a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a20c:	7ffb      	ldrb	r3, [r7, #31]
 800a20e:	2b01      	cmp	r3, #1
 800a210:	d00c      	beq.n	800a22c <HAL_SPI_TransmitReceive+0x4e>
 800a212:	69bb      	ldr	r3, [r7, #24]
 800a214:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a218:	d106      	bne.n	800a228 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	689b      	ldr	r3, [r3, #8]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d102      	bne.n	800a228 <HAL_SPI_TransmitReceive+0x4a>
 800a222:	7ffb      	ldrb	r3, [r7, #31]
 800a224:	2b04      	cmp	r3, #4
 800a226:	d001      	beq.n	800a22c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800a228:	2302      	movs	r3, #2
 800a22a:	e1f3      	b.n	800a614 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d005      	beq.n	800a23e <HAL_SPI_TransmitReceive+0x60>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d002      	beq.n	800a23e <HAL_SPI_TransmitReceive+0x60>
 800a238:	887b      	ldrh	r3, [r7, #2]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d101      	bne.n	800a242 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800a23e:	2301      	movs	r3, #1
 800a240:	e1e8      	b.n	800a614 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d101      	bne.n	800a250 <HAL_SPI_TransmitReceive+0x72>
 800a24c:	2302      	movs	r3, #2
 800a24e:	e1e1      	b.n	800a614 <HAL_SPI_TransmitReceive+0x436>
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	2201      	movs	r2, #1
 800a254:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	2b04      	cmp	r3, #4
 800a262:	d003      	beq.n	800a26c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2205      	movs	r2, #5
 800a268:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2200      	movs	r2, #0
 800a270:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	687a      	ldr	r2, [r7, #4]
 800a276:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	887a      	ldrh	r2, [r7, #2]
 800a27c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	887a      	ldrh	r2, [r7, #2]
 800a284:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	68ba      	ldr	r2, [r7, #8]
 800a28c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	887a      	ldrh	r2, [r7, #2]
 800a292:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	887a      	ldrh	r2, [r7, #2]
 800a298:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	2200      	movs	r2, #0
 800a29e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	68db      	ldr	r3, [r3, #12]
 800a2aa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a2ae:	d802      	bhi.n	800a2b6 <HAL_SPI_TransmitReceive+0xd8>
 800a2b0:	8abb      	ldrh	r3, [r7, #20]
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d908      	bls.n	800a2c8 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	685a      	ldr	r2, [r3, #4]
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a2c4:	605a      	str	r2, [r3, #4]
 800a2c6:	e007      	b.n	800a2d8 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	685a      	ldr	r2, [r3, #4]
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a2d6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2e2:	2b40      	cmp	r3, #64	@ 0x40
 800a2e4:	d007      	beq.n	800a2f6 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	681a      	ldr	r2, [r3, #0]
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a2f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	68db      	ldr	r3, [r3, #12]
 800a2fa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a2fe:	f240 8083 	bls.w	800a408 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d002      	beq.n	800a310 <HAL_SPI_TransmitReceive+0x132>
 800a30a:	8afb      	ldrh	r3, [r7, #22]
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d16f      	bne.n	800a3f0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a314:	881a      	ldrh	r2, [r3, #0]
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a320:	1c9a      	adds	r2, r3, #2
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	3b01      	subs	r3, #1
 800a32e:	b29a      	uxth	r2, r3
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a334:	e05c      	b.n	800a3f0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	f003 0302 	and.w	r3, r3, #2
 800a340:	2b02      	cmp	r3, #2
 800a342:	d11b      	bne.n	800a37c <HAL_SPI_TransmitReceive+0x19e>
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a348:	b29b      	uxth	r3, r3
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d016      	beq.n	800a37c <HAL_SPI_TransmitReceive+0x19e>
 800a34e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a350:	2b01      	cmp	r3, #1
 800a352:	d113      	bne.n	800a37c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a358:	881a      	ldrh	r2, [r3, #0]
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a364:	1c9a      	adds	r2, r3, #2
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a36e:	b29b      	uxth	r3, r3
 800a370:	3b01      	subs	r3, #1
 800a372:	b29a      	uxth	r2, r3
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a378:	2300      	movs	r3, #0
 800a37a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	689b      	ldr	r3, [r3, #8]
 800a382:	f003 0301 	and.w	r3, r3, #1
 800a386:	2b01      	cmp	r3, #1
 800a388:	d11c      	bne.n	800a3c4 <HAL_SPI_TransmitReceive+0x1e6>
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a390:	b29b      	uxth	r3, r3
 800a392:	2b00      	cmp	r3, #0
 800a394:	d016      	beq.n	800a3c4 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	68da      	ldr	r2, [r3, #12]
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3a0:	b292      	uxth	r2, r2
 800a3a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3a8:	1c9a      	adds	r2, r3, #2
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	3b01      	subs	r3, #1
 800a3b8:	b29a      	uxth	r2, r3
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a3c4:	f7fa fa6c 	bl	80048a0 <HAL_GetTick>
 800a3c8:	4602      	mov	r2, r0
 800a3ca:	6a3b      	ldr	r3, [r7, #32]
 800a3cc:	1ad3      	subs	r3, r2, r3
 800a3ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d80d      	bhi.n	800a3f0 <HAL_SPI_TransmitReceive+0x212>
 800a3d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3da:	d009      	beq.n	800a3f0 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2201      	movs	r2, #1
 800a3e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800a3ec:	2303      	movs	r3, #3
 800a3ee:	e111      	b.n	800a614 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a3f4:	b29b      	uxth	r3, r3
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d19d      	bne.n	800a336 <HAL_SPI_TransmitReceive+0x158>
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a400:	b29b      	uxth	r3, r3
 800a402:	2b00      	cmp	r3, #0
 800a404:	d197      	bne.n	800a336 <HAL_SPI_TransmitReceive+0x158>
 800a406:	e0e5      	b.n	800a5d4 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d003      	beq.n	800a418 <HAL_SPI_TransmitReceive+0x23a>
 800a410:	8afb      	ldrh	r3, [r7, #22]
 800a412:	2b01      	cmp	r3, #1
 800a414:	f040 80d1 	bne.w	800a5ba <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	2b01      	cmp	r3, #1
 800a420:	d912      	bls.n	800a448 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a426:	881a      	ldrh	r2, [r3, #0]
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a432:	1c9a      	adds	r2, r3, #2
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a43c:	b29b      	uxth	r3, r3
 800a43e:	3b02      	subs	r3, #2
 800a440:	b29a      	uxth	r2, r3
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a446:	e0b8      	b.n	800a5ba <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	330c      	adds	r3, #12
 800a452:	7812      	ldrb	r2, [r2, #0]
 800a454:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a45a:	1c5a      	adds	r2, r3, #1
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a464:	b29b      	uxth	r3, r3
 800a466:	3b01      	subs	r3, #1
 800a468:	b29a      	uxth	r2, r3
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a46e:	e0a4      	b.n	800a5ba <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	689b      	ldr	r3, [r3, #8]
 800a476:	f003 0302 	and.w	r3, r3, #2
 800a47a:	2b02      	cmp	r3, #2
 800a47c:	d134      	bne.n	800a4e8 <HAL_SPI_TransmitReceive+0x30a>
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a482:	b29b      	uxth	r3, r3
 800a484:	2b00      	cmp	r3, #0
 800a486:	d02f      	beq.n	800a4e8 <HAL_SPI_TransmitReceive+0x30a>
 800a488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	d12c      	bne.n	800a4e8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a492:	b29b      	uxth	r3, r3
 800a494:	2b01      	cmp	r3, #1
 800a496:	d912      	bls.n	800a4be <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a49c:	881a      	ldrh	r2, [r3, #0]
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4a8:	1c9a      	adds	r2, r3, #2
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a4b2:	b29b      	uxth	r3, r3
 800a4b4:	3b02      	subs	r3, #2
 800a4b6:	b29a      	uxth	r2, r3
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a4bc:	e012      	b.n	800a4e4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	330c      	adds	r3, #12
 800a4c8:	7812      	ldrb	r2, [r2, #0]
 800a4ca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4d0:	1c5a      	adds	r2, r3, #1
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	3b01      	subs	r3, #1
 800a4de:	b29a      	uxth	r2, r3
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	689b      	ldr	r3, [r3, #8]
 800a4ee:	f003 0301 	and.w	r3, r3, #1
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	d148      	bne.n	800a588 <HAL_SPI_TransmitReceive+0x3aa>
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a4fc:	b29b      	uxth	r3, r3
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d042      	beq.n	800a588 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a508:	b29b      	uxth	r3, r3
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	d923      	bls.n	800a556 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	68da      	ldr	r2, [r3, #12]
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a518:	b292      	uxth	r2, r2
 800a51a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a520:	1c9a      	adds	r2, r3, #2
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	3b02      	subs	r3, #2
 800a530:	b29a      	uxth	r2, r3
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a53e:	b29b      	uxth	r3, r3
 800a540:	2b01      	cmp	r3, #1
 800a542:	d81f      	bhi.n	800a584 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	685a      	ldr	r2, [r3, #4]
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a552:	605a      	str	r2, [r3, #4]
 800a554:	e016      	b.n	800a584 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f103 020c 	add.w	r2, r3, #12
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a562:	7812      	ldrb	r2, [r2, #0]
 800a564:	b2d2      	uxtb	r2, r2
 800a566:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a56c:	1c5a      	adds	r2, r3, #1
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a578:	b29b      	uxth	r3, r3
 800a57a:	3b01      	subs	r3, #1
 800a57c:	b29a      	uxth	r2, r3
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a584:	2301      	movs	r3, #1
 800a586:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a588:	f7fa f98a 	bl	80048a0 <HAL_GetTick>
 800a58c:	4602      	mov	r2, r0
 800a58e:	6a3b      	ldr	r3, [r7, #32]
 800a590:	1ad3      	subs	r3, r2, r3
 800a592:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a594:	429a      	cmp	r2, r3
 800a596:	d803      	bhi.n	800a5a0 <HAL_SPI_TransmitReceive+0x3c2>
 800a598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a59a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a59e:	d102      	bne.n	800a5a6 <HAL_SPI_TransmitReceive+0x3c8>
 800a5a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d109      	bne.n	800a5ba <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2201      	movs	r2, #1
 800a5aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800a5b6:	2303      	movs	r3, #3
 800a5b8:	e02c      	b.n	800a614 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a5be:	b29b      	uxth	r3, r3
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	f47f af55 	bne.w	800a470 <HAL_SPI_TransmitReceive+0x292>
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a5cc:	b29b      	uxth	r3, r3
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	f47f af4e 	bne.w	800a470 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a5d4:	6a3a      	ldr	r2, [r7, #32]
 800a5d6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a5d8:	68f8      	ldr	r0, [r7, #12]
 800a5da:	f000 f995 	bl	800a908 <SPI_EndRxTxTransaction>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d008      	beq.n	800a5f6 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2220      	movs	r2, #32
 800a5e8:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	e00e      	b.n	800a614 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	2201      	movs	r2, #1
 800a5fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	2200      	movs	r2, #0
 800a602:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d001      	beq.n	800a612 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800a60e:	2301      	movs	r3, #1
 800a610:	e000      	b.n	800a614 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800a612:	2300      	movs	r3, #0
  }
}
 800a614:	4618      	mov	r0, r3
 800a616:	3728      	adds	r7, #40	@ 0x28
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b088      	sub	sp, #32
 800a620:	af00      	add	r7, sp, #0
 800a622:	60f8      	str	r0, [r7, #12]
 800a624:	60b9      	str	r1, [r7, #8]
 800a626:	603b      	str	r3, [r7, #0]
 800a628:	4613      	mov	r3, r2
 800a62a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a62c:	f7fa f938 	bl	80048a0 <HAL_GetTick>
 800a630:	4602      	mov	r2, r0
 800a632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a634:	1a9b      	subs	r3, r3, r2
 800a636:	683a      	ldr	r2, [r7, #0]
 800a638:	4413      	add	r3, r2
 800a63a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a63c:	f7fa f930 	bl	80048a0 <HAL_GetTick>
 800a640:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a642:	4b39      	ldr	r3, [pc, #228]	@ (800a728 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	015b      	lsls	r3, r3, #5
 800a648:	0d1b      	lsrs	r3, r3, #20
 800a64a:	69fa      	ldr	r2, [r7, #28]
 800a64c:	fb02 f303 	mul.w	r3, r2, r3
 800a650:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a652:	e054      	b.n	800a6fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a65a:	d050      	beq.n	800a6fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a65c:	f7fa f920 	bl	80048a0 <HAL_GetTick>
 800a660:	4602      	mov	r2, r0
 800a662:	69bb      	ldr	r3, [r7, #24]
 800a664:	1ad3      	subs	r3, r2, r3
 800a666:	69fa      	ldr	r2, [r7, #28]
 800a668:	429a      	cmp	r2, r3
 800a66a:	d902      	bls.n	800a672 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a66c:	69fb      	ldr	r3, [r7, #28]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d13d      	bne.n	800a6ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	685a      	ldr	r2, [r3, #4]
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a680:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a68a:	d111      	bne.n	800a6b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	689b      	ldr	r3, [r3, #8]
 800a690:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a694:	d004      	beq.n	800a6a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	689b      	ldr	r3, [r3, #8]
 800a69a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a69e:	d107      	bne.n	800a6b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	681a      	ldr	r2, [r3, #0]
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a6ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a6b8:	d10f      	bne.n	800a6da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	681a      	ldr	r2, [r3, #0]
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a6c8:	601a      	str	r2, [r3, #0]
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	681a      	ldr	r2, [r3, #0]
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a6d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2201      	movs	r2, #1
 800a6de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a6ea:	2303      	movs	r3, #3
 800a6ec:	e017      	b.n	800a71e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d101      	bne.n	800a6f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	3b01      	subs	r3, #1
 800a6fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	689a      	ldr	r2, [r3, #8]
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	4013      	ands	r3, r2
 800a708:	68ba      	ldr	r2, [r7, #8]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	bf0c      	ite	eq
 800a70e:	2301      	moveq	r3, #1
 800a710:	2300      	movne	r3, #0
 800a712:	b2db      	uxtb	r3, r3
 800a714:	461a      	mov	r2, r3
 800a716:	79fb      	ldrb	r3, [r7, #7]
 800a718:	429a      	cmp	r2, r3
 800a71a:	d19b      	bne.n	800a654 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a71c:	2300      	movs	r3, #0
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3720      	adds	r7, #32
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
 800a726:	bf00      	nop
 800a728:	20000140 	.word	0x20000140

0800a72c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b08a      	sub	sp, #40	@ 0x28
 800a730:	af00      	add	r7, sp, #0
 800a732:	60f8      	str	r0, [r7, #12]
 800a734:	60b9      	str	r1, [r7, #8]
 800a736:	607a      	str	r2, [r7, #4]
 800a738:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a73a:	2300      	movs	r3, #0
 800a73c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a73e:	f7fa f8af 	bl	80048a0 <HAL_GetTick>
 800a742:	4602      	mov	r2, r0
 800a744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a746:	1a9b      	subs	r3, r3, r2
 800a748:	683a      	ldr	r2, [r7, #0]
 800a74a:	4413      	add	r3, r2
 800a74c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800a74e:	f7fa f8a7 	bl	80048a0 <HAL_GetTick>
 800a752:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	330c      	adds	r3, #12
 800a75a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a75c:	4b3d      	ldr	r3, [pc, #244]	@ (800a854 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a75e:	681a      	ldr	r2, [r3, #0]
 800a760:	4613      	mov	r3, r2
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	4413      	add	r3, r2
 800a766:	00da      	lsls	r2, r3, #3
 800a768:	1ad3      	subs	r3, r2, r3
 800a76a:	0d1b      	lsrs	r3, r3, #20
 800a76c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a76e:	fb02 f303 	mul.w	r3, r2, r3
 800a772:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a774:	e060      	b.n	800a838 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a77c:	d107      	bne.n	800a78e <SPI_WaitFifoStateUntilTimeout+0x62>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d104      	bne.n	800a78e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a784:	69fb      	ldr	r3, [r7, #28]
 800a786:	781b      	ldrb	r3, [r3, #0]
 800a788:	b2db      	uxtb	r3, r3
 800a78a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a78c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a794:	d050      	beq.n	800a838 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a796:	f7fa f883 	bl	80048a0 <HAL_GetTick>
 800a79a:	4602      	mov	r2, r0
 800a79c:	6a3b      	ldr	r3, [r7, #32]
 800a79e:	1ad3      	subs	r3, r2, r3
 800a7a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	d902      	bls.n	800a7ac <SPI_WaitFifoStateUntilTimeout+0x80>
 800a7a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d13d      	bne.n	800a828 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	685a      	ldr	r2, [r3, #4]
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a7ba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a7c4:	d111      	bne.n	800a7ea <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	689b      	ldr	r3, [r3, #8]
 800a7ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a7ce:	d004      	beq.n	800a7da <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	689b      	ldr	r3, [r3, #8]
 800a7d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a7d8:	d107      	bne.n	800a7ea <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	681a      	ldr	r2, [r3, #0]
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a7e8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a7f2:	d10f      	bne.n	800a814 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a802:	601a      	str	r2, [r3, #0]
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	681a      	ldr	r2, [r3, #0]
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a812:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2201      	movs	r2, #1
 800a818:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2200      	movs	r2, #0
 800a820:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a824:	2303      	movs	r3, #3
 800a826:	e010      	b.n	800a84a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a828:	69bb      	ldr	r3, [r7, #24]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d101      	bne.n	800a832 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a82e:	2300      	movs	r3, #0
 800a830:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800a832:	69bb      	ldr	r3, [r7, #24]
 800a834:	3b01      	subs	r3, #1
 800a836:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	689a      	ldr	r2, [r3, #8]
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	4013      	ands	r3, r2
 800a842:	687a      	ldr	r2, [r7, #4]
 800a844:	429a      	cmp	r2, r3
 800a846:	d196      	bne.n	800a776 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a848:	2300      	movs	r3, #0
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3728      	adds	r7, #40	@ 0x28
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}
 800a852:	bf00      	nop
 800a854:	20000140 	.word	0x20000140

0800a858 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b086      	sub	sp, #24
 800a85c:	af02      	add	r7, sp, #8
 800a85e:	60f8      	str	r0, [r7, #12]
 800a860:	60b9      	str	r1, [r7, #8]
 800a862:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a86c:	d111      	bne.n	800a892 <SPI_EndRxTransaction+0x3a>
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	689b      	ldr	r3, [r3, #8]
 800a872:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a876:	d004      	beq.n	800a882 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	689b      	ldr	r3, [r3, #8]
 800a87c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a880:	d107      	bne.n	800a892 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	681a      	ldr	r2, [r3, #0]
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a890:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	9300      	str	r3, [sp, #0]
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	2200      	movs	r2, #0
 800a89a:	2180      	movs	r1, #128	@ 0x80
 800a89c:	68f8      	ldr	r0, [r7, #12]
 800a89e:	f7ff febd 	bl	800a61c <SPI_WaitFlagStateUntilTimeout>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d007      	beq.n	800a8b8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a8ac:	f043 0220 	orr.w	r2, r3, #32
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a8b4:	2303      	movs	r3, #3
 800a8b6:	e023      	b.n	800a900 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	685b      	ldr	r3, [r3, #4]
 800a8bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a8c0:	d11d      	bne.n	800a8fe <SPI_EndRxTransaction+0xa6>
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	689b      	ldr	r3, [r3, #8]
 800a8c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a8ca:	d004      	beq.n	800a8d6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	689b      	ldr	r3, [r3, #8]
 800a8d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a8d4:	d113      	bne.n	800a8fe <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	9300      	str	r3, [sp, #0]
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a8e2:	68f8      	ldr	r0, [r7, #12]
 800a8e4:	f7ff ff22 	bl	800a72c <SPI_WaitFifoStateUntilTimeout>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d007      	beq.n	800a8fe <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a8f2:	f043 0220 	orr.w	r2, r3, #32
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800a8fa:	2303      	movs	r3, #3
 800a8fc:	e000      	b.n	800a900 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800a8fe:	2300      	movs	r3, #0
}
 800a900:	4618      	mov	r0, r3
 800a902:	3710      	adds	r7, #16
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b086      	sub	sp, #24
 800a90c:	af02      	add	r7, sp, #8
 800a90e:	60f8      	str	r0, [r7, #12]
 800a910:	60b9      	str	r1, [r7, #8]
 800a912:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	9300      	str	r3, [sp, #0]
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	2200      	movs	r2, #0
 800a91c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800a920:	68f8      	ldr	r0, [r7, #12]
 800a922:	f7ff ff03 	bl	800a72c <SPI_WaitFifoStateUntilTimeout>
 800a926:	4603      	mov	r3, r0
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d007      	beq.n	800a93c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a930:	f043 0220 	orr.w	r2, r3, #32
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a938:	2303      	movs	r3, #3
 800a93a:	e027      	b.n	800a98c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	9300      	str	r3, [sp, #0]
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	2200      	movs	r2, #0
 800a944:	2180      	movs	r1, #128	@ 0x80
 800a946:	68f8      	ldr	r0, [r7, #12]
 800a948:	f7ff fe68 	bl	800a61c <SPI_WaitFlagStateUntilTimeout>
 800a94c:	4603      	mov	r3, r0
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d007      	beq.n	800a962 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a956:	f043 0220 	orr.w	r2, r3, #32
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a95e:	2303      	movs	r3, #3
 800a960:	e014      	b.n	800a98c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	9300      	str	r3, [sp, #0]
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	2200      	movs	r2, #0
 800a96a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a96e:	68f8      	ldr	r0, [r7, #12]
 800a970:	f7ff fedc 	bl	800a72c <SPI_WaitFifoStateUntilTimeout>
 800a974:	4603      	mov	r3, r0
 800a976:	2b00      	cmp	r3, #0
 800a978:	d007      	beq.n	800a98a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a97e:	f043 0220 	orr.w	r2, r3, #32
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a986:	2303      	movs	r3, #3
 800a988:	e000      	b.n	800a98c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a98a:	2300      	movs	r3, #0
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3710      	adds	r7, #16
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b082      	sub	sp, #8
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d101      	bne.n	800a9a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	e049      	b.n	800aa3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d106      	bne.n	800a9c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f7f9 fbce 	bl	800415c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2202      	movs	r2, #2
 800a9c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	3304      	adds	r3, #4
 800a9d0:	4619      	mov	r1, r3
 800a9d2:	4610      	mov	r0, r2
 800a9d4:	f001 fa62 	bl	800be9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2201      	movs	r2, #1
 800a9dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2201      	movs	r2, #1
 800aa04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2201      	movs	r2, #1
 800aa14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2201      	movs	r2, #1
 800aa24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2201      	movs	r2, #1
 800aa34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aa38:	2300      	movs	r3, #0
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3708      	adds	r7, #8
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
	...

0800aa44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b085      	sub	sp, #20
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa52:	b2db      	uxtb	r3, r3
 800aa54:	2b01      	cmp	r3, #1
 800aa56:	d001      	beq.n	800aa5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aa58:	2301      	movs	r3, #1
 800aa5a:	e04f      	b.n	800aafc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2202      	movs	r2, #2
 800aa60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	68da      	ldr	r2, [r3, #12]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f042 0201 	orr.w	r2, r2, #1
 800aa72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	4a23      	ldr	r2, [pc, #140]	@ (800ab08 <HAL_TIM_Base_Start_IT+0xc4>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d01d      	beq.n	800aaba <HAL_TIM_Base_Start_IT+0x76>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa86:	d018      	beq.n	800aaba <HAL_TIM_Base_Start_IT+0x76>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	4a1f      	ldr	r2, [pc, #124]	@ (800ab0c <HAL_TIM_Base_Start_IT+0xc8>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d013      	beq.n	800aaba <HAL_TIM_Base_Start_IT+0x76>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4a1e      	ldr	r2, [pc, #120]	@ (800ab10 <HAL_TIM_Base_Start_IT+0xcc>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d00e      	beq.n	800aaba <HAL_TIM_Base_Start_IT+0x76>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4a1c      	ldr	r2, [pc, #112]	@ (800ab14 <HAL_TIM_Base_Start_IT+0xd0>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d009      	beq.n	800aaba <HAL_TIM_Base_Start_IT+0x76>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4a1b      	ldr	r2, [pc, #108]	@ (800ab18 <HAL_TIM_Base_Start_IT+0xd4>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d004      	beq.n	800aaba <HAL_TIM_Base_Start_IT+0x76>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4a19      	ldr	r2, [pc, #100]	@ (800ab1c <HAL_TIM_Base_Start_IT+0xd8>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d115      	bne.n	800aae6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	689a      	ldr	r2, [r3, #8]
 800aac0:	4b17      	ldr	r3, [pc, #92]	@ (800ab20 <HAL_TIM_Base_Start_IT+0xdc>)
 800aac2:	4013      	ands	r3, r2
 800aac4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2b06      	cmp	r3, #6
 800aaca:	d015      	beq.n	800aaf8 <HAL_TIM_Base_Start_IT+0xb4>
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aad2:	d011      	beq.n	800aaf8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f042 0201 	orr.w	r2, r2, #1
 800aae2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aae4:	e008      	b.n	800aaf8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f042 0201 	orr.w	r2, r2, #1
 800aaf4:	601a      	str	r2, [r3, #0]
 800aaf6:	e000      	b.n	800aafa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aaf8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aafa:	2300      	movs	r3, #0
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3714      	adds	r7, #20
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr
 800ab08:	40012c00 	.word	0x40012c00
 800ab0c:	40000400 	.word	0x40000400
 800ab10:	40000800 	.word	0x40000800
 800ab14:	40000c00 	.word	0x40000c00
 800ab18:	40013400 	.word	0x40013400
 800ab1c:	40014000 	.word	0x40014000
 800ab20:	00010007 	.word	0x00010007

0800ab24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b082      	sub	sp, #8
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d101      	bne.n	800ab36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ab32:	2301      	movs	r3, #1
 800ab34:	e049      	b.n	800abca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab3c:	b2db      	uxtb	r3, r3
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d106      	bne.n	800ab50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2200      	movs	r2, #0
 800ab46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f000 f841 	bl	800abd2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2202      	movs	r2, #2
 800ab54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681a      	ldr	r2, [r3, #0]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	3304      	adds	r3, #4
 800ab60:	4619      	mov	r1, r3
 800ab62:	4610      	mov	r0, r2
 800ab64:	f001 f99a 	bl	800be9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2201      	movs	r2, #1
 800ab74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2201      	movs	r2, #1
 800ab84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2201      	movs	r2, #1
 800ab8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2201      	movs	r2, #1
 800ab94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2201      	movs	r2, #1
 800aba4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2201      	movs	r2, #1
 800abac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2201      	movs	r2, #1
 800abb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2201      	movs	r2, #1
 800abbc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2201      	movs	r2, #1
 800abc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800abc8:	2300      	movs	r3, #0
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3708      	adds	r7, #8
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}

0800abd2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800abd2:	b480      	push	{r7}
 800abd4:	b083      	sub	sp, #12
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800abda:	bf00      	nop
 800abdc:	370c      	adds	r7, #12
 800abde:	46bd      	mov	sp, r7
 800abe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe4:	4770      	bx	lr
	...

0800abe8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b084      	sub	sp, #16
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d109      	bne.n	800ac0c <HAL_TIM_PWM_Start+0x24>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800abfe:	b2db      	uxtb	r3, r3
 800ac00:	2b01      	cmp	r3, #1
 800ac02:	bf14      	ite	ne
 800ac04:	2301      	movne	r3, #1
 800ac06:	2300      	moveq	r3, #0
 800ac08:	b2db      	uxtb	r3, r3
 800ac0a:	e03c      	b.n	800ac86 <HAL_TIM_PWM_Start+0x9e>
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	2b04      	cmp	r3, #4
 800ac10:	d109      	bne.n	800ac26 <HAL_TIM_PWM_Start+0x3e>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ac18:	b2db      	uxtb	r3, r3
 800ac1a:	2b01      	cmp	r3, #1
 800ac1c:	bf14      	ite	ne
 800ac1e:	2301      	movne	r3, #1
 800ac20:	2300      	moveq	r3, #0
 800ac22:	b2db      	uxtb	r3, r3
 800ac24:	e02f      	b.n	800ac86 <HAL_TIM_PWM_Start+0x9e>
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	2b08      	cmp	r3, #8
 800ac2a:	d109      	bne.n	800ac40 <HAL_TIM_PWM_Start+0x58>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ac32:	b2db      	uxtb	r3, r3
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	bf14      	ite	ne
 800ac38:	2301      	movne	r3, #1
 800ac3a:	2300      	moveq	r3, #0
 800ac3c:	b2db      	uxtb	r3, r3
 800ac3e:	e022      	b.n	800ac86 <HAL_TIM_PWM_Start+0x9e>
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	2b0c      	cmp	r3, #12
 800ac44:	d109      	bne.n	800ac5a <HAL_TIM_PWM_Start+0x72>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ac4c:	b2db      	uxtb	r3, r3
 800ac4e:	2b01      	cmp	r3, #1
 800ac50:	bf14      	ite	ne
 800ac52:	2301      	movne	r3, #1
 800ac54:	2300      	moveq	r3, #0
 800ac56:	b2db      	uxtb	r3, r3
 800ac58:	e015      	b.n	800ac86 <HAL_TIM_PWM_Start+0x9e>
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	2b10      	cmp	r3, #16
 800ac5e:	d109      	bne.n	800ac74 <HAL_TIM_PWM_Start+0x8c>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ac66:	b2db      	uxtb	r3, r3
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	bf14      	ite	ne
 800ac6c:	2301      	movne	r3, #1
 800ac6e:	2300      	moveq	r3, #0
 800ac70:	b2db      	uxtb	r3, r3
 800ac72:	e008      	b.n	800ac86 <HAL_TIM_PWM_Start+0x9e>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ac7a:	b2db      	uxtb	r3, r3
 800ac7c:	2b01      	cmp	r3, #1
 800ac7e:	bf14      	ite	ne
 800ac80:	2301      	movne	r3, #1
 800ac82:	2300      	moveq	r3, #0
 800ac84:	b2db      	uxtb	r3, r3
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d001      	beq.n	800ac8e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	e09c      	b.n	800adc8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d104      	bne.n	800ac9e <HAL_TIM_PWM_Start+0xb6>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2202      	movs	r2, #2
 800ac98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ac9c:	e023      	b.n	800ace6 <HAL_TIM_PWM_Start+0xfe>
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	2b04      	cmp	r3, #4
 800aca2:	d104      	bne.n	800acae <HAL_TIM_PWM_Start+0xc6>
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2202      	movs	r2, #2
 800aca8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800acac:	e01b      	b.n	800ace6 <HAL_TIM_PWM_Start+0xfe>
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	2b08      	cmp	r3, #8
 800acb2:	d104      	bne.n	800acbe <HAL_TIM_PWM_Start+0xd6>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2202      	movs	r2, #2
 800acb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800acbc:	e013      	b.n	800ace6 <HAL_TIM_PWM_Start+0xfe>
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	2b0c      	cmp	r3, #12
 800acc2:	d104      	bne.n	800acce <HAL_TIM_PWM_Start+0xe6>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2202      	movs	r2, #2
 800acc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800accc:	e00b      	b.n	800ace6 <HAL_TIM_PWM_Start+0xfe>
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	2b10      	cmp	r3, #16
 800acd2:	d104      	bne.n	800acde <HAL_TIM_PWM_Start+0xf6>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2202      	movs	r2, #2
 800acd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800acdc:	e003      	b.n	800ace6 <HAL_TIM_PWM_Start+0xfe>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2202      	movs	r2, #2
 800ace2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	2201      	movs	r2, #1
 800acec:	6839      	ldr	r1, [r7, #0]
 800acee:	4618      	mov	r0, r3
 800acf0:	f001 fcea 	bl	800c6c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	4a35      	ldr	r2, [pc, #212]	@ (800add0 <HAL_TIM_PWM_Start+0x1e8>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d013      	beq.n	800ad26 <HAL_TIM_PWM_Start+0x13e>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	4a34      	ldr	r2, [pc, #208]	@ (800add4 <HAL_TIM_PWM_Start+0x1ec>)
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d00e      	beq.n	800ad26 <HAL_TIM_PWM_Start+0x13e>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4a32      	ldr	r2, [pc, #200]	@ (800add8 <HAL_TIM_PWM_Start+0x1f0>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d009      	beq.n	800ad26 <HAL_TIM_PWM_Start+0x13e>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	4a31      	ldr	r2, [pc, #196]	@ (800addc <HAL_TIM_PWM_Start+0x1f4>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d004      	beq.n	800ad26 <HAL_TIM_PWM_Start+0x13e>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4a2f      	ldr	r2, [pc, #188]	@ (800ade0 <HAL_TIM_PWM_Start+0x1f8>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d101      	bne.n	800ad2a <HAL_TIM_PWM_Start+0x142>
 800ad26:	2301      	movs	r3, #1
 800ad28:	e000      	b.n	800ad2c <HAL_TIM_PWM_Start+0x144>
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d007      	beq.n	800ad40 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ad3e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4a22      	ldr	r2, [pc, #136]	@ (800add0 <HAL_TIM_PWM_Start+0x1e8>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d01d      	beq.n	800ad86 <HAL_TIM_PWM_Start+0x19e>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad52:	d018      	beq.n	800ad86 <HAL_TIM_PWM_Start+0x19e>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	4a22      	ldr	r2, [pc, #136]	@ (800ade4 <HAL_TIM_PWM_Start+0x1fc>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d013      	beq.n	800ad86 <HAL_TIM_PWM_Start+0x19e>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	4a21      	ldr	r2, [pc, #132]	@ (800ade8 <HAL_TIM_PWM_Start+0x200>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d00e      	beq.n	800ad86 <HAL_TIM_PWM_Start+0x19e>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	4a1f      	ldr	r2, [pc, #124]	@ (800adec <HAL_TIM_PWM_Start+0x204>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d009      	beq.n	800ad86 <HAL_TIM_PWM_Start+0x19e>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	4a17      	ldr	r2, [pc, #92]	@ (800add4 <HAL_TIM_PWM_Start+0x1ec>)
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d004      	beq.n	800ad86 <HAL_TIM_PWM_Start+0x19e>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	4a15      	ldr	r2, [pc, #84]	@ (800add8 <HAL_TIM_PWM_Start+0x1f0>)
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d115      	bne.n	800adb2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	689a      	ldr	r2, [r3, #8]
 800ad8c:	4b18      	ldr	r3, [pc, #96]	@ (800adf0 <HAL_TIM_PWM_Start+0x208>)
 800ad8e:	4013      	ands	r3, r2
 800ad90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2b06      	cmp	r3, #6
 800ad96:	d015      	beq.n	800adc4 <HAL_TIM_PWM_Start+0x1dc>
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad9e:	d011      	beq.n	800adc4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	681a      	ldr	r2, [r3, #0]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f042 0201 	orr.w	r2, r2, #1
 800adae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adb0:	e008      	b.n	800adc4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	681a      	ldr	r2, [r3, #0]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f042 0201 	orr.w	r2, r2, #1
 800adc0:	601a      	str	r2, [r3, #0]
 800adc2:	e000      	b.n	800adc6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adc4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800adc6:	2300      	movs	r3, #0
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3710      	adds	r7, #16
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}
 800add0:	40012c00 	.word	0x40012c00
 800add4:	40013400 	.word	0x40013400
 800add8:	40014000 	.word	0x40014000
 800addc:	40014400 	.word	0x40014400
 800ade0:	40014800 	.word	0x40014800
 800ade4:	40000400 	.word	0x40000400
 800ade8:	40000800 	.word	0x40000800
 800adec:	40000c00 	.word	0x40000c00
 800adf0:	00010007 	.word	0x00010007

0800adf4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b084      	sub	sp, #16
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800adfe:	2300      	movs	r3, #0
 800ae00:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d109      	bne.n	800ae1c <HAL_TIM_PWM_Start_IT+0x28>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ae0e:	b2db      	uxtb	r3, r3
 800ae10:	2b01      	cmp	r3, #1
 800ae12:	bf14      	ite	ne
 800ae14:	2301      	movne	r3, #1
 800ae16:	2300      	moveq	r3, #0
 800ae18:	b2db      	uxtb	r3, r3
 800ae1a:	e03c      	b.n	800ae96 <HAL_TIM_PWM_Start_IT+0xa2>
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	2b04      	cmp	r3, #4
 800ae20:	d109      	bne.n	800ae36 <HAL_TIM_PWM_Start_IT+0x42>
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ae28:	b2db      	uxtb	r3, r3
 800ae2a:	2b01      	cmp	r3, #1
 800ae2c:	bf14      	ite	ne
 800ae2e:	2301      	movne	r3, #1
 800ae30:	2300      	moveq	r3, #0
 800ae32:	b2db      	uxtb	r3, r3
 800ae34:	e02f      	b.n	800ae96 <HAL_TIM_PWM_Start_IT+0xa2>
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	2b08      	cmp	r3, #8
 800ae3a:	d109      	bne.n	800ae50 <HAL_TIM_PWM_Start_IT+0x5c>
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ae42:	b2db      	uxtb	r3, r3
 800ae44:	2b01      	cmp	r3, #1
 800ae46:	bf14      	ite	ne
 800ae48:	2301      	movne	r3, #1
 800ae4a:	2300      	moveq	r3, #0
 800ae4c:	b2db      	uxtb	r3, r3
 800ae4e:	e022      	b.n	800ae96 <HAL_TIM_PWM_Start_IT+0xa2>
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	2b0c      	cmp	r3, #12
 800ae54:	d109      	bne.n	800ae6a <HAL_TIM_PWM_Start_IT+0x76>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ae5c:	b2db      	uxtb	r3, r3
 800ae5e:	2b01      	cmp	r3, #1
 800ae60:	bf14      	ite	ne
 800ae62:	2301      	movne	r3, #1
 800ae64:	2300      	moveq	r3, #0
 800ae66:	b2db      	uxtb	r3, r3
 800ae68:	e015      	b.n	800ae96 <HAL_TIM_PWM_Start_IT+0xa2>
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	2b10      	cmp	r3, #16
 800ae6e:	d109      	bne.n	800ae84 <HAL_TIM_PWM_Start_IT+0x90>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ae76:	b2db      	uxtb	r3, r3
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	bf14      	ite	ne
 800ae7c:	2301      	movne	r3, #1
 800ae7e:	2300      	moveq	r3, #0
 800ae80:	b2db      	uxtb	r3, r3
 800ae82:	e008      	b.n	800ae96 <HAL_TIM_PWM_Start_IT+0xa2>
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ae8a:	b2db      	uxtb	r3, r3
 800ae8c:	2b01      	cmp	r3, #1
 800ae8e:	bf14      	ite	ne
 800ae90:	2301      	movne	r3, #1
 800ae92:	2300      	moveq	r3, #0
 800ae94:	b2db      	uxtb	r3, r3
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d001      	beq.n	800ae9e <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	e0e7      	b.n	800b06e <HAL_TIM_PWM_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d104      	bne.n	800aeae <HAL_TIM_PWM_Start_IT+0xba>
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2202      	movs	r2, #2
 800aea8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aeac:	e023      	b.n	800aef6 <HAL_TIM_PWM_Start_IT+0x102>
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	2b04      	cmp	r3, #4
 800aeb2:	d104      	bne.n	800aebe <HAL_TIM_PWM_Start_IT+0xca>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2202      	movs	r2, #2
 800aeb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aebc:	e01b      	b.n	800aef6 <HAL_TIM_PWM_Start_IT+0x102>
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	2b08      	cmp	r3, #8
 800aec2:	d104      	bne.n	800aece <HAL_TIM_PWM_Start_IT+0xda>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2202      	movs	r2, #2
 800aec8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aecc:	e013      	b.n	800aef6 <HAL_TIM_PWM_Start_IT+0x102>
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	2b0c      	cmp	r3, #12
 800aed2:	d104      	bne.n	800aede <HAL_TIM_PWM_Start_IT+0xea>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2202      	movs	r2, #2
 800aed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800aedc:	e00b      	b.n	800aef6 <HAL_TIM_PWM_Start_IT+0x102>
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	2b10      	cmp	r3, #16
 800aee2:	d104      	bne.n	800aeee <HAL_TIM_PWM_Start_IT+0xfa>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2202      	movs	r2, #2
 800aee8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aeec:	e003      	b.n	800aef6 <HAL_TIM_PWM_Start_IT+0x102>
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2202      	movs	r2, #2
 800aef2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	2b0c      	cmp	r3, #12
 800aefa:	d841      	bhi.n	800af80 <HAL_TIM_PWM_Start_IT+0x18c>
 800aefc:	a201      	add	r2, pc, #4	@ (adr r2, 800af04 <HAL_TIM_PWM_Start_IT+0x110>)
 800aefe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af02:	bf00      	nop
 800af04:	0800af39 	.word	0x0800af39
 800af08:	0800af81 	.word	0x0800af81
 800af0c:	0800af81 	.word	0x0800af81
 800af10:	0800af81 	.word	0x0800af81
 800af14:	0800af4b 	.word	0x0800af4b
 800af18:	0800af81 	.word	0x0800af81
 800af1c:	0800af81 	.word	0x0800af81
 800af20:	0800af81 	.word	0x0800af81
 800af24:	0800af5d 	.word	0x0800af5d
 800af28:	0800af81 	.word	0x0800af81
 800af2c:	0800af81 	.word	0x0800af81
 800af30:	0800af81 	.word	0x0800af81
 800af34:	0800af6f 	.word	0x0800af6f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	68da      	ldr	r2, [r3, #12]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f042 0202 	orr.w	r2, r2, #2
 800af46:	60da      	str	r2, [r3, #12]
      break;
 800af48:	e01d      	b.n	800af86 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	68da      	ldr	r2, [r3, #12]
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f042 0204 	orr.w	r2, r2, #4
 800af58:	60da      	str	r2, [r3, #12]
      break;
 800af5a:	e014      	b.n	800af86 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	68da      	ldr	r2, [r3, #12]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f042 0208 	orr.w	r2, r2, #8
 800af6a:	60da      	str	r2, [r3, #12]
      break;
 800af6c:	e00b      	b.n	800af86 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	68da      	ldr	r2, [r3, #12]
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f042 0210 	orr.w	r2, r2, #16
 800af7c:	60da      	str	r2, [r3, #12]
      break;
 800af7e:	e002      	b.n	800af86 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800af80:	2301      	movs	r3, #1
 800af82:	73fb      	strb	r3, [r7, #15]
      break;
 800af84:	bf00      	nop
  }

  if (status == HAL_OK)
 800af86:	7bfb      	ldrb	r3, [r7, #15]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d16f      	bne.n	800b06c <HAL_TIM_PWM_Start_IT+0x278>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	2201      	movs	r2, #1
 800af92:	6839      	ldr	r1, [r7, #0]
 800af94:	4618      	mov	r0, r3
 800af96:	f001 fb97 	bl	800c6c8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	4a36      	ldr	r2, [pc, #216]	@ (800b078 <HAL_TIM_PWM_Start_IT+0x284>)
 800afa0:	4293      	cmp	r3, r2
 800afa2:	d013      	beq.n	800afcc <HAL_TIM_PWM_Start_IT+0x1d8>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4a34      	ldr	r2, [pc, #208]	@ (800b07c <HAL_TIM_PWM_Start_IT+0x288>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d00e      	beq.n	800afcc <HAL_TIM_PWM_Start_IT+0x1d8>
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	4a33      	ldr	r2, [pc, #204]	@ (800b080 <HAL_TIM_PWM_Start_IT+0x28c>)
 800afb4:	4293      	cmp	r3, r2
 800afb6:	d009      	beq.n	800afcc <HAL_TIM_PWM_Start_IT+0x1d8>
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	4a31      	ldr	r2, [pc, #196]	@ (800b084 <HAL_TIM_PWM_Start_IT+0x290>)
 800afbe:	4293      	cmp	r3, r2
 800afc0:	d004      	beq.n	800afcc <HAL_TIM_PWM_Start_IT+0x1d8>
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	4a30      	ldr	r2, [pc, #192]	@ (800b088 <HAL_TIM_PWM_Start_IT+0x294>)
 800afc8:	4293      	cmp	r3, r2
 800afca:	d101      	bne.n	800afd0 <HAL_TIM_PWM_Start_IT+0x1dc>
 800afcc:	2301      	movs	r3, #1
 800afce:	e000      	b.n	800afd2 <HAL_TIM_PWM_Start_IT+0x1de>
 800afd0:	2300      	movs	r3, #0
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d007      	beq.n	800afe6 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800afe4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	4a23      	ldr	r2, [pc, #140]	@ (800b078 <HAL_TIM_PWM_Start_IT+0x284>)
 800afec:	4293      	cmp	r3, r2
 800afee:	d01d      	beq.n	800b02c <HAL_TIM_PWM_Start_IT+0x238>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aff8:	d018      	beq.n	800b02c <HAL_TIM_PWM_Start_IT+0x238>
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	4a23      	ldr	r2, [pc, #140]	@ (800b08c <HAL_TIM_PWM_Start_IT+0x298>)
 800b000:	4293      	cmp	r3, r2
 800b002:	d013      	beq.n	800b02c <HAL_TIM_PWM_Start_IT+0x238>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	4a21      	ldr	r2, [pc, #132]	@ (800b090 <HAL_TIM_PWM_Start_IT+0x29c>)
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d00e      	beq.n	800b02c <HAL_TIM_PWM_Start_IT+0x238>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	4a20      	ldr	r2, [pc, #128]	@ (800b094 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800b014:	4293      	cmp	r3, r2
 800b016:	d009      	beq.n	800b02c <HAL_TIM_PWM_Start_IT+0x238>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	4a17      	ldr	r2, [pc, #92]	@ (800b07c <HAL_TIM_PWM_Start_IT+0x288>)
 800b01e:	4293      	cmp	r3, r2
 800b020:	d004      	beq.n	800b02c <HAL_TIM_PWM_Start_IT+0x238>
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	4a16      	ldr	r2, [pc, #88]	@ (800b080 <HAL_TIM_PWM_Start_IT+0x28c>)
 800b028:	4293      	cmp	r3, r2
 800b02a:	d115      	bne.n	800b058 <HAL_TIM_PWM_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	689a      	ldr	r2, [r3, #8]
 800b032:	4b19      	ldr	r3, [pc, #100]	@ (800b098 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800b034:	4013      	ands	r3, r2
 800b036:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	2b06      	cmp	r3, #6
 800b03c:	d015      	beq.n	800b06a <HAL_TIM_PWM_Start_IT+0x276>
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b044:	d011      	beq.n	800b06a <HAL_TIM_PWM_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	681a      	ldr	r2, [r3, #0]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f042 0201 	orr.w	r2, r2, #1
 800b054:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b056:	e008      	b.n	800b06a <HAL_TIM_PWM_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f042 0201 	orr.w	r2, r2, #1
 800b066:	601a      	str	r2, [r3, #0]
 800b068:	e000      	b.n	800b06c <HAL_TIM_PWM_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b06a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800b06c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b06e:	4618      	mov	r0, r3
 800b070:	3710      	adds	r7, #16
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}
 800b076:	bf00      	nop
 800b078:	40012c00 	.word	0x40012c00
 800b07c:	40013400 	.word	0x40013400
 800b080:	40014000 	.word	0x40014000
 800b084:	40014400 	.word	0x40014400
 800b088:	40014800 	.word	0x40014800
 800b08c:	40000400 	.word	0x40000400
 800b090:	40000800 	.word	0x40000800
 800b094:	40000c00 	.word	0x40000c00
 800b098:	00010007 	.word	0x00010007

0800b09c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b086      	sub	sp, #24
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	60f8      	str	r0, [r7, #12]
 800b0a4:	60b9      	str	r1, [r7, #8]
 800b0a6:	607a      	str	r2, [r7, #4]
 800b0a8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d109      	bne.n	800b0c8 <HAL_TIM_PWM_Start_DMA+0x2c>
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b0ba:	b2db      	uxtb	r3, r3
 800b0bc:	2b02      	cmp	r3, #2
 800b0be:	bf0c      	ite	eq
 800b0c0:	2301      	moveq	r3, #1
 800b0c2:	2300      	movne	r3, #0
 800b0c4:	b2db      	uxtb	r3, r3
 800b0c6:	e03c      	b.n	800b142 <HAL_TIM_PWM_Start_DMA+0xa6>
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	2b04      	cmp	r3, #4
 800b0cc:	d109      	bne.n	800b0e2 <HAL_TIM_PWM_Start_DMA+0x46>
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b0d4:	b2db      	uxtb	r3, r3
 800b0d6:	2b02      	cmp	r3, #2
 800b0d8:	bf0c      	ite	eq
 800b0da:	2301      	moveq	r3, #1
 800b0dc:	2300      	movne	r3, #0
 800b0de:	b2db      	uxtb	r3, r3
 800b0e0:	e02f      	b.n	800b142 <HAL_TIM_PWM_Start_DMA+0xa6>
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	2b08      	cmp	r3, #8
 800b0e6:	d109      	bne.n	800b0fc <HAL_TIM_PWM_Start_DMA+0x60>
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b0ee:	b2db      	uxtb	r3, r3
 800b0f0:	2b02      	cmp	r3, #2
 800b0f2:	bf0c      	ite	eq
 800b0f4:	2301      	moveq	r3, #1
 800b0f6:	2300      	movne	r3, #0
 800b0f8:	b2db      	uxtb	r3, r3
 800b0fa:	e022      	b.n	800b142 <HAL_TIM_PWM_Start_DMA+0xa6>
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	2b0c      	cmp	r3, #12
 800b100:	d109      	bne.n	800b116 <HAL_TIM_PWM_Start_DMA+0x7a>
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b108:	b2db      	uxtb	r3, r3
 800b10a:	2b02      	cmp	r3, #2
 800b10c:	bf0c      	ite	eq
 800b10e:	2301      	moveq	r3, #1
 800b110:	2300      	movne	r3, #0
 800b112:	b2db      	uxtb	r3, r3
 800b114:	e015      	b.n	800b142 <HAL_TIM_PWM_Start_DMA+0xa6>
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	2b10      	cmp	r3, #16
 800b11a:	d109      	bne.n	800b130 <HAL_TIM_PWM_Start_DMA+0x94>
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b122:	b2db      	uxtb	r3, r3
 800b124:	2b02      	cmp	r3, #2
 800b126:	bf0c      	ite	eq
 800b128:	2301      	moveq	r3, #1
 800b12a:	2300      	movne	r3, #0
 800b12c:	b2db      	uxtb	r3, r3
 800b12e:	e008      	b.n	800b142 <HAL_TIM_PWM_Start_DMA+0xa6>
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b136:	b2db      	uxtb	r3, r3
 800b138:	2b02      	cmp	r3, #2
 800b13a:	bf0c      	ite	eq
 800b13c:	2301      	moveq	r3, #1
 800b13e:	2300      	movne	r3, #0
 800b140:	b2db      	uxtb	r3, r3
 800b142:	2b00      	cmp	r3, #0
 800b144:	d001      	beq.n	800b14a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800b146:	2302      	movs	r3, #2
 800b148:	e1ab      	b.n	800b4a2 <HAL_TIM_PWM_Start_DMA+0x406>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d109      	bne.n	800b164 <HAL_TIM_PWM_Start_DMA+0xc8>
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b156:	b2db      	uxtb	r3, r3
 800b158:	2b01      	cmp	r3, #1
 800b15a:	bf0c      	ite	eq
 800b15c:	2301      	moveq	r3, #1
 800b15e:	2300      	movne	r3, #0
 800b160:	b2db      	uxtb	r3, r3
 800b162:	e03c      	b.n	800b1de <HAL_TIM_PWM_Start_DMA+0x142>
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	2b04      	cmp	r3, #4
 800b168:	d109      	bne.n	800b17e <HAL_TIM_PWM_Start_DMA+0xe2>
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b170:	b2db      	uxtb	r3, r3
 800b172:	2b01      	cmp	r3, #1
 800b174:	bf0c      	ite	eq
 800b176:	2301      	moveq	r3, #1
 800b178:	2300      	movne	r3, #0
 800b17a:	b2db      	uxtb	r3, r3
 800b17c:	e02f      	b.n	800b1de <HAL_TIM_PWM_Start_DMA+0x142>
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	2b08      	cmp	r3, #8
 800b182:	d109      	bne.n	800b198 <HAL_TIM_PWM_Start_DMA+0xfc>
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b18a:	b2db      	uxtb	r3, r3
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	bf0c      	ite	eq
 800b190:	2301      	moveq	r3, #1
 800b192:	2300      	movne	r3, #0
 800b194:	b2db      	uxtb	r3, r3
 800b196:	e022      	b.n	800b1de <HAL_TIM_PWM_Start_DMA+0x142>
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	2b0c      	cmp	r3, #12
 800b19c:	d109      	bne.n	800b1b2 <HAL_TIM_PWM_Start_DMA+0x116>
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b1a4:	b2db      	uxtb	r3, r3
 800b1a6:	2b01      	cmp	r3, #1
 800b1a8:	bf0c      	ite	eq
 800b1aa:	2301      	moveq	r3, #1
 800b1ac:	2300      	movne	r3, #0
 800b1ae:	b2db      	uxtb	r3, r3
 800b1b0:	e015      	b.n	800b1de <HAL_TIM_PWM_Start_DMA+0x142>
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	2b10      	cmp	r3, #16
 800b1b6:	d109      	bne.n	800b1cc <HAL_TIM_PWM_Start_DMA+0x130>
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b1be:	b2db      	uxtb	r3, r3
 800b1c0:	2b01      	cmp	r3, #1
 800b1c2:	bf0c      	ite	eq
 800b1c4:	2301      	moveq	r3, #1
 800b1c6:	2300      	movne	r3, #0
 800b1c8:	b2db      	uxtb	r3, r3
 800b1ca:	e008      	b.n	800b1de <HAL_TIM_PWM_Start_DMA+0x142>
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b1d2:	b2db      	uxtb	r3, r3
 800b1d4:	2b01      	cmp	r3, #1
 800b1d6:	bf0c      	ite	eq
 800b1d8:	2301      	moveq	r3, #1
 800b1da:	2300      	movne	r3, #0
 800b1dc:	b2db      	uxtb	r3, r3
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d034      	beq.n	800b24c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d002      	beq.n	800b1ee <HAL_TIM_PWM_Start_DMA+0x152>
 800b1e8:	887b      	ldrh	r3, [r7, #2]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d101      	bne.n	800b1f2 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	e157      	b.n	800b4a2 <HAL_TIM_PWM_Start_DMA+0x406>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d104      	bne.n	800b202 <HAL_TIM_PWM_Start_DMA+0x166>
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	2202      	movs	r2, #2
 800b1fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b200:	e026      	b.n	800b250 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	2b04      	cmp	r3, #4
 800b206:	d104      	bne.n	800b212 <HAL_TIM_PWM_Start_DMA+0x176>
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2202      	movs	r2, #2
 800b20c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b210:	e01e      	b.n	800b250 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	2b08      	cmp	r3, #8
 800b216:	d104      	bne.n	800b222 <HAL_TIM_PWM_Start_DMA+0x186>
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	2202      	movs	r2, #2
 800b21c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b220:	e016      	b.n	800b250 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	2b0c      	cmp	r3, #12
 800b226:	d104      	bne.n	800b232 <HAL_TIM_PWM_Start_DMA+0x196>
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	2202      	movs	r2, #2
 800b22c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b230:	e00e      	b.n	800b250 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	2b10      	cmp	r3, #16
 800b236:	d104      	bne.n	800b242 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2202      	movs	r2, #2
 800b23c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b240:	e006      	b.n	800b250 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2202      	movs	r2, #2
 800b246:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b24a:	e001      	b.n	800b250 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800b24c:	2301      	movs	r3, #1
 800b24e:	e128      	b.n	800b4a2 <HAL_TIM_PWM_Start_DMA+0x406>
  }

  switch (Channel)
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	2b0c      	cmp	r3, #12
 800b254:	f200 80ae 	bhi.w	800b3b4 <HAL_TIM_PWM_Start_DMA+0x318>
 800b258:	a201      	add	r2, pc, #4	@ (adr r2, 800b260 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800b25a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b25e:	bf00      	nop
 800b260:	0800b295 	.word	0x0800b295
 800b264:	0800b3b5 	.word	0x0800b3b5
 800b268:	0800b3b5 	.word	0x0800b3b5
 800b26c:	0800b3b5 	.word	0x0800b3b5
 800b270:	0800b2dd 	.word	0x0800b2dd
 800b274:	0800b3b5 	.word	0x0800b3b5
 800b278:	0800b3b5 	.word	0x0800b3b5
 800b27c:	0800b3b5 	.word	0x0800b3b5
 800b280:	0800b325 	.word	0x0800b325
 800b284:	0800b3b5 	.word	0x0800b3b5
 800b288:	0800b3b5 	.word	0x0800b3b5
 800b28c:	0800b3b5 	.word	0x0800b3b5
 800b290:	0800b36d 	.word	0x0800b36d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b298:	4a84      	ldr	r2, [pc, #528]	@ (800b4ac <HAL_TIM_PWM_Start_DMA+0x410>)
 800b29a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2a0:	4a83      	ldr	r2, [pc, #524]	@ (800b4b0 <HAL_TIM_PWM_Start_DMA+0x414>)
 800b2a2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2a8:	4a82      	ldr	r2, [pc, #520]	@ (800b4b4 <HAL_TIM_PWM_Start_DMA+0x418>)
 800b2aa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800b2b0:	6879      	ldr	r1, [r7, #4]
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	3334      	adds	r3, #52	@ 0x34
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	887b      	ldrh	r3, [r7, #2]
 800b2bc:	f7fb fe9a 	bl	8006ff4 <HAL_DMA_Start_IT>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d001      	beq.n	800b2ca <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	e0eb      	b.n	800b4a2 <HAL_TIM_PWM_Start_DMA+0x406>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	68da      	ldr	r2, [r3, #12]
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b2d8:	60da      	str	r2, [r3, #12]
      break;
 800b2da:	e06e      	b.n	800b3ba <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2e0:	4a72      	ldr	r2, [pc, #456]	@ (800b4ac <HAL_TIM_PWM_Start_DMA+0x410>)
 800b2e2:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2e8:	4a71      	ldr	r2, [pc, #452]	@ (800b4b0 <HAL_TIM_PWM_Start_DMA+0x414>)
 800b2ea:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2f0:	4a70      	ldr	r2, [pc, #448]	@ (800b4b4 <HAL_TIM_PWM_Start_DMA+0x418>)
 800b2f2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800b2f8:	6879      	ldr	r1, [r7, #4]
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	3338      	adds	r3, #56	@ 0x38
 800b300:	461a      	mov	r2, r3
 800b302:	887b      	ldrh	r3, [r7, #2]
 800b304:	f7fb fe76 	bl	8006ff4 <HAL_DMA_Start_IT>
 800b308:	4603      	mov	r3, r0
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d001      	beq.n	800b312 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b30e:	2301      	movs	r3, #1
 800b310:	e0c7      	b.n	800b4a2 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	68da      	ldr	r2, [r3, #12]
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b320:	60da      	str	r2, [r3, #12]
      break;
 800b322:	e04a      	b.n	800b3ba <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b328:	4a60      	ldr	r2, [pc, #384]	@ (800b4ac <HAL_TIM_PWM_Start_DMA+0x410>)
 800b32a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b330:	4a5f      	ldr	r2, [pc, #380]	@ (800b4b0 <HAL_TIM_PWM_Start_DMA+0x414>)
 800b332:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b338:	4a5e      	ldr	r2, [pc, #376]	@ (800b4b4 <HAL_TIM_PWM_Start_DMA+0x418>)
 800b33a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800b340:	6879      	ldr	r1, [r7, #4]
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	333c      	adds	r3, #60	@ 0x3c
 800b348:	461a      	mov	r2, r3
 800b34a:	887b      	ldrh	r3, [r7, #2]
 800b34c:	f7fb fe52 	bl	8006ff4 <HAL_DMA_Start_IT>
 800b350:	4603      	mov	r3, r0
 800b352:	2b00      	cmp	r3, #0
 800b354:	d001      	beq.n	800b35a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b356:	2301      	movs	r3, #1
 800b358:	e0a3      	b.n	800b4a2 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	68da      	ldr	r2, [r3, #12]
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b368:	60da      	str	r2, [r3, #12]
      break;
 800b36a:	e026      	b.n	800b3ba <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b370:	4a4e      	ldr	r2, [pc, #312]	@ (800b4ac <HAL_TIM_PWM_Start_DMA+0x410>)
 800b372:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b378:	4a4d      	ldr	r2, [pc, #308]	@ (800b4b0 <HAL_TIM_PWM_Start_DMA+0x414>)
 800b37a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b380:	4a4c      	ldr	r2, [pc, #304]	@ (800b4b4 <HAL_TIM_PWM_Start_DMA+0x418>)
 800b382:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b388:	6879      	ldr	r1, [r7, #4]
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	3340      	adds	r3, #64	@ 0x40
 800b390:	461a      	mov	r2, r3
 800b392:	887b      	ldrh	r3, [r7, #2]
 800b394:	f7fb fe2e 	bl	8006ff4 <HAL_DMA_Start_IT>
 800b398:	4603      	mov	r3, r0
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d001      	beq.n	800b3a2 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b39e:	2301      	movs	r3, #1
 800b3a0:	e07f      	b.n	800b4a2 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	68da      	ldr	r2, [r3, #12]
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b3b0:	60da      	str	r2, [r3, #12]
      break;
 800b3b2:	e002      	b.n	800b3ba <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	75fb      	strb	r3, [r7, #23]
      break;
 800b3b8:	bf00      	nop
  }

  if (status == HAL_OK)
 800b3ba:	7dfb      	ldrb	r3, [r7, #23]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d16f      	bne.n	800b4a0 <HAL_TIM_PWM_Start_DMA+0x404>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	2201      	movs	r2, #1
 800b3c6:	68b9      	ldr	r1, [r7, #8]
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f001 f97d 	bl	800c6c8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	4a39      	ldr	r2, [pc, #228]	@ (800b4b8 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	d013      	beq.n	800b400 <HAL_TIM_PWM_Start_DMA+0x364>
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	4a37      	ldr	r2, [pc, #220]	@ (800b4bc <HAL_TIM_PWM_Start_DMA+0x420>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d00e      	beq.n	800b400 <HAL_TIM_PWM_Start_DMA+0x364>
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	4a36      	ldr	r2, [pc, #216]	@ (800b4c0 <HAL_TIM_PWM_Start_DMA+0x424>)
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	d009      	beq.n	800b400 <HAL_TIM_PWM_Start_DMA+0x364>
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	4a34      	ldr	r2, [pc, #208]	@ (800b4c4 <HAL_TIM_PWM_Start_DMA+0x428>)
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	d004      	beq.n	800b400 <HAL_TIM_PWM_Start_DMA+0x364>
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	4a33      	ldr	r2, [pc, #204]	@ (800b4c8 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d101      	bne.n	800b404 <HAL_TIM_PWM_Start_DMA+0x368>
 800b400:	2301      	movs	r3, #1
 800b402:	e000      	b.n	800b406 <HAL_TIM_PWM_Start_DMA+0x36a>
 800b404:	2300      	movs	r3, #0
 800b406:	2b00      	cmp	r3, #0
 800b408:	d007      	beq.n	800b41a <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b418:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	4a26      	ldr	r2, [pc, #152]	@ (800b4b8 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800b420:	4293      	cmp	r3, r2
 800b422:	d01d      	beq.n	800b460 <HAL_TIM_PWM_Start_DMA+0x3c4>
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b42c:	d018      	beq.n	800b460 <HAL_TIM_PWM_Start_DMA+0x3c4>
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	4a26      	ldr	r2, [pc, #152]	@ (800b4cc <HAL_TIM_PWM_Start_DMA+0x430>)
 800b434:	4293      	cmp	r3, r2
 800b436:	d013      	beq.n	800b460 <HAL_TIM_PWM_Start_DMA+0x3c4>
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	4a24      	ldr	r2, [pc, #144]	@ (800b4d0 <HAL_TIM_PWM_Start_DMA+0x434>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	d00e      	beq.n	800b460 <HAL_TIM_PWM_Start_DMA+0x3c4>
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	4a23      	ldr	r2, [pc, #140]	@ (800b4d4 <HAL_TIM_PWM_Start_DMA+0x438>)
 800b448:	4293      	cmp	r3, r2
 800b44a:	d009      	beq.n	800b460 <HAL_TIM_PWM_Start_DMA+0x3c4>
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	4a1a      	ldr	r2, [pc, #104]	@ (800b4bc <HAL_TIM_PWM_Start_DMA+0x420>)
 800b452:	4293      	cmp	r3, r2
 800b454:	d004      	beq.n	800b460 <HAL_TIM_PWM_Start_DMA+0x3c4>
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	4a19      	ldr	r2, [pc, #100]	@ (800b4c0 <HAL_TIM_PWM_Start_DMA+0x424>)
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d115      	bne.n	800b48c <HAL_TIM_PWM_Start_DMA+0x3f0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	689a      	ldr	r2, [r3, #8]
 800b466:	4b1c      	ldr	r3, [pc, #112]	@ (800b4d8 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800b468:	4013      	ands	r3, r2
 800b46a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b46c:	693b      	ldr	r3, [r7, #16]
 800b46e:	2b06      	cmp	r3, #6
 800b470:	d015      	beq.n	800b49e <HAL_TIM_PWM_Start_DMA+0x402>
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b478:	d011      	beq.n	800b49e <HAL_TIM_PWM_Start_DMA+0x402>
      {
        __HAL_TIM_ENABLE(htim);
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	681a      	ldr	r2, [r3, #0]
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f042 0201 	orr.w	r2, r2, #1
 800b488:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b48a:	e008      	b.n	800b49e <HAL_TIM_PWM_Start_DMA+0x402>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	681a      	ldr	r2, [r3, #0]
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f042 0201 	orr.w	r2, r2, #1
 800b49a:	601a      	str	r2, [r3, #0]
 800b49c:	e000      	b.n	800b4a0 <HAL_TIM_PWM_Start_DMA+0x404>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b49e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800b4a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3718      	adds	r7, #24
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}
 800b4aa:	bf00      	nop
 800b4ac:	0800bd8d 	.word	0x0800bd8d
 800b4b0:	0800be35 	.word	0x0800be35
 800b4b4:	0800bcfb 	.word	0x0800bcfb
 800b4b8:	40012c00 	.word	0x40012c00
 800b4bc:	40013400 	.word	0x40013400
 800b4c0:	40014000 	.word	0x40014000
 800b4c4:	40014400 	.word	0x40014400
 800b4c8:	40014800 	.word	0x40014800
 800b4cc:	40000400 	.word	0x40000400
 800b4d0:	40000800 	.word	0x40000800
 800b4d4:	40000c00 	.word	0x40000c00
 800b4d8:	00010007 	.word	0x00010007

0800b4dc <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b084      	sub	sp, #16
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	2b0c      	cmp	r3, #12
 800b4ee:	d855      	bhi.n	800b59c <HAL_TIM_PWM_Stop_DMA+0xc0>
 800b4f0:	a201      	add	r2, pc, #4	@ (adr r2, 800b4f8 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800b4f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4f6:	bf00      	nop
 800b4f8:	0800b52d 	.word	0x0800b52d
 800b4fc:	0800b59d 	.word	0x0800b59d
 800b500:	0800b59d 	.word	0x0800b59d
 800b504:	0800b59d 	.word	0x0800b59d
 800b508:	0800b549 	.word	0x0800b549
 800b50c:	0800b59d 	.word	0x0800b59d
 800b510:	0800b59d 	.word	0x0800b59d
 800b514:	0800b59d 	.word	0x0800b59d
 800b518:	0800b565 	.word	0x0800b565
 800b51c:	0800b59d 	.word	0x0800b59d
 800b520:	0800b59d 	.word	0x0800b59d
 800b524:	0800b59d 	.word	0x0800b59d
 800b528:	0800b581 	.word	0x0800b581
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	68da      	ldr	r2, [r3, #12]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800b53a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b540:	4618      	mov	r0, r3
 800b542:	f7fb fdf5 	bl	8007130 <HAL_DMA_Abort_IT>
      break;
 800b546:	e02c      	b.n	800b5a2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	68da      	ldr	r2, [r3, #12]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b556:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b55c:	4618      	mov	r0, r3
 800b55e:	f7fb fde7 	bl	8007130 <HAL_DMA_Abort_IT>
      break;
 800b562:	e01e      	b.n	800b5a2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	68da      	ldr	r2, [r3, #12]
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b572:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b578:	4618      	mov	r0, r3
 800b57a:	f7fb fdd9 	bl	8007130 <HAL_DMA_Abort_IT>
      break;
 800b57e:	e010      	b.n	800b5a2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	68da      	ldr	r2, [r3, #12]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b58e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b594:	4618      	mov	r0, r3
 800b596:	f7fb fdcb 	bl	8007130 <HAL_DMA_Abort_IT>
      break;
 800b59a:	e002      	b.n	800b5a2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800b59c:	2301      	movs	r3, #1
 800b59e:	73fb      	strb	r3, [r7, #15]
      break;
 800b5a0:	bf00      	nop
  }

  if (status == HAL_OK)
 800b5a2:	7bfb      	ldrb	r3, [r7, #15]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	f040 8081 	bne.w	800b6ac <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	6839      	ldr	r1, [r7, #0]
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f001 f888 	bl	800c6c8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4a3e      	ldr	r2, [pc, #248]	@ (800b6b8 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d013      	beq.n	800b5ea <HAL_TIM_PWM_Stop_DMA+0x10e>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	4a3d      	ldr	r2, [pc, #244]	@ (800b6bc <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d00e      	beq.n	800b5ea <HAL_TIM_PWM_Stop_DMA+0x10e>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4a3b      	ldr	r2, [pc, #236]	@ (800b6c0 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d009      	beq.n	800b5ea <HAL_TIM_PWM_Stop_DMA+0x10e>
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	4a3a      	ldr	r2, [pc, #232]	@ (800b6c4 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d004      	beq.n	800b5ea <HAL_TIM_PWM_Stop_DMA+0x10e>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	4a38      	ldr	r2, [pc, #224]	@ (800b6c8 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d101      	bne.n	800b5ee <HAL_TIM_PWM_Stop_DMA+0x112>
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	e000      	b.n	800b5f0 <HAL_TIM_PWM_Stop_DMA+0x114>
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d017      	beq.n	800b624 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	6a1a      	ldr	r2, [r3, #32]
 800b5fa:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b5fe:	4013      	ands	r3, r2
 800b600:	2b00      	cmp	r3, #0
 800b602:	d10f      	bne.n	800b624 <HAL_TIM_PWM_Stop_DMA+0x148>
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	6a1a      	ldr	r2, [r3, #32]
 800b60a:	f240 4344 	movw	r3, #1092	@ 0x444
 800b60e:	4013      	ands	r3, r2
 800b610:	2b00      	cmp	r3, #0
 800b612:	d107      	bne.n	800b624 <HAL_TIM_PWM_Stop_DMA+0x148>
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b622:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	6a1a      	ldr	r2, [r3, #32]
 800b62a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b62e:	4013      	ands	r3, r2
 800b630:	2b00      	cmp	r3, #0
 800b632:	d10f      	bne.n	800b654 <HAL_TIM_PWM_Stop_DMA+0x178>
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	6a1a      	ldr	r2, [r3, #32]
 800b63a:	f240 4344 	movw	r3, #1092	@ 0x444
 800b63e:	4013      	ands	r3, r2
 800b640:	2b00      	cmp	r3, #0
 800b642:	d107      	bne.n	800b654 <HAL_TIM_PWM_Stop_DMA+0x178>
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	681a      	ldr	r2, [r3, #0]
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f022 0201 	bic.w	r2, r2, #1
 800b652:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d104      	bne.n	800b664 <HAL_TIM_PWM_Stop_DMA+0x188>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2201      	movs	r2, #1
 800b65e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b662:	e023      	b.n	800b6ac <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	2b04      	cmp	r3, #4
 800b668:	d104      	bne.n	800b674 <HAL_TIM_PWM_Stop_DMA+0x198>
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2201      	movs	r2, #1
 800b66e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b672:	e01b      	b.n	800b6ac <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	2b08      	cmp	r3, #8
 800b678:	d104      	bne.n	800b684 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2201      	movs	r2, #1
 800b67e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b682:	e013      	b.n	800b6ac <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	2b0c      	cmp	r3, #12
 800b688:	d104      	bne.n	800b694 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2201      	movs	r2, #1
 800b68e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b692:	e00b      	b.n	800b6ac <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	2b10      	cmp	r3, #16
 800b698:	d104      	bne.n	800b6a4 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2201      	movs	r2, #1
 800b69e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b6a2:	e003      	b.n	800b6ac <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 800b6ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3710      	adds	r7, #16
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	bf00      	nop
 800b6b8:	40012c00 	.word	0x40012c00
 800b6bc:	40013400 	.word	0x40013400
 800b6c0:	40014000 	.word	0x40014000
 800b6c4:	40014400 	.word	0x40014400
 800b6c8:	40014800 	.word	0x40014800

0800b6cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b084      	sub	sp, #16
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	68db      	ldr	r3, [r3, #12]
 800b6da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	691b      	ldr	r3, [r3, #16]
 800b6e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	f003 0302 	and.w	r3, r3, #2
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d020      	beq.n	800b730 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	f003 0302 	and.w	r3, r3, #2
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d01b      	beq.n	800b730 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f06f 0202 	mvn.w	r2, #2
 800b700:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2201      	movs	r2, #1
 800b706:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	699b      	ldr	r3, [r3, #24]
 800b70e:	f003 0303 	and.w	r3, r3, #3
 800b712:	2b00      	cmp	r3, #0
 800b714:	d003      	beq.n	800b71e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f000 fac7 	bl	800bcaa <HAL_TIM_IC_CaptureCallback>
 800b71c:	e005      	b.n	800b72a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f000 fab9 	bl	800bc96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f7f6 fc71 	bl	800200c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2200      	movs	r2, #0
 800b72e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	f003 0304 	and.w	r3, r3, #4
 800b736:	2b00      	cmp	r3, #0
 800b738:	d020      	beq.n	800b77c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	f003 0304 	and.w	r3, r3, #4
 800b740:	2b00      	cmp	r3, #0
 800b742:	d01b      	beq.n	800b77c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	f06f 0204 	mvn.w	r2, #4
 800b74c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2202      	movs	r2, #2
 800b752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	699b      	ldr	r3, [r3, #24]
 800b75a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d003      	beq.n	800b76a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f000 faa1 	bl	800bcaa <HAL_TIM_IC_CaptureCallback>
 800b768:	e005      	b.n	800b776 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f000 fa93 	bl	800bc96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f7f6 fc4b 	bl	800200c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2200      	movs	r2, #0
 800b77a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	f003 0308 	and.w	r3, r3, #8
 800b782:	2b00      	cmp	r3, #0
 800b784:	d020      	beq.n	800b7c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	f003 0308 	and.w	r3, r3, #8
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d01b      	beq.n	800b7c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f06f 0208 	mvn.w	r2, #8
 800b798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2204      	movs	r2, #4
 800b79e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	69db      	ldr	r3, [r3, #28]
 800b7a6:	f003 0303 	and.w	r3, r3, #3
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d003      	beq.n	800b7b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f000 fa7b 	bl	800bcaa <HAL_TIM_IC_CaptureCallback>
 800b7b4:	e005      	b.n	800b7c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f000 fa6d 	bl	800bc96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f7f6 fc25 	bl	800200c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	f003 0310 	and.w	r3, r3, #16
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d020      	beq.n	800b814 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	f003 0310 	and.w	r3, r3, #16
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d01b      	beq.n	800b814 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f06f 0210 	mvn.w	r2, #16
 800b7e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2208      	movs	r2, #8
 800b7ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	69db      	ldr	r3, [r3, #28]
 800b7f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d003      	beq.n	800b802 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f000 fa55 	bl	800bcaa <HAL_TIM_IC_CaptureCallback>
 800b800:	e005      	b.n	800b80e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	f000 fa47 	bl	800bc96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f7f6 fbff 	bl	800200c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2200      	movs	r2, #0
 800b812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	f003 0301 	and.w	r3, r3, #1
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d00c      	beq.n	800b838 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	f003 0301 	and.w	r3, r3, #1
 800b824:	2b00      	cmp	r3, #0
 800b826:	d007      	beq.n	800b838 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f06f 0201 	mvn.w	r2, #1
 800b830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f7f6 fc70 	bl	8002118 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d104      	bne.n	800b84c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d00c      	beq.n	800b866 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b852:	2b00      	cmp	r3, #0
 800b854:	d007      	beq.n	800b866 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b85e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f001 f867 	bl	800c934 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d00c      	beq.n	800b88a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b876:	2b00      	cmp	r3, #0
 800b878:	d007      	beq.n	800b88a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f001 f85f 	bl	800c948 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b890:	2b00      	cmp	r3, #0
 800b892:	d00c      	beq.n	800b8ae <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d007      	beq.n	800b8ae <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b8a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f000 fa12 	bl	800bcd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	f003 0320 	and.w	r3, r3, #32
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d00c      	beq.n	800b8d2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	f003 0320 	and.w	r3, r3, #32
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d007      	beq.n	800b8d2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f06f 0220 	mvn.w	r2, #32
 800b8ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f001 f827 	bl	800c920 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b8d2:	bf00      	nop
 800b8d4:	3710      	adds	r7, #16
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}
	...

0800b8dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b086      	sub	sp, #24
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	60f8      	str	r0, [r7, #12]
 800b8e4:	60b9      	str	r1, [r7, #8]
 800b8e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b8f2:	2b01      	cmp	r3, #1
 800b8f4:	d101      	bne.n	800b8fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b8f6:	2302      	movs	r3, #2
 800b8f8:	e0ff      	b.n	800bafa <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	2201      	movs	r2, #1
 800b8fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2b14      	cmp	r3, #20
 800b906:	f200 80f0 	bhi.w	800baea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b90a:	a201      	add	r2, pc, #4	@ (adr r2, 800b910 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b90c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b910:	0800b965 	.word	0x0800b965
 800b914:	0800baeb 	.word	0x0800baeb
 800b918:	0800baeb 	.word	0x0800baeb
 800b91c:	0800baeb 	.word	0x0800baeb
 800b920:	0800b9a5 	.word	0x0800b9a5
 800b924:	0800baeb 	.word	0x0800baeb
 800b928:	0800baeb 	.word	0x0800baeb
 800b92c:	0800baeb 	.word	0x0800baeb
 800b930:	0800b9e7 	.word	0x0800b9e7
 800b934:	0800baeb 	.word	0x0800baeb
 800b938:	0800baeb 	.word	0x0800baeb
 800b93c:	0800baeb 	.word	0x0800baeb
 800b940:	0800ba27 	.word	0x0800ba27
 800b944:	0800baeb 	.word	0x0800baeb
 800b948:	0800baeb 	.word	0x0800baeb
 800b94c:	0800baeb 	.word	0x0800baeb
 800b950:	0800ba69 	.word	0x0800ba69
 800b954:	0800baeb 	.word	0x0800baeb
 800b958:	0800baeb 	.word	0x0800baeb
 800b95c:	0800baeb 	.word	0x0800baeb
 800b960:	0800baa9 	.word	0x0800baa9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	68b9      	ldr	r1, [r7, #8]
 800b96a:	4618      	mov	r0, r3
 800b96c:	f000 fb3c 	bl	800bfe8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	699a      	ldr	r2, [r3, #24]
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	f042 0208 	orr.w	r2, r2, #8
 800b97e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	699a      	ldr	r2, [r3, #24]
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	f022 0204 	bic.w	r2, r2, #4
 800b98e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	6999      	ldr	r1, [r3, #24]
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	691a      	ldr	r2, [r3, #16]
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	430a      	orrs	r2, r1
 800b9a0:	619a      	str	r2, [r3, #24]
      break;
 800b9a2:	e0a5      	b.n	800baf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	68b9      	ldr	r1, [r7, #8]
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f000 fbac 	bl	800c108 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	699a      	ldr	r2, [r3, #24]
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b9be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	699a      	ldr	r2, [r3, #24]
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b9ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	6999      	ldr	r1, [r3, #24]
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	691b      	ldr	r3, [r3, #16]
 800b9da:	021a      	lsls	r2, r3, #8
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	430a      	orrs	r2, r1
 800b9e2:	619a      	str	r2, [r3, #24]
      break;
 800b9e4:	e084      	b.n	800baf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	68b9      	ldr	r1, [r7, #8]
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f000 fc15 	bl	800c21c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	69da      	ldr	r2, [r3, #28]
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	f042 0208 	orr.w	r2, r2, #8
 800ba00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	69da      	ldr	r2, [r3, #28]
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f022 0204 	bic.w	r2, r2, #4
 800ba10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	69d9      	ldr	r1, [r3, #28]
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	691a      	ldr	r2, [r3, #16]
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	430a      	orrs	r2, r1
 800ba22:	61da      	str	r2, [r3, #28]
      break;
 800ba24:	e064      	b.n	800baf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	68b9      	ldr	r1, [r7, #8]
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f000 fc7d 	bl	800c32c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	69da      	ldr	r2, [r3, #28]
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ba40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	69da      	ldr	r2, [r3, #28]
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ba50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	69d9      	ldr	r1, [r3, #28]
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	691b      	ldr	r3, [r3, #16]
 800ba5c:	021a      	lsls	r2, r3, #8
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	430a      	orrs	r2, r1
 800ba64:	61da      	str	r2, [r3, #28]
      break;
 800ba66:	e043      	b.n	800baf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	68b9      	ldr	r1, [r7, #8]
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f000 fcc6 	bl	800c400 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f042 0208 	orr.w	r2, r2, #8
 800ba82:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f022 0204 	bic.w	r2, r2, #4
 800ba92:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	691a      	ldr	r2, [r3, #16]
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	430a      	orrs	r2, r1
 800baa4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800baa6:	e023      	b.n	800baf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	68b9      	ldr	r1, [r7, #8]
 800baae:	4618      	mov	r0, r3
 800bab0:	f000 fd0a 	bl	800c4c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bac2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bad2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	691b      	ldr	r3, [r3, #16]
 800bade:	021a      	lsls	r2, r3, #8
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	430a      	orrs	r2, r1
 800bae6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800bae8:	e002      	b.n	800baf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800baea:	2301      	movs	r3, #1
 800baec:	75fb      	strb	r3, [r7, #23]
      break;
 800baee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2200      	movs	r2, #0
 800baf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800baf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3718      	adds	r7, #24
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}
 800bb02:	bf00      	nop

0800bb04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b084      	sub	sp, #16
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
 800bb0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bb18:	2b01      	cmp	r3, #1
 800bb1a:	d101      	bne.n	800bb20 <HAL_TIM_ConfigClockSource+0x1c>
 800bb1c:	2302      	movs	r3, #2
 800bb1e:	e0b6      	b.n	800bc8e <HAL_TIM_ConfigClockSource+0x18a>
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2201      	movs	r2, #1
 800bb24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2202      	movs	r2, #2
 800bb2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	689b      	ldr	r3, [r3, #8]
 800bb36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bb3e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800bb42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bb4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	68ba      	ldr	r2, [r7, #8]
 800bb52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bb5c:	d03e      	beq.n	800bbdc <HAL_TIM_ConfigClockSource+0xd8>
 800bb5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bb62:	f200 8087 	bhi.w	800bc74 <HAL_TIM_ConfigClockSource+0x170>
 800bb66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bb6a:	f000 8086 	beq.w	800bc7a <HAL_TIM_ConfigClockSource+0x176>
 800bb6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bb72:	d87f      	bhi.n	800bc74 <HAL_TIM_ConfigClockSource+0x170>
 800bb74:	2b70      	cmp	r3, #112	@ 0x70
 800bb76:	d01a      	beq.n	800bbae <HAL_TIM_ConfigClockSource+0xaa>
 800bb78:	2b70      	cmp	r3, #112	@ 0x70
 800bb7a:	d87b      	bhi.n	800bc74 <HAL_TIM_ConfigClockSource+0x170>
 800bb7c:	2b60      	cmp	r3, #96	@ 0x60
 800bb7e:	d050      	beq.n	800bc22 <HAL_TIM_ConfigClockSource+0x11e>
 800bb80:	2b60      	cmp	r3, #96	@ 0x60
 800bb82:	d877      	bhi.n	800bc74 <HAL_TIM_ConfigClockSource+0x170>
 800bb84:	2b50      	cmp	r3, #80	@ 0x50
 800bb86:	d03c      	beq.n	800bc02 <HAL_TIM_ConfigClockSource+0xfe>
 800bb88:	2b50      	cmp	r3, #80	@ 0x50
 800bb8a:	d873      	bhi.n	800bc74 <HAL_TIM_ConfigClockSource+0x170>
 800bb8c:	2b40      	cmp	r3, #64	@ 0x40
 800bb8e:	d058      	beq.n	800bc42 <HAL_TIM_ConfigClockSource+0x13e>
 800bb90:	2b40      	cmp	r3, #64	@ 0x40
 800bb92:	d86f      	bhi.n	800bc74 <HAL_TIM_ConfigClockSource+0x170>
 800bb94:	2b30      	cmp	r3, #48	@ 0x30
 800bb96:	d064      	beq.n	800bc62 <HAL_TIM_ConfigClockSource+0x15e>
 800bb98:	2b30      	cmp	r3, #48	@ 0x30
 800bb9a:	d86b      	bhi.n	800bc74 <HAL_TIM_ConfigClockSource+0x170>
 800bb9c:	2b20      	cmp	r3, #32
 800bb9e:	d060      	beq.n	800bc62 <HAL_TIM_ConfigClockSource+0x15e>
 800bba0:	2b20      	cmp	r3, #32
 800bba2:	d867      	bhi.n	800bc74 <HAL_TIM_ConfigClockSource+0x170>
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d05c      	beq.n	800bc62 <HAL_TIM_ConfigClockSource+0x15e>
 800bba8:	2b10      	cmp	r3, #16
 800bbaa:	d05a      	beq.n	800bc62 <HAL_TIM_ConfigClockSource+0x15e>
 800bbac:	e062      	b.n	800bc74 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bbbe:	f000 fd63 	bl	800c688 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	689b      	ldr	r3, [r3, #8]
 800bbc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bbca:	68bb      	ldr	r3, [r7, #8]
 800bbcc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800bbd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	68ba      	ldr	r2, [r7, #8]
 800bbd8:	609a      	str	r2, [r3, #8]
      break;
 800bbda:	e04f      	b.n	800bc7c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bbec:	f000 fd4c 	bl	800c688 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	689a      	ldr	r2, [r3, #8]
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bbfe:	609a      	str	r2, [r3, #8]
      break;
 800bc00:	e03c      	b.n	800bc7c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc0e:	461a      	mov	r2, r3
 800bc10:	f000 fcc0 	bl	800c594 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	2150      	movs	r1, #80	@ 0x50
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f000 fd19 	bl	800c652 <TIM_ITRx_SetConfig>
      break;
 800bc20:	e02c      	b.n	800bc7c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bc2e:	461a      	mov	r2, r3
 800bc30:	f000 fcdf 	bl	800c5f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	2160      	movs	r1, #96	@ 0x60
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f000 fd09 	bl	800c652 <TIM_ITRx_SetConfig>
      break;
 800bc40:	e01c      	b.n	800bc7c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc4e:	461a      	mov	r2, r3
 800bc50:	f000 fca0 	bl	800c594 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	2140      	movs	r1, #64	@ 0x40
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f000 fcf9 	bl	800c652 <TIM_ITRx_SetConfig>
      break;
 800bc60:	e00c      	b.n	800bc7c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681a      	ldr	r2, [r3, #0]
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	4619      	mov	r1, r3
 800bc6c:	4610      	mov	r0, r2
 800bc6e:	f000 fcf0 	bl	800c652 <TIM_ITRx_SetConfig>
      break;
 800bc72:	e003      	b.n	800bc7c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800bc74:	2301      	movs	r3, #1
 800bc76:	73fb      	strb	r3, [r7, #15]
      break;
 800bc78:	e000      	b.n	800bc7c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800bc7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2201      	movs	r2, #1
 800bc80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2200      	movs	r2, #0
 800bc88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bc8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	3710      	adds	r7, #16
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}

0800bc96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bc96:	b480      	push	{r7}
 800bc98:	b083      	sub	sp, #12
 800bc9a:	af00      	add	r7, sp, #0
 800bc9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bc9e:	bf00      	nop
 800bca0:	370c      	adds	r7, #12
 800bca2:	46bd      	mov	sp, r7
 800bca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca8:	4770      	bx	lr

0800bcaa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bcaa:	b480      	push	{r7}
 800bcac:	b083      	sub	sp, #12
 800bcae:	af00      	add	r7, sp, #0
 800bcb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bcb2:	bf00      	nop
 800bcb4:	370c      	adds	r7, #12
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbc:	4770      	bx	lr

0800bcbe <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800bcbe:	b480      	push	{r7}
 800bcc0:	b083      	sub	sp, #12
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800bcc6:	bf00      	nop
 800bcc8:	370c      	adds	r7, #12
 800bcca:	46bd      	mov	sp, r7
 800bccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd0:	4770      	bx	lr

0800bcd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bcd2:	b480      	push	{r7}
 800bcd4:	b083      	sub	sp, #12
 800bcd6:	af00      	add	r7, sp, #0
 800bcd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bcda:	bf00      	nop
 800bcdc:	370c      	adds	r7, #12
 800bcde:	46bd      	mov	sp, r7
 800bce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce4:	4770      	bx	lr

0800bce6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800bce6:	b480      	push	{r7}
 800bce8:	b083      	sub	sp, #12
 800bcea:	af00      	add	r7, sp, #0
 800bcec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800bcee:	bf00      	nop
 800bcf0:	370c      	adds	r7, #12
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf8:	4770      	bx	lr

0800bcfa <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800bcfa:	b580      	push	{r7, lr}
 800bcfc:	b084      	sub	sp, #16
 800bcfe:	af00      	add	r7, sp, #0
 800bd00:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd06:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd0c:	687a      	ldr	r2, [r7, #4]
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	d107      	bne.n	800bd22 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	2201      	movs	r2, #1
 800bd16:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bd20:	e02a      	b.n	800bd78 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd26:	687a      	ldr	r2, [r7, #4]
 800bd28:	429a      	cmp	r2, r3
 800bd2a:	d107      	bne.n	800bd3c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	2202      	movs	r2, #2
 800bd30:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	2201      	movs	r2, #1
 800bd36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bd3a:	e01d      	b.n	800bd78 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd40:	687a      	ldr	r2, [r7, #4]
 800bd42:	429a      	cmp	r2, r3
 800bd44:	d107      	bne.n	800bd56 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	2204      	movs	r2, #4
 800bd4a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	2201      	movs	r2, #1
 800bd50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bd54:	e010      	b.n	800bd78 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd5a:	687a      	ldr	r2, [r7, #4]
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d107      	bne.n	800bd70 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	2208      	movs	r2, #8
 800bd64:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2201      	movs	r2, #1
 800bd6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bd6e:	e003      	b.n	800bd78 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	2201      	movs	r2, #1
 800bd74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800bd78:	68f8      	ldr	r0, [r7, #12]
 800bd7a:	f7ff ffb4 	bl	800bce6 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	2200      	movs	r2, #0
 800bd82:	771a      	strb	r2, [r3, #28]
}
 800bd84:	bf00      	nop
 800bd86:	3710      	adds	r7, #16
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}

0800bd8c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b084      	sub	sp, #16
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd98:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd9e:	687a      	ldr	r2, [r7, #4]
 800bda0:	429a      	cmp	r2, r3
 800bda2:	d10b      	bne.n	800bdbc <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	2201      	movs	r2, #1
 800bda8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	69db      	ldr	r3, [r3, #28]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d136      	bne.n	800be20 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	2201      	movs	r2, #1
 800bdb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bdba:	e031      	b.n	800be20 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdc0:	687a      	ldr	r2, [r7, #4]
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	d10b      	bne.n	800bdde <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	2202      	movs	r2, #2
 800bdca:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	69db      	ldr	r3, [r3, #28]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d125      	bne.n	800be20 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	2201      	movs	r2, #1
 800bdd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bddc:	e020      	b.n	800be20 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bde2:	687a      	ldr	r2, [r7, #4]
 800bde4:	429a      	cmp	r2, r3
 800bde6:	d10b      	bne.n	800be00 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	2204      	movs	r2, #4
 800bdec:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	69db      	ldr	r3, [r3, #28]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d114      	bne.n	800be20 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	2201      	movs	r2, #1
 800bdfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bdfe:	e00f      	b.n	800be20 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be04:	687a      	ldr	r2, [r7, #4]
 800be06:	429a      	cmp	r2, r3
 800be08:	d10a      	bne.n	800be20 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	2208      	movs	r2, #8
 800be0e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	69db      	ldr	r3, [r3, #28]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d103      	bne.n	800be20 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	2201      	movs	r2, #1
 800be1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be20:	68f8      	ldr	r0, [r7, #12]
 800be22:	f7f6 f8f3 	bl	800200c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	2200      	movs	r2, #0
 800be2a:	771a      	strb	r2, [r3, #28]
}
 800be2c:	bf00      	nop
 800be2e:	3710      	adds	r7, #16
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}

0800be34 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b084      	sub	sp, #16
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be40:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be46:	687a      	ldr	r2, [r7, #4]
 800be48:	429a      	cmp	r2, r3
 800be4a:	d103      	bne.n	800be54 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	2201      	movs	r2, #1
 800be50:	771a      	strb	r2, [r3, #28]
 800be52:	e019      	b.n	800be88 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be58:	687a      	ldr	r2, [r7, #4]
 800be5a:	429a      	cmp	r2, r3
 800be5c:	d103      	bne.n	800be66 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	2202      	movs	r2, #2
 800be62:	771a      	strb	r2, [r3, #28]
 800be64:	e010      	b.n	800be88 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be6a:	687a      	ldr	r2, [r7, #4]
 800be6c:	429a      	cmp	r2, r3
 800be6e:	d103      	bne.n	800be78 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	2204      	movs	r2, #4
 800be74:	771a      	strb	r2, [r3, #28]
 800be76:	e007      	b.n	800be88 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be7c:	687a      	ldr	r2, [r7, #4]
 800be7e:	429a      	cmp	r2, r3
 800be80:	d102      	bne.n	800be88 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	2208      	movs	r2, #8
 800be86:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800be88:	68f8      	ldr	r0, [r7, #12]
 800be8a:	f7ff ff18 	bl	800bcbe <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	2200      	movs	r2, #0
 800be92:	771a      	strb	r2, [r3, #28]
}
 800be94:	bf00      	nop
 800be96:	3710      	adds	r7, #16
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}

0800be9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b085      	sub	sp, #20
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	4a46      	ldr	r2, [pc, #280]	@ (800bfc8 <TIM_Base_SetConfig+0x12c>)
 800beb0:	4293      	cmp	r3, r2
 800beb2:	d013      	beq.n	800bedc <TIM_Base_SetConfig+0x40>
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800beba:	d00f      	beq.n	800bedc <TIM_Base_SetConfig+0x40>
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	4a43      	ldr	r2, [pc, #268]	@ (800bfcc <TIM_Base_SetConfig+0x130>)
 800bec0:	4293      	cmp	r3, r2
 800bec2:	d00b      	beq.n	800bedc <TIM_Base_SetConfig+0x40>
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	4a42      	ldr	r2, [pc, #264]	@ (800bfd0 <TIM_Base_SetConfig+0x134>)
 800bec8:	4293      	cmp	r3, r2
 800beca:	d007      	beq.n	800bedc <TIM_Base_SetConfig+0x40>
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	4a41      	ldr	r2, [pc, #260]	@ (800bfd4 <TIM_Base_SetConfig+0x138>)
 800bed0:	4293      	cmp	r3, r2
 800bed2:	d003      	beq.n	800bedc <TIM_Base_SetConfig+0x40>
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	4a40      	ldr	r2, [pc, #256]	@ (800bfd8 <TIM_Base_SetConfig+0x13c>)
 800bed8:	4293      	cmp	r3, r2
 800beda:	d108      	bne.n	800beee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bee2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	685b      	ldr	r3, [r3, #4]
 800bee8:	68fa      	ldr	r2, [r7, #12]
 800beea:	4313      	orrs	r3, r2
 800beec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	4a35      	ldr	r2, [pc, #212]	@ (800bfc8 <TIM_Base_SetConfig+0x12c>)
 800bef2:	4293      	cmp	r3, r2
 800bef4:	d01f      	beq.n	800bf36 <TIM_Base_SetConfig+0x9a>
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800befc:	d01b      	beq.n	800bf36 <TIM_Base_SetConfig+0x9a>
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	4a32      	ldr	r2, [pc, #200]	@ (800bfcc <TIM_Base_SetConfig+0x130>)
 800bf02:	4293      	cmp	r3, r2
 800bf04:	d017      	beq.n	800bf36 <TIM_Base_SetConfig+0x9a>
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	4a31      	ldr	r2, [pc, #196]	@ (800bfd0 <TIM_Base_SetConfig+0x134>)
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	d013      	beq.n	800bf36 <TIM_Base_SetConfig+0x9a>
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	4a30      	ldr	r2, [pc, #192]	@ (800bfd4 <TIM_Base_SetConfig+0x138>)
 800bf12:	4293      	cmp	r3, r2
 800bf14:	d00f      	beq.n	800bf36 <TIM_Base_SetConfig+0x9a>
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	4a2f      	ldr	r2, [pc, #188]	@ (800bfd8 <TIM_Base_SetConfig+0x13c>)
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	d00b      	beq.n	800bf36 <TIM_Base_SetConfig+0x9a>
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	4a2e      	ldr	r2, [pc, #184]	@ (800bfdc <TIM_Base_SetConfig+0x140>)
 800bf22:	4293      	cmp	r3, r2
 800bf24:	d007      	beq.n	800bf36 <TIM_Base_SetConfig+0x9a>
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	4a2d      	ldr	r2, [pc, #180]	@ (800bfe0 <TIM_Base_SetConfig+0x144>)
 800bf2a:	4293      	cmp	r3, r2
 800bf2c:	d003      	beq.n	800bf36 <TIM_Base_SetConfig+0x9a>
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	4a2c      	ldr	r2, [pc, #176]	@ (800bfe4 <TIM_Base_SetConfig+0x148>)
 800bf32:	4293      	cmp	r3, r2
 800bf34:	d108      	bne.n	800bf48 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bf3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	68db      	ldr	r3, [r3, #12]
 800bf42:	68fa      	ldr	r2, [r7, #12]
 800bf44:	4313      	orrs	r3, r2
 800bf46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	695b      	ldr	r3, [r3, #20]
 800bf52:	4313      	orrs	r3, r2
 800bf54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	68fa      	ldr	r2, [r7, #12]
 800bf5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	689a      	ldr	r2, [r3, #8]
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	681a      	ldr	r2, [r3, #0]
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	4a16      	ldr	r2, [pc, #88]	@ (800bfc8 <TIM_Base_SetConfig+0x12c>)
 800bf70:	4293      	cmp	r3, r2
 800bf72:	d00f      	beq.n	800bf94 <TIM_Base_SetConfig+0xf8>
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	4a18      	ldr	r2, [pc, #96]	@ (800bfd8 <TIM_Base_SetConfig+0x13c>)
 800bf78:	4293      	cmp	r3, r2
 800bf7a:	d00b      	beq.n	800bf94 <TIM_Base_SetConfig+0xf8>
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	4a17      	ldr	r2, [pc, #92]	@ (800bfdc <TIM_Base_SetConfig+0x140>)
 800bf80:	4293      	cmp	r3, r2
 800bf82:	d007      	beq.n	800bf94 <TIM_Base_SetConfig+0xf8>
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	4a16      	ldr	r2, [pc, #88]	@ (800bfe0 <TIM_Base_SetConfig+0x144>)
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	d003      	beq.n	800bf94 <TIM_Base_SetConfig+0xf8>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	4a15      	ldr	r2, [pc, #84]	@ (800bfe4 <TIM_Base_SetConfig+0x148>)
 800bf90:	4293      	cmp	r3, r2
 800bf92:	d103      	bne.n	800bf9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	691a      	ldr	r2, [r3, #16]
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2201      	movs	r2, #1
 800bfa0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	691b      	ldr	r3, [r3, #16]
 800bfa6:	f003 0301 	and.w	r3, r3, #1
 800bfaa:	2b01      	cmp	r3, #1
 800bfac:	d105      	bne.n	800bfba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	691b      	ldr	r3, [r3, #16]
 800bfb2:	f023 0201 	bic.w	r2, r3, #1
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	611a      	str	r2, [r3, #16]
  }
}
 800bfba:	bf00      	nop
 800bfbc:	3714      	adds	r7, #20
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc4:	4770      	bx	lr
 800bfc6:	bf00      	nop
 800bfc8:	40012c00 	.word	0x40012c00
 800bfcc:	40000400 	.word	0x40000400
 800bfd0:	40000800 	.word	0x40000800
 800bfd4:	40000c00 	.word	0x40000c00
 800bfd8:	40013400 	.word	0x40013400
 800bfdc:	40014000 	.word	0x40014000
 800bfe0:	40014400 	.word	0x40014400
 800bfe4:	40014800 	.word	0x40014800

0800bfe8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bfe8:	b480      	push	{r7}
 800bfea:	b087      	sub	sp, #28
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
 800bff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	6a1b      	ldr	r3, [r3, #32]
 800bff6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6a1b      	ldr	r3, [r3, #32]
 800bffc:	f023 0201 	bic.w	r2, r3, #1
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	685b      	ldr	r3, [r3, #4]
 800c008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	699b      	ldr	r3, [r3, #24]
 800c00e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c016:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c01a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	f023 0303 	bic.w	r3, r3, #3
 800c022:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	68fa      	ldr	r2, [r7, #12]
 800c02a:	4313      	orrs	r3, r2
 800c02c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	f023 0302 	bic.w	r3, r3, #2
 800c034:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	689b      	ldr	r3, [r3, #8]
 800c03a:	697a      	ldr	r2, [r7, #20]
 800c03c:	4313      	orrs	r3, r2
 800c03e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	4a2c      	ldr	r2, [pc, #176]	@ (800c0f4 <TIM_OC1_SetConfig+0x10c>)
 800c044:	4293      	cmp	r3, r2
 800c046:	d00f      	beq.n	800c068 <TIM_OC1_SetConfig+0x80>
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	4a2b      	ldr	r2, [pc, #172]	@ (800c0f8 <TIM_OC1_SetConfig+0x110>)
 800c04c:	4293      	cmp	r3, r2
 800c04e:	d00b      	beq.n	800c068 <TIM_OC1_SetConfig+0x80>
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	4a2a      	ldr	r2, [pc, #168]	@ (800c0fc <TIM_OC1_SetConfig+0x114>)
 800c054:	4293      	cmp	r3, r2
 800c056:	d007      	beq.n	800c068 <TIM_OC1_SetConfig+0x80>
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	4a29      	ldr	r2, [pc, #164]	@ (800c100 <TIM_OC1_SetConfig+0x118>)
 800c05c:	4293      	cmp	r3, r2
 800c05e:	d003      	beq.n	800c068 <TIM_OC1_SetConfig+0x80>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	4a28      	ldr	r2, [pc, #160]	@ (800c104 <TIM_OC1_SetConfig+0x11c>)
 800c064:	4293      	cmp	r3, r2
 800c066:	d10c      	bne.n	800c082 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	f023 0308 	bic.w	r3, r3, #8
 800c06e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	68db      	ldr	r3, [r3, #12]
 800c074:	697a      	ldr	r2, [r7, #20]
 800c076:	4313      	orrs	r3, r2
 800c078:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c07a:	697b      	ldr	r3, [r7, #20]
 800c07c:	f023 0304 	bic.w	r3, r3, #4
 800c080:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	4a1b      	ldr	r2, [pc, #108]	@ (800c0f4 <TIM_OC1_SetConfig+0x10c>)
 800c086:	4293      	cmp	r3, r2
 800c088:	d00f      	beq.n	800c0aa <TIM_OC1_SetConfig+0xc2>
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	4a1a      	ldr	r2, [pc, #104]	@ (800c0f8 <TIM_OC1_SetConfig+0x110>)
 800c08e:	4293      	cmp	r3, r2
 800c090:	d00b      	beq.n	800c0aa <TIM_OC1_SetConfig+0xc2>
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	4a19      	ldr	r2, [pc, #100]	@ (800c0fc <TIM_OC1_SetConfig+0x114>)
 800c096:	4293      	cmp	r3, r2
 800c098:	d007      	beq.n	800c0aa <TIM_OC1_SetConfig+0xc2>
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	4a18      	ldr	r2, [pc, #96]	@ (800c100 <TIM_OC1_SetConfig+0x118>)
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	d003      	beq.n	800c0aa <TIM_OC1_SetConfig+0xc2>
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	4a17      	ldr	r2, [pc, #92]	@ (800c104 <TIM_OC1_SetConfig+0x11c>)
 800c0a6:	4293      	cmp	r3, r2
 800c0a8:	d111      	bne.n	800c0ce <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c0aa:	693b      	ldr	r3, [r7, #16]
 800c0ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c0b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c0b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	695b      	ldr	r3, [r3, #20]
 800c0be:	693a      	ldr	r2, [r7, #16]
 800c0c0:	4313      	orrs	r3, r2
 800c0c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	699b      	ldr	r3, [r3, #24]
 800c0c8:	693a      	ldr	r2, [r7, #16]
 800c0ca:	4313      	orrs	r3, r2
 800c0cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	693a      	ldr	r2, [r7, #16]
 800c0d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	68fa      	ldr	r2, [r7, #12]
 800c0d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	685a      	ldr	r2, [r3, #4]
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	697a      	ldr	r2, [r7, #20]
 800c0e6:	621a      	str	r2, [r3, #32]
}
 800c0e8:	bf00      	nop
 800c0ea:	371c      	adds	r7, #28
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f2:	4770      	bx	lr
 800c0f4:	40012c00 	.word	0x40012c00
 800c0f8:	40013400 	.word	0x40013400
 800c0fc:	40014000 	.word	0x40014000
 800c100:	40014400 	.word	0x40014400
 800c104:	40014800 	.word	0x40014800

0800c108 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c108:	b480      	push	{r7}
 800c10a:	b087      	sub	sp, #28
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
 800c110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6a1b      	ldr	r3, [r3, #32]
 800c116:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6a1b      	ldr	r3, [r3, #32]
 800c11c:	f023 0210 	bic.w	r2, r3, #16
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	685b      	ldr	r3, [r3, #4]
 800c128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	699b      	ldr	r3, [r3, #24]
 800c12e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c136:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c13a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c142:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	021b      	lsls	r3, r3, #8
 800c14a:	68fa      	ldr	r2, [r7, #12]
 800c14c:	4313      	orrs	r3, r2
 800c14e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	f023 0320 	bic.w	r3, r3, #32
 800c156:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	689b      	ldr	r3, [r3, #8]
 800c15c:	011b      	lsls	r3, r3, #4
 800c15e:	697a      	ldr	r2, [r7, #20]
 800c160:	4313      	orrs	r3, r2
 800c162:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	4a28      	ldr	r2, [pc, #160]	@ (800c208 <TIM_OC2_SetConfig+0x100>)
 800c168:	4293      	cmp	r3, r2
 800c16a:	d003      	beq.n	800c174 <TIM_OC2_SetConfig+0x6c>
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	4a27      	ldr	r2, [pc, #156]	@ (800c20c <TIM_OC2_SetConfig+0x104>)
 800c170:	4293      	cmp	r3, r2
 800c172:	d10d      	bne.n	800c190 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c17a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	68db      	ldr	r3, [r3, #12]
 800c180:	011b      	lsls	r3, r3, #4
 800c182:	697a      	ldr	r2, [r7, #20]
 800c184:	4313      	orrs	r3, r2
 800c186:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c188:	697b      	ldr	r3, [r7, #20]
 800c18a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c18e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	4a1d      	ldr	r2, [pc, #116]	@ (800c208 <TIM_OC2_SetConfig+0x100>)
 800c194:	4293      	cmp	r3, r2
 800c196:	d00f      	beq.n	800c1b8 <TIM_OC2_SetConfig+0xb0>
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	4a1c      	ldr	r2, [pc, #112]	@ (800c20c <TIM_OC2_SetConfig+0x104>)
 800c19c:	4293      	cmp	r3, r2
 800c19e:	d00b      	beq.n	800c1b8 <TIM_OC2_SetConfig+0xb0>
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	4a1b      	ldr	r2, [pc, #108]	@ (800c210 <TIM_OC2_SetConfig+0x108>)
 800c1a4:	4293      	cmp	r3, r2
 800c1a6:	d007      	beq.n	800c1b8 <TIM_OC2_SetConfig+0xb0>
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	4a1a      	ldr	r2, [pc, #104]	@ (800c214 <TIM_OC2_SetConfig+0x10c>)
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	d003      	beq.n	800c1b8 <TIM_OC2_SetConfig+0xb0>
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	4a19      	ldr	r2, [pc, #100]	@ (800c218 <TIM_OC2_SetConfig+0x110>)
 800c1b4:	4293      	cmp	r3, r2
 800c1b6:	d113      	bne.n	800c1e0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c1be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c1c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	695b      	ldr	r3, [r3, #20]
 800c1cc:	009b      	lsls	r3, r3, #2
 800c1ce:	693a      	ldr	r2, [r7, #16]
 800c1d0:	4313      	orrs	r3, r2
 800c1d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	699b      	ldr	r3, [r3, #24]
 800c1d8:	009b      	lsls	r3, r3, #2
 800c1da:	693a      	ldr	r2, [r7, #16]
 800c1dc:	4313      	orrs	r3, r2
 800c1de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	693a      	ldr	r2, [r7, #16]
 800c1e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	68fa      	ldr	r2, [r7, #12]
 800c1ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	685a      	ldr	r2, [r3, #4]
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	697a      	ldr	r2, [r7, #20]
 800c1f8:	621a      	str	r2, [r3, #32]
}
 800c1fa:	bf00      	nop
 800c1fc:	371c      	adds	r7, #28
 800c1fe:	46bd      	mov	sp, r7
 800c200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c204:	4770      	bx	lr
 800c206:	bf00      	nop
 800c208:	40012c00 	.word	0x40012c00
 800c20c:	40013400 	.word	0x40013400
 800c210:	40014000 	.word	0x40014000
 800c214:	40014400 	.word	0x40014400
 800c218:	40014800 	.word	0x40014800

0800c21c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c21c:	b480      	push	{r7}
 800c21e:	b087      	sub	sp, #28
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
 800c224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	6a1b      	ldr	r3, [r3, #32]
 800c22a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6a1b      	ldr	r3, [r3, #32]
 800c230:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	685b      	ldr	r3, [r3, #4]
 800c23c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	69db      	ldr	r3, [r3, #28]
 800c242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c24a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c24e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	f023 0303 	bic.w	r3, r3, #3
 800c256:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	68fa      	ldr	r2, [r7, #12]
 800c25e:	4313      	orrs	r3, r2
 800c260:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c268:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	689b      	ldr	r3, [r3, #8]
 800c26e:	021b      	lsls	r3, r3, #8
 800c270:	697a      	ldr	r2, [r7, #20]
 800c272:	4313      	orrs	r3, r2
 800c274:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	4a27      	ldr	r2, [pc, #156]	@ (800c318 <TIM_OC3_SetConfig+0xfc>)
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d003      	beq.n	800c286 <TIM_OC3_SetConfig+0x6a>
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	4a26      	ldr	r2, [pc, #152]	@ (800c31c <TIM_OC3_SetConfig+0x100>)
 800c282:	4293      	cmp	r3, r2
 800c284:	d10d      	bne.n	800c2a2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c286:	697b      	ldr	r3, [r7, #20]
 800c288:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c28c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	68db      	ldr	r3, [r3, #12]
 800c292:	021b      	lsls	r3, r3, #8
 800c294:	697a      	ldr	r2, [r7, #20]
 800c296:	4313      	orrs	r3, r2
 800c298:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c2a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	4a1c      	ldr	r2, [pc, #112]	@ (800c318 <TIM_OC3_SetConfig+0xfc>)
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	d00f      	beq.n	800c2ca <TIM_OC3_SetConfig+0xae>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	4a1b      	ldr	r2, [pc, #108]	@ (800c31c <TIM_OC3_SetConfig+0x100>)
 800c2ae:	4293      	cmp	r3, r2
 800c2b0:	d00b      	beq.n	800c2ca <TIM_OC3_SetConfig+0xae>
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	4a1a      	ldr	r2, [pc, #104]	@ (800c320 <TIM_OC3_SetConfig+0x104>)
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	d007      	beq.n	800c2ca <TIM_OC3_SetConfig+0xae>
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	4a19      	ldr	r2, [pc, #100]	@ (800c324 <TIM_OC3_SetConfig+0x108>)
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	d003      	beq.n	800c2ca <TIM_OC3_SetConfig+0xae>
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	4a18      	ldr	r2, [pc, #96]	@ (800c328 <TIM_OC3_SetConfig+0x10c>)
 800c2c6:	4293      	cmp	r3, r2
 800c2c8:	d113      	bne.n	800c2f2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c2d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c2d2:	693b      	ldr	r3, [r7, #16]
 800c2d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c2d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	695b      	ldr	r3, [r3, #20]
 800c2de:	011b      	lsls	r3, r3, #4
 800c2e0:	693a      	ldr	r2, [r7, #16]
 800c2e2:	4313      	orrs	r3, r2
 800c2e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	699b      	ldr	r3, [r3, #24]
 800c2ea:	011b      	lsls	r3, r3, #4
 800c2ec:	693a      	ldr	r2, [r7, #16]
 800c2ee:	4313      	orrs	r3, r2
 800c2f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	693a      	ldr	r2, [r7, #16]
 800c2f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	68fa      	ldr	r2, [r7, #12]
 800c2fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	685a      	ldr	r2, [r3, #4]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	697a      	ldr	r2, [r7, #20]
 800c30a:	621a      	str	r2, [r3, #32]
}
 800c30c:	bf00      	nop
 800c30e:	371c      	adds	r7, #28
 800c310:	46bd      	mov	sp, r7
 800c312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c316:	4770      	bx	lr
 800c318:	40012c00 	.word	0x40012c00
 800c31c:	40013400 	.word	0x40013400
 800c320:	40014000 	.word	0x40014000
 800c324:	40014400 	.word	0x40014400
 800c328:	40014800 	.word	0x40014800

0800c32c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c32c:	b480      	push	{r7}
 800c32e:	b087      	sub	sp, #28
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
 800c334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	6a1b      	ldr	r3, [r3, #32]
 800c33a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	6a1b      	ldr	r3, [r3, #32]
 800c340:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	685b      	ldr	r3, [r3, #4]
 800c34c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	69db      	ldr	r3, [r3, #28]
 800c352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c35a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c35e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c366:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	021b      	lsls	r3, r3, #8
 800c36e:	68fa      	ldr	r2, [r7, #12]
 800c370:	4313      	orrs	r3, r2
 800c372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c374:	693b      	ldr	r3, [r7, #16]
 800c376:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c37a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	689b      	ldr	r3, [r3, #8]
 800c380:	031b      	lsls	r3, r3, #12
 800c382:	693a      	ldr	r2, [r7, #16]
 800c384:	4313      	orrs	r3, r2
 800c386:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	4a18      	ldr	r2, [pc, #96]	@ (800c3ec <TIM_OC4_SetConfig+0xc0>)
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d00f      	beq.n	800c3b0 <TIM_OC4_SetConfig+0x84>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	4a17      	ldr	r2, [pc, #92]	@ (800c3f0 <TIM_OC4_SetConfig+0xc4>)
 800c394:	4293      	cmp	r3, r2
 800c396:	d00b      	beq.n	800c3b0 <TIM_OC4_SetConfig+0x84>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	4a16      	ldr	r2, [pc, #88]	@ (800c3f4 <TIM_OC4_SetConfig+0xc8>)
 800c39c:	4293      	cmp	r3, r2
 800c39e:	d007      	beq.n	800c3b0 <TIM_OC4_SetConfig+0x84>
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	4a15      	ldr	r2, [pc, #84]	@ (800c3f8 <TIM_OC4_SetConfig+0xcc>)
 800c3a4:	4293      	cmp	r3, r2
 800c3a6:	d003      	beq.n	800c3b0 <TIM_OC4_SetConfig+0x84>
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	4a14      	ldr	r2, [pc, #80]	@ (800c3fc <TIM_OC4_SetConfig+0xd0>)
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d109      	bne.n	800c3c4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c3b0:	697b      	ldr	r3, [r7, #20]
 800c3b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c3b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	695b      	ldr	r3, [r3, #20]
 800c3bc:	019b      	lsls	r3, r3, #6
 800c3be:	697a      	ldr	r2, [r7, #20]
 800c3c0:	4313      	orrs	r3, r2
 800c3c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	697a      	ldr	r2, [r7, #20]
 800c3c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	68fa      	ldr	r2, [r7, #12]
 800c3ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	685a      	ldr	r2, [r3, #4]
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	693a      	ldr	r2, [r7, #16]
 800c3dc:	621a      	str	r2, [r3, #32]
}
 800c3de:	bf00      	nop
 800c3e0:	371c      	adds	r7, #28
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e8:	4770      	bx	lr
 800c3ea:	bf00      	nop
 800c3ec:	40012c00 	.word	0x40012c00
 800c3f0:	40013400 	.word	0x40013400
 800c3f4:	40014000 	.word	0x40014000
 800c3f8:	40014400 	.word	0x40014400
 800c3fc:	40014800 	.word	0x40014800

0800c400 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c400:	b480      	push	{r7}
 800c402:	b087      	sub	sp, #28
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
 800c408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6a1b      	ldr	r3, [r3, #32]
 800c40e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	6a1b      	ldr	r3, [r3, #32]
 800c414:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	685b      	ldr	r3, [r3, #4]
 800c420:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c42e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c432:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	68fa      	ldr	r2, [r7, #12]
 800c43a:	4313      	orrs	r3, r2
 800c43c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c43e:	693b      	ldr	r3, [r7, #16]
 800c440:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c444:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	689b      	ldr	r3, [r3, #8]
 800c44a:	041b      	lsls	r3, r3, #16
 800c44c:	693a      	ldr	r2, [r7, #16]
 800c44e:	4313      	orrs	r3, r2
 800c450:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	4a17      	ldr	r2, [pc, #92]	@ (800c4b4 <TIM_OC5_SetConfig+0xb4>)
 800c456:	4293      	cmp	r3, r2
 800c458:	d00f      	beq.n	800c47a <TIM_OC5_SetConfig+0x7a>
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	4a16      	ldr	r2, [pc, #88]	@ (800c4b8 <TIM_OC5_SetConfig+0xb8>)
 800c45e:	4293      	cmp	r3, r2
 800c460:	d00b      	beq.n	800c47a <TIM_OC5_SetConfig+0x7a>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	4a15      	ldr	r2, [pc, #84]	@ (800c4bc <TIM_OC5_SetConfig+0xbc>)
 800c466:	4293      	cmp	r3, r2
 800c468:	d007      	beq.n	800c47a <TIM_OC5_SetConfig+0x7a>
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	4a14      	ldr	r2, [pc, #80]	@ (800c4c0 <TIM_OC5_SetConfig+0xc0>)
 800c46e:	4293      	cmp	r3, r2
 800c470:	d003      	beq.n	800c47a <TIM_OC5_SetConfig+0x7a>
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	4a13      	ldr	r2, [pc, #76]	@ (800c4c4 <TIM_OC5_SetConfig+0xc4>)
 800c476:	4293      	cmp	r3, r2
 800c478:	d109      	bne.n	800c48e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c480:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	695b      	ldr	r3, [r3, #20]
 800c486:	021b      	lsls	r3, r3, #8
 800c488:	697a      	ldr	r2, [r7, #20]
 800c48a:	4313      	orrs	r3, r2
 800c48c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	697a      	ldr	r2, [r7, #20]
 800c492:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	68fa      	ldr	r2, [r7, #12]
 800c498:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	685a      	ldr	r2, [r3, #4]
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	693a      	ldr	r2, [r7, #16]
 800c4a6:	621a      	str	r2, [r3, #32]
}
 800c4a8:	bf00      	nop
 800c4aa:	371c      	adds	r7, #28
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b2:	4770      	bx	lr
 800c4b4:	40012c00 	.word	0x40012c00
 800c4b8:	40013400 	.word	0x40013400
 800c4bc:	40014000 	.word	0x40014000
 800c4c0:	40014400 	.word	0x40014400
 800c4c4:	40014800 	.word	0x40014800

0800c4c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c4c8:	b480      	push	{r7}
 800c4ca:	b087      	sub	sp, #28
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
 800c4d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6a1b      	ldr	r3, [r3, #32]
 800c4d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6a1b      	ldr	r3, [r3, #32]
 800c4dc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	685b      	ldr	r3, [r3, #4]
 800c4e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c4f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c4fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	021b      	lsls	r3, r3, #8
 800c502:	68fa      	ldr	r2, [r7, #12]
 800c504:	4313      	orrs	r3, r2
 800c506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c50e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	689b      	ldr	r3, [r3, #8]
 800c514:	051b      	lsls	r3, r3, #20
 800c516:	693a      	ldr	r2, [r7, #16]
 800c518:	4313      	orrs	r3, r2
 800c51a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	4a18      	ldr	r2, [pc, #96]	@ (800c580 <TIM_OC6_SetConfig+0xb8>)
 800c520:	4293      	cmp	r3, r2
 800c522:	d00f      	beq.n	800c544 <TIM_OC6_SetConfig+0x7c>
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	4a17      	ldr	r2, [pc, #92]	@ (800c584 <TIM_OC6_SetConfig+0xbc>)
 800c528:	4293      	cmp	r3, r2
 800c52a:	d00b      	beq.n	800c544 <TIM_OC6_SetConfig+0x7c>
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	4a16      	ldr	r2, [pc, #88]	@ (800c588 <TIM_OC6_SetConfig+0xc0>)
 800c530:	4293      	cmp	r3, r2
 800c532:	d007      	beq.n	800c544 <TIM_OC6_SetConfig+0x7c>
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	4a15      	ldr	r2, [pc, #84]	@ (800c58c <TIM_OC6_SetConfig+0xc4>)
 800c538:	4293      	cmp	r3, r2
 800c53a:	d003      	beq.n	800c544 <TIM_OC6_SetConfig+0x7c>
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	4a14      	ldr	r2, [pc, #80]	@ (800c590 <TIM_OC6_SetConfig+0xc8>)
 800c540:	4293      	cmp	r3, r2
 800c542:	d109      	bne.n	800c558 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c54a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	695b      	ldr	r3, [r3, #20]
 800c550:	029b      	lsls	r3, r3, #10
 800c552:	697a      	ldr	r2, [r7, #20]
 800c554:	4313      	orrs	r3, r2
 800c556:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	697a      	ldr	r2, [r7, #20]
 800c55c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	68fa      	ldr	r2, [r7, #12]
 800c562:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	685a      	ldr	r2, [r3, #4]
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	693a      	ldr	r2, [r7, #16]
 800c570:	621a      	str	r2, [r3, #32]
}
 800c572:	bf00      	nop
 800c574:	371c      	adds	r7, #28
 800c576:	46bd      	mov	sp, r7
 800c578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57c:	4770      	bx	lr
 800c57e:	bf00      	nop
 800c580:	40012c00 	.word	0x40012c00
 800c584:	40013400 	.word	0x40013400
 800c588:	40014000 	.word	0x40014000
 800c58c:	40014400 	.word	0x40014400
 800c590:	40014800 	.word	0x40014800

0800c594 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c594:	b480      	push	{r7}
 800c596:	b087      	sub	sp, #28
 800c598:	af00      	add	r7, sp, #0
 800c59a:	60f8      	str	r0, [r7, #12]
 800c59c:	60b9      	str	r1, [r7, #8]
 800c59e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	6a1b      	ldr	r3, [r3, #32]
 800c5a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	6a1b      	ldr	r3, [r3, #32]
 800c5aa:	f023 0201 	bic.w	r2, r3, #1
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	699b      	ldr	r3, [r3, #24]
 800c5b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c5b8:	693b      	ldr	r3, [r7, #16]
 800c5ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c5be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	011b      	lsls	r3, r3, #4
 800c5c4:	693a      	ldr	r2, [r7, #16]
 800c5c6:	4313      	orrs	r3, r2
 800c5c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	f023 030a 	bic.w	r3, r3, #10
 800c5d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c5d2:	697a      	ldr	r2, [r7, #20]
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	4313      	orrs	r3, r2
 800c5d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	693a      	ldr	r2, [r7, #16]
 800c5de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	697a      	ldr	r2, [r7, #20]
 800c5e4:	621a      	str	r2, [r3, #32]
}
 800c5e6:	bf00      	nop
 800c5e8:	371c      	adds	r7, #28
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f0:	4770      	bx	lr

0800c5f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c5f2:	b480      	push	{r7}
 800c5f4:	b087      	sub	sp, #28
 800c5f6:	af00      	add	r7, sp, #0
 800c5f8:	60f8      	str	r0, [r7, #12]
 800c5fa:	60b9      	str	r1, [r7, #8]
 800c5fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	6a1b      	ldr	r3, [r3, #32]
 800c602:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	6a1b      	ldr	r3, [r3, #32]
 800c608:	f023 0210 	bic.w	r2, r3, #16
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	699b      	ldr	r3, [r3, #24]
 800c614:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c616:	693b      	ldr	r3, [r7, #16]
 800c618:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c61c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	031b      	lsls	r3, r3, #12
 800c622:	693a      	ldr	r2, [r7, #16]
 800c624:	4313      	orrs	r3, r2
 800c626:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c62e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	011b      	lsls	r3, r3, #4
 800c634:	697a      	ldr	r2, [r7, #20]
 800c636:	4313      	orrs	r3, r2
 800c638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	693a      	ldr	r2, [r7, #16]
 800c63e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	697a      	ldr	r2, [r7, #20]
 800c644:	621a      	str	r2, [r3, #32]
}
 800c646:	bf00      	nop
 800c648:	371c      	adds	r7, #28
 800c64a:	46bd      	mov	sp, r7
 800c64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c650:	4770      	bx	lr

0800c652 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c652:	b480      	push	{r7}
 800c654:	b085      	sub	sp, #20
 800c656:	af00      	add	r7, sp, #0
 800c658:	6078      	str	r0, [r7, #4]
 800c65a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	689b      	ldr	r3, [r3, #8]
 800c660:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c668:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c66a:	683a      	ldr	r2, [r7, #0]
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	4313      	orrs	r3, r2
 800c670:	f043 0307 	orr.w	r3, r3, #7
 800c674:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	68fa      	ldr	r2, [r7, #12]
 800c67a:	609a      	str	r2, [r3, #8]
}
 800c67c:	bf00      	nop
 800c67e:	3714      	adds	r7, #20
 800c680:	46bd      	mov	sp, r7
 800c682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c686:	4770      	bx	lr

0800c688 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c688:	b480      	push	{r7}
 800c68a:	b087      	sub	sp, #28
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	60f8      	str	r0, [r7, #12]
 800c690:	60b9      	str	r1, [r7, #8]
 800c692:	607a      	str	r2, [r7, #4]
 800c694:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	689b      	ldr	r3, [r3, #8]
 800c69a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c6a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	021a      	lsls	r2, r3, #8
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	431a      	orrs	r2, r3
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	4313      	orrs	r3, r2
 800c6b0:	697a      	ldr	r2, [r7, #20]
 800c6b2:	4313      	orrs	r3, r2
 800c6b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	697a      	ldr	r2, [r7, #20]
 800c6ba:	609a      	str	r2, [r3, #8]
}
 800c6bc:	bf00      	nop
 800c6be:	371c      	adds	r7, #28
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c6:	4770      	bx	lr

0800c6c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c6c8:	b480      	push	{r7}
 800c6ca:	b087      	sub	sp, #28
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	60f8      	str	r0, [r7, #12]
 800c6d0:	60b9      	str	r1, [r7, #8]
 800c6d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	f003 031f 	and.w	r3, r3, #31
 800c6da:	2201      	movs	r2, #1
 800c6dc:	fa02 f303 	lsl.w	r3, r2, r3
 800c6e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	6a1a      	ldr	r2, [r3, #32]
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	43db      	mvns	r3, r3
 800c6ea:	401a      	ands	r2, r3
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	6a1a      	ldr	r2, [r3, #32]
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	f003 031f 	and.w	r3, r3, #31
 800c6fa:	6879      	ldr	r1, [r7, #4]
 800c6fc:	fa01 f303 	lsl.w	r3, r1, r3
 800c700:	431a      	orrs	r2, r3
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	621a      	str	r2, [r3, #32]
}
 800c706:	bf00      	nop
 800c708:	371c      	adds	r7, #28
 800c70a:	46bd      	mov	sp, r7
 800c70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c710:	4770      	bx	lr
	...

0800c714 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c714:	b480      	push	{r7}
 800c716:	b085      	sub	sp, #20
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
 800c71c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c724:	2b01      	cmp	r3, #1
 800c726:	d101      	bne.n	800c72c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c728:	2302      	movs	r3, #2
 800c72a:	e068      	b.n	800c7fe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2201      	movs	r2, #1
 800c730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2202      	movs	r2, #2
 800c738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	685b      	ldr	r3, [r3, #4]
 800c742:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	689b      	ldr	r3, [r3, #8]
 800c74a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	4a2e      	ldr	r2, [pc, #184]	@ (800c80c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c752:	4293      	cmp	r3, r2
 800c754:	d004      	beq.n	800c760 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	4a2d      	ldr	r2, [pc, #180]	@ (800c810 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c75c:	4293      	cmp	r3, r2
 800c75e:	d108      	bne.n	800c772 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c766:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	685b      	ldr	r3, [r3, #4]
 800c76c:	68fa      	ldr	r2, [r7, #12]
 800c76e:	4313      	orrs	r3, r2
 800c770:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c778:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	68fa      	ldr	r2, [r7, #12]
 800c780:	4313      	orrs	r3, r2
 800c782:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	68fa      	ldr	r2, [r7, #12]
 800c78a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	4a1e      	ldr	r2, [pc, #120]	@ (800c80c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c792:	4293      	cmp	r3, r2
 800c794:	d01d      	beq.n	800c7d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c79e:	d018      	beq.n	800c7d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	4a1b      	ldr	r2, [pc, #108]	@ (800c814 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c7a6:	4293      	cmp	r3, r2
 800c7a8:	d013      	beq.n	800c7d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	4a1a      	ldr	r2, [pc, #104]	@ (800c818 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c7b0:	4293      	cmp	r3, r2
 800c7b2:	d00e      	beq.n	800c7d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	4a18      	ldr	r2, [pc, #96]	@ (800c81c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c7ba:	4293      	cmp	r3, r2
 800c7bc:	d009      	beq.n	800c7d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	4a13      	ldr	r2, [pc, #76]	@ (800c810 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	d004      	beq.n	800c7d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	4a14      	ldr	r2, [pc, #80]	@ (800c820 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c7ce:	4293      	cmp	r3, r2
 800c7d0:	d10c      	bne.n	800c7ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c7d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	689b      	ldr	r3, [r3, #8]
 800c7de:	68ba      	ldr	r2, [r7, #8]
 800c7e0:	4313      	orrs	r3, r2
 800c7e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	68ba      	ldr	r2, [r7, #8]
 800c7ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2201      	movs	r2, #1
 800c7f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c7fc:	2300      	movs	r3, #0
}
 800c7fe:	4618      	mov	r0, r3
 800c800:	3714      	adds	r7, #20
 800c802:	46bd      	mov	sp, r7
 800c804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c808:	4770      	bx	lr
 800c80a:	bf00      	nop
 800c80c:	40012c00 	.word	0x40012c00
 800c810:	40013400 	.word	0x40013400
 800c814:	40000400 	.word	0x40000400
 800c818:	40000800 	.word	0x40000800
 800c81c:	40000c00 	.word	0x40000c00
 800c820:	40014000 	.word	0x40014000

0800c824 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c824:	b480      	push	{r7}
 800c826:	b085      	sub	sp, #20
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
 800c82c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c82e:	2300      	movs	r3, #0
 800c830:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c838:	2b01      	cmp	r3, #1
 800c83a:	d101      	bne.n	800c840 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c83c:	2302      	movs	r3, #2
 800c83e:	e065      	b.n	800c90c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2201      	movs	r2, #1
 800c844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	68db      	ldr	r3, [r3, #12]
 800c852:	4313      	orrs	r3, r2
 800c854:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	689b      	ldr	r3, [r3, #8]
 800c860:	4313      	orrs	r3, r2
 800c862:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	685b      	ldr	r3, [r3, #4]
 800c86e:	4313      	orrs	r3, r2
 800c870:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	4313      	orrs	r3, r2
 800c87e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	691b      	ldr	r3, [r3, #16]
 800c88a:	4313      	orrs	r3, r2
 800c88c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	695b      	ldr	r3, [r3, #20]
 800c898:	4313      	orrs	r3, r2
 800c89a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8a6:	4313      	orrs	r3, r2
 800c8a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	699b      	ldr	r3, [r3, #24]
 800c8b4:	041b      	lsls	r3, r3, #16
 800c8b6:	4313      	orrs	r3, r2
 800c8b8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	4a16      	ldr	r2, [pc, #88]	@ (800c918 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	d004      	beq.n	800c8ce <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	4a14      	ldr	r2, [pc, #80]	@ (800c91c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c8ca:	4293      	cmp	r3, r2
 800c8cc:	d115      	bne.n	800c8fa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8d8:	051b      	lsls	r3, r3, #20
 800c8da:	4313      	orrs	r3, r2
 800c8dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	69db      	ldr	r3, [r3, #28]
 800c8e8:	4313      	orrs	r3, r2
 800c8ea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	6a1b      	ldr	r3, [r3, #32]
 800c8f6:	4313      	orrs	r3, r2
 800c8f8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	68fa      	ldr	r2, [r7, #12]
 800c900:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2200      	movs	r2, #0
 800c906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c90a:	2300      	movs	r3, #0
}
 800c90c:	4618      	mov	r0, r3
 800c90e:	3714      	adds	r7, #20
 800c910:	46bd      	mov	sp, r7
 800c912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c916:	4770      	bx	lr
 800c918:	40012c00 	.word	0x40012c00
 800c91c:	40013400 	.word	0x40013400

0800c920 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c920:	b480      	push	{r7}
 800c922:	b083      	sub	sp, #12
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c928:	bf00      	nop
 800c92a:	370c      	adds	r7, #12
 800c92c:	46bd      	mov	sp, r7
 800c92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c932:	4770      	bx	lr

0800c934 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c934:	b480      	push	{r7}
 800c936:	b083      	sub	sp, #12
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c93c:	bf00      	nop
 800c93e:	370c      	adds	r7, #12
 800c940:	46bd      	mov	sp, r7
 800c942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c946:	4770      	bx	lr

0800c948 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c948:	b480      	push	{r7}
 800c94a:	b083      	sub	sp, #12
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c950:	bf00      	nop
 800c952:	370c      	adds	r7, #12
 800c954:	46bd      	mov	sp, r7
 800c956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95a:	4770      	bx	lr

0800c95c <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 800c95c:	b590      	push	{r4, r7, lr}
 800c95e:	b083      	sub	sp, #12
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d101      	bne.n	800c96e <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 800c96a:	2301      	movs	r3, #1
 800c96c:	e072      	b.n	800ca54 <HAL_TSC_Init+0xf8>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c974:	b2db      	uxtb	r3, r3
 800c976:	2b00      	cmp	r3, #0
 800c978:	d106      	bne.n	800c988 <HAL_TSC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2200      	movs	r2, #0
 800c97e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f7f7 fd68 	bl	8004458 <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2202      	movs	r2, #2
 800c98c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	2201      	movs	r2, #1
 800c996:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	6819      	ldr	r1, [r3, #0]
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 800c9a6:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	691b      	ldr	r3, [r3, #16]
 800c9ac:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 800c9ae:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 800c9b4:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 800c9ba:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 800c9c0:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                         htsc->Init.MaxCountValue |
 800c9c6:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                         htsc->Init.SynchroPinPolarity |
 800c9cc:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	430a      	orrs	r2, r1
 800c9d4:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	7b1b      	ldrb	r3, [r3, #12]
 800c9da:	2b01      	cmp	r3, #1
 800c9dc:	d107      	bne.n	800c9ee <HAL_TSC_Init+0x92>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	681a      	ldr	r2, [r3, #0]
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800c9ec:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9f6:	431a      	orrs	r2, r3
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9fc:	431a      	orrs	r2, r3
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	43d2      	mvns	r2, r2
 800ca04:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	430a      	orrs	r2, r1
 800ca14:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	687a      	ldr	r2, [r7, #4]
 800ca1c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800ca1e:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681c      	ldr	r4, [r3, #0]
 800ca28:	4610      	mov	r0, r2
 800ca2a:	f000 f8cd 	bl	800cbc8 <TSC_extract_groups>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	6323      	str	r3, [r4, #48]	@ 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	685a      	ldr	r2, [r3, #4]
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	f022 0203 	bic.w	r2, r2, #3
 800ca40:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	2203      	movs	r2, #3
 800ca48:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2201      	movs	r2, #1
 800ca4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800ca52:	2300      	movs	r3, #0
}
 800ca54:	4618      	mov	r0, r3
 800ca56:	370c      	adds	r7, #12
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd90      	pop	{r4, r7, pc}

0800ca5c <HAL_TSC_Start>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Start(TSC_HandleTypeDef *htsc)
{
 800ca5c:	b480      	push	{r7}
 800ca5e:	b083      	sub	sp, #12
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));

  /* Process locked */
  __HAL_LOCK(htsc);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ca6a:	2b01      	cmp	r3, #1
 800ca6c:	d101      	bne.n	800ca72 <HAL_TSC_Start+0x16>
 800ca6e:	2302      	movs	r3, #2
 800ca70:	e035      	b.n	800cade <HAL_TSC_Start+0x82>
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2201      	movs	r2, #1
 800ca76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Change TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2202      	movs	r2, #2
 800ca7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Clear interrupts */
  __HAL_TSC_DISABLE_IT(htsc, (TSC_IT_EOA | TSC_IT_MCE));
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	685a      	ldr	r2, [r3, #4]
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	f022 0203 	bic.w	r2, r2, #3
 800ca90:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  __HAL_TSC_CLEAR_FLAG(htsc, (TSC_FLAG_EOA | TSC_FLAG_MCE));
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	2203      	movs	r2, #3
 800ca98:	609a      	str	r2, [r3, #8]

  /* Set touch sensing IOs not acquired to the specified IODefaultMode */
  if (htsc->Init.IODefaultMode == TSC_IODEF_OUT_PP_LOW)
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6a1b      	ldr	r3, [r3, #32]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d108      	bne.n	800cab4 <HAL_TSC_Start+0x58>
  {
    __HAL_TSC_SET_IODEF_OUTPPLOW(htsc);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	681a      	ldr	r2, [r3, #0]
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	f022 0210 	bic.w	r2, r2, #16
 800cab0:	601a      	str	r2, [r3, #0]
 800cab2:	e007      	b.n	800cac4 <HAL_TSC_Start+0x68>
  }
  else
  {
    __HAL_TSC_SET_IODEF_INFLOAT(htsc);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	681a      	ldr	r2, [r3, #0]
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	f042 0210 	orr.w	r2, r2, #16
 800cac2:	601a      	str	r2, [r3, #0]
  }

  /* Launch the acquisition */
  __HAL_TSC_START_ACQ(htsc);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	681a      	ldr	r2, [r3, #0]
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	f042 0202 	orr.w	r2, r2, #2
 800cad2:	601a      	str	r2, [r3, #0]

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2200      	movs	r2, #0
 800cad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800cadc:	2300      	movs	r3, #0
}
 800cade:	4618      	mov	r0, r3
 800cae0:	370c      	adds	r7, #12
 800cae2:	46bd      	mov	sp, r7
 800cae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae8:	4770      	bx	lr

0800caea <HAL_TSC_Stop>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Stop(TSC_HandleTypeDef *htsc)
{
 800caea:	b480      	push	{r7}
 800caec:	b083      	sub	sp, #12
 800caee:	af00      	add	r7, sp, #0
 800caf0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));

  /* Process locked */
  __HAL_LOCK(htsc);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800caf8:	2b01      	cmp	r3, #1
 800cafa:	d101      	bne.n	800cb00 <HAL_TSC_Stop+0x16>
 800cafc:	2302      	movs	r3, #2
 800cafe:	e020      	b.n	800cb42 <HAL_TSC_Stop+0x58>
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2201      	movs	r2, #1
 800cb04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Stop the acquisition */
  __HAL_TSC_STOP_ACQ(htsc);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	681a      	ldr	r2, [r3, #0]
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	f022 0202 	bic.w	r2, r2, #2
 800cb16:	601a      	str	r2, [r3, #0]

  /* Set touch sensing IOs in low power mode (output push-pull) */
  __HAL_TSC_SET_IODEF_OUTPPLOW(htsc);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	681a      	ldr	r2, [r3, #0]
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	f022 0210 	bic.w	r2, r2, #16
 800cb26:	601a      	str	r2, [r3, #0]

  /* Clear flags */
  __HAL_TSC_CLEAR_FLAG(htsc, (TSC_FLAG_EOA | TSC_FLAG_MCE));
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	2203      	movs	r2, #3
 800cb2e:	609a      	str	r2, [r3, #8]

  /* Change TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2201      	movs	r2, #1
 800cb34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800cb40:	2300      	movs	r3, #0
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	370c      	adds	r7, #12
 800cb46:	46bd      	mov	sp, r7
 800cb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4c:	4770      	bx	lr

0800cb4e <HAL_TSC_GroupGetValue>:
  *         the configuration information for the specified TSC.
  * @param  gx_index Index of the group
  * @retval Acquisition measure
  */
uint32_t HAL_TSC_GroupGetValue(const TSC_HandleTypeDef *htsc, uint32_t gx_index)
{
 800cb4e:	b480      	push	{r7}
 800cb50:	b083      	sub	sp, #12
 800cb52:	af00      	add	r7, sp, #0
 800cb54:	6078      	str	r0, [r7, #4]
 800cb56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_GROUP_INDEX(gx_index));

  /* Return the group acquisition counter */
  return htsc->Instance->IOGXCR[gx_index];
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681a      	ldr	r2, [r3, #0]
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	330c      	adds	r3, #12
 800cb60:	009b      	lsls	r3, r3, #2
 800cb62:	4413      	add	r3, r2
 800cb64:	685b      	ldr	r3, [r3, #4]
}
 800cb66:	4618      	mov	r0, r3
 800cb68:	370c      	adds	r7, #12
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb70:	4770      	bx	lr

0800cb72 <HAL_TSC_GetState>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval HAL state
  */
HAL_TSC_StateTypeDef HAL_TSC_GetState(TSC_HandleTypeDef *htsc)
{
 800cb72:	b480      	push	{r7}
 800cb74:	b083      	sub	sp, #12
 800cb76:	af00      	add	r7, sp, #0
 800cb78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));

  if (htsc->State == HAL_TSC_STATE_BUSY)
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cb80:	b2db      	uxtb	r3, r3
 800cb82:	2b02      	cmp	r3, #2
 800cb84:	d116      	bne.n	800cbb4 <HAL_TSC_GetState+0x42>
  {
    /* Check end of acquisition flag */
    if (__HAL_TSC_GET_FLAG(htsc, TSC_FLAG_EOA) != RESET)
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	68db      	ldr	r3, [r3, #12]
 800cb8c:	f003 0301 	and.w	r3, r3, #1
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	d10f      	bne.n	800cbb4 <HAL_TSC_GetState+0x42>
    {
      /* Check max count error flag */
      if (__HAL_TSC_GET_FLAG(htsc, TSC_FLAG_MCE) != RESET)
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	68db      	ldr	r3, [r3, #12]
 800cb9a:	f003 0302 	and.w	r3, r3, #2
 800cb9e:	2b02      	cmp	r3, #2
 800cba0:	d104      	bne.n	800cbac <HAL_TSC_GetState+0x3a>
      {
        /* Change TSC state */
        htsc->State = HAL_TSC_STATE_ERROR;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2203      	movs	r2, #3
 800cba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800cbaa:	e003      	b.n	800cbb4 <HAL_TSC_GetState+0x42>
      }
      else
      {
        /* Change TSC state */
        htsc->State = HAL_TSC_STATE_READY;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2201      	movs	r2, #1
 800cbb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      }
    }
  }

  /* Return TSC state */
  return htsc->State;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cbba:	b2db      	uxtb	r3, r3
}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	370c      	adds	r7, #12
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc6:	4770      	bx	lr

0800cbc8 <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 800cbc8:	b480      	push	{r7}
 800cbca:	b085      	sub	sp, #20
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	60bb      	str	r3, [r7, #8]
 800cbd8:	e011      	b.n	800cbfe <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL)
 800cbda:	68bb      	ldr	r3, [r7, #8]
 800cbdc:	009b      	lsls	r3, r3, #2
 800cbde:	220f      	movs	r2, #15
 800cbe0:	409a      	lsls	r2, r3
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	4013      	ands	r3, r2
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d006      	beq.n	800cbf8 <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 800cbea:	2201      	movs	r2, #1
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	fa02 f303 	lsl.w	r3, r2, r3
 800cbf2:	68fa      	ldr	r2, [r7, #12]
 800cbf4:	4313      	orrs	r3, r2
 800cbf6:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 800cbf8:	68bb      	ldr	r3, [r7, #8]
 800cbfa:	3301      	adds	r3, #1
 800cbfc:	60bb      	str	r3, [r7, #8]
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	2b07      	cmp	r3, #7
 800cc02:	d9ea      	bls.n	800cbda <TSC_extract_groups+0x12>
    }
  }

  return groups;
 800cc04:	68fb      	ldr	r3, [r7, #12]
}
 800cc06:	4618      	mov	r0, r3
 800cc08:	3714      	adds	r7, #20
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc10:	4770      	bx	lr

0800cc12 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cc12:	b580      	push	{r7, lr}
 800cc14:	b082      	sub	sp, #8
 800cc16:	af00      	add	r7, sp, #0
 800cc18:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d101      	bne.n	800cc24 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cc20:	2301      	movs	r3, #1
 800cc22:	e040      	b.n	800cca6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d106      	bne.n	800cc3a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f7f7 fcef 	bl	8004618 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	2224      	movs	r2, #36	@ 0x24
 800cc3e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	681a      	ldr	r2, [r3, #0]
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	f022 0201 	bic.w	r2, r2, #1
 800cc4e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d002      	beq.n	800cc5e <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f000 fe53 	bl	800d904 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cc5e:	6878      	ldr	r0, [r7, #4]
 800cc60:	f000 fb98 	bl	800d394 <UART_SetConfig>
 800cc64:	4603      	mov	r3, r0
 800cc66:	2b01      	cmp	r3, #1
 800cc68:	d101      	bne.n	800cc6e <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800cc6a:	2301      	movs	r3, #1
 800cc6c:	e01b      	b.n	800cca6 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	685a      	ldr	r2, [r3, #4]
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cc7c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	689a      	ldr	r2, [r3, #8]
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cc8c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	681a      	ldr	r2, [r3, #0]
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	f042 0201 	orr.w	r2, r2, #1
 800cc9c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cc9e:	6878      	ldr	r0, [r7, #4]
 800cca0:	f000 fed2 	bl	800da48 <UART_CheckIdleState>
 800cca4:	4603      	mov	r3, r0
}
 800cca6:	4618      	mov	r0, r3
 800cca8:	3708      	adds	r7, #8
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}
	...

0800ccb0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b08a      	sub	sp, #40	@ 0x28
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	60f8      	str	r0, [r7, #12]
 800ccb8:	60b9      	str	r1, [r7, #8]
 800ccba:	4613      	mov	r3, r2
 800ccbc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ccc4:	2b20      	cmp	r3, #32
 800ccc6:	d137      	bne.n	800cd38 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800ccc8:	68bb      	ldr	r3, [r7, #8]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d002      	beq.n	800ccd4 <HAL_UART_Receive_IT+0x24>
 800ccce:	88fb      	ldrh	r3, [r7, #6]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d101      	bne.n	800ccd8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ccd4:	2301      	movs	r3, #1
 800ccd6:	e030      	b.n	800cd3a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	4a18      	ldr	r2, [pc, #96]	@ (800cd44 <HAL_UART_Receive_IT+0x94>)
 800cce4:	4293      	cmp	r3, r2
 800cce6:	d01f      	beq.n	800cd28 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	685b      	ldr	r3, [r3, #4]
 800ccee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d018      	beq.n	800cd28 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccfc:	697b      	ldr	r3, [r7, #20]
 800ccfe:	e853 3f00 	ldrex	r3, [r3]
 800cd02:	613b      	str	r3, [r7, #16]
   return(result);
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800cd0a:	627b      	str	r3, [r7, #36]	@ 0x24
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	461a      	mov	r2, r3
 800cd12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd14:	623b      	str	r3, [r7, #32]
 800cd16:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd18:	69f9      	ldr	r1, [r7, #28]
 800cd1a:	6a3a      	ldr	r2, [r7, #32]
 800cd1c:	e841 2300 	strex	r3, r2, [r1]
 800cd20:	61bb      	str	r3, [r7, #24]
   return(result);
 800cd22:	69bb      	ldr	r3, [r7, #24]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d1e6      	bne.n	800ccf6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800cd28:	88fb      	ldrh	r3, [r7, #6]
 800cd2a:	461a      	mov	r2, r3
 800cd2c:	68b9      	ldr	r1, [r7, #8]
 800cd2e:	68f8      	ldr	r0, [r7, #12]
 800cd30:	f000 ffa0 	bl	800dc74 <UART_Start_Receive_IT>
 800cd34:	4603      	mov	r3, r0
 800cd36:	e000      	b.n	800cd3a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800cd38:	2302      	movs	r3, #2
  }
}
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	3728      	adds	r7, #40	@ 0x28
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}
 800cd42:	bf00      	nop
 800cd44:	40008000 	.word	0x40008000

0800cd48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b0ba      	sub	sp, #232	@ 0xe8
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	69db      	ldr	r3, [r3, #28]
 800cd56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	689b      	ldr	r3, [r3, #8]
 800cd6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cd6e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800cd72:	f640 030f 	movw	r3, #2063	@ 0x80f
 800cd76:	4013      	ands	r3, r2
 800cd78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800cd7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d115      	bne.n	800cdb0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800cd84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd88:	f003 0320 	and.w	r3, r3, #32
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d00f      	beq.n	800cdb0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800cd90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cd94:	f003 0320 	and.w	r3, r3, #32
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d009      	beq.n	800cdb0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	f000 82ca 	beq.w	800d33a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	4798      	blx	r3
      }
      return;
 800cdae:	e2c4      	b.n	800d33a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800cdb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	f000 8117 	beq.w	800cfe8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800cdba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cdbe:	f003 0301 	and.w	r3, r3, #1
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d106      	bne.n	800cdd4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800cdc6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800cdca:	4b85      	ldr	r3, [pc, #532]	@ (800cfe0 <HAL_UART_IRQHandler+0x298>)
 800cdcc:	4013      	ands	r3, r2
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	f000 810a 	beq.w	800cfe8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cdd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cdd8:	f003 0301 	and.w	r3, r3, #1
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d011      	beq.n	800ce04 <HAL_UART_IRQHandler+0xbc>
 800cde0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cde4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d00b      	beq.n	800ce04 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	2201      	movs	r2, #1
 800cdf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cdfa:	f043 0201 	orr.w	r2, r3, #1
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce08:	f003 0302 	and.w	r3, r3, #2
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d011      	beq.n	800ce34 <HAL_UART_IRQHandler+0xec>
 800ce10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ce14:	f003 0301 	and.w	r3, r3, #1
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d00b      	beq.n	800ce34 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	2202      	movs	r2, #2
 800ce22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ce2a:	f043 0204 	orr.w	r2, r3, #4
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce38:	f003 0304 	and.w	r3, r3, #4
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d011      	beq.n	800ce64 <HAL_UART_IRQHandler+0x11c>
 800ce40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ce44:	f003 0301 	and.w	r3, r3, #1
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d00b      	beq.n	800ce64 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	2204      	movs	r2, #4
 800ce52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ce5a:	f043 0202 	orr.w	r2, r3, #2
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ce64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce68:	f003 0308 	and.w	r3, r3, #8
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d017      	beq.n	800cea0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ce70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce74:	f003 0320 	and.w	r3, r3, #32
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d105      	bne.n	800ce88 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800ce7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ce80:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d00b      	beq.n	800cea0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	2208      	movs	r2, #8
 800ce8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ce96:	f043 0208 	orr.w	r2, r3, #8
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cea4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d012      	beq.n	800ced2 <HAL_UART_IRQHandler+0x18a>
 800ceac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ceb0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d00c      	beq.n	800ced2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cec0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cec8:	f043 0220 	orr.w	r2, r3, #32
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	f000 8230 	beq.w	800d33e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800cede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cee2:	f003 0320 	and.w	r3, r3, #32
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d00d      	beq.n	800cf06 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ceea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ceee:	f003 0320 	and.w	r3, r3, #32
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d007      	beq.n	800cf06 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d003      	beq.n	800cf06 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cf0c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	689b      	ldr	r3, [r3, #8]
 800cf16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf1a:	2b40      	cmp	r3, #64	@ 0x40
 800cf1c:	d005      	beq.n	800cf2a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cf1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cf22:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d04f      	beq.n	800cfca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cf2a:	6878      	ldr	r0, [r7, #4]
 800cf2c:	f000 ff68 	bl	800de00 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	689b      	ldr	r3, [r3, #8]
 800cf36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf3a:	2b40      	cmp	r3, #64	@ 0x40
 800cf3c:	d141      	bne.n	800cfc2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	3308      	adds	r3, #8
 800cf44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cf4c:	e853 3f00 	ldrex	r3, [r3]
 800cf50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800cf54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cf58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cf5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	3308      	adds	r3, #8
 800cf66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800cf6a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800cf6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800cf76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cf7a:	e841 2300 	strex	r3, r2, [r1]
 800cf7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800cf82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d1d9      	bne.n	800cf3e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d013      	beq.n	800cfba <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cf96:	4a13      	ldr	r2, [pc, #76]	@ (800cfe4 <HAL_UART_IRQHandler+0x29c>)
 800cf98:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f7fa f8c6 	bl	8007130 <HAL_DMA_Abort_IT>
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d017      	beq.n	800cfda <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cfae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfb0:	687a      	ldr	r2, [r7, #4]
 800cfb2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800cfb4:	4610      	mov	r0, r2
 800cfb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cfb8:	e00f      	b.n	800cfda <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	f000 f9d4 	bl	800d368 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cfc0:	e00b      	b.n	800cfda <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	f000 f9d0 	bl	800d368 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cfc8:	e007      	b.n	800cfda <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cfca:	6878      	ldr	r0, [r7, #4]
 800cfcc:	f000 f9cc 	bl	800d368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800cfd8:	e1b1      	b.n	800d33e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cfda:	bf00      	nop
    return;
 800cfdc:	e1af      	b.n	800d33e <HAL_UART_IRQHandler+0x5f6>
 800cfde:	bf00      	nop
 800cfe0:	04000120 	.word	0x04000120
 800cfe4:	0800dec9 	.word	0x0800dec9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cfec:	2b01      	cmp	r3, #1
 800cfee:	f040 816a 	bne.w	800d2c6 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cff6:	f003 0310 	and.w	r3, r3, #16
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	f000 8163 	beq.w	800d2c6 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d004:	f003 0310 	and.w	r3, r3, #16
 800d008:	2b00      	cmp	r3, #0
 800d00a:	f000 815c 	beq.w	800d2c6 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	2210      	movs	r2, #16
 800d014:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	689b      	ldr	r3, [r3, #8]
 800d01c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d020:	2b40      	cmp	r3, #64	@ 0x40
 800d022:	f040 80d4 	bne.w	800d1ce <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	685b      	ldr	r3, [r3, #4]
 800d02e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d032:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d036:	2b00      	cmp	r3, #0
 800d038:	f000 80ad 	beq.w	800d196 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d042:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d046:	429a      	cmp	r2, r3
 800d048:	f080 80a5 	bcs.w	800d196 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d052:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	f003 0320 	and.w	r3, r3, #32
 800d062:	2b00      	cmp	r3, #0
 800d064:	f040 8086 	bne.w	800d174 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d070:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d074:	e853 3f00 	ldrex	r3, [r3]
 800d078:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d07c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d080:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d084:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	461a      	mov	r2, r3
 800d08e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d092:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d096:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d09a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d09e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d0a2:	e841 2300 	strex	r3, r2, [r1]
 800d0a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d0aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d1da      	bne.n	800d068 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	3308      	adds	r3, #8
 800d0b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d0bc:	e853 3f00 	ldrex	r3, [r3]
 800d0c0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d0c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d0c4:	f023 0301 	bic.w	r3, r3, #1
 800d0c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	3308      	adds	r3, #8
 800d0d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d0d6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d0da:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0dc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d0de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d0e2:	e841 2300 	strex	r3, r2, [r1]
 800d0e6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d0e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d1e1      	bne.n	800d0b2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	3308      	adds	r3, #8
 800d0f4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d0f8:	e853 3f00 	ldrex	r3, [r3]
 800d0fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d0fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d100:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d104:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	3308      	adds	r3, #8
 800d10e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d112:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d114:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d116:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d118:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d11a:	e841 2300 	strex	r3, r2, [r1]
 800d11e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d120:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d122:	2b00      	cmp	r3, #0
 800d124:	d1e3      	bne.n	800d0ee <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2220      	movs	r2, #32
 800d12a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	2200      	movs	r2, #0
 800d132:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d13a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d13c:	e853 3f00 	ldrex	r3, [r3]
 800d140:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d142:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d144:	f023 0310 	bic.w	r3, r3, #16
 800d148:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	461a      	mov	r2, r3
 800d152:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d156:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d158:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d15a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d15c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d15e:	e841 2300 	strex	r3, r2, [r1]
 800d162:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d164:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d166:	2b00      	cmp	r3, #0
 800d168:	d1e4      	bne.n	800d134 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d16e:	4618      	mov	r0, r3
 800d170:	f7f9 ffa0 	bl	80070b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2202      	movs	r2, #2
 800d178:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800d186:	b29b      	uxth	r3, r3
 800d188:	1ad3      	subs	r3, r2, r3
 800d18a:	b29b      	uxth	r3, r3
 800d18c:	4619      	mov	r1, r3
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	f000 f8f4 	bl	800d37c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800d194:	e0d5      	b.n	800d342 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d19c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d1a0:	429a      	cmp	r2, r3
 800d1a2:	f040 80ce 	bne.w	800d342 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	f003 0320 	and.w	r3, r3, #32
 800d1b2:	2b20      	cmp	r3, #32
 800d1b4:	f040 80c5 	bne.w	800d342 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2202      	movs	r2, #2
 800d1bc:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d1c4:	4619      	mov	r1, r3
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	f000 f8d8 	bl	800d37c <HAL_UARTEx_RxEventCallback>
      return;
 800d1cc:	e0b9      	b.n	800d342 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800d1da:	b29b      	uxth	r3, r3
 800d1dc:	1ad3      	subs	r3, r2, r3
 800d1de:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800d1e8:	b29b      	uxth	r3, r3
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	f000 80ab 	beq.w	800d346 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 800d1f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	f000 80a6 	beq.w	800d346 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d202:	e853 3f00 	ldrex	r3, [r3]
 800d206:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d20a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d20e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	461a      	mov	r2, r3
 800d218:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d21c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d21e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d220:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d222:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d224:	e841 2300 	strex	r3, r2, [r1]
 800d228:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d22a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d1e4      	bne.n	800d1fa <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	3308      	adds	r3, #8
 800d236:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d23a:	e853 3f00 	ldrex	r3, [r3]
 800d23e:	623b      	str	r3, [r7, #32]
   return(result);
 800d240:	6a3b      	ldr	r3, [r7, #32]
 800d242:	f023 0301 	bic.w	r3, r3, #1
 800d246:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	3308      	adds	r3, #8
 800d250:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d254:	633a      	str	r2, [r7, #48]	@ 0x30
 800d256:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d258:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d25a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d25c:	e841 2300 	strex	r3, r2, [r1]
 800d260:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d264:	2b00      	cmp	r3, #0
 800d266:	d1e3      	bne.n	800d230 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2220      	movs	r2, #32
 800d26c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2200      	movs	r2, #0
 800d274:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	2200      	movs	r2, #0
 800d27a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d282:	693b      	ldr	r3, [r7, #16]
 800d284:	e853 3f00 	ldrex	r3, [r3]
 800d288:	60fb      	str	r3, [r7, #12]
   return(result);
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	f023 0310 	bic.w	r3, r3, #16
 800d290:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	461a      	mov	r2, r3
 800d29a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d29e:	61fb      	str	r3, [r7, #28]
 800d2a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2a2:	69b9      	ldr	r1, [r7, #24]
 800d2a4:	69fa      	ldr	r2, [r7, #28]
 800d2a6:	e841 2300 	strex	r3, r2, [r1]
 800d2aa:	617b      	str	r3, [r7, #20]
   return(result);
 800d2ac:	697b      	ldr	r3, [r7, #20]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d1e4      	bne.n	800d27c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2202      	movs	r2, #2
 800d2b6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d2b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d2bc:	4619      	mov	r1, r3
 800d2be:	6878      	ldr	r0, [r7, #4]
 800d2c0:	f000 f85c 	bl	800d37c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d2c4:	e03f      	b.n	800d346 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d2c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d2ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d00e      	beq.n	800d2f0 <HAL_UART_IRQHandler+0x5a8>
 800d2d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d2d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d008      	beq.n	800d2f0 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d2e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	f000 ffe9 	bl	800e2c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d2ee:	e02d      	b.n	800d34c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800d2f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d2f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d00e      	beq.n	800d31a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800d2fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d300:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d304:	2b00      	cmp	r3, #0
 800d306:	d008      	beq.n	800d31a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d01c      	beq.n	800d34a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	4798      	blx	r3
    }
    return;
 800d318:	e017      	b.n	800d34a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d31a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d31e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d322:	2b00      	cmp	r3, #0
 800d324:	d012      	beq.n	800d34c <HAL_UART_IRQHandler+0x604>
 800d326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d32a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d00c      	beq.n	800d34c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f000 fdde 	bl	800def4 <UART_EndTransmit_IT>
    return;
 800d338:	e008      	b.n	800d34c <HAL_UART_IRQHandler+0x604>
      return;
 800d33a:	bf00      	nop
 800d33c:	e006      	b.n	800d34c <HAL_UART_IRQHandler+0x604>
    return;
 800d33e:	bf00      	nop
 800d340:	e004      	b.n	800d34c <HAL_UART_IRQHandler+0x604>
      return;
 800d342:	bf00      	nop
 800d344:	e002      	b.n	800d34c <HAL_UART_IRQHandler+0x604>
      return;
 800d346:	bf00      	nop
 800d348:	e000      	b.n	800d34c <HAL_UART_IRQHandler+0x604>
    return;
 800d34a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800d34c:	37e8      	adds	r7, #232	@ 0xe8
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}
 800d352:	bf00      	nop

0800d354 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d354:	b480      	push	{r7}
 800d356:	b083      	sub	sp, #12
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d35c:	bf00      	nop
 800d35e:	370c      	adds	r7, #12
 800d360:	46bd      	mov	sp, r7
 800d362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d366:	4770      	bx	lr

0800d368 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d368:	b480      	push	{r7}
 800d36a:	b083      	sub	sp, #12
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d370:	bf00      	nop
 800d372:	370c      	adds	r7, #12
 800d374:	46bd      	mov	sp, r7
 800d376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37a:	4770      	bx	lr

0800d37c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d37c:	b480      	push	{r7}
 800d37e:	b083      	sub	sp, #12
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
 800d384:	460b      	mov	r3, r1
 800d386:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d388:	bf00      	nop
 800d38a:	370c      	adds	r7, #12
 800d38c:	46bd      	mov	sp, r7
 800d38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d392:	4770      	bx	lr

0800d394 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d394:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d398:	b08a      	sub	sp, #40	@ 0x28
 800d39a:	af00      	add	r7, sp, #0
 800d39c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	689a      	ldr	r2, [r3, #8]
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	691b      	ldr	r3, [r3, #16]
 800d3ac:	431a      	orrs	r2, r3
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	695b      	ldr	r3, [r3, #20]
 800d3b2:	431a      	orrs	r2, r3
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	69db      	ldr	r3, [r3, #28]
 800d3b8:	4313      	orrs	r3, r2
 800d3ba:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	681a      	ldr	r2, [r3, #0]
 800d3c2:	4ba4      	ldr	r3, [pc, #656]	@ (800d654 <UART_SetConfig+0x2c0>)
 800d3c4:	4013      	ands	r3, r2
 800d3c6:	68fa      	ldr	r2, [r7, #12]
 800d3c8:	6812      	ldr	r2, [r2, #0]
 800d3ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d3cc:	430b      	orrs	r3, r1
 800d3ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	685b      	ldr	r3, [r3, #4]
 800d3d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	68da      	ldr	r2, [r3, #12]
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	430a      	orrs	r2, r1
 800d3e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	699b      	ldr	r3, [r3, #24]
 800d3ea:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	4a99      	ldr	r2, [pc, #612]	@ (800d658 <UART_SetConfig+0x2c4>)
 800d3f2:	4293      	cmp	r3, r2
 800d3f4:	d004      	beq.n	800d400 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	6a1b      	ldr	r3, [r3, #32]
 800d3fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d3fc:	4313      	orrs	r3, r2
 800d3fe:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	689b      	ldr	r3, [r3, #8]
 800d406:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d410:	430a      	orrs	r2, r1
 800d412:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	4a90      	ldr	r2, [pc, #576]	@ (800d65c <UART_SetConfig+0x2c8>)
 800d41a:	4293      	cmp	r3, r2
 800d41c:	d126      	bne.n	800d46c <UART_SetConfig+0xd8>
 800d41e:	4b90      	ldr	r3, [pc, #576]	@ (800d660 <UART_SetConfig+0x2cc>)
 800d420:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d424:	f003 0303 	and.w	r3, r3, #3
 800d428:	2b03      	cmp	r3, #3
 800d42a:	d81b      	bhi.n	800d464 <UART_SetConfig+0xd0>
 800d42c:	a201      	add	r2, pc, #4	@ (adr r2, 800d434 <UART_SetConfig+0xa0>)
 800d42e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d432:	bf00      	nop
 800d434:	0800d445 	.word	0x0800d445
 800d438:	0800d455 	.word	0x0800d455
 800d43c:	0800d44d 	.word	0x0800d44d
 800d440:	0800d45d 	.word	0x0800d45d
 800d444:	2301      	movs	r3, #1
 800d446:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d44a:	e116      	b.n	800d67a <UART_SetConfig+0x2e6>
 800d44c:	2302      	movs	r3, #2
 800d44e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d452:	e112      	b.n	800d67a <UART_SetConfig+0x2e6>
 800d454:	2304      	movs	r3, #4
 800d456:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d45a:	e10e      	b.n	800d67a <UART_SetConfig+0x2e6>
 800d45c:	2308      	movs	r3, #8
 800d45e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d462:	e10a      	b.n	800d67a <UART_SetConfig+0x2e6>
 800d464:	2310      	movs	r3, #16
 800d466:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d46a:	e106      	b.n	800d67a <UART_SetConfig+0x2e6>
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	4a7c      	ldr	r2, [pc, #496]	@ (800d664 <UART_SetConfig+0x2d0>)
 800d472:	4293      	cmp	r3, r2
 800d474:	d138      	bne.n	800d4e8 <UART_SetConfig+0x154>
 800d476:	4b7a      	ldr	r3, [pc, #488]	@ (800d660 <UART_SetConfig+0x2cc>)
 800d478:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d47c:	f003 030c 	and.w	r3, r3, #12
 800d480:	2b0c      	cmp	r3, #12
 800d482:	d82d      	bhi.n	800d4e0 <UART_SetConfig+0x14c>
 800d484:	a201      	add	r2, pc, #4	@ (adr r2, 800d48c <UART_SetConfig+0xf8>)
 800d486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d48a:	bf00      	nop
 800d48c:	0800d4c1 	.word	0x0800d4c1
 800d490:	0800d4e1 	.word	0x0800d4e1
 800d494:	0800d4e1 	.word	0x0800d4e1
 800d498:	0800d4e1 	.word	0x0800d4e1
 800d49c:	0800d4d1 	.word	0x0800d4d1
 800d4a0:	0800d4e1 	.word	0x0800d4e1
 800d4a4:	0800d4e1 	.word	0x0800d4e1
 800d4a8:	0800d4e1 	.word	0x0800d4e1
 800d4ac:	0800d4c9 	.word	0x0800d4c9
 800d4b0:	0800d4e1 	.word	0x0800d4e1
 800d4b4:	0800d4e1 	.word	0x0800d4e1
 800d4b8:	0800d4e1 	.word	0x0800d4e1
 800d4bc:	0800d4d9 	.word	0x0800d4d9
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d4c6:	e0d8      	b.n	800d67a <UART_SetConfig+0x2e6>
 800d4c8:	2302      	movs	r3, #2
 800d4ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d4ce:	e0d4      	b.n	800d67a <UART_SetConfig+0x2e6>
 800d4d0:	2304      	movs	r3, #4
 800d4d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d4d6:	e0d0      	b.n	800d67a <UART_SetConfig+0x2e6>
 800d4d8:	2308      	movs	r3, #8
 800d4da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d4de:	e0cc      	b.n	800d67a <UART_SetConfig+0x2e6>
 800d4e0:	2310      	movs	r3, #16
 800d4e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d4e6:	e0c8      	b.n	800d67a <UART_SetConfig+0x2e6>
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	4a5e      	ldr	r2, [pc, #376]	@ (800d668 <UART_SetConfig+0x2d4>)
 800d4ee:	4293      	cmp	r3, r2
 800d4f0:	d125      	bne.n	800d53e <UART_SetConfig+0x1aa>
 800d4f2:	4b5b      	ldr	r3, [pc, #364]	@ (800d660 <UART_SetConfig+0x2cc>)
 800d4f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d4f8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800d4fc:	2b30      	cmp	r3, #48	@ 0x30
 800d4fe:	d016      	beq.n	800d52e <UART_SetConfig+0x19a>
 800d500:	2b30      	cmp	r3, #48	@ 0x30
 800d502:	d818      	bhi.n	800d536 <UART_SetConfig+0x1a2>
 800d504:	2b20      	cmp	r3, #32
 800d506:	d00a      	beq.n	800d51e <UART_SetConfig+0x18a>
 800d508:	2b20      	cmp	r3, #32
 800d50a:	d814      	bhi.n	800d536 <UART_SetConfig+0x1a2>
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d002      	beq.n	800d516 <UART_SetConfig+0x182>
 800d510:	2b10      	cmp	r3, #16
 800d512:	d008      	beq.n	800d526 <UART_SetConfig+0x192>
 800d514:	e00f      	b.n	800d536 <UART_SetConfig+0x1a2>
 800d516:	2300      	movs	r3, #0
 800d518:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d51c:	e0ad      	b.n	800d67a <UART_SetConfig+0x2e6>
 800d51e:	2302      	movs	r3, #2
 800d520:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d524:	e0a9      	b.n	800d67a <UART_SetConfig+0x2e6>
 800d526:	2304      	movs	r3, #4
 800d528:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d52c:	e0a5      	b.n	800d67a <UART_SetConfig+0x2e6>
 800d52e:	2308      	movs	r3, #8
 800d530:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d534:	e0a1      	b.n	800d67a <UART_SetConfig+0x2e6>
 800d536:	2310      	movs	r3, #16
 800d538:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d53c:	e09d      	b.n	800d67a <UART_SetConfig+0x2e6>
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	4a4a      	ldr	r2, [pc, #296]	@ (800d66c <UART_SetConfig+0x2d8>)
 800d544:	4293      	cmp	r3, r2
 800d546:	d125      	bne.n	800d594 <UART_SetConfig+0x200>
 800d548:	4b45      	ldr	r3, [pc, #276]	@ (800d660 <UART_SetConfig+0x2cc>)
 800d54a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d54e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d552:	2bc0      	cmp	r3, #192	@ 0xc0
 800d554:	d016      	beq.n	800d584 <UART_SetConfig+0x1f0>
 800d556:	2bc0      	cmp	r3, #192	@ 0xc0
 800d558:	d818      	bhi.n	800d58c <UART_SetConfig+0x1f8>
 800d55a:	2b80      	cmp	r3, #128	@ 0x80
 800d55c:	d00a      	beq.n	800d574 <UART_SetConfig+0x1e0>
 800d55e:	2b80      	cmp	r3, #128	@ 0x80
 800d560:	d814      	bhi.n	800d58c <UART_SetConfig+0x1f8>
 800d562:	2b00      	cmp	r3, #0
 800d564:	d002      	beq.n	800d56c <UART_SetConfig+0x1d8>
 800d566:	2b40      	cmp	r3, #64	@ 0x40
 800d568:	d008      	beq.n	800d57c <UART_SetConfig+0x1e8>
 800d56a:	e00f      	b.n	800d58c <UART_SetConfig+0x1f8>
 800d56c:	2300      	movs	r3, #0
 800d56e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d572:	e082      	b.n	800d67a <UART_SetConfig+0x2e6>
 800d574:	2302      	movs	r3, #2
 800d576:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d57a:	e07e      	b.n	800d67a <UART_SetConfig+0x2e6>
 800d57c:	2304      	movs	r3, #4
 800d57e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d582:	e07a      	b.n	800d67a <UART_SetConfig+0x2e6>
 800d584:	2308      	movs	r3, #8
 800d586:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d58a:	e076      	b.n	800d67a <UART_SetConfig+0x2e6>
 800d58c:	2310      	movs	r3, #16
 800d58e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d592:	e072      	b.n	800d67a <UART_SetConfig+0x2e6>
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	4a35      	ldr	r2, [pc, #212]	@ (800d670 <UART_SetConfig+0x2dc>)
 800d59a:	4293      	cmp	r3, r2
 800d59c:	d12a      	bne.n	800d5f4 <UART_SetConfig+0x260>
 800d59e:	4b30      	ldr	r3, [pc, #192]	@ (800d660 <UART_SetConfig+0x2cc>)
 800d5a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d5a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d5a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d5ac:	d01a      	beq.n	800d5e4 <UART_SetConfig+0x250>
 800d5ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d5b2:	d81b      	bhi.n	800d5ec <UART_SetConfig+0x258>
 800d5b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d5b8:	d00c      	beq.n	800d5d4 <UART_SetConfig+0x240>
 800d5ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d5be:	d815      	bhi.n	800d5ec <UART_SetConfig+0x258>
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d003      	beq.n	800d5cc <UART_SetConfig+0x238>
 800d5c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d5c8:	d008      	beq.n	800d5dc <UART_SetConfig+0x248>
 800d5ca:	e00f      	b.n	800d5ec <UART_SetConfig+0x258>
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d5d2:	e052      	b.n	800d67a <UART_SetConfig+0x2e6>
 800d5d4:	2302      	movs	r3, #2
 800d5d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d5da:	e04e      	b.n	800d67a <UART_SetConfig+0x2e6>
 800d5dc:	2304      	movs	r3, #4
 800d5de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d5e2:	e04a      	b.n	800d67a <UART_SetConfig+0x2e6>
 800d5e4:	2308      	movs	r3, #8
 800d5e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d5ea:	e046      	b.n	800d67a <UART_SetConfig+0x2e6>
 800d5ec:	2310      	movs	r3, #16
 800d5ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d5f2:	e042      	b.n	800d67a <UART_SetConfig+0x2e6>
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	4a17      	ldr	r2, [pc, #92]	@ (800d658 <UART_SetConfig+0x2c4>)
 800d5fa:	4293      	cmp	r3, r2
 800d5fc:	d13a      	bne.n	800d674 <UART_SetConfig+0x2e0>
 800d5fe:	4b18      	ldr	r3, [pc, #96]	@ (800d660 <UART_SetConfig+0x2cc>)
 800d600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d604:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d608:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d60c:	d01a      	beq.n	800d644 <UART_SetConfig+0x2b0>
 800d60e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d612:	d81b      	bhi.n	800d64c <UART_SetConfig+0x2b8>
 800d614:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d618:	d00c      	beq.n	800d634 <UART_SetConfig+0x2a0>
 800d61a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d61e:	d815      	bhi.n	800d64c <UART_SetConfig+0x2b8>
 800d620:	2b00      	cmp	r3, #0
 800d622:	d003      	beq.n	800d62c <UART_SetConfig+0x298>
 800d624:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d628:	d008      	beq.n	800d63c <UART_SetConfig+0x2a8>
 800d62a:	e00f      	b.n	800d64c <UART_SetConfig+0x2b8>
 800d62c:	2300      	movs	r3, #0
 800d62e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d632:	e022      	b.n	800d67a <UART_SetConfig+0x2e6>
 800d634:	2302      	movs	r3, #2
 800d636:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d63a:	e01e      	b.n	800d67a <UART_SetConfig+0x2e6>
 800d63c:	2304      	movs	r3, #4
 800d63e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d642:	e01a      	b.n	800d67a <UART_SetConfig+0x2e6>
 800d644:	2308      	movs	r3, #8
 800d646:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d64a:	e016      	b.n	800d67a <UART_SetConfig+0x2e6>
 800d64c:	2310      	movs	r3, #16
 800d64e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d652:	e012      	b.n	800d67a <UART_SetConfig+0x2e6>
 800d654:	efff69f3 	.word	0xefff69f3
 800d658:	40008000 	.word	0x40008000
 800d65c:	40013800 	.word	0x40013800
 800d660:	40021000 	.word	0x40021000
 800d664:	40004400 	.word	0x40004400
 800d668:	40004800 	.word	0x40004800
 800d66c:	40004c00 	.word	0x40004c00
 800d670:	40005000 	.word	0x40005000
 800d674:	2310      	movs	r3, #16
 800d676:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	4a9f      	ldr	r2, [pc, #636]	@ (800d8fc <UART_SetConfig+0x568>)
 800d680:	4293      	cmp	r3, r2
 800d682:	d17a      	bne.n	800d77a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d684:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d688:	2b08      	cmp	r3, #8
 800d68a:	d824      	bhi.n	800d6d6 <UART_SetConfig+0x342>
 800d68c:	a201      	add	r2, pc, #4	@ (adr r2, 800d694 <UART_SetConfig+0x300>)
 800d68e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d692:	bf00      	nop
 800d694:	0800d6b9 	.word	0x0800d6b9
 800d698:	0800d6d7 	.word	0x0800d6d7
 800d69c:	0800d6c1 	.word	0x0800d6c1
 800d6a0:	0800d6d7 	.word	0x0800d6d7
 800d6a4:	0800d6c7 	.word	0x0800d6c7
 800d6a8:	0800d6d7 	.word	0x0800d6d7
 800d6ac:	0800d6d7 	.word	0x0800d6d7
 800d6b0:	0800d6d7 	.word	0x0800d6d7
 800d6b4:	0800d6cf 	.word	0x0800d6cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d6b8:	f7fb fcf8 	bl	80090ac <HAL_RCC_GetPCLK1Freq>
 800d6bc:	61f8      	str	r0, [r7, #28]
        break;
 800d6be:	e010      	b.n	800d6e2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d6c0:	4b8f      	ldr	r3, [pc, #572]	@ (800d900 <UART_SetConfig+0x56c>)
 800d6c2:	61fb      	str	r3, [r7, #28]
        break;
 800d6c4:	e00d      	b.n	800d6e2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d6c6:	f7fb fc59 	bl	8008f7c <HAL_RCC_GetSysClockFreq>
 800d6ca:	61f8      	str	r0, [r7, #28]
        break;
 800d6cc:	e009      	b.n	800d6e2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d6ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d6d2:	61fb      	str	r3, [r7, #28]
        break;
 800d6d4:	e005      	b.n	800d6e2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d6da:	2301      	movs	r3, #1
 800d6dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800d6e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d6e2:	69fb      	ldr	r3, [r7, #28]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	f000 80fb 	beq.w	800d8e0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	685a      	ldr	r2, [r3, #4]
 800d6ee:	4613      	mov	r3, r2
 800d6f0:	005b      	lsls	r3, r3, #1
 800d6f2:	4413      	add	r3, r2
 800d6f4:	69fa      	ldr	r2, [r7, #28]
 800d6f6:	429a      	cmp	r2, r3
 800d6f8:	d305      	bcc.n	800d706 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	685b      	ldr	r3, [r3, #4]
 800d6fe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d700:	69fa      	ldr	r2, [r7, #28]
 800d702:	429a      	cmp	r2, r3
 800d704:	d903      	bls.n	800d70e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800d706:	2301      	movs	r3, #1
 800d708:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800d70c:	e0e8      	b.n	800d8e0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800d70e:	69fb      	ldr	r3, [r7, #28]
 800d710:	2200      	movs	r2, #0
 800d712:	461c      	mov	r4, r3
 800d714:	4615      	mov	r5, r2
 800d716:	f04f 0200 	mov.w	r2, #0
 800d71a:	f04f 0300 	mov.w	r3, #0
 800d71e:	022b      	lsls	r3, r5, #8
 800d720:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800d724:	0222      	lsls	r2, r4, #8
 800d726:	68f9      	ldr	r1, [r7, #12]
 800d728:	6849      	ldr	r1, [r1, #4]
 800d72a:	0849      	lsrs	r1, r1, #1
 800d72c:	2000      	movs	r0, #0
 800d72e:	4688      	mov	r8, r1
 800d730:	4681      	mov	r9, r0
 800d732:	eb12 0a08 	adds.w	sl, r2, r8
 800d736:	eb43 0b09 	adc.w	fp, r3, r9
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	685b      	ldr	r3, [r3, #4]
 800d73e:	2200      	movs	r2, #0
 800d740:	603b      	str	r3, [r7, #0]
 800d742:	607a      	str	r2, [r7, #4]
 800d744:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d748:	4650      	mov	r0, sl
 800d74a:	4659      	mov	r1, fp
 800d74c:	f7f3 fa9c 	bl	8000c88 <__aeabi_uldivmod>
 800d750:	4602      	mov	r2, r0
 800d752:	460b      	mov	r3, r1
 800d754:	4613      	mov	r3, r2
 800d756:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d758:	69bb      	ldr	r3, [r7, #24]
 800d75a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d75e:	d308      	bcc.n	800d772 <UART_SetConfig+0x3de>
 800d760:	69bb      	ldr	r3, [r7, #24]
 800d762:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d766:	d204      	bcs.n	800d772 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	69ba      	ldr	r2, [r7, #24]
 800d76e:	60da      	str	r2, [r3, #12]
 800d770:	e0b6      	b.n	800d8e0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800d772:	2301      	movs	r3, #1
 800d774:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800d778:	e0b2      	b.n	800d8e0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	69db      	ldr	r3, [r3, #28]
 800d77e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d782:	d15e      	bne.n	800d842 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800d784:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d788:	2b08      	cmp	r3, #8
 800d78a:	d828      	bhi.n	800d7de <UART_SetConfig+0x44a>
 800d78c:	a201      	add	r2, pc, #4	@ (adr r2, 800d794 <UART_SetConfig+0x400>)
 800d78e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d792:	bf00      	nop
 800d794:	0800d7b9 	.word	0x0800d7b9
 800d798:	0800d7c1 	.word	0x0800d7c1
 800d79c:	0800d7c9 	.word	0x0800d7c9
 800d7a0:	0800d7df 	.word	0x0800d7df
 800d7a4:	0800d7cf 	.word	0x0800d7cf
 800d7a8:	0800d7df 	.word	0x0800d7df
 800d7ac:	0800d7df 	.word	0x0800d7df
 800d7b0:	0800d7df 	.word	0x0800d7df
 800d7b4:	0800d7d7 	.word	0x0800d7d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d7b8:	f7fb fc78 	bl	80090ac <HAL_RCC_GetPCLK1Freq>
 800d7bc:	61f8      	str	r0, [r7, #28]
        break;
 800d7be:	e014      	b.n	800d7ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d7c0:	f7fb fc8a 	bl	80090d8 <HAL_RCC_GetPCLK2Freq>
 800d7c4:	61f8      	str	r0, [r7, #28]
        break;
 800d7c6:	e010      	b.n	800d7ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d7c8:	4b4d      	ldr	r3, [pc, #308]	@ (800d900 <UART_SetConfig+0x56c>)
 800d7ca:	61fb      	str	r3, [r7, #28]
        break;
 800d7cc:	e00d      	b.n	800d7ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d7ce:	f7fb fbd5 	bl	8008f7c <HAL_RCC_GetSysClockFreq>
 800d7d2:	61f8      	str	r0, [r7, #28]
        break;
 800d7d4:	e009      	b.n	800d7ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d7d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d7da:	61fb      	str	r3, [r7, #28]
        break;
 800d7dc:	e005      	b.n	800d7ea <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800d7de:	2300      	movs	r3, #0
 800d7e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d7e2:	2301      	movs	r3, #1
 800d7e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800d7e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d7ea:	69fb      	ldr	r3, [r7, #28]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d077      	beq.n	800d8e0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d7f0:	69fb      	ldr	r3, [r7, #28]
 800d7f2:	005a      	lsls	r2, r3, #1
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	685b      	ldr	r3, [r3, #4]
 800d7f8:	085b      	lsrs	r3, r3, #1
 800d7fa:	441a      	add	r2, r3
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	685b      	ldr	r3, [r3, #4]
 800d800:	fbb2 f3f3 	udiv	r3, r2, r3
 800d804:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d806:	69bb      	ldr	r3, [r7, #24]
 800d808:	2b0f      	cmp	r3, #15
 800d80a:	d916      	bls.n	800d83a <UART_SetConfig+0x4a6>
 800d80c:	69bb      	ldr	r3, [r7, #24]
 800d80e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d812:	d212      	bcs.n	800d83a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d814:	69bb      	ldr	r3, [r7, #24]
 800d816:	b29b      	uxth	r3, r3
 800d818:	f023 030f 	bic.w	r3, r3, #15
 800d81c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d81e:	69bb      	ldr	r3, [r7, #24]
 800d820:	085b      	lsrs	r3, r3, #1
 800d822:	b29b      	uxth	r3, r3
 800d824:	f003 0307 	and.w	r3, r3, #7
 800d828:	b29a      	uxth	r2, r3
 800d82a:	8afb      	ldrh	r3, [r7, #22]
 800d82c:	4313      	orrs	r3, r2
 800d82e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	8afa      	ldrh	r2, [r7, #22]
 800d836:	60da      	str	r2, [r3, #12]
 800d838:	e052      	b.n	800d8e0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800d83a:	2301      	movs	r3, #1
 800d83c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800d840:	e04e      	b.n	800d8e0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d842:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d846:	2b08      	cmp	r3, #8
 800d848:	d827      	bhi.n	800d89a <UART_SetConfig+0x506>
 800d84a:	a201      	add	r2, pc, #4	@ (adr r2, 800d850 <UART_SetConfig+0x4bc>)
 800d84c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d850:	0800d875 	.word	0x0800d875
 800d854:	0800d87d 	.word	0x0800d87d
 800d858:	0800d885 	.word	0x0800d885
 800d85c:	0800d89b 	.word	0x0800d89b
 800d860:	0800d88b 	.word	0x0800d88b
 800d864:	0800d89b 	.word	0x0800d89b
 800d868:	0800d89b 	.word	0x0800d89b
 800d86c:	0800d89b 	.word	0x0800d89b
 800d870:	0800d893 	.word	0x0800d893
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d874:	f7fb fc1a 	bl	80090ac <HAL_RCC_GetPCLK1Freq>
 800d878:	61f8      	str	r0, [r7, #28]
        break;
 800d87a:	e014      	b.n	800d8a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d87c:	f7fb fc2c 	bl	80090d8 <HAL_RCC_GetPCLK2Freq>
 800d880:	61f8      	str	r0, [r7, #28]
        break;
 800d882:	e010      	b.n	800d8a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d884:	4b1e      	ldr	r3, [pc, #120]	@ (800d900 <UART_SetConfig+0x56c>)
 800d886:	61fb      	str	r3, [r7, #28]
        break;
 800d888:	e00d      	b.n	800d8a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d88a:	f7fb fb77 	bl	8008f7c <HAL_RCC_GetSysClockFreq>
 800d88e:	61f8      	str	r0, [r7, #28]
        break;
 800d890:	e009      	b.n	800d8a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d892:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d896:	61fb      	str	r3, [r7, #28]
        break;
 800d898:	e005      	b.n	800d8a6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800d89a:	2300      	movs	r3, #0
 800d89c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d89e:	2301      	movs	r3, #1
 800d8a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800d8a4:	bf00      	nop
    }

    if (pclk != 0U)
 800d8a6:	69fb      	ldr	r3, [r7, #28]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d019      	beq.n	800d8e0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	685b      	ldr	r3, [r3, #4]
 800d8b0:	085a      	lsrs	r2, r3, #1
 800d8b2:	69fb      	ldr	r3, [r7, #28]
 800d8b4:	441a      	add	r2, r3
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	685b      	ldr	r3, [r3, #4]
 800d8ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8be:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d8c0:	69bb      	ldr	r3, [r7, #24]
 800d8c2:	2b0f      	cmp	r3, #15
 800d8c4:	d909      	bls.n	800d8da <UART_SetConfig+0x546>
 800d8c6:	69bb      	ldr	r3, [r7, #24]
 800d8c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d8cc:	d205      	bcs.n	800d8da <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d8ce:	69bb      	ldr	r3, [r7, #24]
 800d8d0:	b29a      	uxth	r2, r3
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	60da      	str	r2, [r3, #12]
 800d8d8:	e002      	b.n	800d8e0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800d8da:	2301      	movs	r3, #1
 800d8dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800d8ec:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	3728      	adds	r7, #40	@ 0x28
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d8fa:	bf00      	nop
 800d8fc:	40008000 	.word	0x40008000
 800d900:	00f42400 	.word	0x00f42400

0800d904 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d904:	b480      	push	{r7}
 800d906:	b083      	sub	sp, #12
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d910:	f003 0308 	and.w	r3, r3, #8
 800d914:	2b00      	cmp	r3, #0
 800d916:	d00a      	beq.n	800d92e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	685b      	ldr	r3, [r3, #4]
 800d91e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	430a      	orrs	r2, r1
 800d92c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d932:	f003 0301 	and.w	r3, r3, #1
 800d936:	2b00      	cmp	r3, #0
 800d938:	d00a      	beq.n	800d950 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	685b      	ldr	r3, [r3, #4]
 800d940:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	430a      	orrs	r2, r1
 800d94e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d954:	f003 0302 	and.w	r3, r3, #2
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d00a      	beq.n	800d972 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	685b      	ldr	r3, [r3, #4]
 800d962:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	430a      	orrs	r2, r1
 800d970:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d976:	f003 0304 	and.w	r3, r3, #4
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d00a      	beq.n	800d994 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	685b      	ldr	r3, [r3, #4]
 800d984:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	430a      	orrs	r2, r1
 800d992:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d998:	f003 0310 	and.w	r3, r3, #16
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d00a      	beq.n	800d9b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	689b      	ldr	r3, [r3, #8]
 800d9a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	430a      	orrs	r2, r1
 800d9b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9ba:	f003 0320 	and.w	r3, r3, #32
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d00a      	beq.n	800d9d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	689b      	ldr	r3, [r3, #8]
 800d9c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	430a      	orrs	r2, r1
 800d9d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d01a      	beq.n	800da1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	685b      	ldr	r3, [r3, #4]
 800d9ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	430a      	orrs	r2, r1
 800d9f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800da02:	d10a      	bne.n	800da1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	685b      	ldr	r3, [r3, #4]
 800da0a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	430a      	orrs	r2, r1
 800da18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da22:	2b00      	cmp	r3, #0
 800da24:	d00a      	beq.n	800da3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	685b      	ldr	r3, [r3, #4]
 800da2c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	430a      	orrs	r2, r1
 800da3a:	605a      	str	r2, [r3, #4]
  }
}
 800da3c:	bf00      	nop
 800da3e:	370c      	adds	r7, #12
 800da40:	46bd      	mov	sp, r7
 800da42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da46:	4770      	bx	lr

0800da48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b098      	sub	sp, #96	@ 0x60
 800da4c:	af02      	add	r7, sp, #8
 800da4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2200      	movs	r2, #0
 800da54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800da58:	f7f6 ff22 	bl	80048a0 <HAL_GetTick>
 800da5c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	f003 0308 	and.w	r3, r3, #8
 800da68:	2b08      	cmp	r3, #8
 800da6a:	d12e      	bne.n	800daca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800da6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800da70:	9300      	str	r3, [sp, #0]
 800da72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da74:	2200      	movs	r2, #0
 800da76:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800da7a:	6878      	ldr	r0, [r7, #4]
 800da7c:	f000 f88c 	bl	800db98 <UART_WaitOnFlagUntilTimeout>
 800da80:	4603      	mov	r3, r0
 800da82:	2b00      	cmp	r3, #0
 800da84:	d021      	beq.n	800daca <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da8e:	e853 3f00 	ldrex	r3, [r3]
 800da92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800da94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800da9a:	653b      	str	r3, [r7, #80]	@ 0x50
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	461a      	mov	r2, r3
 800daa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800daa4:	647b      	str	r3, [r7, #68]	@ 0x44
 800daa6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daa8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800daaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800daac:	e841 2300 	strex	r3, r2, [r1]
 800dab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800dab2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d1e6      	bne.n	800da86 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2220      	movs	r2, #32
 800dabc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2200      	movs	r2, #0
 800dac2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dac6:	2303      	movs	r3, #3
 800dac8:	e062      	b.n	800db90 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	f003 0304 	and.w	r3, r3, #4
 800dad4:	2b04      	cmp	r3, #4
 800dad6:	d149      	bne.n	800db6c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dad8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800dadc:	9300      	str	r3, [sp, #0]
 800dade:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dae0:	2200      	movs	r2, #0
 800dae2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800dae6:	6878      	ldr	r0, [r7, #4]
 800dae8:	f000 f856 	bl	800db98 <UART_WaitOnFlagUntilTimeout>
 800daec:	4603      	mov	r3, r0
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d03c      	beq.n	800db6c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dafa:	e853 3f00 	ldrex	r3, [r3]
 800dafe:	623b      	str	r3, [r7, #32]
   return(result);
 800db00:	6a3b      	ldr	r3, [r7, #32]
 800db02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800db06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	461a      	mov	r2, r3
 800db0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800db10:	633b      	str	r3, [r7, #48]	@ 0x30
 800db12:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800db16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db18:	e841 2300 	strex	r3, r2, [r1]
 800db1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800db1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db20:	2b00      	cmp	r3, #0
 800db22:	d1e6      	bne.n	800daf2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	3308      	adds	r3, #8
 800db2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db2c:	693b      	ldr	r3, [r7, #16]
 800db2e:	e853 3f00 	ldrex	r3, [r3]
 800db32:	60fb      	str	r3, [r7, #12]
   return(result);
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	f023 0301 	bic.w	r3, r3, #1
 800db3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	3308      	adds	r3, #8
 800db42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800db44:	61fa      	str	r2, [r7, #28]
 800db46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db48:	69b9      	ldr	r1, [r7, #24]
 800db4a:	69fa      	ldr	r2, [r7, #28]
 800db4c:	e841 2300 	strex	r3, r2, [r1]
 800db50:	617b      	str	r3, [r7, #20]
   return(result);
 800db52:	697b      	ldr	r3, [r7, #20]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d1e5      	bne.n	800db24 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2220      	movs	r2, #32
 800db5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2200      	movs	r2, #0
 800db64:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800db68:	2303      	movs	r3, #3
 800db6a:	e011      	b.n	800db90 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2220      	movs	r2, #32
 800db70:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2220      	movs	r2, #32
 800db76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	2200      	movs	r2, #0
 800db7e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2200      	movs	r2, #0
 800db84:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	2200      	movs	r2, #0
 800db8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800db8e:	2300      	movs	r3, #0
}
 800db90:	4618      	mov	r0, r3
 800db92:	3758      	adds	r7, #88	@ 0x58
 800db94:	46bd      	mov	sp, r7
 800db96:	bd80      	pop	{r7, pc}

0800db98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b084      	sub	sp, #16
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	60f8      	str	r0, [r7, #12]
 800dba0:	60b9      	str	r1, [r7, #8]
 800dba2:	603b      	str	r3, [r7, #0]
 800dba4:	4613      	mov	r3, r2
 800dba6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dba8:	e04f      	b.n	800dc4a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dbaa:	69bb      	ldr	r3, [r7, #24]
 800dbac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbb0:	d04b      	beq.n	800dc4a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dbb2:	f7f6 fe75 	bl	80048a0 <HAL_GetTick>
 800dbb6:	4602      	mov	r2, r0
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	1ad3      	subs	r3, r2, r3
 800dbbc:	69ba      	ldr	r2, [r7, #24]
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d302      	bcc.n	800dbc8 <UART_WaitOnFlagUntilTimeout+0x30>
 800dbc2:	69bb      	ldr	r3, [r7, #24]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d101      	bne.n	800dbcc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800dbc8:	2303      	movs	r3, #3
 800dbca:	e04e      	b.n	800dc6a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	f003 0304 	and.w	r3, r3, #4
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d037      	beq.n	800dc4a <UART_WaitOnFlagUntilTimeout+0xb2>
 800dbda:	68bb      	ldr	r3, [r7, #8]
 800dbdc:	2b80      	cmp	r3, #128	@ 0x80
 800dbde:	d034      	beq.n	800dc4a <UART_WaitOnFlagUntilTimeout+0xb2>
 800dbe0:	68bb      	ldr	r3, [r7, #8]
 800dbe2:	2b40      	cmp	r3, #64	@ 0x40
 800dbe4:	d031      	beq.n	800dc4a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	69db      	ldr	r3, [r3, #28]
 800dbec:	f003 0308 	and.w	r3, r3, #8
 800dbf0:	2b08      	cmp	r3, #8
 800dbf2:	d110      	bne.n	800dc16 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	2208      	movs	r2, #8
 800dbfa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dbfc:	68f8      	ldr	r0, [r7, #12]
 800dbfe:	f000 f8ff 	bl	800de00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	2208      	movs	r2, #8
 800dc06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800dc12:	2301      	movs	r3, #1
 800dc14:	e029      	b.n	800dc6a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	69db      	ldr	r3, [r3, #28]
 800dc1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dc20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dc24:	d111      	bne.n	800dc4a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800dc2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dc30:	68f8      	ldr	r0, [r7, #12]
 800dc32:	f000 f8e5 	bl	800de00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	2220      	movs	r2, #32
 800dc3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	2200      	movs	r2, #0
 800dc42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800dc46:	2303      	movs	r3, #3
 800dc48:	e00f      	b.n	800dc6a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	69da      	ldr	r2, [r3, #28]
 800dc50:	68bb      	ldr	r3, [r7, #8]
 800dc52:	4013      	ands	r3, r2
 800dc54:	68ba      	ldr	r2, [r7, #8]
 800dc56:	429a      	cmp	r2, r3
 800dc58:	bf0c      	ite	eq
 800dc5a:	2301      	moveq	r3, #1
 800dc5c:	2300      	movne	r3, #0
 800dc5e:	b2db      	uxtb	r3, r3
 800dc60:	461a      	mov	r2, r3
 800dc62:	79fb      	ldrb	r3, [r7, #7]
 800dc64:	429a      	cmp	r2, r3
 800dc66:	d0a0      	beq.n	800dbaa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dc68:	2300      	movs	r3, #0
}
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	3710      	adds	r7, #16
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd80      	pop	{r7, pc}
	...

0800dc74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dc74:	b480      	push	{r7}
 800dc76:	b097      	sub	sp, #92	@ 0x5c
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	60f8      	str	r0, [r7, #12]
 800dc7c:	60b9      	str	r1, [r7, #8]
 800dc7e:	4613      	mov	r3, r2
 800dc80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	68ba      	ldr	r2, [r7, #8]
 800dc86:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	88fa      	ldrh	r2, [r7, #6]
 800dc8c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	88fa      	ldrh	r2, [r7, #6]
 800dc94:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	689b      	ldr	r3, [r3, #8]
 800dca2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dca6:	d10e      	bne.n	800dcc6 <UART_Start_Receive_IT+0x52>
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	691b      	ldr	r3, [r3, #16]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d105      	bne.n	800dcbc <UART_Start_Receive_IT+0x48>
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800dcb6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800dcba:	e02d      	b.n	800dd18 <UART_Start_Receive_IT+0xa4>
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	22ff      	movs	r2, #255	@ 0xff
 800dcc0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800dcc4:	e028      	b.n	800dd18 <UART_Start_Receive_IT+0xa4>
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	689b      	ldr	r3, [r3, #8]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d10d      	bne.n	800dcea <UART_Start_Receive_IT+0x76>
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	691b      	ldr	r3, [r3, #16]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d104      	bne.n	800dce0 <UART_Start_Receive_IT+0x6c>
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	22ff      	movs	r2, #255	@ 0xff
 800dcda:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800dcde:	e01b      	b.n	800dd18 <UART_Start_Receive_IT+0xa4>
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	227f      	movs	r2, #127	@ 0x7f
 800dce4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800dce8:	e016      	b.n	800dd18 <UART_Start_Receive_IT+0xa4>
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	689b      	ldr	r3, [r3, #8]
 800dcee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dcf2:	d10d      	bne.n	800dd10 <UART_Start_Receive_IT+0x9c>
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	691b      	ldr	r3, [r3, #16]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d104      	bne.n	800dd06 <UART_Start_Receive_IT+0x92>
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	227f      	movs	r2, #127	@ 0x7f
 800dd00:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800dd04:	e008      	b.n	800dd18 <UART_Start_Receive_IT+0xa4>
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	223f      	movs	r2, #63	@ 0x3f
 800dd0a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800dd0e:	e003      	b.n	800dd18 <UART_Start_Receive_IT+0xa4>
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	2200      	movs	r2, #0
 800dd14:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	2222      	movs	r2, #34	@ 0x22
 800dd24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	3308      	adds	r3, #8
 800dd2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd32:	e853 3f00 	ldrex	r3, [r3]
 800dd36:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dd38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd3a:	f043 0301 	orr.w	r3, r3, #1
 800dd3e:	657b      	str	r3, [r7, #84]	@ 0x54
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	3308      	adds	r3, #8
 800dd46:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800dd48:	64ba      	str	r2, [r7, #72]	@ 0x48
 800dd4a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd4c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800dd4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dd50:	e841 2300 	strex	r3, r2, [r1]
 800dd54:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800dd56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d1e5      	bne.n	800dd28 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	689b      	ldr	r3, [r3, #8]
 800dd60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dd64:	d107      	bne.n	800dd76 <UART_Start_Receive_IT+0x102>
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	691b      	ldr	r3, [r3, #16]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d103      	bne.n	800dd76 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	4a21      	ldr	r2, [pc, #132]	@ (800ddf8 <UART_Start_Receive_IT+0x184>)
 800dd72:	669a      	str	r2, [r3, #104]	@ 0x68
 800dd74:	e002      	b.n	800dd7c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	4a20      	ldr	r2, [pc, #128]	@ (800ddfc <UART_Start_Receive_IT+0x188>)
 800dd7a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	691b      	ldr	r3, [r3, #16]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d019      	beq.n	800ddb8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd8c:	e853 3f00 	ldrex	r3, [r3]
 800dd90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dd92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd94:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800dd98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	461a      	mov	r2, r3
 800dda0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dda2:	637b      	str	r3, [r7, #52]	@ 0x34
 800dda4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dda6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800dda8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ddaa:	e841 2300 	strex	r3, r2, [r1]
 800ddae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ddb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d1e6      	bne.n	800dd84 <UART_Start_Receive_IT+0x110>
 800ddb6:	e018      	b.n	800ddea <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddbe:	697b      	ldr	r3, [r7, #20]
 800ddc0:	e853 3f00 	ldrex	r3, [r3]
 800ddc4:	613b      	str	r3, [r7, #16]
   return(result);
 800ddc6:	693b      	ldr	r3, [r7, #16]
 800ddc8:	f043 0320 	orr.w	r3, r3, #32
 800ddcc:	653b      	str	r3, [r7, #80]	@ 0x50
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	461a      	mov	r2, r3
 800ddd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ddd6:	623b      	str	r3, [r7, #32]
 800ddd8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddda:	69f9      	ldr	r1, [r7, #28]
 800dddc:	6a3a      	ldr	r2, [r7, #32]
 800ddde:	e841 2300 	strex	r3, r2, [r1]
 800dde2:	61bb      	str	r3, [r7, #24]
   return(result);
 800dde4:	69bb      	ldr	r3, [r7, #24]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d1e6      	bne.n	800ddb8 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800ddea:	2300      	movs	r3, #0
}
 800ddec:	4618      	mov	r0, r3
 800ddee:	375c      	adds	r7, #92	@ 0x5c
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf6:	4770      	bx	lr
 800ddf8:	0800e105 	.word	0x0800e105
 800ddfc:	0800df49 	.word	0x0800df49

0800de00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800de00:	b480      	push	{r7}
 800de02:	b095      	sub	sp, #84	@ 0x54
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de10:	e853 3f00 	ldrex	r3, [r3]
 800de14:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800de16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800de1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	461a      	mov	r2, r3
 800de24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de26:	643b      	str	r3, [r7, #64]	@ 0x40
 800de28:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de2a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800de2c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800de2e:	e841 2300 	strex	r3, r2, [r1]
 800de32:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800de34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de36:	2b00      	cmp	r3, #0
 800de38:	d1e6      	bne.n	800de08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	3308      	adds	r3, #8
 800de40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de42:	6a3b      	ldr	r3, [r7, #32]
 800de44:	e853 3f00 	ldrex	r3, [r3]
 800de48:	61fb      	str	r3, [r7, #28]
   return(result);
 800de4a:	69fb      	ldr	r3, [r7, #28]
 800de4c:	f023 0301 	bic.w	r3, r3, #1
 800de50:	64bb      	str	r3, [r7, #72]	@ 0x48
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	3308      	adds	r3, #8
 800de58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800de5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800de5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800de60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800de62:	e841 2300 	strex	r3, r2, [r1]
 800de66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800de68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d1e5      	bne.n	800de3a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800de72:	2b01      	cmp	r3, #1
 800de74:	d118      	bne.n	800dea8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	e853 3f00 	ldrex	r3, [r3]
 800de82:	60bb      	str	r3, [r7, #8]
   return(result);
 800de84:	68bb      	ldr	r3, [r7, #8]
 800de86:	f023 0310 	bic.w	r3, r3, #16
 800de8a:	647b      	str	r3, [r7, #68]	@ 0x44
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	461a      	mov	r2, r3
 800de92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800de94:	61bb      	str	r3, [r7, #24]
 800de96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de98:	6979      	ldr	r1, [r7, #20]
 800de9a:	69ba      	ldr	r2, [r7, #24]
 800de9c:	e841 2300 	strex	r3, r2, [r1]
 800dea0:	613b      	str	r3, [r7, #16]
   return(result);
 800dea2:	693b      	ldr	r3, [r7, #16]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d1e6      	bne.n	800de76 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	2220      	movs	r2, #32
 800deac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2200      	movs	r2, #0
 800deb4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	2200      	movs	r2, #0
 800deba:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800debc:	bf00      	nop
 800debe:	3754      	adds	r7, #84	@ 0x54
 800dec0:	46bd      	mov	sp, r7
 800dec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec6:	4770      	bx	lr

0800dec8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b084      	sub	sp, #16
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ded4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	2200      	movs	r2, #0
 800deda:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	2200      	movs	r2, #0
 800dee2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dee6:	68f8      	ldr	r0, [r7, #12]
 800dee8:	f7ff fa3e 	bl	800d368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800deec:	bf00      	nop
 800deee:	3710      	adds	r7, #16
 800def0:	46bd      	mov	sp, r7
 800def2:	bd80      	pop	{r7, pc}

0800def4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b088      	sub	sp, #32
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	e853 3f00 	ldrex	r3, [r3]
 800df08:	60bb      	str	r3, [r7, #8]
   return(result);
 800df0a:	68bb      	ldr	r3, [r7, #8]
 800df0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800df10:	61fb      	str	r3, [r7, #28]
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	461a      	mov	r2, r3
 800df18:	69fb      	ldr	r3, [r7, #28]
 800df1a:	61bb      	str	r3, [r7, #24]
 800df1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df1e:	6979      	ldr	r1, [r7, #20]
 800df20:	69ba      	ldr	r2, [r7, #24]
 800df22:	e841 2300 	strex	r3, r2, [r1]
 800df26:	613b      	str	r3, [r7, #16]
   return(result);
 800df28:	693b      	ldr	r3, [r7, #16]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d1e6      	bne.n	800defc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	2220      	movs	r2, #32
 800df32:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	2200      	movs	r2, #0
 800df38:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800df3a:	6878      	ldr	r0, [r7, #4]
 800df3c:	f7ff fa0a 	bl	800d354 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800df40:	bf00      	nop
 800df42:	3720      	adds	r7, #32
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}

0800df48 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b09c      	sub	sp, #112	@ 0x70
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800df56:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800df60:	2b22      	cmp	r3, #34	@ 0x22
 800df62:	f040 80be 	bne.w	800e0e2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800df6c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800df70:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800df74:	b2d9      	uxtb	r1, r3
 800df76:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800df7a:	b2da      	uxtb	r2, r3
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df80:	400a      	ands	r2, r1
 800df82:	b2d2      	uxtb	r2, r2
 800df84:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df8a:	1c5a      	adds	r2, r3, #1
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800df96:	b29b      	uxth	r3, r3
 800df98:	3b01      	subs	r3, #1
 800df9a:	b29a      	uxth	r2, r3
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800dfa8:	b29b      	uxth	r3, r3
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	f040 80a3 	bne.w	800e0f6 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dfb8:	e853 3f00 	ldrex	r3, [r3]
 800dfbc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800dfbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dfc0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dfc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	461a      	mov	r2, r3
 800dfcc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dfce:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dfd0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfd2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800dfd4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dfd6:	e841 2300 	strex	r3, r2, [r1]
 800dfda:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800dfdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d1e6      	bne.n	800dfb0 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	3308      	adds	r3, #8
 800dfe8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfec:	e853 3f00 	ldrex	r3, [r3]
 800dff0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800dff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dff4:	f023 0301 	bic.w	r3, r3, #1
 800dff8:	667b      	str	r3, [r7, #100]	@ 0x64
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	3308      	adds	r3, #8
 800e000:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e002:	647a      	str	r2, [r7, #68]	@ 0x44
 800e004:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e006:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e008:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e00a:	e841 2300 	strex	r3, r2, [r1]
 800e00e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e010:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e012:	2b00      	cmp	r3, #0
 800e014:	d1e5      	bne.n	800dfe2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	2220      	movs	r2, #32
 800e01a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	2200      	movs	r2, #0
 800e022:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2200      	movs	r2, #0
 800e028:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	4a34      	ldr	r2, [pc, #208]	@ (800e100 <UART_RxISR_8BIT+0x1b8>)
 800e030:	4293      	cmp	r3, r2
 800e032:	d01f      	beq.n	800e074 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	685b      	ldr	r3, [r3, #4]
 800e03a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d018      	beq.n	800e074 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e04a:	e853 3f00 	ldrex	r3, [r3]
 800e04e:	623b      	str	r3, [r7, #32]
   return(result);
 800e050:	6a3b      	ldr	r3, [r7, #32]
 800e052:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e056:	663b      	str	r3, [r7, #96]	@ 0x60
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	461a      	mov	r2, r3
 800e05e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e060:	633b      	str	r3, [r7, #48]	@ 0x30
 800e062:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e064:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e066:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e068:	e841 2300 	strex	r3, r2, [r1]
 800e06c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e06e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e070:	2b00      	cmp	r3, #0
 800e072:	d1e6      	bne.n	800e042 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e078:	2b01      	cmp	r3, #1
 800e07a:	d12e      	bne.n	800e0da <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2200      	movs	r2, #0
 800e080:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e088:	693b      	ldr	r3, [r7, #16]
 800e08a:	e853 3f00 	ldrex	r3, [r3]
 800e08e:	60fb      	str	r3, [r7, #12]
   return(result);
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	f023 0310 	bic.w	r3, r3, #16
 800e096:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	461a      	mov	r2, r3
 800e09e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e0a0:	61fb      	str	r3, [r7, #28]
 800e0a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0a4:	69b9      	ldr	r1, [r7, #24]
 800e0a6:	69fa      	ldr	r2, [r7, #28]
 800e0a8:	e841 2300 	strex	r3, r2, [r1]
 800e0ac:	617b      	str	r3, [r7, #20]
   return(result);
 800e0ae:	697b      	ldr	r3, [r7, #20]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d1e6      	bne.n	800e082 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	69db      	ldr	r3, [r3, #28]
 800e0ba:	f003 0310 	and.w	r3, r3, #16
 800e0be:	2b10      	cmp	r3, #16
 800e0c0:	d103      	bne.n	800e0ca <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	2210      	movs	r2, #16
 800e0c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e0d0:	4619      	mov	r1, r3
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f7ff f952 	bl	800d37c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e0d8:	e00d      	b.n	800e0f6 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800e0da:	6878      	ldr	r0, [r7, #4]
 800e0dc:	f7f4 f86a 	bl	80021b4 <HAL_UART_RxCpltCallback>
}
 800e0e0:	e009      	b.n	800e0f6 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	8b1b      	ldrh	r3, [r3, #24]
 800e0e8:	b29a      	uxth	r2, r3
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	f042 0208 	orr.w	r2, r2, #8
 800e0f2:	b292      	uxth	r2, r2
 800e0f4:	831a      	strh	r2, [r3, #24]
}
 800e0f6:	bf00      	nop
 800e0f8:	3770      	adds	r7, #112	@ 0x70
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	bd80      	pop	{r7, pc}
 800e0fe:	bf00      	nop
 800e100:	40008000 	.word	0x40008000

0800e104 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b09c      	sub	sp, #112	@ 0x70
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e112:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e11c:	2b22      	cmp	r3, #34	@ 0x22
 800e11e:	f040 80be 	bne.w	800e29e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800e128:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e130:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800e132:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800e136:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800e13a:	4013      	ands	r3, r2
 800e13c:	b29a      	uxth	r2, r3
 800e13e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e140:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e146:	1c9a      	adds	r2, r3, #2
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800e152:	b29b      	uxth	r3, r3
 800e154:	3b01      	subs	r3, #1
 800e156:	b29a      	uxth	r2, r3
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800e164:	b29b      	uxth	r3, r3
 800e166:	2b00      	cmp	r3, #0
 800e168:	f040 80a3 	bne.w	800e2b2 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e172:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e174:	e853 3f00 	ldrex	r3, [r3]
 800e178:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800e17a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e17c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e180:	667b      	str	r3, [r7, #100]	@ 0x64
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	461a      	mov	r2, r3
 800e188:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e18a:	657b      	str	r3, [r7, #84]	@ 0x54
 800e18c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e18e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e190:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e192:	e841 2300 	strex	r3, r2, [r1]
 800e196:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e198:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d1e6      	bne.n	800e16c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	3308      	adds	r3, #8
 800e1a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1a8:	e853 3f00 	ldrex	r3, [r3]
 800e1ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e1ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1b0:	f023 0301 	bic.w	r3, r3, #1
 800e1b4:	663b      	str	r3, [r7, #96]	@ 0x60
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	3308      	adds	r3, #8
 800e1bc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e1be:	643a      	str	r2, [r7, #64]	@ 0x40
 800e1c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e1c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e1c6:	e841 2300 	strex	r3, r2, [r1]
 800e1ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e1cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d1e5      	bne.n	800e19e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	2220      	movs	r2, #32
 800e1d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	2200      	movs	r2, #0
 800e1de:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	4a34      	ldr	r2, [pc, #208]	@ (800e2bc <UART_RxISR_16BIT+0x1b8>)
 800e1ec:	4293      	cmp	r3, r2
 800e1ee:	d01f      	beq.n	800e230 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	685b      	ldr	r3, [r3, #4]
 800e1f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d018      	beq.n	800e230 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e204:	6a3b      	ldr	r3, [r7, #32]
 800e206:	e853 3f00 	ldrex	r3, [r3]
 800e20a:	61fb      	str	r3, [r7, #28]
   return(result);
 800e20c:	69fb      	ldr	r3, [r7, #28]
 800e20e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e212:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	461a      	mov	r2, r3
 800e21a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e21c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e21e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e220:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e222:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e224:	e841 2300 	strex	r3, r2, [r1]
 800e228:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e22a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d1e6      	bne.n	800e1fe <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e234:	2b01      	cmp	r3, #1
 800e236:	d12e      	bne.n	800e296 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2200      	movs	r2, #0
 800e23c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	e853 3f00 	ldrex	r3, [r3]
 800e24a:	60bb      	str	r3, [r7, #8]
   return(result);
 800e24c:	68bb      	ldr	r3, [r7, #8]
 800e24e:	f023 0310 	bic.w	r3, r3, #16
 800e252:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	461a      	mov	r2, r3
 800e25a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e25c:	61bb      	str	r3, [r7, #24]
 800e25e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e260:	6979      	ldr	r1, [r7, #20]
 800e262:	69ba      	ldr	r2, [r7, #24]
 800e264:	e841 2300 	strex	r3, r2, [r1]
 800e268:	613b      	str	r3, [r7, #16]
   return(result);
 800e26a:	693b      	ldr	r3, [r7, #16]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d1e6      	bne.n	800e23e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	69db      	ldr	r3, [r3, #28]
 800e276:	f003 0310 	and.w	r3, r3, #16
 800e27a:	2b10      	cmp	r3, #16
 800e27c:	d103      	bne.n	800e286 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	2210      	movs	r2, #16
 800e284:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e28c:	4619      	mov	r1, r3
 800e28e:	6878      	ldr	r0, [r7, #4]
 800e290:	f7ff f874 	bl	800d37c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e294:	e00d      	b.n	800e2b2 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800e296:	6878      	ldr	r0, [r7, #4]
 800e298:	f7f3 ff8c 	bl	80021b4 <HAL_UART_RxCpltCallback>
}
 800e29c:	e009      	b.n	800e2b2 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	8b1b      	ldrh	r3, [r3, #24]
 800e2a4:	b29a      	uxth	r2, r3
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	f042 0208 	orr.w	r2, r2, #8
 800e2ae:	b292      	uxth	r2, r2
 800e2b0:	831a      	strh	r2, [r3, #24]
}
 800e2b2:	bf00      	nop
 800e2b4:	3770      	adds	r7, #112	@ 0x70
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}
 800e2ba:	bf00      	nop
 800e2bc:	40008000 	.word	0x40008000

0800e2c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e2c0:	b480      	push	{r7}
 800e2c2:	b083      	sub	sp, #12
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e2c8:	bf00      	nop
 800e2ca:	370c      	adds	r7, #12
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d2:	4770      	bx	lr

0800e2d4 <CheckValidRectRoi>:
 *   0------------------------- >15
 *   check Rectangle definition conforms to the (0,15,15) coordinate system
 *   with a minimum of 4x4 size
 */
static VL53L1_Error CheckValidRectRoi(VL53L1_UserRoi_t ROI)
{
 800e2d4:	b480      	push	{r7}
 800e2d6:	b085      	sub	sp, #20
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800e2dc:	2300      	movs	r3, #0
 800e2de:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* Negative check are not necessary because value is unsigned */
	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 800e2e0:	793b      	ldrb	r3, [r7, #4]
 800e2e2:	2b0f      	cmp	r3, #15
 800e2e4:	d808      	bhi.n	800e2f8 <CheckValidRectRoi+0x24>
 800e2e6:	797b      	ldrb	r3, [r7, #5]
 800e2e8:	2b0f      	cmp	r3, #15
 800e2ea:	d805      	bhi.n	800e2f8 <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 800e2ec:	79bb      	ldrb	r3, [r7, #6]
	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 800e2ee:	2b0f      	cmp	r3, #15
 800e2f0:	d802      	bhi.n	800e2f8 <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 800e2f2:	79fb      	ldrb	r3, [r7, #7]
 800e2f4:	2b0f      	cmp	r3, #15
 800e2f6:	d901      	bls.n	800e2fc <CheckValidRectRoi+0x28>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800e2f8:	23fc      	movs	r3, #252	@ 0xfc
 800e2fa:	73fb      	strb	r3, [r7, #15]

	if ((ROI.TopLeftX > ROI.BotRightX) || (ROI.TopLeftY < ROI.BotRightY))
 800e2fc:	793a      	ldrb	r2, [r7, #4]
 800e2fe:	79bb      	ldrb	r3, [r7, #6]
 800e300:	429a      	cmp	r2, r3
 800e302:	d803      	bhi.n	800e30c <CheckValidRectRoi+0x38>
 800e304:	797a      	ldrb	r2, [r7, #5]
 800e306:	79fb      	ldrb	r3, [r7, #7]
 800e308:	429a      	cmp	r2, r3
 800e30a:	d201      	bcs.n	800e310 <CheckValidRectRoi+0x3c>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800e30c:	23fc      	movs	r3, #252	@ 0xfc
 800e30e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800e310:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e314:	4618      	mov	r0, r3
 800e316:	3714      	adds	r7, #20
 800e318:	46bd      	mov	sp, r7
 800e31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31e:	4770      	bx	lr

0800e320 <ConvertModeToLLD>:

static VL53L1_GPIO_Interrupt_Mode ConvertModeToLLD(VL53L1_Error *pStatus,
		VL53L1_ThresholdMode CrossMode)
{
 800e320:	b480      	push	{r7}
 800e322:	b085      	sub	sp, #20
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
 800e328:	460b      	mov	r3, r1
 800e32a:	70fb      	strb	r3, [r7, #3]
	VL53L1_GPIO_Interrupt_Mode Mode;

	switch (CrossMode) {
 800e32c:	78fb      	ldrb	r3, [r7, #3]
 800e32e:	2b03      	cmp	r3, #3
 800e330:	d816      	bhi.n	800e360 <ConvertModeToLLD+0x40>
 800e332:	a201      	add	r2, pc, #4	@ (adr r2, 800e338 <ConvertModeToLLD+0x18>)
 800e334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e338:	0800e349 	.word	0x0800e349
 800e33c:	0800e34f 	.word	0x0800e34f
 800e340:	0800e355 	.word	0x0800e355
 800e344:	0800e35b 	.word	0x0800e35b
	case VL53L1_THRESHOLD_CROSSED_LOW:
		Mode = VL53L1_GPIOINTMODE_LEVEL_LOW;
 800e348:	2300      	movs	r3, #0
 800e34a:	73fb      	strb	r3, [r7, #15]
		break;
 800e34c:	e00d      	b.n	800e36a <ConvertModeToLLD+0x4a>
	case VL53L1_THRESHOLD_CROSSED_HIGH:
		Mode = VL53L1_GPIOINTMODE_LEVEL_HIGH;
 800e34e:	2301      	movs	r3, #1
 800e350:	73fb      	strb	r3, [r7, #15]
		break;
 800e352:	e00a      	b.n	800e36a <ConvertModeToLLD+0x4a>
	case VL53L1_THRESHOLD_OUT_OF_WINDOW:
		Mode = VL53L1_GPIOINTMODE_OUT_OF_WINDOW;
 800e354:	2302      	movs	r3, #2
 800e356:	73fb      	strb	r3, [r7, #15]
		break;
 800e358:	e007      	b.n	800e36a <ConvertModeToLLD+0x4a>
	case VL53L1_THRESHOLD_IN_WINDOW:
		Mode = VL53L1_GPIOINTMODE_IN_WINDOW;
 800e35a:	2303      	movs	r3, #3
 800e35c:	73fb      	strb	r3, [r7, #15]
		break;
 800e35e:	e004      	b.n	800e36a <ConvertModeToLLD+0x4a>
	default:
		/* define Mode to avoid warning but actual value doesn't mind */
		Mode = VL53L1_GPIOINTMODE_LEVEL_HIGH;
 800e360:	2301      	movs	r3, #1
 800e362:	73fb      	strb	r3, [r7, #15]
		*pStatus = VL53L1_ERROR_INVALID_PARAMS;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	22fc      	movs	r2, #252	@ 0xfc
 800e368:	701a      	strb	r2, [r3, #0]
	}
	return Mode;
 800e36a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e36c:	4618      	mov	r0, r3
 800e36e:	3714      	adds	r7, #20
 800e370:	46bd      	mov	sp, r7
 800e372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e376:	4770      	bx	lr

0800e378 <VL53L1_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L1_Error VL53L1_SetDeviceAddress(VL53L1_DEV Dev, uint8_t DeviceAddress)
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b086      	sub	sp, #24
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
 800e380:	460b      	mov	r3, r1
 800e382:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800e384:	2300      	movs	r3, #0
 800e386:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	613b      	str	r3, [r7, #16]
	VL53L1_static_nvm_managed_t  *pdata = &(pdev->stat_nvm);
 800e38c:	693b      	ldr	r3, [r7, #16]
 800e38e:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800e392:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	Status = VL53L1_WrByte(Dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
 800e394:	78fb      	ldrb	r3, [r7, #3]
 800e396:	085b      	lsrs	r3, r3, #1
 800e398:	b2db      	uxtb	r3, r3
 800e39a:	461a      	mov	r2, r3
 800e39c:	2101      	movs	r1, #1
 800e39e:	6878      	ldr	r0, [r7, #4]
 800e3a0:	f005 f94e 	bl	8013640 <VL53L1_WrByte>
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	75fb      	strb	r3, [r7, #23]
			DeviceAddress / 2);

	pdata->i2c_slave__device_address = (DeviceAddress / 2) & 0x7F;
 800e3a8:	78fb      	ldrb	r3, [r7, #3]
 800e3aa:	085b      	lsrs	r3, r3, #1
 800e3ac:	b2db      	uxtb	r3, r3
 800e3ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e3b2:	b2da      	uxtb	r2, r3
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800e3b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e3bc:	4618      	mov	r0, r3
 800e3be:	3718      	adds	r7, #24
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	bd80      	pop	{r7, pc}

0800e3c4 <VL53L1_DataInit>:

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b084      	sub	sp, #16
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 800e3d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d105      	bne.n	800e3e4 <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 800e3d8:	2101      	movs	r1, #1
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	f000 ff14 	bl	800f208 <VL53L1_data_init>
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L1_ERROR_NONE)
 800e3e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d103      	bne.n	800e3f4 <VL53L1_DataInit+0x30>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	2201      	movs	r2, #1
 800e3f0:	f883 2378 	strb.w	r2, [r3, #888]	@ 0x378

	/* Enable all check */
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	73bb      	strb	r3, [r7, #14]
 800e3f8:	e012      	b.n	800e420 <VL53L1_DataInit+0x5c>
		if (Status == VL53L1_ERROR_NONE)
 800e3fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d112      	bne.n	800e428 <VL53L1_DataInit+0x64>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 800e402:	7bbb      	ldrb	r3, [r7, #14]
 800e404:	b29b      	uxth	r3, r3
 800e406:	2201      	movs	r2, #1
 800e408:	4619      	mov	r1, r3
 800e40a:	6878      	ldr	r0, [r7, #4]
 800e40c:	f000 fb01 	bl	800ea12 <VL53L1_SetLimitCheckEnable>
 800e410:	4603      	mov	r3, r0
 800e412:	461a      	mov	r2, r3
 800e414:	7bfb      	ldrb	r3, [r7, #15]
 800e416:	4313      	orrs	r3, r2
 800e418:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800e41a:	7bbb      	ldrb	r3, [r7, #14]
 800e41c:	3301      	adds	r3, #1
 800e41e:	73bb      	strb	r3, [r7, #14]
 800e420:	7bbb      	ldrb	r3, [r7, #14]
 800e422:	2b01      	cmp	r3, #1
 800e424:	d9e9      	bls.n	800e3fa <VL53L1_DataInit+0x36>
 800e426:	e000      	b.n	800e42a <VL53L1_DataInit+0x66>
		else
			break;
 800e428:	bf00      	nop

	}


	LOG_FUNCTION_END(Status);
	return Status;
 800e42a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e42e:	4618      	mov	r0, r3
 800e430:	3710      	adds	r7, #16
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}

0800e436 <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 800e436:	b580      	push	{r7, lr}
 800e438:	b084      	sub	sp, #16
 800e43a:	af00      	add	r7, sp, #0
 800e43c:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800e43e:	2300      	movs	r3, #0
 800e440:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	2203      	movs	r2, #3
 800e446:	f883 2378 	strb.w	r2, [r3, #888]	@ 0x378

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 800e44a:	2320      	movs	r3, #32
 800e44c:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	7bba      	ldrb	r2, [r7, #14]
 800e452:	709a      	strb	r2, [r3, #2]

	/* ticket 472728 fix */
	Status = VL53L1_SetPresetMode(Dev,
 800e454:	2108      	movs	r1, #8
 800e456:	6878      	ldr	r0, [r7, #4]
 800e458:	f000 f8f7 	bl	800e64a <VL53L1_SetPresetMode>
 800e45c:	4603      	mov	r3, r0
 800e45e:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	2208      	movs	r2, #8
 800e464:	f883 237c 	strb.w	r2, [r3, #892]	@ 0x37c
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	/* end of ticket 472728 fix */

	LOG_FUNCTION_END(Status);
	return Status;
 800e468:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e46c:	4618      	mov	r0, r3
 800e46e:	3710      	adds	r7, #16
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}

0800e474 <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b084      	sub	sp, #16
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800e47c:	2300      	movs	r3, #0
 800e47e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 800e480:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800e484:	6878      	ldr	r0, [r7, #4]
 800e486:	f005 f802 	bl	801348e <VL53L1_poll_for_boot_completion>
 800e48a:	4603      	mov	r3, r0
 800e48c:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 800e48e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e492:	4618      	mov	r0, r3
 800e494:	3710      	adds	r7, #16
 800e496:	46bd      	mov	sp, r7
 800e498:	bd80      	pop	{r7, pc}
	...

0800e49c <ComputeDevicePresetMode>:
/* Group PAL Parameters Functions */
static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 800e49c:	b480      	push	{r7}
 800e49e:	b087      	sub	sp, #28
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	603a      	str	r2, [r7, #0]
 800e4a6:	71fb      	strb	r3, [r7, #7]
 800e4a8:	460b      	mov	r3, r1
 800e4aa:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	75fb      	strb	r3, [r7, #23]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 800e4b0:	4a2b      	ldr	r2, [pc, #172]	@ (800e560 <ComputeDevicePresetMode+0xc4>)
 800e4b2:	f107 0310 	add.w	r3, r7, #16
 800e4b6:	6812      	ldr	r2, [r2, #0]
 800e4b8:	4611      	mov	r1, r2
 800e4ba:	8019      	strh	r1, [r3, #0]
 800e4bc:	3302      	adds	r3, #2
 800e4be:	0c12      	lsrs	r2, r2, #16
 800e4c0:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};


	VL53L1_DevicePresetModes TimedModes[3] = {
 800e4c2:	4a28      	ldr	r2, [pc, #160]	@ (800e564 <ComputeDevicePresetMode+0xc8>)
 800e4c4:	f107 030c 	add.w	r3, r7, #12
 800e4c8:	6812      	ldr	r2, [r2, #0]
 800e4ca:	4611      	mov	r1, r2
 800e4cc:	8019      	strh	r1, [r3, #0]
 800e4ce:	3302      	adds	r3, #2
 800e4d0:	0c12      	lsrs	r2, r2, #16
 800e4d2:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 800e4d4:	4a24      	ldr	r2, [pc, #144]	@ (800e568 <ComputeDevicePresetMode+0xcc>)
 800e4d6:	f107 0308 	add.w	r3, r7, #8
 800e4da:	6812      	ldr	r2, [r2, #0]
 800e4dc:	4611      	mov	r1, r2
 800e4de:	8019      	strh	r1, [r3, #0]
 800e4e0:	3302      	adds	r3, #2
 800e4e2:	0c12      	lsrs	r2, r2, #16
 800e4e4:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	2201      	movs	r2, #1
 800e4ea:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 800e4ec:	79bb      	ldrb	r3, [r7, #6]
 800e4ee:	2b01      	cmp	r3, #1
 800e4f0:	d002      	beq.n	800e4f8 <ComputeDevicePresetMode+0x5c>
 800e4f2:	2b02      	cmp	r3, #2
 800e4f4:	d003      	beq.n	800e4fe <ComputeDevicePresetMode+0x62>
 800e4f6:	e005      	b.n	800e504 <ComputeDevicePresetMode+0x68>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	75bb      	strb	r3, [r7, #22]
		break;
 800e4fc:	e004      	b.n	800e508 <ComputeDevicePresetMode+0x6c>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 800e4fe:	2301      	movs	r3, #1
 800e500:	75bb      	strb	r3, [r7, #22]
		break;
 800e502:	e001      	b.n	800e508 <ComputeDevicePresetMode+0x6c>
	default:
		DistIdx = 2;
 800e504:	2302      	movs	r3, #2
 800e506:	75bb      	strb	r3, [r7, #22]
	}

	switch (PresetMode) {
 800e508:	79fb      	ldrb	r3, [r7, #7]
 800e50a:	2b08      	cmp	r3, #8
 800e50c:	d015      	beq.n	800e53a <ComputeDevicePresetMode+0x9e>
 800e50e:	2b08      	cmp	r3, #8
 800e510:	dc1b      	bgt.n	800e54a <ComputeDevicePresetMode+0xae>
 800e512:	2b03      	cmp	r3, #3
 800e514:	d009      	beq.n	800e52a <ComputeDevicePresetMode+0x8e>
 800e516:	2b04      	cmp	r3, #4
 800e518:	d117      	bne.n	800e54a <ComputeDevicePresetMode+0xae>
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 800e51a:	7dbb      	ldrb	r3, [r7, #22]
 800e51c:	3318      	adds	r3, #24
 800e51e:	443b      	add	r3, r7
 800e520:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800e524:	683b      	ldr	r3, [r7, #0]
 800e526:	701a      	strb	r2, [r3, #0]
		break;
 800e528:	e011      	b.n	800e54e <ComputeDevicePresetMode+0xb2>


	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 800e52a:	7dbb      	ldrb	r3, [r7, #22]
 800e52c:	3318      	adds	r3, #24
 800e52e:	443b      	add	r3, r7
 800e530:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	701a      	strb	r2, [r3, #0]
		break;
 800e538:	e009      	b.n	800e54e <ComputeDevicePresetMode+0xb2>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 800e53a:	7dbb      	ldrb	r3, [r7, #22]
 800e53c:	3318      	adds	r3, #24
 800e53e:	443b      	add	r3, r7
 800e540:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	701a      	strb	r2, [r3, #0]
		break;
 800e548:	e001      	b.n	800e54e <ComputeDevicePresetMode+0xb2>

	default:
		/* Unsupported mode */
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800e54a:	23f8      	movs	r3, #248	@ 0xf8
 800e54c:	75fb      	strb	r3, [r7, #23]
	}

	return Status;
 800e54e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e552:	4618      	mov	r0, r3
 800e554:	371c      	adds	r7, #28
 800e556:	46bd      	mov	sp, r7
 800e558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55c:	4770      	bx	lr
 800e55e:	bf00      	nop
 800e560:	08017014 	.word	0x08017014
 800e564:	08017018 	.word	0x08017018
 800e568:	0801701c 	.word	0x0801701c

0800e56c <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 800e56c:	b5b0      	push	{r4, r5, r7, lr}
 800e56e:	b08e      	sub	sp, #56	@ 0x38
 800e570:	af04      	add	r7, sp, #16
 800e572:	60f8      	str	r0, [r7, #12]
 800e574:	607b      	str	r3, [r7, #4]
 800e576:	460b      	mov	r3, r1
 800e578:	72fb      	strb	r3, [r7, #11]
 800e57a:	4613      	mov	r3, r2
 800e57c:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800e57e:	2300      	movs	r3, #0
 800e580:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53L1_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 800e584:	2300      	movs	r3, #0
 800e586:	847b      	strh	r3, [r7, #34]	@ 0x22
	uint32_t phasecal_config_timeout_us = 0;
 800e588:	2300      	movs	r3, #0
 800e58a:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 800e58c:	2300      	movs	r3, #0
 800e58e:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 800e590:	2300      	movs	r3, #0
 800e592:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 800e594:	7afb      	ldrb	r3, [r7, #11]
 800e596:	2b03      	cmp	r3, #3
 800e598:	d002      	beq.n	800e5a0 <SetPresetMode+0x34>
 800e59a:	7afb      	ldrb	r3, [r7, #11]
 800e59c:	2b08      	cmp	r3, #8
 800e59e:	d103      	bne.n	800e5a8 <SetPresetMode+0x3c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 800e5a0:	2340      	movs	r3, #64	@ 0x40
 800e5a2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e5a6:	e002      	b.n	800e5ae <SetPresetMode+0x42>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 800e5a8:	2320      	movs	r3, #32
 800e5aa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 800e5ae:	f107 0225 	add.w	r2, r7, #37	@ 0x25
 800e5b2:	7ab9      	ldrb	r1, [r7, #10]
 800e5b4:	7afb      	ldrb	r3, [r7, #11]
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f7ff ff70 	bl	800e49c <ComputeDevicePresetMode>
 800e5bc:	4603      	mov	r3, r0
 800e5be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 800e5c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d112      	bne.n	800e5f0 <SetPresetMode+0x84>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 800e5ca:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 800e5ce:	f107 001c 	add.w	r0, r7, #28
 800e5d2:	f107 0222 	add.w	r2, r7, #34	@ 0x22
 800e5d6:	f107 0314 	add.w	r3, r7, #20
 800e5da:	9301      	str	r3, [sp, #4]
 800e5dc:	f107 0318 	add.w	r3, r7, #24
 800e5e0:	9300      	str	r3, [sp, #0]
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	68f8      	ldr	r0, [r7, #12]
 800e5e6:	f001 f8a7 	bl	800f738 <VL53L1_get_preset_mode_timing_cfg>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 800e5f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d112      	bne.n	800e61e <SetPresetMode+0xb2>
		Status = VL53L1_set_preset_mode(
 800e5f8:	f897 0025 	ldrb.w	r0, [r7, #37]	@ 0x25
 800e5fc:	8c7c      	ldrh	r4, [r7, #34]	@ 0x22
 800e5fe:	69fd      	ldr	r5, [r7, #28]
 800e600:	69bb      	ldr	r3, [r7, #24]
 800e602:	697a      	ldr	r2, [r7, #20]
 800e604:	6879      	ldr	r1, [r7, #4]
 800e606:	9102      	str	r1, [sp, #8]
 800e608:	9201      	str	r2, [sp, #4]
 800e60a:	9300      	str	r3, [sp, #0]
 800e60c:	462b      	mov	r3, r5
 800e60e:	4622      	mov	r2, r4
 800e610:	4601      	mov	r1, r0
 800e612:	68f8      	ldr	r0, [r7, #12]
 800e614:	f001 f93a 	bl	800f88c <VL53L1_set_preset_mode>
 800e618:	4603      	mov	r3, r0
 800e61a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 800e61e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e622:	2b00      	cmp	r3, #0
 800e624:	d103      	bne.n	800e62e <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode,
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800e62c:	709a      	strb	r2, [r3, #2]
				measurement_mode);

	if (Status == VL53L1_ERROR_NONE)
 800e62e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e632:	2b00      	cmp	r3, #0
 800e634:	d103      	bne.n	800e63e <SetPresetMode+0xd2>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	7afa      	ldrb	r2, [r7, #11]
 800e63a:	f883 237c 	strb.w	r2, [r3, #892]	@ 0x37c

	LOG_FUNCTION_END(Status);
	return Status;
 800e63e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800e642:	4618      	mov	r0, r3
 800e644:	3728      	adds	r7, #40	@ 0x28
 800e646:	46bd      	mov	sp, r7
 800e648:	bdb0      	pop	{r4, r5, r7, pc}

0800e64a <VL53L1_SetPresetMode>:
	return Status;
}


VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 800e64a:	b580      	push	{r7, lr}
 800e64c:	b084      	sub	sp, #16
 800e64e:	af00      	add	r7, sp, #0
 800e650:	6078      	str	r0, [r7, #4]
 800e652:	460b      	mov	r3, r1
 800e654:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800e656:	2300      	movs	r3, #0
 800e658:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 800e65a:	2303      	movs	r3, #3
 800e65c:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	/* fix for bug 495690 */
	Status = VL53L1_low_power_auto_data_init(Dev);
 800e65e:	6878      	ldr	r0, [r7, #4]
 800e660:	f003 fd50 	bl	8012104 <VL53L1_low_power_auto_data_init>
 800e664:	4603      	mov	r3, r0
 800e666:	73fb      	strb	r3, [r7, #15]

	Status = SetPresetMode(Dev,
 800e668:	7bba      	ldrb	r2, [r7, #14]
 800e66a:	78f9      	ldrb	r1, [r7, #3]
 800e66c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e670:	6878      	ldr	r0, [r7, #4]
 800e672:	f7ff ff7b 	bl	800e56c <SetPresetMode>
 800e676:	4603      	mov	r3, r0
 800e678:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 800e67a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d117      	bne.n	800e6b2 <VL53L1_SetPresetMode+0x68>
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 800e682:	78fb      	ldrb	r3, [r7, #3]
 800e684:	2b04      	cmp	r3, #4
 800e686:	d005      	beq.n	800e694 <VL53L1_SetPresetMode+0x4a>
 800e688:	78fb      	ldrb	r3, [r7, #3]
 800e68a:	2b03      	cmp	r3, #3
 800e68c:	d002      	beq.n	800e694 <VL53L1_SetPresetMode+0x4a>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 800e68e:	78fb      	ldrb	r3, [r7, #3]
 800e690:	2b08      	cmp	r3, #8
 800e692:	d107      	bne.n	800e6a4 <VL53L1_SetPresetMode+0x5a>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 800e694:	f24a 0128 	movw	r1, #41000	@ 0xa028
 800e698:	6878      	ldr	r0, [r7, #4]
 800e69a:	f000 f891 	bl	800e7c0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800e69e:	4603      	mov	r3, r0
 800e6a0:	73fb      	strb	r3, [r7, #15]
 800e6a2:	e006      	b.n	800e6b2 <VL53L1_SetPresetMode+0x68>
				Dev, 41000);
		else
			/* Set default timing budget to 30Hz (33.33 ms)*/
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 800e6a4:	f248 2135 	movw	r1, #33333	@ 0x8235
 800e6a8:	6878      	ldr	r0, [r7, #4]
 800e6aa:	f000 f889 	bl	800e7c0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800e6b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d106      	bne.n	800e6c8 <VL53L1_SetPresetMode+0x7e>
		/* Set default intermeasurement period to 1000 ms */
		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 800e6ba:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800e6be:	6878      	ldr	r0, [r7, #4]
 800e6c0:	f000 f95e 	bl	800e980 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800e6c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	3710      	adds	r7, #16
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bd80      	pop	{r7, pc}

0800e6d4 <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b088      	sub	sp, #32
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	460b      	mov	r3, r1
 800e6de:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	77fb      	strb	r3, [r7, #31]
	VL53L1_PresetModes PresetMode;
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	60fb      	str	r3, [r7, #12]
	VL53L1_user_zone_t user_zone;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f893 337c 	ldrb.w	r3, [r3, #892]	@ 0x37c
 800e6f6:	77bb      	strb	r3, [r7, #30]
	/* when the distance mode is valid:
	 * Manual Mode: all modes
	 * AUTO AUTO_LITE : LITE_RANGING, RANGING
	 */

	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 800e6f8:	78fb      	ldrb	r3, [r7, #3]
 800e6fa:	2b01      	cmp	r3, #1
 800e6fc:	d008      	beq.n	800e710 <VL53L1_SetDistanceMode+0x3c>
 800e6fe:	78fb      	ldrb	r3, [r7, #3]
 800e700:	2b02      	cmp	r3, #2
 800e702:	d005      	beq.n	800e710 <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 800e704:	78fb      	ldrb	r3, [r7, #3]
 800e706:	2b03      	cmp	r3, #3
 800e708:	d002      	beq.n	800e710 <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 800e70a:	f06f 0303 	mvn.w	r3, #3
 800e70e:	e052      	b.n	800e7b6 <VL53L1_SetDistanceMode+0xe2>

	if (Status == VL53L1_ERROR_NONE)
 800e710:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d107      	bne.n	800e728 <VL53L1_SetDistanceMode+0x54>
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 800e718:	f107 0308 	add.w	r3, r7, #8
 800e71c:	4619      	mov	r1, r3
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f000 ffb3 	bl	800f68a <VL53L1_get_user_zone>
 800e724:	4603      	mov	r3, r0
 800e726:	77fb      	strb	r3, [r7, #31]

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	695b      	ldr	r3, [r3, #20]
 800e72c:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 800e72e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d10a      	bne.n	800e74c <VL53L1_SetDistanceMode+0x78>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 800e736:	f107 0314 	add.w	r3, r7, #20
 800e73a:	f107 0210 	add.w	r2, r7, #16
 800e73e:	f107 010c 	add.w	r1, r7, #12
 800e742:	6878      	ldr	r0, [r7, #4]
 800e744:	f000 fede 	bl	800f504 <VL53L1_get_timeouts_us>
 800e748:	4603      	mov	r3, r0
 800e74a:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 800e74c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d107      	bne.n	800e764 <VL53L1_SetDistanceMode+0x90>
		Status = SetPresetMode(Dev,
 800e754:	78fa      	ldrb	r2, [r7, #3]
 800e756:	7fb9      	ldrb	r1, [r7, #30]
 800e758:	69bb      	ldr	r3, [r7, #24]
 800e75a:	6878      	ldr	r0, [r7, #4]
 800e75c:	f7ff ff06 	bl	800e56c <SetPresetMode>
 800e760:	4603      	mov	r3, r0
 800e762:	77fb      	strb	r3, [r7, #31]
				PresetMode,
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 800e764:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d103      	bne.n	800e774 <VL53L1_SetDistanceMode+0xa0>
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	78fa      	ldrb	r2, [r7, #3]
 800e770:	f883 237d 	strb.w	r2, [r3, #893]	@ 0x37d
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800e774:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d10e      	bne.n	800e79a <VL53L1_SetDistanceMode+0xc6>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 800e77c:	68f9      	ldr	r1, [r7, #12]
 800e77e:	693a      	ldr	r2, [r7, #16]
 800e780:	697b      	ldr	r3, [r7, #20]
 800e782:	6878      	ldr	r0, [r7, #4]
 800e784:	f000 fe86 	bl	800f494 <VL53L1_set_timeouts_us>
 800e788:	4603      	mov	r3, r0
 800e78a:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 800e78c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d102      	bne.n	800e79a <VL53L1_SetDistanceMode+0xc6>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 800e794:	697a      	ldr	r2, [r7, #20]
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 800e79a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d107      	bne.n	800e7b2 <VL53L1_SetDistanceMode+0xde>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 800e7a2:	f107 0308 	add.w	r3, r7, #8
 800e7a6:	4619      	mov	r1, r3
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	f000 ff4b 	bl	800f644 <VL53L1_set_user_zone>
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	77fb      	strb	r3, [r7, #31]

	LOG_FUNCTION_END(Status);
	return Status;
 800e7b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	3720      	adds	r7, #32
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	bd80      	pop	{r7, pc}
	...

0800e7c0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b08c      	sub	sp, #48	@ 0x30
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
 800e7c8:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t Mm1Enabled = 0;
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	76bb      	strb	r3, [r7, #26]
	uint8_t Mm2Enabled = 0;
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	767b      	strb	r3, [r7, #25]
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 800e7d8:	2300      	movs	r3, #0
 800e7da:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 800e7dc:	2300      	movs	r3, #0
 800e7de:	613b      	str	r3, [r7, #16]
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs = 0;
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 800e7e4:	4b64      	ldr	r3, [pc, #400]	@ (800e978 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1b8>)
 800e7e6:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	/* Timing budget is limited to 10 seconds */
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	4a64      	ldr	r2, [pc, #400]	@ (800e97c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1bc>)
 800e7ec:	4293      	cmp	r3, r2
 800e7ee:	d902      	bls.n	800e7f6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x36>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800e7f0:	23fc      	movs	r3, #252	@ 0xfc
 800e7f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 800e7f6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d109      	bne.n	800e812 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800e7fe:	f107 031a 	add.w	r3, r7, #26
 800e802:	461a      	mov	r2, r3
 800e804:	2105      	movs	r1, #5
 800e806:	6878      	ldr	r0, [r7, #4]
 800e808:	f000 fa10 	bl	800ec2c <VL53L1_GetSequenceStepEnable>
 800e80c:	4603      	mov	r3, r0
 800e80e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800e812:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800e816:	2b00      	cmp	r3, #0
 800e818:	d109      	bne.n	800e82e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x6e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800e81a:	f107 0319 	add.w	r3, r7, #25
 800e81e:	461a      	mov	r2, r3
 800e820:	2106      	movs	r1, #6
 800e822:	6878      	ldr	r0, [r7, #4]
 800e824:	f000 fa02 	bl	800ec2c <VL53L1_GetSequenceStepEnable>
 800e828:	4603      	mov	r3, r0
 800e82a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 800e82e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800e832:	2b00      	cmp	r3, #0
 800e834:	d10b      	bne.n	800e84e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x8e>
		Status = VL53L1_get_timeouts_us(Dev,
 800e836:	f107 0314 	add.w	r3, r7, #20
 800e83a:	f107 0210 	add.w	r2, r7, #16
 800e83e:	f107 010c 	add.w	r1, r7, #12
 800e842:	6878      	ldr	r0, [r7, #4]
 800e844:	f000 fe5e 	bl	800f504 <VL53L1_get_timeouts_us>
 800e848:	4603      	mov	r3, r0
 800e84a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 800e84e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800e852:	2b00      	cmp	r3, #0
 800e854:	f040 8081 	bne.w	800e95a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
		PresetMode = VL53L1DevDataGet(Dev,
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	f893 337c 	ldrb.w	r3, [r3, #892]	@ 0x37c
 800e85e:	76fb      	strb	r3, [r7, #27]
				CurrentParameters.PresetMode);

		TimingGuard = 0;
 800e860:	2300      	movs	r3, #0
 800e862:	62bb      	str	r3, [r7, #40]	@ 0x28
		divisor = 1;
 800e864:	2301      	movs	r3, #1
 800e866:	627b      	str	r3, [r7, #36]	@ 0x24
		switch (PresetMode) {
 800e868:	7efb      	ldrb	r3, [r7, #27]
 800e86a:	2b08      	cmp	r3, #8
 800e86c:	d026      	beq.n	800e8bc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xfc>
 800e86e:	2b08      	cmp	r3, #8
 800e870:	dc43      	bgt.n	800e8fa <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
 800e872:	2b03      	cmp	r3, #3
 800e874:	d00f      	beq.n	800e896 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd6>
 800e876:	2b04      	cmp	r3, #4
 800e878:	d13f      	bne.n	800e8fa <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800e87a:	7ebb      	ldrb	r3, [r7, #26]
 800e87c:	2b01      	cmp	r3, #1
 800e87e:	d002      	beq.n	800e886 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xc6>
 800e880:	7e7b      	ldrb	r3, [r7, #25]
 800e882:	2b01      	cmp	r3, #1
 800e884:	d103      	bne.n	800e88e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xce>
				TimingGuard = 5000;
 800e886:	f241 3388 	movw	r3, #5000	@ 0x1388
 800e88a:	62bb      	str	r3, [r7, #40]	@ 0x28
			else
				TimingGuard = 1000;
		break;
 800e88c:	e038      	b.n	800e900 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>
				TimingGuard = 1000;
 800e88e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e892:	62bb      	str	r3, [r7, #40]	@ 0x28
		break;
 800e894:	e034      	b.n	800e900 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 800e896:	69fb      	ldr	r3, [r7, #28]
 800e898:	005b      	lsls	r3, r3, #1
 800e89a:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800e89c:	7ebb      	ldrb	r3, [r7, #26]
 800e89e:	2b01      	cmp	r3, #1
 800e8a0:	d002      	beq.n	800e8a8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe8>
 800e8a2:	7e7b      	ldrb	r3, [r7, #25]
 800e8a4:	2b01      	cmp	r3, #1
 800e8a6:	d103      	bne.n	800e8b0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf0>
				TimingGuard = 26600;
 800e8a8:	f246 73e8 	movw	r3, #26600	@ 0x67e8
 800e8ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e8ae:	e002      	b.n	800e8b6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf6>
			else
				TimingGuard = 21600;
 800e8b0:	f245 4360 	movw	r3, #21600	@ 0x5460
 800e8b4:	62bb      	str	r3, [r7, #40]	@ 0x28
			divisor = 2;
 800e8b6:	2302      	movs	r3, #2
 800e8b8:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 800e8ba:	e021      	b.n	800e900 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 800e8bc:	69fb      	ldr	r3, [r7, #28]
 800e8be:	005b      	lsls	r3, r3, #1
 800e8c0:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 800e8c2:	23f5      	movs	r3, #245	@ 0xf5
 800e8c4:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 800e8c6:	f107 0308 	add.w	r3, r7, #8
 800e8ca:	461a      	mov	r2, r3
 800e8cc:	f248 0136 	movw	r1, #32822	@ 0x8036
 800e8d0:	6878      	ldr	r0, [r7, #4]
 800e8d2:	f001 fefb 	bl	80106cc <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 800e8d6:	68bb      	ldr	r3, [r7, #8]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	dd07      	ble.n	800e8ec <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>
				vhv += vhv_loops *
 800e8dc:	68bb      	ldr	r3, [r7, #8]
 800e8de:	22f5      	movs	r2, #245	@ 0xf5
 800e8e0:	fb02 f303 	mul.w	r3, r2, r3
 800e8e4:	461a      	mov	r2, r3
 800e8e6:	6a3b      	ldr	r3, [r7, #32]
 800e8e8:	4413      	add	r3, r2
 800e8ea:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 800e8ec:	6a3b      	ldr	r3, [r7, #32]
 800e8ee:	f603 53dc 	addw	r3, r3, #3548	@ 0xddc
 800e8f2:	62bb      	str	r3, [r7, #40]	@ 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 800e8f4:	2302      	movs	r3, #2
 800e8f6:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 800e8f8:	e002      	b.n	800e900 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800e8fa:	23f8      	movs	r3, #248	@ 0xf8
 800e8fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 800e900:	683a      	ldr	r2, [r7, #0]
 800e902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e904:	429a      	cmp	r2, r3
 800e906:	d803      	bhi.n	800e910 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x150>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 800e908:	23fc      	movs	r3, #252	@ 0xfc
 800e90a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800e90e:	e003      	b.n	800e918 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x158>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 800e910:	683a      	ldr	r2, [r7, #0]
 800e912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e914:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 800e916:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 800e918:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d11c      	bne.n	800e95a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 800e920:	697b      	ldr	r3, [r7, #20]
 800e922:	69fa      	ldr	r2, [r7, #28]
 800e924:	429a      	cmp	r2, r3
 800e926:	d203      	bcs.n	800e930 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x170>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 800e928:	23fc      	movs	r3, #252	@ 0xfc
 800e92a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800e92e:	e00d      	b.n	800e94c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x18c>
			else {
				TimingBudget /= divisor;
 800e930:	697a      	ldr	r2, [r7, #20]
 800e932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e934:	fbb2 f3f3 	udiv	r3, r2, r3
 800e938:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 800e93a:	68f9      	ldr	r1, [r7, #12]
 800e93c:	693a      	ldr	r2, [r7, #16]
 800e93e:	697b      	ldr	r3, [r7, #20]
 800e940:	6878      	ldr	r0, [r7, #4]
 800e942:	f000 fda7 	bl	800f494 <VL53L1_set_timeouts_us>
 800e946:	4603      	mov	r3, r0
 800e948:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 800e94c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800e950:	2b00      	cmp	r3, #0
 800e952:	d102      	bne.n	800e95a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
				VL53L1DevDataSet(Dev,
 800e954:	697a      	ldr	r2, [r7, #20]
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	611a      	str	r2, [r3, #16]
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 800e95a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d103      	bne.n	800e96a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1aa>
		VL53L1DevDataSet(Dev,
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	683a      	ldr	r2, [r7, #0]
 800e966:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800e96a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800e96e:	4618      	mov	r0, r3
 800e970:	3730      	adds	r7, #48	@ 0x30
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}
 800e976:	bf00      	nop
 800e978:	00086470 	.word	0x00086470
 800e97c:	00989680 	.word	0x00989680

0800e980 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b084      	sub	sp, #16
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
 800e988:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800e98a:	2300      	movs	r3, #0
 800e98c:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 800e992:	68bb      	ldr	r3, [r7, #8]
 800e994:	019b      	lsls	r3, r3, #6
 800e996:	4a09      	ldr	r2, [pc, #36]	@ (800e9bc <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 800e998:	fba2 2303 	umull	r2, r3, r2, r3
 800e99c:	099b      	lsrs	r3, r3, #6
 800e99e:	68ba      	ldr	r2, [r7, #8]
 800e9a0:	4413      	add	r3, r2
 800e9a2:	60bb      	str	r3, [r7, #8]
	/* End of fix for Ticket 468205 */
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 800e9a4:	68b9      	ldr	r1, [r7, #8]
 800e9a6:	6878      	ldr	r0, [r7, #4]
 800e9a8:	f000 fd4b 	bl	800f442 <VL53L1_set_inter_measurement_period_ms>
 800e9ac:	4603      	mov	r3, r0
 800e9ae:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 800e9b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	3710      	adds	r7, #16
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}
 800e9bc:	10624dd3 	.word	0x10624dd3

0800e9c0 <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b086      	sub	sp, #24
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	60f8      	str	r0, [r7, #12]
 800e9c8:	460b      	mov	r3, r1
 800e9ca:	607a      	str	r2, [r7, #4]
 800e9cc:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800e9d2:	897b      	ldrh	r3, [r7, #10]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d002      	beq.n	800e9de <SetLimitValue+0x1e>
 800e9d8:	2b01      	cmp	r3, #1
 800e9da:	d009      	beq.n	800e9f0 <SetLimitValue+0x30>
 800e9dc:	e011      	b.n	800ea02 <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	0b9b      	lsrs	r3, r3, #14
 800e9e2:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 800e9e4:	8abb      	ldrh	r3, [r7, #20]
 800e9e6:	4619      	mov	r1, r3
 800e9e8:	68f8      	ldr	r0, [r7, #12]
 800e9ea:	f001 f8db 	bl	800fba4 <VL53L1_set_lite_sigma_threshold>
		break;
 800e9ee:	e00a      	b.n	800ea06 <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	0a5b      	lsrs	r3, r3, #9
 800e9f4:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 800e9f6:	8abb      	ldrh	r3, [r7, #20]
 800e9f8:	4619      	mov	r1, r3
 800e9fa:	68f8      	ldr	r0, [r7, #12]
 800e9fc:	f001 f8fe 	bl	800fbfc <VL53L1_set_lite_min_count_rate>
		break;
 800ea00:	e001      	b.n	800ea06 <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800ea02:	23fc      	movs	r3, #252	@ 0xfc
 800ea04:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ea06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	3718      	adds	r7, #24
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	bd80      	pop	{r7, pc}

0800ea12 <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800ea12:	b580      	push	{r7, lr}
 800ea14:	b084      	sub	sp, #16
 800ea16:	af00      	add	r7, sp, #0
 800ea18:	6078      	str	r0, [r7, #4]
 800ea1a:	460b      	mov	r3, r1
 800ea1c:	807b      	strh	r3, [r7, #2]
 800ea1e:	4613      	mov	r3, r2
 800ea20:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800ea22:	2300      	movs	r3, #0
 800ea24:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 800ea26:	2300      	movs	r3, #0
 800ea28:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800ea2a:	887b      	ldrh	r3, [r7, #2]
 800ea2c:	2b01      	cmp	r3, #1
 800ea2e:	d902      	bls.n	800ea36 <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800ea30:	23fc      	movs	r3, #252	@ 0xfc
 800ea32:	73fb      	strb	r3, [r7, #15]
 800ea34:	e014      	b.n	800ea60 <VL53L1_SetLimitCheckEnable+0x4e>
	} else {
		/* TempFix1616 contains either 0 or the limit value */
		if (LimitCheckEnable == 0)
 800ea36:	787b      	ldrb	r3, [r7, #1]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d102      	bne.n	800ea42 <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	60bb      	str	r3, [r7, #8]
 800ea40:	e006      	b.n	800ea50 <VL53L1_SetLimitCheckEnable+0x3e>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ea42:	887b      	ldrh	r3, [r7, #2]
 800ea44:	687a      	ldr	r2, [r7, #4]
 800ea46:	33e0      	adds	r3, #224	@ 0xe0
 800ea48:	009b      	lsls	r3, r3, #2
 800ea4a:	4413      	add	r3, r2
 800ea4c:	689b      	ldr	r3, [r3, #8]
 800ea4e:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 800ea50:	887b      	ldrh	r3, [r7, #2]
 800ea52:	68ba      	ldr	r2, [r7, #8]
 800ea54:	4619      	mov	r1, r3
 800ea56:	6878      	ldr	r0, [r7, #4]
 800ea58:	f7ff ffb2 	bl	800e9c0 <SetLimitValue>
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 800ea60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d10c      	bne.n	800ea82 <VL53L1_SetLimitCheckEnable+0x70>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800ea68:	787b      	ldrb	r3, [r7, #1]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	bf14      	ite	ne
 800ea6e:	2301      	movne	r3, #1
 800ea70:	2300      	moveq	r3, #0
 800ea72:	b2da      	uxtb	r2, r3
 800ea74:	887b      	ldrh	r3, [r7, #2]
 800ea76:	4611      	mov	r1, r2
 800ea78:	687a      	ldr	r2, [r7, #4]
 800ea7a:	4413      	add	r3, r2
 800ea7c:	460a      	mov	r2, r1
 800ea7e:	f883 2384 	strb.w	r2, [r3, #900]	@ 0x384
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 800ea82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ea86:	4618      	mov	r0, r3
 800ea88:	3710      	adds	r7, #16
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bd80      	pop	{r7, pc}

0800ea8e <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800ea8e:	b480      	push	{r7}
 800ea90:	b087      	sub	sp, #28
 800ea92:	af00      	add	r7, sp, #0
 800ea94:	60f8      	str	r0, [r7, #12]
 800ea96:	460b      	mov	r3, r1
 800ea98:	607a      	str	r2, [r7, #4]
 800ea9a:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800eaa0:	897b      	ldrh	r3, [r7, #10]
 800eaa2:	2b01      	cmp	r3, #1
 800eaa4:	d905      	bls.n	800eab2 <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800eaa6:	23fc      	movs	r3, #252	@ 0xfc
 800eaa8:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	2200      	movs	r2, #0
 800eaae:	701a      	strb	r2, [r3, #0]
 800eab0:	e008      	b.n	800eac4 <VL53L1_GetLimitCheckEnable+0x36>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800eab2:	897b      	ldrh	r3, [r7, #10]
 800eab4:	68fa      	ldr	r2, [r7, #12]
 800eab6:	4413      	add	r3, r2
 800eab8:	f893 3384 	ldrb.w	r3, [r3, #900]	@ 0x384
 800eabc:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	7dba      	ldrb	r2, [r7, #22]
 800eac2:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800eac4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eac8:	4618      	mov	r0, r3
 800eaca:	371c      	adds	r7, #28
 800eacc:	46bd      	mov	sp, r7
 800eace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead2:	4770      	bx	lr

0800ead4 <VL53L1_GetLimitCheckValue>:
	return Status;
}

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b088      	sub	sp, #32
 800ead8:	af00      	add	r7, sp, #0
 800eada:	60f8      	str	r0, [r7, #12]
 800eadc:	460b      	mov	r3, r1
 800eade:	607a      	str	r2, [r7, #4]
 800eae0:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800eae2:	2300      	movs	r3, #0
 800eae4:	77fb      	strb	r3, [r7, #31]
	uint16_t MinCountRate;
	FixPoint1616_t TempFix1616 = 0;
 800eae6:	2300      	movs	r3, #0
 800eae8:	61bb      	str	r3, [r7, #24]
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800eaea:	897b      	ldrh	r3, [r7, #10]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d002      	beq.n	800eaf6 <VL53L1_GetLimitCheckValue+0x22>
 800eaf0:	2b01      	cmp	r3, #1
 800eaf2:	d00c      	beq.n	800eb0e <VL53L1_GetLimitCheckValue+0x3a>
 800eaf4:	e017      	b.n	800eb26 <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 800eaf6:	f107 0314 	add.w	r3, r7, #20
 800eafa:	4619      	mov	r1, r3
 800eafc:	68f8      	ldr	r0, [r7, #12]
 800eafe:	f001 f83b 	bl	800fb78 <VL53L1_get_lite_sigma_threshold>
 800eb02:	4603      	mov	r3, r0
 800eb04:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 800eb06:	8abb      	ldrh	r3, [r7, #20]
 800eb08:	039b      	lsls	r3, r3, #14
 800eb0a:	61bb      	str	r3, [r7, #24]
		break;
 800eb0c:	e00d      	b.n	800eb2a <VL53L1_GetLimitCheckValue+0x56>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 800eb0e:	f107 0316 	add.w	r3, r7, #22
 800eb12:	4619      	mov	r1, r3
 800eb14:	68f8      	ldr	r0, [r7, #12]
 800eb16:	f001 f85b 	bl	800fbd0 <VL53L1_get_lite_min_count_rate>
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 800eb1e:	8afb      	ldrh	r3, [r7, #22]
 800eb20:	025b      	lsls	r3, r3, #9
 800eb22:	61bb      	str	r3, [r7, #24]
		break;
 800eb24:	e001      	b.n	800eb2a <VL53L1_GetLimitCheckValue+0x56>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800eb26:	23fc      	movs	r3, #252	@ 0xfc
 800eb28:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 800eb2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d123      	bne.n	800eb7a <VL53L1_GetLimitCheckValue+0xa6>

		if (TempFix1616 == 0) {
 800eb32:	69bb      	ldr	r3, [r7, #24]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d110      	bne.n	800eb5a <VL53L1_GetLimitCheckValue+0x86>
			/* disabled: return value from memory */
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 800eb38:	897b      	ldrh	r3, [r7, #10]
 800eb3a:	68fa      	ldr	r2, [r7, #12]
 800eb3c:	33e0      	adds	r3, #224	@ 0xe0
 800eb3e:	009b      	lsls	r3, r3, #2
 800eb40:	4413      	add	r3, r2
 800eb42:	689b      	ldr	r3, [r3, #8]
 800eb44:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	69ba      	ldr	r2, [r7, #24]
 800eb4a:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800eb4c:	897b      	ldrh	r3, [r7, #10]
 800eb4e:	68fa      	ldr	r2, [r7, #12]
 800eb50:	4413      	add	r3, r2
 800eb52:	2200      	movs	r2, #0
 800eb54:	f883 2384 	strb.w	r2, [r3, #900]	@ 0x384
 800eb58:	e00f      	b.n	800eb7a <VL53L1_GetLimitCheckValue+0xa6>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	69ba      	ldr	r2, [r7, #24]
 800eb5e:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800eb60:	897b      	ldrh	r3, [r7, #10]
 800eb62:	68fa      	ldr	r2, [r7, #12]
 800eb64:	33e0      	adds	r3, #224	@ 0xe0
 800eb66:	009b      	lsls	r3, r3, #2
 800eb68:	4413      	add	r3, r2
 800eb6a:	69ba      	ldr	r2, [r7, #24]
 800eb6c:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800eb6e:	897b      	ldrh	r3, [r7, #10]
 800eb70:	68fa      	ldr	r2, [r7, #12]
 800eb72:	4413      	add	r3, r2
 800eb74:	2201      	movs	r2, #1
 800eb76:	f883 2384 	strb.w	r2, [r3, #900]	@ 0x384
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 800eb7a:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800eb7e:	4618      	mov	r0, r3
 800eb80:	3720      	adds	r7, #32
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}

0800eb86 <VL53L1_SetUserROI>:

/* Group ROI Functions */

VL53L1_Error VL53L1_SetUserROI(VL53L1_DEV Dev,
		VL53L1_UserRoi_t *pRoi)
{
 800eb86:	b580      	push	{r7, lr}
 800eb88:	b084      	sub	sp, #16
 800eb8a:	af00      	add	r7, sp, #0
 800eb8c:	6078      	str	r0, [r7, #4]
 800eb8e:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800eb90:	2300      	movs	r3, #0
 800eb92:	73fb      	strb	r3, [r7, #15]
	VL53L1_user_zone_t user_zone;

	Status = CheckValidRectRoi(*pRoi);
 800eb94:	683b      	ldr	r3, [r7, #0]
 800eb96:	681a      	ldr	r2, [r3, #0]
 800eb98:	4613      	mov	r3, r2
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	f7ff fb9a 	bl	800e2d4 <CheckValidRectRoi>
 800eba0:	4603      	mov	r3, r0
 800eba2:	73fb      	strb	r3, [r7, #15]
	if (Status != VL53L1_ERROR_NONE)
 800eba4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d002      	beq.n	800ebb2 <VL53L1_SetUserROI+0x2c>
		return VL53L1_ERROR_INVALID_PARAMS;
 800ebac:	f06f 0303 	mvn.w	r3, #3
 800ebb0:	e038      	b.n	800ec24 <VL53L1_SetUserROI+0x9e>

	user_zone.x_centre = (pRoi->BotRightX + pRoi->TopLeftX  + 1) / 2;
 800ebb2:	683b      	ldr	r3, [r7, #0]
 800ebb4:	789b      	ldrb	r3, [r3, #2]
 800ebb6:	461a      	mov	r2, r3
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	781b      	ldrb	r3, [r3, #0]
 800ebbc:	4413      	add	r3, r2
 800ebbe:	3301      	adds	r3, #1
 800ebc0:	0fda      	lsrs	r2, r3, #31
 800ebc2:	4413      	add	r3, r2
 800ebc4:	105b      	asrs	r3, r3, #1
 800ebc6:	b2db      	uxtb	r3, r3
 800ebc8:	723b      	strb	r3, [r7, #8]
	user_zone.y_centre = (pRoi->TopLeftY  + pRoi->BotRightY + 1) / 2;
 800ebca:	683b      	ldr	r3, [r7, #0]
 800ebcc:	785b      	ldrb	r3, [r3, #1]
 800ebce:	461a      	mov	r2, r3
 800ebd0:	683b      	ldr	r3, [r7, #0]
 800ebd2:	78db      	ldrb	r3, [r3, #3]
 800ebd4:	4413      	add	r3, r2
 800ebd6:	3301      	adds	r3, #1
 800ebd8:	0fda      	lsrs	r2, r3, #31
 800ebda:	4413      	add	r3, r2
 800ebdc:	105b      	asrs	r3, r3, #1
 800ebde:	b2db      	uxtb	r3, r3
 800ebe0:	727b      	strb	r3, [r7, #9]
	user_zone.width =    (pRoi->BotRightX - pRoi->TopLeftX);
 800ebe2:	683b      	ldr	r3, [r7, #0]
 800ebe4:	789a      	ldrb	r2, [r3, #2]
 800ebe6:	683b      	ldr	r3, [r7, #0]
 800ebe8:	781b      	ldrb	r3, [r3, #0]
 800ebea:	1ad3      	subs	r3, r2, r3
 800ebec:	b2db      	uxtb	r3, r3
 800ebee:	72bb      	strb	r3, [r7, #10]
	user_zone.height =   (pRoi->TopLeftY  - pRoi->BotRightY);
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	785a      	ldrb	r2, [r3, #1]
 800ebf4:	683b      	ldr	r3, [r7, #0]
 800ebf6:	78db      	ldrb	r3, [r3, #3]
 800ebf8:	1ad3      	subs	r3, r2, r3
 800ebfa:	b2db      	uxtb	r3, r3
 800ebfc:	72fb      	strb	r3, [r7, #11]
	if ((user_zone.width < 3) || (user_zone.height < 3))
 800ebfe:	7abb      	ldrb	r3, [r7, #10]
 800ec00:	2b02      	cmp	r3, #2
 800ec02:	d902      	bls.n	800ec0a <VL53L1_SetUserROI+0x84>
 800ec04:	7afb      	ldrb	r3, [r7, #11]
 800ec06:	2b02      	cmp	r3, #2
 800ec08:	d802      	bhi.n	800ec10 <VL53L1_SetUserROI+0x8a>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800ec0a:	23fc      	movs	r3, #252	@ 0xfc
 800ec0c:	73fb      	strb	r3, [r7, #15]
 800ec0e:	e007      	b.n	800ec20 <VL53L1_SetUserROI+0x9a>
	else
		Status =  VL53L1_set_user_zone(Dev, &user_zone);
 800ec10:	f107 0308 	add.w	r3, r7, #8
 800ec14:	4619      	mov	r1, r3
 800ec16:	6878      	ldr	r0, [r7, #4]
 800ec18:	f000 fd14 	bl	800f644 <VL53L1_set_user_zone>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800ec20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ec24:	4618      	mov	r0, r3
 800ec26:	3710      	adds	r7, #16
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bd80      	pop	{r7, pc}

0800ec2c <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b086      	sub	sp, #24
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	60f8      	str	r0, [r7, #12]
 800ec34:	460b      	mov	r3, r1
 800ec36:	607a      	str	r2, [r7, #4]
 800ec38:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 800ec3e:	7afb      	ldrb	r3, [r7, #11]
 800ec40:	687a      	ldr	r2, [r7, #4]
 800ec42:	4619      	mov	r1, r3
 800ec44:	68f8      	ldr	r0, [r7, #12]
 800ec46:	f000 fcc6 	bl	800f5d6 <VL53L1_get_sequence_config_bit>
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 800ec4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ec52:	4618      	mov	r0, r3
 800ec54:	3718      	adds	r7, #24
 800ec56:	46bd      	mov	sp, r7
 800ec58:	bd80      	pop	{r7, pc}

0800ec5a <VL53L1_ClearInterruptAndStartMeasurement>:
	return Status;
}


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 800ec5a:	b580      	push	{r7, lr}
 800ec5c:	b084      	sub	sp, #16
 800ec5e:	af00      	add	r7, sp, #0
 800ec60:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800ec62:	2300      	movs	r3, #0
 800ec64:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	789b      	ldrb	r3, [r3, #2]
 800ec6a:	73bb      	strb	r3, [r7, #14]

	Status = VL53L1_clear_interrupt_and_enable_next_range(Dev,
 800ec6c:	7bbb      	ldrb	r3, [r7, #14]
 800ec6e:	4619      	mov	r1, r3
 800ec70:	6878      	ldr	r0, [r7, #4]
 800ec72:	f001 fb87 	bl	8010384 <VL53L1_clear_interrupt_and_enable_next_range>
 800ec76:	4603      	mov	r3, r0
 800ec78:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 800ec7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ec7e:	4618      	mov	r0, r3
 800ec80:	3710      	adds	r7, #16
 800ec82:	46bd      	mov	sp, r7
 800ec84:	bd80      	pop	{r7, pc}
	...

0800ec88 <ComputeRQL>:


static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 800ec88:	b480      	push	{r7}
 800ec8a:	b08d      	sub	sp, #52	@ 0x34
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	4603      	mov	r3, r0
 800ec90:	603a      	str	r2, [r7, #0]
 800ec92:	71fb      	strb	r3, [r7, #7]
 800ec94:	460b      	mov	r3, r1
 800ec96:	71bb      	strb	r3, [r7, #6]
	int16_t SRL = 300;
 800ec98:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800ec9c:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint16_t SRAS = 30;
 800ec9e:	231e      	movs	r3, #30
 800eca0:	847b      	strh	r3, [r7, #34]	@ 0x22
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587; /* 117.7 * 65536 */
 800eca2:	4b33      	ldr	r3, [pc, #204]	@ (800ed70 <ComputeRQL+0xe8>)
 800eca4:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157; /* 48.8 * 65536 */
 800eca6:	4b33      	ldr	r3, [pc, #204]	@ (800ed74 <ComputeRQL+0xec>)
 800eca8:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;    /* 0.1 * 65536 */
 800ecaa:	f641 139a 	movw	r3, #6554	@ 0x199a
 800ecae:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 800ecb0:	79fb      	ldrb	r3, [r7, #7]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d103      	bne.n	800ecbe <ComputeRQL+0x36>
		returnvalue = 0;
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ecbc:	e04f      	b.n	800ed5e <ComputeRQL+0xd6>
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 800ecbe:	79bb      	ldrb	r3, [r7, #6]
 800ecc0:	2b07      	cmp	r3, #7
 800ecc2:	d103      	bne.n	800eccc <ComputeRQL+0x44>
		returnvalue = 50;
 800ecc4:	2332      	movs	r3, #50	@ 0x32
 800ecc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ecca:	e048      	b.n	800ed5e <ComputeRQL+0xd6>
	else {
		if (presults_data->median_range_mm < SRL)
 800eccc:	683b      	ldr	r3, [r7, #0]
 800ecce:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800ecd2:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 800ecd6:	429a      	cmp	r2, r3
 800ecd8:	dd03      	ble.n	800ece2 <ComputeRQL+0x5a>
			RAS = SRAS * 65536;
 800ecda:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ecdc:	041b      	lsls	r3, r3, #16
 800ecde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ece0:	e007      	b.n	800ecf2 <ComputeRQL+0x6a>
		else
			RAS = LRAP * presults_data->median_range_mm;
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800ece8:	461a      	mov	r2, r3
 800ecea:	697b      	ldr	r3, [r7, #20]
 800ecec:	fb02 f303 	mul.w	r3, r2, r3
 800ecf0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Fix1616 + (fix1616 * uint16_t / fix1616) * 65536 = fix1616 */
		if (RAS != 0) {
 800ecf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d020      	beq.n	800ed3a <ComputeRQL+0xb2>
			partial = (GGm * presults_data->sigma_mm);
 800ecf8:	683b      	ldr	r3, [r7, #0]
 800ecfa:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800ecfc:	461a      	mov	r2, r3
 800ecfe:	69bb      	ldr	r3, [r7, #24]
 800ed00:	fb02 f303 	mul.w	r3, r2, r3
 800ed04:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 800ed06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed08:	085b      	lsrs	r3, r3, #1
 800ed0a:	693a      	ldr	r2, [r7, #16]
 800ed0c:	4413      	add	r3, r2
 800ed0e:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 800ed10:	693a      	ldr	r2, [r7, #16]
 800ed12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed14:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed18:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 800ed1a:	693b      	ldr	r3, [r7, #16]
 800ed1c:	041b      	lsls	r3, r3, #16
 800ed1e:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 800ed20:	693a      	ldr	r2, [r7, #16]
 800ed22:	69fb      	ldr	r3, [r7, #28]
 800ed24:	429a      	cmp	r2, r3
 800ed26:	d804      	bhi.n	800ed32 <ComputeRQL+0xaa>
				SRQL = GI - partial;
 800ed28:	69fa      	ldr	r2, [r7, #28]
 800ed2a:	693b      	ldr	r3, [r7, #16]
 800ed2c:	1ad3      	subs	r3, r2, r3
 800ed2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ed30:	e006      	b.n	800ed40 <ComputeRQL+0xb8>
			else
				SRQL = 50 * 65536;
 800ed32:	f44f 1348 	mov.w	r3, #3276800	@ 0x320000
 800ed36:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ed38:	e002      	b.n	800ed40 <ComputeRQL+0xb8>
		} else
			SRQL = 100 * 65536;
 800ed3a:	f44f 03c8 	mov.w	r3, #6553600	@ 0x640000
 800ed3e:	62bb      	str	r3, [r7, #40]	@ 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 800ed40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed42:	0c1b      	lsrs	r3, r3, #16
 800ed44:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 800ed46:	7bfb      	ldrb	r3, [r7, #15]
 800ed48:	2b32      	cmp	r3, #50	@ 0x32
 800ed4a:	d905      	bls.n	800ed58 <ComputeRQL+0xd0>
 800ed4c:	7bfb      	ldrb	r3, [r7, #15]
 800ed4e:	2b64      	cmp	r3, #100	@ 0x64
 800ed50:	bf28      	it	cs
 800ed52:	2364      	movcs	r3, #100	@ 0x64
 800ed54:	b2db      	uxtb	r3, r3
 800ed56:	e000      	b.n	800ed5a <ComputeRQL+0xd2>
 800ed58:	2332      	movs	r3, #50	@ 0x32
 800ed5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	return returnvalue;
 800ed5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ed62:	4618      	mov	r0, r3
 800ed64:	3734      	adds	r7, #52	@ 0x34
 800ed66:	46bd      	mov	sp, r7
 800ed68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6c:	4770      	bx	lr
 800ed6e:	bf00      	nop
 800ed70:	0075b333 	.word	0x0075b333
 800ed74:	0030cccd 	.word	0x0030cccd

0800ed78 <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 800ed78:	b480      	push	{r7}
 800ed7a:	b085      	sub	sp, #20
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	4603      	mov	r3, r0
 800ed80:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 800ed82:	79fb      	ldrb	r3, [r7, #7]
 800ed84:	3b04      	subs	r3, #4
 800ed86:	2b0f      	cmp	r3, #15
 800ed88:	d83d      	bhi.n	800ee06 <ConvertStatusLite+0x8e>
 800ed8a:	a201      	add	r2, pc, #4	@ (adr r2, 800ed90 <ConvertStatusLite+0x18>)
 800ed8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed90:	0800ede3 	.word	0x0800ede3
 800ed94:	0800eddd 	.word	0x0800eddd
 800ed98:	0800ede9 	.word	0x0800ede9
 800ed9c:	0800edef 	.word	0x0800edef
 800eda0:	0800edfb 	.word	0x0800edfb
 800eda4:	0800ee01 	.word	0x0800ee01
 800eda8:	0800ee07 	.word	0x0800ee07
 800edac:	0800ee07 	.word	0x0800ee07
 800edb0:	0800edf5 	.word	0x0800edf5
 800edb4:	0800ee07 	.word	0x0800ee07
 800edb8:	0800ee07 	.word	0x0800ee07
 800edbc:	0800ee07 	.word	0x0800ee07
 800edc0:	0800ee07 	.word	0x0800ee07
 800edc4:	0800ee07 	.word	0x0800ee07
 800edc8:	0800edd1 	.word	0x0800edd1
 800edcc:	0800edd7 	.word	0x0800edd7
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 800edd0:	230a      	movs	r3, #10
 800edd2:	73fb      	strb	r3, [r7, #15]
		break;
 800edd4:	e019      	b.n	800ee0a <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 800edd6:	2306      	movs	r3, #6
 800edd8:	73fb      	strb	r3, [r7, #15]
		break;
 800edda:	e016      	b.n	800ee0a <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 800eddc:	2304      	movs	r3, #4
 800edde:	73fb      	strb	r3, [r7, #15]
		break;
 800ede0:	e013      	b.n	800ee0a <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 800ede2:	2302      	movs	r3, #2
 800ede4:	73fb      	strb	r3, [r7, #15]
		break;
 800ede6:	e010      	b.n	800ee0a <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 800ede8:	2301      	movs	r3, #1
 800edea:	73fb      	strb	r3, [r7, #15]
		break;
 800edec:	e00d      	b.n	800ee0a <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 800edee:	2307      	movs	r3, #7
 800edf0:	73fb      	strb	r3, [r7, #15]
		break;
 800edf2:	e00a      	b.n	800ee0a <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 800edf4:	2309      	movs	r3, #9
 800edf6:	73fb      	strb	r3, [r7, #15]
		break;
 800edf8:	e007      	b.n	800ee0a <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 800edfa:	2303      	movs	r3, #3
 800edfc:	73fb      	strb	r3, [r7, #15]
		break;
 800edfe:	e004      	b.n	800ee0a <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 800ee00:	2300      	movs	r3, #0
 800ee02:	73fb      	strb	r3, [r7, #15]
		break;
 800ee04:	e001      	b.n	800ee0a <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 800ee06:	23ff      	movs	r3, #255	@ 0xff
 800ee08:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 800ee0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	3714      	adds	r7, #20
 800ee10:	46bd      	mov	sp, r7
 800ee12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee16:	4770      	bx	lr

0800ee18 <SetSimpleData>:

static VL53L1_Error SetSimpleData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t device_status,
	VL53L1_range_data_t *presults_data,
	VL53L1_RangingMeasurementData_t *pRangeData)
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b08c      	sub	sp, #48	@ 0x30
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	60f8      	str	r0, [r7, #12]
 800ee20:	607b      	str	r3, [r7, #4]
 800ee22:	460b      	mov	r3, r1
 800ee24:	72fb      	strb	r3, [r7, #11]
 800ee26:	4613      	mov	r3, r2
 800ee28:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	int16_t Range;

	pRangeData->TimeStamp = presults_data->time_stamp;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	685a      	ldr	r2, [r3, #4]
 800ee34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee36:	601a      	str	r2, [r3, #0]

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ee3e:	f003 031f 	and.w	r3, r3, #31
 800ee42:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 800ee46:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 800ee4a:	7afb      	ldrb	r3, [r7, #11]
 800ee4c:	687a      	ldr	r2, [r7, #4]
 800ee4e:	4618      	mov	r0, r3
 800ee50:	f7ff ff1a 	bl	800ec88 <ComputeRQL>
 800ee54:	4603      	mov	r3, r0
 800ee56:	461a      	mov	r2, r3
 800ee58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee5a:	715a      	strb	r2, [r3, #5]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ee60:	025b      	lsls	r3, r3, #9
 800ee62:	62bb      	str	r3, [r7, #40]	@ 0x28
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 800ee64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ee68:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800ee6e:	025b      	lsls	r3, r3, #9
 800ee70:	627b      	str	r3, [r7, #36]	@ 0x24
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 800ee72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ee76:	60da      	str	r2, [r3, #12]

	pRangeData->EffectiveSpadRtnCount =
		presults_data->actual_effective_spads;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	8a1a      	ldrh	r2, [r3, #16]
	pRangeData->EffectiveSpadRtnCount =
 800ee7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee7e:	821a      	strh	r2, [r3, #16]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800ee84:	025b      	lsls	r3, r3, #9
 800ee86:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);

	pRangeData->SigmaMilliMeter = TempFix1616;
 800ee88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee8a:	6a3a      	ldr	r2, [r7, #32]
 800ee8c:	615a      	str	r2, [r3, #20]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	@ 0x3c
 800ee94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee96:	831a      	strh	r2, [r3, #24]

	pRangeData->RangeFractionalPart = 0;
 800ee98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	769a      	strb	r2, [r3, #26]

	/* Treat device error status first */
	switch (device_status) {
 800ee9e:	7abb      	ldrb	r3, [r7, #10]
 800eea0:	2b11      	cmp	r3, #17
 800eea2:	d009      	beq.n	800eeb8 <SetSimpleData+0xa0>
 800eea4:	2b11      	cmp	r3, #17
 800eea6:	dc0f      	bgt.n	800eec8 <SetSimpleData+0xb0>
 800eea8:	2b03      	cmp	r3, #3
 800eeaa:	dc02      	bgt.n	800eeb2 <SetSimpleData+0x9a>
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	dc03      	bgt.n	800eeb8 <SetSimpleData+0xa0>
 800eeb0:	e00a      	b.n	800eec8 <SetSimpleData+0xb0>
 800eeb2:	2b0d      	cmp	r3, #13
 800eeb4:	d004      	beq.n	800eec0 <SetSimpleData+0xa8>
 800eeb6:	e007      	b.n	800eec8 <SetSimpleData+0xb0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 800eeb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eeba:	2205      	movs	r2, #5
 800eebc:	76da      	strb	r2, [r3, #27]
		break;
 800eebe:	e006      	b.n	800eece <SetSimpleData+0xb6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 800eec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eec2:	220d      	movs	r2, #13
 800eec4:	76da      	strb	r2, [r3, #27]
		break;
 800eec6:	e002      	b.n	800eece <SetSimpleData+0xb6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 800eec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eeca:	2200      	movs	r2, #0
 800eecc:	76da      	strb	r2, [r3, #27]
	}

	/* Now deal with range status according to the ranging preset */
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 800eece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eed0:	7edb      	ldrb	r3, [r3, #27]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d108      	bne.n	800eee8 <SetSimpleData+0xd0>
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 800eed6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800eeda:	4618      	mov	r0, r3
 800eedc:	f7ff ff4c 	bl	800ed78 <ConvertStatusLite>
 800eee0:	4603      	mov	r3, r0
 800eee2:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 800eee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eee6:	76da      	strb	r2, [r3, #27]
	}

	/* Update current Limit Check */
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800eeec:	025b      	lsls	r3, r3, #9
 800eeee:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	6a3a      	ldr	r2, [r7, #32]
 800eef4:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800eefc:	025b      	lsls	r3, r3, #9
 800eefe:	623b      	str	r3, [r7, #32]
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	6a3a      	ldr	r2, [r7, #32]
 800ef04:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);

	/* Update Limit Check Status */
	/* Sigma */
	VL53L1_GetLimitCheckValue(Dev,
 800ef08:	f107 0314 	add.w	r3, r7, #20
 800ef0c:	461a      	mov	r2, r3
 800ef0e:	2100      	movs	r1, #0
 800ef10:	68f8      	ldr	r0, [r7, #12]
 800ef12:	f7ff fddf 	bl	800ead4 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 800ef16:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ef1a:	2b06      	cmp	r3, #6
 800ef1c:	bf0c      	ite	eq
 800ef1e:	2301      	moveq	r3, #1
 800ef20:	2300      	movne	r3, #0
 800ef22:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 800ef24:	77fb      	strb	r3, [r7, #31]

	VL53L1_GetLimitCheckEnable(Dev,
 800ef26:	f107 0319 	add.w	r3, r7, #25
 800ef2a:	461a      	mov	r2, r3
 800ef2c:	2100      	movs	r1, #0
 800ef2e:	68f8      	ldr	r0, [r7, #12]
 800ef30:	f7ff fdad 	bl	800ea8e <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 800ef34:	7e7b      	ldrb	r3, [r7, #25]
 800ef36:	2b01      	cmp	r3, #1
 800ef38:	d104      	bne.n	800ef44 <SetSimpleData+0x12c>
 800ef3a:	7ffb      	ldrb	r3, [r7, #31]
 800ef3c:	2b01      	cmp	r3, #1
 800ef3e:	d101      	bne.n	800ef44 <SetSimpleData+0x12c>
 800ef40:	2301      	movs	r3, #1
 800ef42:	e000      	b.n	800ef46 <SetSimpleData+0x12e>
 800ef44:	2300      	movs	r3, #0
 800ef46:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	7fba      	ldrb	r2, [r7, #30]
 800ef4c:	f883 2386 	strb.w	r2, [r3, #902]	@ 0x386
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

	/* Signal Rate */
	VL53L1_GetLimitCheckValue(Dev,
 800ef50:	f107 0314 	add.w	r3, r7, #20
 800ef54:	461a      	mov	r2, r3
 800ef56:	2101      	movs	r1, #1
 800ef58:	68f8      	ldr	r0, [r7, #12]
 800ef5a:	f7ff fdbb 	bl	800ead4 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 800ef5e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ef62:	2b04      	cmp	r3, #4
 800ef64:	bf0c      	ite	eq
 800ef66:	2301      	moveq	r3, #1
 800ef68:	2300      	movne	r3, #0
 800ef6a:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 800ef6c:	777b      	strb	r3, [r7, #29]

	VL53L1_GetLimitCheckEnable(Dev,
 800ef6e:	f107 0319 	add.w	r3, r7, #25
 800ef72:	461a      	mov	r2, r3
 800ef74:	2101      	movs	r1, #1
 800ef76:	68f8      	ldr	r0, [r7, #12]
 800ef78:	f7ff fd89 	bl	800ea8e <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 800ef7c:	7e7b      	ldrb	r3, [r7, #25]
 800ef7e:	2b01      	cmp	r3, #1
 800ef80:	d104      	bne.n	800ef8c <SetSimpleData+0x174>
 800ef82:	7f7b      	ldrb	r3, [r7, #29]
 800ef84:	2b01      	cmp	r3, #1
 800ef86:	d101      	bne.n	800ef8c <SetSimpleData+0x174>
 800ef88:	2301      	movs	r3, #1
 800ef8a:	e000      	b.n	800ef8e <SetSimpleData+0x176>
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	7fba      	ldrb	r2, [r7, #30]
 800ef94:	f883 2387 	strb.w	r2, [r3, #903]	@ 0x387
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 800ef98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef9a:	8b1b      	ldrh	r3, [r3, #24]
 800ef9c:	837b      	strh	r3, [r7, #26]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 800ef9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efa0:	7edb      	ldrb	r3, [r3, #27]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d110      	bne.n	800efc8 <SetSimpleData+0x1b0>
 800efa6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	da0c      	bge.n	800efc8 <SetSimpleData+0x1b0>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 800efae:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800efb2:	4b08      	ldr	r3, [pc, #32]	@ (800efd4 <SetSimpleData+0x1bc>)
 800efb4:	685b      	ldr	r3, [r3, #4]
 800efb6:	429a      	cmp	r2, r3
 800efb8:	da03      	bge.n	800efc2 <SetSimpleData+0x1aa>
			pRangeData->RangeStatus =
 800efba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efbc:	220e      	movs	r2, #14
 800efbe:	76da      	strb	r2, [r3, #27]
 800efc0:	e002      	b.n	800efc8 <SetSimpleData+0x1b0>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 800efc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efc4:	2200      	movs	r2, #0
 800efc6:	831a      	strh	r2, [r3, #24]
	}

	return Status;
 800efc8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800efcc:	4618      	mov	r0, r3
 800efce:	3730      	adds	r7, #48	@ 0x30
 800efd0:	46bd      	mov	sp, r7
 800efd2:	bd80      	pop	{r7, pc}
 800efd4:	2000014c 	.word	0x2000014c

0800efd8 <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
	VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b0a8      	sub	sp, #160	@ 0xa0
 800efdc:	af02      	add	r7, sp, #8
 800efde:	6078      	str	r0, [r7, #4]
 800efe0:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800efe2:	2300      	movs	r3, #0
 800efe4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	VL53L1_range_results_t results;
	VL53L1_range_results_t *presults = &results;
 800efe8:	f107 0308 	add.w	r3, r7, #8
 800efec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

	LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 800eff0:	221c      	movs	r2, #28
 800eff2:	21ff      	movs	r1, #255	@ 0xff
 800eff4:	6838      	ldr	r0, [r7, #0]
 800eff6:	f005 fadf 	bl	80145b8 <memset>
		sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 800effa:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800effe:	2102      	movs	r1, #2
 800f000:	6878      	ldr	r0, [r7, #4]
 800f002:	f001 f94f 	bl	80102a4 <VL53L1_get_device_results>
 800f006:	4603      	mov	r3, r0
 800f008:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
			Dev,
			VL53L1_DEVICERESULTSLEVEL_FULL,
			presults);

	if (Status == VL53L1_ERROR_NONE) {
 800f00c:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 800f010:	2b00      	cmp	r3, #0
 800f012:	d117      	bne.n	800f044 <VL53L1_GetRangingMeasurementData+0x6c>
		pRangingMeasurementData->StreamCount = presults->stream_count;
 800f014:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f018:	789a      	ldrb	r2, [r3, #2]
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	711a      	strb	r2, [r3, #4]

		/* in case of lite ranging or autonomous the following function
		 * returns index = 0
		 */
		presults_data = &(presults->data[0]);
 800f01e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f022:	3304      	adds	r3, #4
 800f024:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		Status = SetSimpleData(Dev, 1,
 800f028:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f02c:	78da      	ldrb	r2, [r3, #3]
 800f02e:	683b      	ldr	r3, [r7, #0]
 800f030:	9300      	str	r3, [sp, #0]
 800f032:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f036:	2101      	movs	r1, #1
 800f038:	6878      	ldr	r0, [r7, #4]
 800f03a:	f7ff feed 	bl	800ee18 <SetSimpleData>
 800f03e:	4603      	mov	r3, r0
 800f040:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				presults_data,
				pRangingMeasurementData);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800f044:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
}
 800f048:	4618      	mov	r0, r3
 800f04a:	3798      	adds	r7, #152	@ 0x98
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bd80      	pop	{r7, pc}

0800f050 <VL53L1_SetThresholdConfig>:

/* Group PAL detection triggered events Functions */

VL53L1_Error VL53L1_SetThresholdConfig(VL53L1_DEV Dev,
		VL53L1_DetectionConfig_t *pConfig)
{
 800f050:	b580      	push	{r7, lr}
 800f052:	b08e      	sub	sp, #56	@ 0x38
 800f054:	af02      	add	r7, sp, #8
 800f056:	6078      	str	r0, [r7, #4]
 800f058:	6039      	str	r1, [r7, #0]
#define BADTHRESBOUNDS(T) \
	(((T.CrossMode == VL53L1_THRESHOLD_OUT_OF_WINDOW) || \
	(T.CrossMode == VL53L1_THRESHOLD_IN_WINDOW)) && (T.Low > T.High))

	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800f05a:	2300      	movs	r3, #0
 800f05c:	76fb      	strb	r3, [r7, #27]
	FixPoint1616_t gain, high1616, low1616;
	VL53L1_LLDriverData_t *pdev;

	LOG_FUNCTION_START("");

	pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	62fb      	str	r3, [r7, #44]	@ 0x2c

	Status = VL53L1_get_GPIO_interrupt_config(Dev, &Cfg);
 800f062:	f107 030c 	add.w	r3, r7, #12
 800f066:	4619      	mov	r1, r3
 800f068:	6878      	ldr	r0, [r7, #4]
 800f06a:	f001 faed 	bl	8010648 <VL53L1_get_GPIO_interrupt_config>
 800f06e:	4603      	mov	r3, r0
 800f070:	76fb      	strb	r3, [r7, #27]
	if (Status != VL53L1_ERROR_NONE)
 800f072:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d002      	beq.n	800f080 <VL53L1_SetThresholdConfig+0x30>
		return Status;
 800f07a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f07e:	e0bf      	b.n	800f200 <VL53L1_SetThresholdConfig+0x1b0>

	if (pConfig->DetectionMode == VL53L1_DETECTION_NORMAL_RUN) {
 800f080:	683b      	ldr	r3, [r7, #0]
 800f082:	781b      	ldrb	r3, [r3, #0]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d10d      	bne.n	800f0a4 <VL53L1_SetThresholdConfig+0x54>
		Cfg.intr_new_measure_ready = 1;
 800f088:	2301      	movs	r3, #1
 800f08a:	73bb      	strb	r3, [r7, #14]
		Status = VL53L1_set_GPIO_interrupt_config_struct(Dev,
 800f08c:	8b3b      	ldrh	r3, [r7, #24]
 800f08e:	f8ad 3000 	strh.w	r3, [sp]
 800f092:	f107 030c 	add.w	r3, r7, #12
 800f096:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f098:	6878      	ldr	r0, [r7, #4]
 800f09a:	f001 faa7 	bl	80105ec <VL53L1_set_GPIO_interrupt_config_struct>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	76fb      	strb	r3, [r7, #27]
 800f0a2:	e0ab      	b.n	800f1fc <VL53L1_SetThresholdConfig+0x1ac>
				Cfg);
	} else {
		if (BADTHRESBOUNDS(pConfig->Distance))
 800f0a4:	683b      	ldr	r3, [r7, #0]
 800f0a6:	789b      	ldrb	r3, [r3, #2]
 800f0a8:	2b02      	cmp	r3, #2
 800f0aa:	d003      	beq.n	800f0b4 <VL53L1_SetThresholdConfig+0x64>
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	789b      	ldrb	r3, [r3, #2]
 800f0b0:	2b03      	cmp	r3, #3
 800f0b2:	d107      	bne.n	800f0c4 <VL53L1_SetThresholdConfig+0x74>
 800f0b4:	683b      	ldr	r3, [r7, #0]
 800f0b6:	88da      	ldrh	r2, [r3, #6]
 800f0b8:	683b      	ldr	r3, [r7, #0]
 800f0ba:	889b      	ldrh	r3, [r3, #4]
 800f0bc:	429a      	cmp	r2, r3
 800f0be:	d901      	bls.n	800f0c4 <VL53L1_SetThresholdConfig+0x74>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 800f0c0:	23fc      	movs	r3, #252	@ 0xfc
 800f0c2:	76fb      	strb	r3, [r7, #27]
		if ((Status == VL53L1_ERROR_NONE) &&
 800f0c4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d10f      	bne.n	800f0ec <VL53L1_SetThresholdConfig+0x9c>
				(BADTHRESBOUNDS(pConfig->Rate)))
 800f0cc:	683b      	ldr	r3, [r7, #0]
 800f0ce:	7a1b      	ldrb	r3, [r3, #8]
		if ((Status == VL53L1_ERROR_NONE) &&
 800f0d0:	2b02      	cmp	r3, #2
 800f0d2:	d003      	beq.n	800f0dc <VL53L1_SetThresholdConfig+0x8c>
				(BADTHRESBOUNDS(pConfig->Rate)))
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	7a1b      	ldrb	r3, [r3, #8]
 800f0d8:	2b03      	cmp	r3, #3
 800f0da:	d107      	bne.n	800f0ec <VL53L1_SetThresholdConfig+0x9c>
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	691a      	ldr	r2, [r3, #16]
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	68db      	ldr	r3, [r3, #12]
 800f0e4:	429a      	cmp	r2, r3
 800f0e6:	d901      	bls.n	800f0ec <VL53L1_SetThresholdConfig+0x9c>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 800f0e8:	23fc      	movs	r3, #252	@ 0xfc
 800f0ea:	76fb      	strb	r3, [r7, #27]
		if (Status == VL53L1_ERROR_NONE) {
 800f0ec:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d14c      	bne.n	800f18e <VL53L1_SetThresholdConfig+0x13e>
			Cfg.intr_new_measure_ready = 0;
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	73bb      	strb	r3, [r7, #14]
			Cfg.intr_no_target = pConfig->IntrNoTarget;
 800f0f8:	683b      	ldr	r3, [r7, #0]
 800f0fa:	785b      	ldrb	r3, [r3, #1]
 800f0fc:	73fb      	strb	r3, [r7, #15]
			/* fix ticket 466238 Apply invert distance gain to thresholds */
			g = pdev->gain_cal.standard_ranging_gain_factor;
 800f0fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f100:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 800f104:	857b      	strh	r3, [r7, #42]	@ 0x2a
			if (g != 0) {
 800f106:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d01e      	beq.n	800f14a <VL53L1_SetThresholdConfig+0xfa>
				/* gain is ufix 5.11, convert to 16.16 */
				gain = (FixPoint1616_t) ((uint32_t)g << 5);
 800f10c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f10e:	015b      	lsls	r3, r3, #5
 800f110:	627b      	str	r3, [r7, #36]	@ 0x24
				high1616 = (FixPoint1616_t) ((uint32_t)
						pConfig->Distance.High << 16);
 800f112:	683b      	ldr	r3, [r7, #0]
 800f114:	889b      	ldrh	r3, [r3, #4]
				high1616 = (FixPoint1616_t) ((uint32_t)
 800f116:	041b      	lsls	r3, r3, #16
 800f118:	623b      	str	r3, [r7, #32]
				low1616 = (FixPoint1616_t) ((uint32_t)
						pConfig->Distance.Low << 16);
 800f11a:	683b      	ldr	r3, [r7, #0]
 800f11c:	88db      	ldrh	r3, [r3, #6]
				low1616 = (FixPoint1616_t) ((uint32_t)
 800f11e:	041b      	lsls	r3, r3, #16
 800f120:	61fb      	str	r3, [r7, #28]
				/* +32768 to round the results*/
				high1616 = (high1616 + 32768) / gain;
 800f122:	6a3b      	ldr	r3, [r7, #32]
 800f124:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
 800f128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f12a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f12e:	623b      	str	r3, [r7, #32]
				low1616 = (low1616 + 32768) / gain;
 800f130:	69fb      	ldr	r3, [r7, #28]
 800f132:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
 800f136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f138:	fbb2 f3f3 	udiv	r3, r2, r3
 800f13c:	61fb      	str	r3, [r7, #28]
				Cfg.threshold_distance_high = (uint16_t)
 800f13e:	6a3b      	ldr	r3, [r7, #32]
 800f140:	b29b      	uxth	r3, r3
 800f142:	827b      	strh	r3, [r7, #18]
						(high1616 & 0xFFFF);
				Cfg.threshold_distance_low = (uint16_t)
 800f144:	69fb      	ldr	r3, [r7, #28]
 800f146:	b29b      	uxth	r3, r3
 800f148:	82bb      	strh	r3, [r7, #20]
						(low1616 & 0xFFFF);
			} /* end fix ticket 466238 */
			Cfg.threshold_rate_high =
				VL53L1_FIXPOINT1616TOFIXPOINT97(
 800f14a:	683b      	ldr	r3, [r7, #0]
 800f14c:	68db      	ldr	r3, [r3, #12]
 800f14e:	0a5b      	lsrs	r3, r3, #9
 800f150:	b29b      	uxth	r3, r3
			Cfg.threshold_rate_high =
 800f152:	82fb      	strh	r3, [r7, #22]
						pConfig->Rate.High);
			Cfg.threshold_rate_low =
				VL53L1_FIXPOINT1616TOFIXPOINT97(
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	691b      	ldr	r3, [r3, #16]
 800f158:	0a5b      	lsrs	r3, r3, #9
 800f15a:	b29b      	uxth	r3, r3
			Cfg.threshold_rate_low =
 800f15c:	833b      	strh	r3, [r7, #24]
						pConfig->Rate.Low);

			Cfg.intr_mode_distance = ConvertModeToLLD(
 800f15e:	683b      	ldr	r3, [r7, #0]
 800f160:	789a      	ldrb	r2, [r3, #2]
 800f162:	f107 031b 	add.w	r3, r7, #27
 800f166:	4611      	mov	r1, r2
 800f168:	4618      	mov	r0, r3
 800f16a:	f7ff f8d9 	bl	800e320 <ConvertModeToLLD>
 800f16e:	4603      	mov	r3, r0
 800f170:	733b      	strb	r3, [r7, #12]
					&Status,
					pConfig->Distance.CrossMode);
			if (Status == VL53L1_ERROR_NONE)
 800f172:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d109      	bne.n	800f18e <VL53L1_SetThresholdConfig+0x13e>
				Cfg.intr_mode_rate = ConvertModeToLLD(
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	7a1a      	ldrb	r2, [r3, #8]
 800f17e:	f107 031b 	add.w	r3, r7, #27
 800f182:	4611      	mov	r1, r2
 800f184:	4618      	mov	r0, r3
 800f186:	f7ff f8cb 	bl	800e320 <ConvertModeToLLD>
 800f18a:	4603      	mov	r3, r0
 800f18c:	737b      	strb	r3, [r7, #13]
					&Status,
					pConfig->Rate.CrossMode);
		}

		/* Refine thresholds combination now */
		if (Status == VL53L1_ERROR_NONE) {
 800f18e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d123      	bne.n	800f1de <VL53L1_SetThresholdConfig+0x18e>
			Cfg.intr_combined_mode = 1;
 800f196:	2301      	movs	r3, #1
 800f198:	743b      	strb	r3, [r7, #16]
			switch (pConfig->DetectionMode) {
 800f19a:	683b      	ldr	r3, [r7, #0]
 800f19c:	781b      	ldrb	r3, [r3, #0]
 800f19e:	3b01      	subs	r3, #1
 800f1a0:	2b03      	cmp	r3, #3
 800f1a2:	d818      	bhi.n	800f1d6 <VL53L1_SetThresholdConfig+0x186>
 800f1a4:	a201      	add	r2, pc, #4	@ (adr r2, 800f1ac <VL53L1_SetThresholdConfig+0x15c>)
 800f1a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1aa:	bf00      	nop
 800f1ac:	0800f1bd 	.word	0x0800f1bd
 800f1b0:	0800f1c7 	.word	0x0800f1c7
 800f1b4:	0800f1d1 	.word	0x0800f1d1
 800f1b8:	0800f1dd 	.word	0x0800f1dd
			case VL53L1_DETECTION_DISTANCE_ONLY:
				Cfg.threshold_rate_high = 0;
 800f1bc:	2300      	movs	r3, #0
 800f1be:	82fb      	strh	r3, [r7, #22]
				Cfg.threshold_rate_low = 0;
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	833b      	strh	r3, [r7, #24]
				break;
 800f1c4:	e00b      	b.n	800f1de <VL53L1_SetThresholdConfig+0x18e>
			case VL53L1_DETECTION_RATE_ONLY:
				Cfg.threshold_distance_high = 0;
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	827b      	strh	r3, [r7, #18]
				Cfg.threshold_distance_low = 0;
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	82bb      	strh	r3, [r7, #20]
				break;
 800f1ce:	e006      	b.n	800f1de <VL53L1_SetThresholdConfig+0x18e>
			case VL53L1_DETECTION_DISTANCE_OR_RATE:
				/* Nothing to do all is already in place */
				break;
			case VL53L1_DETECTION_DISTANCE_AND_RATE:
				Cfg.intr_combined_mode = 0;
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	743b      	strb	r3, [r7, #16]
				break;
 800f1d4:	e003      	b.n	800f1de <VL53L1_SetThresholdConfig+0x18e>
			default:
				Status = VL53L1_ERROR_INVALID_PARAMS;
 800f1d6:	23fc      	movs	r3, #252	@ 0xfc
 800f1d8:	76fb      	strb	r3, [r7, #27]
 800f1da:	e000      	b.n	800f1de <VL53L1_SetThresholdConfig+0x18e>
				break;
 800f1dc:	bf00      	nop
			}
		}

		if (Status == VL53L1_ERROR_NONE)
 800f1de:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d10a      	bne.n	800f1fc <VL53L1_SetThresholdConfig+0x1ac>
			Status =
			VL53L1_set_GPIO_interrupt_config_struct(Dev, Cfg);
 800f1e6:	8b3b      	ldrh	r3, [r7, #24]
 800f1e8:	f8ad 3000 	strh.w	r3, [sp]
 800f1ec:	f107 030c 	add.w	r3, r7, #12
 800f1f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f1f2:	6878      	ldr	r0, [r7, #4]
 800f1f4:	f001 f9fa 	bl	80105ec <VL53L1_set_GPIO_interrupt_config_struct>
 800f1f8:	4603      	mov	r3, r0
			Status =
 800f1fa:	76fb      	strb	r3, [r7, #27]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800f1fc:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800f200:	4618      	mov	r0, r3
 800f202:	3730      	adds	r7, #48	@ 0x30
 800f204:	46bd      	mov	sp, r7
 800f206:	bd80      	pop	{r7, pc}

0800f208 <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 800f208:	b5b0      	push	{r4, r5, r7, lr}
 800f20a:	b088      	sub	sp, #32
 800f20c:	af04      	add	r7, sp, #16
 800f20e:	6078      	str	r0, [r7, #4]
 800f210:	460b      	mov	r3, r1
 800f212:	70fb      	strb	r3, [r7, #3]
	/*
	 * Initialise pdev data structure
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800f214:	2300      	movs	r3, #0
 800f216:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t    *pdev =
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_init_ll_driver_state(
 800f21c:	2162      	movs	r1, #98	@ 0x62
 800f21e:	6878      	ldr	r0, [r7, #4]
 800f220:	f002 f953 	bl	80114ca <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	2200      	movs	r2, #0
 800f228:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 800f22a:	68bb      	ldr	r3, [r7, #8]
 800f22c:	2201      	movs	r2, #1
 800f22e:	705a      	strb	r2, [r3, #1]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 800f230:	68bb      	ldr	r3, [r7, #8]
 800f232:	2200      	movs	r2, #0
 800f234:	709a      	strb	r2, [r3, #2]

	pdev->offset_calibration_mode =
 800f236:	68bb      	ldr	r3, [r7, #8]
 800f238:	2201      	movs	r2, #1
 800f23a:	70da      	strb	r2, [r3, #3]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 800f23c:	68bb      	ldr	r3, [r7, #8]
 800f23e:	2201      	movs	r2, #1
 800f240:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;

	pdev->phasecal_config_timeout_us  =  1000;
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800f248:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 800f24a:	68bb      	ldr	r3, [r7, #8]
 800f24c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800f250:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 800f252:	68bb      	ldr	r3, [r7, #8]
 800f254:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 800f258:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 800f25a:	68bb      	ldr	r3, [r7, #8]
 800f25c:	2264      	movs	r2, #100	@ 0x64
 800f25e:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 800f260:	68bb      	ldr	r3, [r7, #8]
 800f262:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 800f266:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 800f268:	68bb      	ldr	r3, [r7, #8]
 800f26a:	2200      	movs	r2, #0
 800f26c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	/* initialise gain calibration values to tuning parameter values */

	pdev->gain_cal.standard_ranging_gain_factor =
 800f270:	68bb      	ldr	r3, [r7, #8]
 800f272:	f240 72db 	movw	r2, #2011	@ 0x7db
 800f276:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;

	/*
	 * Initialise version structure
	 */
	VL53L1_init_version(Dev);
 800f27a:	6878      	ldr	r0, [r7, #4]
 800f27c:	f002 f909 	bl	8011492 <VL53L1_init_version>
	 *
	 *  Contains the key NVM data e.g identification info fast oscillator
	 *  freq, max trim and laser safety info
	 */

	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800f280:	78fb      	ldrb	r3, [r7, #3]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d008      	beq.n	800f298 <VL53L1_data_init+0x90>
 800f286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d104      	bne.n	800f298 <VL53L1_data_init+0x90>
			status = VL53L1_read_p2p_data(Dev);
 800f28e:	6878      	ldr	r0, [r7, #4]
 800f290:	f000 f857 	bl	800f342 <VL53L1_read_p2p_data>
 800f294:	4603      	mov	r3, r0
 800f296:	73fb      	strb	r3, [r7, #15]

	/* Initialise Ref SPAD Char configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_refspadchar_config_struct(
 800f298:	68bb      	ldr	r3, [r7, #8]
 800f29a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800f29e:	4618      	mov	r0, r3
 800f2a0:	f001 fc38 	bl	8010b14 <VL53L1_init_refspadchar_config_struct>
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	73fb      	strb	r3, [r7, #15]
#endif

	/* Initialise SPAD Self Check (SSC) configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_ssc_config_struct(
 800f2a8:	68bb      	ldr	r3, [r7, #8]
 800f2aa:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	f001 fc54 	bl	8010b5c <VL53L1_init_ssc_config_struct>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	73fb      	strb	r3, [r7, #15]

	/* Initialise Private Xtalk configuration structure
	 * - Fill with customer NVM data to begin
	 */
	status =
		VL53L1_init_xtalk_config_struct(
 800f2b8:	68bb      	ldr	r3, [r7, #8]
 800f2ba:	f103 0242 	add.w	r2, r3, #66	@ 0x42
 800f2be:	68bb      	ldr	r3, [r7, #8]
 800f2c0:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 800f2c4:	4619      	mov	r1, r3
 800f2c6:	4610      	mov	r0, r2
 800f2c8:	f001 fc69 	bl	8010b9e <VL53L1_init_xtalk_config_struct>
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	73fb      	strb	r3, [r7, #15]

	/* Initialise Offset Calibration configuration structure
	 */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_offset_cal_config_struct(
 800f2d0:	68bb      	ldr	r3, [r7, #8]
 800f2d2:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f001 fcc3 	bl	8010c62 <VL53L1_init_offset_cal_config_struct>
 800f2dc:	4603      	mov	r3, r0
 800f2de:	73fb      	strb	r3, [r7, #15]

	/* Initialise Tuning Parameter structure
	 * - Added as part of Patch_AddingTuningParmStorage_11821
	 */
	status =
		VL53L1_init_tuning_parm_storage_struct(
 800f2e0:	68bb      	ldr	r3, [r7, #8]
 800f2e2:	33a4      	adds	r3, #164	@ 0xa4
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	f001 fce3 	bl	8010cb0 <VL53L1_init_tuning_parm_storage_struct>
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	73fb      	strb	r3, [r7, #15]
			&(pdev->tuning_parms));

	status = VL53L1_set_vhv_loopbound(Dev,
 800f2ee:	2120      	movs	r1, #32
 800f2f0:	6878      	ldr	r0, [r7, #4]
 800f2f2:	f000 fc99 	bl	800fc28 <VL53L1_set_vhv_loopbound>
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	73fb      	strb	r3, [r7, #15]
	/*
	 * Initialise default settings - much happen *after*
	 * reading /setting  of static_nvm_managed
	 */

	if (status == VL53L1_ERROR_NONE)
 800f2fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d116      	bne.n	800f330 <VL53L1_data_init+0x128>
		status = VL53L1_set_preset_mode(
 800f302:	68bb      	ldr	r3, [r7, #8]
 800f304:	7858      	ldrb	r0, [r3, #1]
 800f306:	68bb      	ldr	r3, [r7, #8]
 800f308:	8b1c      	ldrh	r4, [r3, #24]
 800f30a:	68bb      	ldr	r3, [r7, #8]
 800f30c:	689d      	ldr	r5, [r3, #8]
 800f30e:	68bb      	ldr	r3, [r7, #8]
 800f310:	68db      	ldr	r3, [r3, #12]
 800f312:	68ba      	ldr	r2, [r7, #8]
 800f314:	6912      	ldr	r2, [r2, #16]
 800f316:	68b9      	ldr	r1, [r7, #8]
 800f318:	6949      	ldr	r1, [r1, #20]
 800f31a:	9102      	str	r1, [sp, #8]
 800f31c:	9201      	str	r2, [sp, #4]
 800f31e:	9300      	str	r3, [sp, #0]
 800f320:	462b      	mov	r3, r5
 800f322:	4622      	mov	r2, r4
 800f324:	4601      	mov	r1, r0
 800f326:	6878      	ldr	r0, [r7, #4]
 800f328:	f000 fab0 	bl	800f88c <VL53L1_set_preset_mode>
 800f32c:	4603      	mov	r3, r0
 800f32e:	73fb      	strb	r3, [r7, #15]
						pdev->range_config_timeout_us,
						pdev->inter_measurement_period_ms);

	/* Initial Low Power Auto Mode data structures */
	/* Added for Patch_LowPowerAutoMode */
	VL53L1_low_power_auto_data_init(
 800f330:	6878      	ldr	r0, [r7, #4]
 800f332:	f002 fee7 	bl	8012104 <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 800f336:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f33a:	4618      	mov	r0, r3
 800f33c:	3710      	adds	r7, #16
 800f33e:	46bd      	mov	sp, r7
 800f340:	bdb0      	pop	{r4, r5, r7, pc}

0800f342 <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 800f342:	b580      	push	{r7, lr}
 800f344:	b084      	sub	sp, #16
 800f346:	af00      	add	r7, sp, #0
 800f348:	6078      	str	r0, [r7, #4]
	 *
	 *  Contains the key NVM data e.g identification info
	 *  fast oscillator freq, max trim and laser safety info
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800f34a:	2300      	movs	r3, #0
 800f34c:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 800f352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d108      	bne.n	800f36c <VL53L1_read_p2p_data+0x2a>
		status = VL53L1_get_static_nvm_managed(
 800f35a:	68bb      	ldr	r3, [r7, #8]
 800f35c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800f360:	4619      	mov	r1, r3
 800f362:	6878      	ldr	r0, [r7, #4]
 800f364:	f003 f86b 	bl	801243e <VL53L1_get_static_nvm_managed>
 800f368:	4603      	mov	r3, r0
 800f36a:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 800f36c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d107      	bne.n	800f384 <VL53L1_read_p2p_data+0x42>
		status = VL53L1_get_customer_nvm_managed(
 800f374:	68bb      	ldr	r3, [r7, #8]
 800f376:	3342      	adds	r3, #66	@ 0x42
 800f378:	4619      	mov	r1, r3
 800f37a:	6878      	ldr	r0, [r7, #4]
 800f37c:	f003 f99d 	bl	80126ba <VL53L1_get_customer_nvm_managed>
 800f380:	4603      	mov	r3, r0
 800f382:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 800f384:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d115      	bne.n	800f3b8 <VL53L1_read_p2p_data+0x76>

		status = VL53L1_get_nvm_copy_data(
 800f38c:	68bb      	ldr	r3, [r7, #8]
 800f38e:	f503 73fd 	add.w	r3, r3, #506	@ 0x1fa
 800f392:	4619      	mov	r1, r3
 800f394:	6878      	ldr	r0, [r7, #4]
 800f396:	f004 f84f 	bl	8013438 <VL53L1_get_nvm_copy_data>
 800f39a:	4603      	mov	r3, r0
 800f39c:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->nvm_copy_data));

		/* copy Return Good SPADs to buffer */
		if (status == VL53L1_ERROR_NONE)
 800f39e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d108      	bne.n	800f3b8 <VL53L1_read_p2p_data+0x76>
			VL53L1_copy_rtn_good_spads_to_buffer(
 800f3a6:	68bb      	ldr	r3, [r7, #8]
 800f3a8:	f503 72fd 	add.w	r2, r3, #506	@ 0x1fa
 800f3ac:	68bb      	ldr	r3, [r7, #8]
 800f3ae:	33f0      	adds	r3, #240	@ 0xf0
 800f3b0:	4619      	mov	r1, r3
 800f3b2:	4610      	mov	r0, r2
 800f3b4:	f002 f9eb 	bl	801178e <VL53L1_copy_rtn_good_spads_to_buffer>

	/*
	 * read slow osc calibration value
	 * counts per ms
	 */
	if (status == VL53L1_ERROR_NONE)
 800f3b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d109      	bne.n	800f3d4 <VL53L1_read_p2p_data+0x92>
		status =
			VL53L1_RdWord(
 800f3c0:	68bb      	ldr	r3, [r7, #8]
 800f3c2:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 800f3c6:	461a      	mov	r2, r3
 800f3c8:	21de      	movs	r1, #222	@ 0xde
 800f3ca:	6878      	ldr	r0, [r7, #4]
 800f3cc:	f004 f996 	bl	80136fc <VL53L1_RdWord>
 800f3d0:	4603      	mov	r3, r0
 800f3d2:	73fb      	strb	r3, [r7, #15]

	/*
	 * Check if there a sensible value for osc_measured__fast_osc__frequency
	 */

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 800f3d4:	68bb      	ldr	r3, [r7, #8]
 800f3d6:	f8b3 315e 	ldrh.w	r3, [r3, #350]	@ 0x15e
 800f3da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f3de:	d204      	bcs.n	800f3ea <VL53L1_read_p2p_data+0xa8>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 800f3e0:	68bb      	ldr	r3, [r7, #8]
 800f3e2:	f64b 42cc 	movw	r2, #48332	@ 0xbccc
 800f3e6:	f8a3 215e 	strh.w	r2, [r3, #350]	@ 0x15e

	/*
	 * Get MM ROI - contains optical centre as SPAD number
	 */

	if (status == VL53L1_ERROR_NONE)
 800f3ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d107      	bne.n	800f402 <VL53L1_read_p2p_data+0xc0>
		status =
			VL53L1_get_mode_mitigation_roi(
 800f3f2:	68bb      	ldr	r3, [r7, #8]
 800f3f4:	339e      	adds	r3, #158	@ 0x9e
 800f3f6:	4619      	mov	r1, r3
 800f3f8:	6878      	ldr	r0, [r7, #4]
 800f3fa:	f000 f968 	bl	800f6ce <VL53L1_get_mode_mitigation_roi>
 800f3fe:	4603      	mov	r3, r0
 800f400:	73fb      	strb	r3, [r7, #15]

	/* catch parts where the optical centre is
	 * no programmed in to the NVM
	 */

	if (pdev->optical_centre.x_centre == 0 &&
 800f402:	68bb      	ldr	r3, [r7, #8]
 800f404:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d114      	bne.n	800f436 <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.y_centre == 0) {
 800f40c:	68bb      	ldr	r3, [r7, #8]
 800f40e:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
	if (pdev->optical_centre.x_centre == 0 &&
 800f412:	2b00      	cmp	r3, #0
 800f414:	d10f      	bne.n	800f436 <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 800f416:	68bb      	ldr	r3, [r7, #8]
 800f418:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
 800f41c:	011b      	lsls	r3, r3, #4
 800f41e:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 800f420:	68bb      	ldr	r3, [r7, #8]
 800f422:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 800f426:	68bb      	ldr	r3, [r7, #8]
 800f428:	f893 309f 	ldrb.w	r3, [r3, #159]	@ 0x9f
 800f42c:	011b      	lsls	r3, r3, #4
 800f42e:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 800f430:	68bb      	ldr	r3, [r7, #8]
 800f432:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
	}

	LOG_FUNCTION_END(status);

	return status;
 800f436:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f43a:	4618      	mov	r0, r3
 800f43c:	3710      	adds	r7, #16
 800f43e:	46bd      	mov	sp, r7
 800f440:	bd80      	pop	{r7, pc}

0800f442 <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 800f442:	b480      	push	{r7}
 800f444:	b085      	sub	sp, #20
 800f446:	af00      	add	r7, sp, #0
 800f448:	6078      	str	r0, [r7, #4]
 800f44a:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f44c:	2300      	movs	r3, #0
 800f44e:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 800f454:	68bb      	ldr	r3, [r7, #8]
 800f456:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	@ 0x2b4
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d101      	bne.n	800f462 <VL53L1_set_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800f45e:	23f1      	movs	r3, #241	@ 0xf1
 800f460:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 800f462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d10c      	bne.n	800f484 <VL53L1_set_inter_measurement_period_ms+0x42>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800f46a:	68bb      	ldr	r3, [r7, #8]
 800f46c:	683a      	ldr	r2, [r7, #0]
 800f46e:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 800f470:	68bb      	ldr	r3, [r7, #8]
 800f472:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	@ 0x2b4
 800f476:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period = \
 800f47e:	68bb      	ldr	r3, [r7, #8]
 800f480:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
	}

	LOG_FUNCTION_END(status);

	return status;
 800f484:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f488:	4618      	mov	r0, r3
 800f48a:	3714      	adds	r7, #20
 800f48c:	46bd      	mov	sp, r7
 800f48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f492:	4770      	bx	lr

0800f494 <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b088      	sub	sp, #32
 800f498:	af02      	add	r7, sp, #8
 800f49a:	60f8      	str	r0, [r7, #12]
 800f49c:	60b9      	str	r1, [r7, #8]
 800f49e:	607a      	str	r2, [r7, #4]
 800f4a0:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for setting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 800f4aa:	693b      	ldr	r3, [r7, #16]
 800f4ac:	f8b3 315e 	ldrh.w	r3, [r3, #350]	@ 0x15e
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d101      	bne.n	800f4b8 <VL53L1_set_timeouts_us+0x24>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800f4b4:	23f1      	movs	r3, #241	@ 0xf1
 800f4b6:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 800f4b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d11b      	bne.n	800f4f8 <VL53L1_set_timeouts_us+0x64>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 800f4c0:	693b      	ldr	r3, [r7, #16]
 800f4c2:	68ba      	ldr	r2, [r7, #8]
 800f4c4:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 800f4c6:	693b      	ldr	r3, [r7, #16]
 800f4c8:	687a      	ldr	r2, [r7, #4]
 800f4ca:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 800f4cc:	693b      	ldr	r3, [r7, #16]
 800f4ce:	683a      	ldr	r2, [r7, #0]
 800f4d0:	611a      	str	r2, [r3, #16]

		status =
			VL53L1_calc_timeout_register_values(
 800f4d2:	693b      	ldr	r3, [r7, #16]
 800f4d4:	f8b3 115e 	ldrh.w	r1, [r3, #350]	@ 0x15e
 800f4d8:	693b      	ldr	r3, [r7, #16]
 800f4da:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800f4de:	693a      	ldr	r2, [r7, #16]
 800f4e0:	f502 72ce 	add.w	r2, r2, #412	@ 0x19c
 800f4e4:	9201      	str	r2, [sp, #4]
 800f4e6:	9300      	str	r3, [sp, #0]
 800f4e8:	460b      	mov	r3, r1
 800f4ea:	683a      	ldr	r2, [r7, #0]
 800f4ec:	6879      	ldr	r1, [r7, #4]
 800f4ee:	68b8      	ldr	r0, [r7, #8]
 800f4f0:	f002 fc6c 	bl	8011dcc <VL53L1_calc_timeout_register_values>
 800f4f4:	4603      	mov	r3, r0
 800f4f6:	75fb      	strb	r3, [r7, #23]
				&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800f4f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	3718      	adds	r7, #24
 800f500:	46bd      	mov	sp, r7
 800f502:	bd80      	pop	{r7, pc}

0800f504 <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b088      	sub	sp, #32
 800f508:	af00      	add	r7, sp, #0
 800f50a:	60f8      	str	r0, [r7, #12]
 800f50c:	60b9      	str	r1, [r7, #8]
 800f50e:	607a      	str	r2, [r7, #4]
 800f510:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for getting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f512:	2300      	movs	r3, #0
 800f514:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 800f51a:	2300      	movs	r3, #0
 800f51c:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 800f51e:	2300      	movs	r3, #0
 800f520:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 800f522:	69bb      	ldr	r3, [r7, #24]
 800f524:	f8b3 315e 	ldrh.w	r3, [r3, #350]	@ 0x15e
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d101      	bne.n	800f530 <VL53L1_get_timeouts_us+0x2c>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800f52c:	23f1      	movs	r3, #241	@ 0xf1
 800f52e:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 800f530:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d148      	bne.n	800f5ca <VL53L1_get_timeouts_us+0xc6>

		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
			VL53L1_calc_macro_period_us(
 800f538:	69bb      	ldr	r3, [r7, #24]
 800f53a:	f8b3 215e 	ldrh.w	r2, [r3, #350]	@ 0x15e
 800f53e:	69bb      	ldr	r3, [r7, #24]
 800f540:	f893 31a2 	ldrb.w	r3, [r3, #418]	@ 0x1a2
 800f544:	4619      	mov	r1, r3
 800f546:	4610      	mov	r0, r2
 800f548:	f002 fae7 	bl	8011b1a <VL53L1_calc_macro_period_us>
 800f54c:	6178      	str	r0, [r7, #20]

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 800f54e:	69bb      	ldr	r3, [r7, #24]
 800f550:	f893 318b 	ldrb.w	r3, [r3, #395]	@ 0x18b
			VL53L1_calc_timeout_us(
 800f554:	6979      	ldr	r1, [r7, #20]
 800f556:	4618      	mov	r0, r3
 800f558:	f002 fb9f 	bl	8011c9a <VL53L1_calc_timeout_us>
 800f55c:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 800f55e:	68bb      	ldr	r3, [r7, #8]
 800f560:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 800f562:	69bb      	ldr	r3, [r7, #24]
 800f564:	f893 319c 	ldrb.w	r3, [r3, #412]	@ 0x19c
		timeout_encoded =
 800f568:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 800f56a:	8a7b      	ldrh	r3, [r7, #18]
 800f56c:	021b      	lsls	r3, r3, #8
 800f56e:	b29b      	uxth	r3, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 800f570:	69ba      	ldr	r2, [r7, #24]
 800f572:	f892 219d 	ldrb.w	r2, [r2, #413]	@ 0x19d
		timeout_encoded = (timeout_encoded << 8) +
 800f576:	4413      	add	r3, r2
 800f578:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 800f57a:	8a7b      	ldrh	r3, [r7, #18]
 800f57c:	6979      	ldr	r1, [r7, #20]
 800f57e:	4618      	mov	r0, r3
 800f580:	f002 fbcb 	bl	8011d1a <VL53L1_calc_decoded_timeout_us>
 800f584:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 800f58a:	69bb      	ldr	r3, [r7, #24]
 800f58c:	f893 31a0 	ldrb.w	r3, [r3, #416]	@ 0x1a0
		timeout_encoded =
 800f590:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 800f592:	8a7b      	ldrh	r3, [r7, #18]
 800f594:	021b      	lsls	r3, r3, #8
 800f596:	b29b      	uxth	r3, r3
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 800f598:	69ba      	ldr	r2, [r7, #24]
 800f59a:	f892 21a1 	ldrb.w	r2, [r2, #417]	@ 0x1a1
		timeout_encoded = (timeout_encoded << 8) +
 800f59e:	4413      	add	r3, r2
 800f5a0:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 800f5a2:	8a7b      	ldrh	r3, [r7, #18]
 800f5a4:	6979      	ldr	r1, [r7, #20]
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	f002 fbb7 	bl	8011d1a <VL53L1_calc_decoded_timeout_us>
 800f5ac:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 800f5b2:	68bb      	ldr	r3, [r7, #8]
 800f5b4:	681a      	ldr	r2, [r3, #0]
 800f5b6:	69bb      	ldr	r3, [r7, #24]
 800f5b8:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	681a      	ldr	r2, [r3, #0]
 800f5be:	69bb      	ldr	r3, [r7, #24]
 800f5c0:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 800f5c2:	683b      	ldr	r3, [r7, #0]
 800f5c4:	681a      	ldr	r2, [r3, #0]
 800f5c6:	69bb      	ldr	r3, [r7, #24]
 800f5c8:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 800f5ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	3720      	adds	r7, #32
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	bd80      	pop	{r7, pc}

0800f5d6 <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 800f5d6:	b480      	push	{r7}
 800f5d8:	b087      	sub	sp, #28
 800f5da:	af00      	add	r7, sp, #0
 800f5dc:	60f8      	str	r0, [r7, #12]
 800f5de:	460b      	mov	r3, r1
 800f5e0:	607a      	str	r2, [r7, #4]
 800f5e2:	72fb      	strb	r3, [r7, #11]
	/**
	 * Convenience function for getting sequence
	 * config enable bits
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 800f5ec:	2301      	movs	r3, #1
 800f5ee:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 800f5f0:	7afb      	ldrb	r3, [r7, #11]
 800f5f2:	2b07      	cmp	r3, #7
 800f5f4:	d81c      	bhi.n	800f630 <VL53L1_get_sequence_config_bit+0x5a>

		if (bit_id > 0) {
 800f5f6:	7afb      	ldrb	r3, [r7, #11]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d004      	beq.n	800f606 <VL53L1_get_sequence_config_bit+0x30>
			bit_mask  = 0x01 << bit_id;
 800f5fc:	7afb      	ldrb	r3, [r7, #11]
 800f5fe:	2201      	movs	r2, #1
 800f600:	fa02 f303 	lsl.w	r3, r2, r3
 800f604:	75bb      	strb	r3, [r7, #22]
		}

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 800f606:	693b      	ldr	r3, [r7, #16]
 800f608:	f893 21c5 	ldrb.w	r2, [r3, #453]	@ 0x1c5
		*pvalue =
 800f60c:	7dbb      	ldrb	r3, [r7, #22]
 800f60e:	4013      	ands	r3, r2
 800f610:	b2da      	uxtb	r2, r3
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0) {
 800f616:	7afb      	ldrb	r3, [r7, #11]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d00b      	beq.n	800f634 <VL53L1_get_sequence_config_bit+0x5e>
			*pvalue  = *pvalue >> bit_id;
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	781b      	ldrb	r3, [r3, #0]
 800f620:	461a      	mov	r2, r3
 800f622:	7afb      	ldrb	r3, [r7, #11]
 800f624:	fa42 f303 	asr.w	r3, r2, r3
 800f628:	b2da      	uxtb	r2, r3
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	701a      	strb	r2, [r3, #0]
 800f62e:	e001      	b.n	800f634 <VL53L1_get_sequence_config_bit+0x5e>
		}

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 800f630:	23fc      	movs	r3, #252	@ 0xfc
 800f632:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 800f634:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f638:	4618      	mov	r0, r3
 800f63a:	371c      	adds	r7, #28
 800f63c:	46bd      	mov	sp, r7
 800f63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f642:	4770      	bx	lr

0800f644 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b084      	sub	sp, #16
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
 800f64c:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f64e:	2300      	movs	r3, #0
 800f650:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 800f656:	683b      	ldr	r3, [r7, #0]
 800f658:	7858      	ldrb	r0, [r3, #1]
 800f65a:	683b      	ldr	r3, [r7, #0]
 800f65c:	7819      	ldrb	r1, [r3, #0]
 800f65e:	68bb      	ldr	r3, [r7, #8]
 800f660:	f203 13c3 	addw	r3, r3, #451	@ 0x1c3
 800f664:	461a      	mov	r2, r3
 800f666:	f002 fc2a 	bl	8011ebe <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 800f66a:	683b      	ldr	r3, [r7, #0]
 800f66c:	7898      	ldrb	r0, [r3, #2]
 800f66e:	683b      	ldr	r3, [r7, #0]
 800f670:	78d9      	ldrb	r1, [r3, #3]
 800f672:	68bb      	ldr	r3, [r7, #8]
 800f674:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 800f678:	461a      	mov	r2, r3
 800f67a:	f002 fc5f 	bl	8011f3c <VL53L1_encode_zone_size>

	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
 800f67e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f682:	4618      	mov	r0, r3
 800f684:	3710      	adds	r7, #16
 800f686:	46bd      	mov	sp, r7
 800f688:	bd80      	pop	{r7, pc}

0800f68a <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 800f68a:	b580      	push	{r7, lr}
 800f68c:	b084      	sub	sp, #16
 800f68e:	af00      	add	r7, sp, #0
 800f690:	6078      	str	r0, [r7, #4]
 800f692:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f694:	2300      	movs	r3, #0
 800f696:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 800f69c:	68bb      	ldr	r3, [r7, #8]
 800f69e:	f893 01c3 	ldrb.w	r0, [r3, #451]	@ 0x1c3
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	3301      	adds	r3, #1
 800f6a6:	683a      	ldr	r2, [r7, #0]
 800f6a8:	4619      	mov	r1, r3
 800f6aa:	f002 fde4 	bl	8012276 <VL53L1_decode_row_col>
			pdev->dyn_cfg.roi_config__user_roi_centre_spad,
			&(puser_zone->y_centre),
			&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 800f6ae:	68bb      	ldr	r3, [r7, #8]
 800f6b0:	f893 01c4 	ldrb.w	r0, [r3, #452]	@ 0x1c4
 800f6b4:	683b      	ldr	r3, [r7, #0]
 800f6b6:	1c99      	adds	r1, r3, #2
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	3303      	adds	r3, #3
 800f6bc:	461a      	mov	r2, r3
 800f6be:	f002 fc25 	bl	8011f0c <VL53L1_decode_zone_size>
		&(puser_zone->width),
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
 800f6c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	3710      	adds	r7, #16
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	bd80      	pop	{r7, pc}

0800f6ce <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 800f6ce:	b580      	push	{r7, lr}
 800f6d0:	b086      	sub	sp, #24
 800f6d2:	af00      	add	r7, sp, #0
 800f6d4:	6078      	str	r0, [r7, #4]
 800f6d6:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the mode mitigation ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f6d8:	2300      	movs	r3, #0
 800f6da:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 800f6ec:	693b      	ldr	r3, [r7, #16]
 800f6ee:	f893 322a 	ldrb.w	r3, [r3, #554]	@ 0x22a
 800f6f2:	f107 020e 	add.w	r2, r7, #14
 800f6f6:	f107 010d 	add.w	r1, r7, #13
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	f002 fdbb 	bl	8012276 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 800f700:	7bba      	ldrb	r2, [r7, #14]
 800f702:	683b      	ldr	r3, [r7, #0]
 800f704:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 800f706:	7b7a      	ldrb	r2, [r7, #13]
 800f708:	683b      	ldr	r3, [r7, #0]
 800f70a:	705a      	strb	r2, [r3, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 800f70c:	693b      	ldr	r3, [r7, #16]
 800f70e:	f893 322b 	ldrb.w	r3, [r3, #555]	@ 0x22b
 800f712:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 800f714:	7bfb      	ldrb	r3, [r7, #15]
 800f716:	091b      	lsrs	r3, r3, #4
 800f718:	b2da      	uxtb	r2, r3
 800f71a:	683b      	ldr	r3, [r7, #0]
 800f71c:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 800f71e:	7bfb      	ldrb	r3, [r7, #15]
 800f720:	f003 030f 	and.w	r3, r3, #15
 800f724:	b2da      	uxtb	r2, r3
 800f726:	683b      	ldr	r3, [r7, #0]
 800f728:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 800f72a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f72e:	4618      	mov	r0, r3
 800f730:	3718      	adds	r7, #24
 800f732:	46bd      	mov	sp, r7
 800f734:	bd80      	pop	{r7, pc}
	...

0800f738 <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 800f738:	b480      	push	{r7}
 800f73a:	b087      	sub	sp, #28
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	60f8      	str	r0, [r7, #12]
 800f740:	607a      	str	r2, [r7, #4]
 800f742:	603b      	str	r3, [r7, #0]
 800f744:	460b      	mov	r3, r1
 800f746:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f748:	2300      	movs	r3, #0
 800f74a:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 800f750:	7afb      	ldrb	r3, [r7, #11]
 800f752:	3b01      	subs	r3, #1
 800f754:	2b25      	cmp	r3, #37	@ 0x25
 800f756:	f200 808e 	bhi.w	800f876 <VL53L1_get_preset_mode_timing_cfg+0x13e>
 800f75a:	a201      	add	r2, pc, #4	@ (adr r2, 800f760 <VL53L1_get_preset_mode_timing_cfg+0x28>)
 800f75c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f760:	0800f7f9 	.word	0x0800f7f9
 800f764:	0800f7f9 	.word	0x0800f7f9
 800f768:	0800f7f9 	.word	0x0800f7f9
 800f76c:	0800f7f9 	.word	0x0800f7f9
 800f770:	0800f7f9 	.word	0x0800f7f9
 800f774:	0800f823 	.word	0x0800f823
 800f778:	0800f823 	.word	0x0800f823
 800f77c:	0800f823 	.word	0x0800f823
 800f780:	0800f877 	.word	0x0800f877
 800f784:	0800f877 	.word	0x0800f877
 800f788:	0800f877 	.word	0x0800f877
 800f78c:	0800f877 	.word	0x0800f877
 800f790:	0800f877 	.word	0x0800f877
 800f794:	0800f877 	.word	0x0800f877
 800f798:	0800f877 	.word	0x0800f877
 800f79c:	0800f877 	.word	0x0800f877
 800f7a0:	0800f7f9 	.word	0x0800f7f9
 800f7a4:	0800f823 	.word	0x0800f823
 800f7a8:	0800f877 	.word	0x0800f877
 800f7ac:	0800f877 	.word	0x0800f877
 800f7b0:	0800f877 	.word	0x0800f877
 800f7b4:	0800f877 	.word	0x0800f877
 800f7b8:	0800f877 	.word	0x0800f877
 800f7bc:	0800f877 	.word	0x0800f877
 800f7c0:	0800f877 	.word	0x0800f877
 800f7c4:	0800f877 	.word	0x0800f877
 800f7c8:	0800f877 	.word	0x0800f877
 800f7cc:	0800f877 	.word	0x0800f877
 800f7d0:	0800f877 	.word	0x0800f877
 800f7d4:	0800f877 	.word	0x0800f877
 800f7d8:	0800f877 	.word	0x0800f877
 800f7dc:	0800f877 	.word	0x0800f877
 800f7e0:	0800f877 	.word	0x0800f877
 800f7e4:	0800f877 	.word	0x0800f877
 800f7e8:	0800f877 	.word	0x0800f877
 800f7ec:	0800f84d 	.word	0x0800f84d
 800f7f0:	0800f84d 	.word	0x0800f84d
 800f7f4:	0800f84d 	.word	0x0800f84d
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 800f7f8:	693b      	ldr	r3, [r7, #16]
 800f7fa:	f8b3 20ca 	ldrh.w	r2, [r3, #202]	@ 0xca
		*pdss_config__target_total_rate_mcps =
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800f802:	693b      	ldr	r3, [r7, #16]
 800f804:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
		*pphasecal_config_timeout_us =
 800f808:	683b      	ldr	r3, [r7, #0]
 800f80a:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 800f80c:	693b      	ldr	r3, [r7, #16]
 800f80e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
		*pmm_config_timeout_us =
 800f812:	6a3b      	ldr	r3, [r7, #32]
 800f814:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lite_us;
 800f816:	693b      	ldr	r3, [r7, #16]
 800f818:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
		*prange_config_timeout_us =
 800f81c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f81e:	601a      	str	r2, [r3, #0]
	break;
 800f820:	e02c      	b.n	800f87c <VL53L1_get_preset_mode_timing_cfg+0x144>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 800f822:	693b      	ldr	r3, [r7, #16]
 800f824:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
		*pdss_config__target_total_rate_mcps =
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800f82c:	693b      	ldr	r3, [r7, #16]
 800f82e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
		*pphasecal_config_timeout_us =
 800f832:	683b      	ldr	r3, [r7, #0]
 800f834:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 800f836:	693b      	ldr	r3, [r7, #16]
 800f838:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
		*pmm_config_timeout_us =
 800f83c:	6a3b      	ldr	r3, [r7, #32]
 800f83e:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_timed_us;
 800f840:	693b      	ldr	r3, [r7, #16]
 800f842:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
		*prange_config_timeout_us =
 800f846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f848:	601a      	str	r2, [r3, #0]
	break;
 800f84a:	e017      	b.n	800f87c <VL53L1_get_preset_mode_timing_cfg+0x144>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 800f84c:	693b      	ldr	r3, [r7, #16]
 800f84e:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
		*pdss_config__target_total_rate_mcps =
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800f856:	693b      	ldr	r3, [r7, #16]
 800f858:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
		*pphasecal_config_timeout_us =
 800f85c:	683b      	ldr	r3, [r7, #0]
 800f85e:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800f860:	693b      	ldr	r3, [r7, #16]
 800f862:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
		*pmm_config_timeout_us =
 800f866:	6a3b      	ldr	r3, [r7, #32]
 800f868:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 800f86a:	693b      	ldr	r3, [r7, #16]
 800f86c:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
		*prange_config_timeout_us =
 800f870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f872:	601a      	str	r2, [r3, #0]
	break;
 800f874:	e002      	b.n	800f87c <VL53L1_get_preset_mode_timing_cfg+0x144>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800f876:	23fc      	movs	r3, #252	@ 0xfc
 800f878:	75fb      	strb	r3, [r7, #23]
		break;
 800f87a:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800f87c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f880:	4618      	mov	r0, r3
 800f882:	371c      	adds	r7, #28
 800f884:	46bd      	mov	sp, r7
 800f886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f88a:	4770      	bx	lr

0800f88c <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b092      	sub	sp, #72	@ 0x48
 800f890:	af04      	add	r7, sp, #16
 800f892:	60f8      	str	r0, [r7, #12]
 800f894:	607b      	str	r3, [r7, #4]
 800f896:	460b      	mov	r3, r1
 800f898:	72fb      	strb	r3, [r7, #11]
 800f89a:	4613      	mov	r3, r2
 800f89c:	813b      	strh	r3, [r7, #8]
	/**
	 * Initializes static and dynamic data structures for
	 * the provided preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800f89e:	2300      	movs	r3, #0
 800f8a0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	VL53L1_LLDriverData_t *pdev =
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	633b      	str	r3, [r7, #48]	@ 0x30
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800f8a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8aa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f8ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 800f8b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8b2:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800f8b6:	62bb      	str	r3, [r7, #40]	@ 0x28
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 800f8b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8ba:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800f8be:	627b      	str	r3, [r7, #36]	@ 0x24
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800f8c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8c2:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 800f8c6:	623b      	str	r3, [r7, #32]
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800f8c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8ca:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 800f8ce:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 800f8d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8d2:	33a4      	adds	r3, #164	@ 0xa4
 800f8d4:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 800f8d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8d8:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 800f8dc:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode                 = device_preset_mode;
 800f8de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8e0:	7afa      	ldrb	r2, [r7, #11]
 800f8e2:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 800f8e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f8e8:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 800f8ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f8ee:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800f8f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f8f4:	615a      	str	r2, [r3, #20]

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 800f8f6:	2103      	movs	r1, #3
 800f8f8:	68f8      	ldr	r0, [r7, #12]
 800f8fa:	f001 fde6 	bl	80114ca <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 800f8fe:	7afb      	ldrb	r3, [r7, #11]
 800f900:	3b01      	subs	r3, #1
 800f902:	2b25      	cmp	r3, #37	@ 0x25
 800f904:	f200 810c 	bhi.w	800fb20 <VL53L1_set_preset_mode+0x294>
 800f908:	a201      	add	r2, pc, #4	@ (adr r2, 800f910 <VL53L1_set_preset_mode+0x84>)
 800f90a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f90e:	bf00      	nop
 800f910:	0800f9a9 	.word	0x0800f9a9
 800f914:	0800f9c5 	.word	0x0800f9c5
 800f918:	0800f9e1 	.word	0x0800f9e1
 800f91c:	0800f9fd 	.word	0x0800f9fd
 800f920:	0800fa19 	.word	0x0800fa19
 800f924:	0800fa35 	.word	0x0800fa35
 800f928:	0800fa51 	.word	0x0800fa51
 800f92c:	0800fa6d 	.word	0x0800fa6d
 800f930:	0800fb21 	.word	0x0800fb21
 800f934:	0800fb21 	.word	0x0800fb21
 800f938:	0800fb21 	.word	0x0800fb21
 800f93c:	0800fb21 	.word	0x0800fb21
 800f940:	0800fb21 	.word	0x0800fb21
 800f944:	0800fb21 	.word	0x0800fb21
 800f948:	0800fb21 	.word	0x0800fb21
 800f94c:	0800fb21 	.word	0x0800fb21
 800f950:	0800fa89 	.word	0x0800fa89
 800f954:	0800faa5 	.word	0x0800faa5
 800f958:	0800fb21 	.word	0x0800fb21
 800f95c:	0800fb21 	.word	0x0800fb21
 800f960:	0800fb21 	.word	0x0800fb21
 800f964:	0800fb21 	.word	0x0800fb21
 800f968:	0800fb21 	.word	0x0800fb21
 800f96c:	0800fb21 	.word	0x0800fb21
 800f970:	0800fb21 	.word	0x0800fb21
 800f974:	0800fb21 	.word	0x0800fb21
 800f978:	0800fb21 	.word	0x0800fb21
 800f97c:	0800fb21 	.word	0x0800fb21
 800f980:	0800fb21 	.word	0x0800fb21
 800f984:	0800fb21 	.word	0x0800fb21
 800f988:	0800fb21 	.word	0x0800fb21
 800f98c:	0800fb21 	.word	0x0800fb21
 800f990:	0800fb21 	.word	0x0800fb21
 800f994:	0800fb21 	.word	0x0800fb21
 800f998:	0800fb21 	.word	0x0800fb21
 800f99c:	0800fac1 	.word	0x0800fac1
 800f9a0:	0800fae1 	.word	0x0800fae1
 800f9a4:	0800fb01 	.word	0x0800fb01

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 800f9a8:	69bb      	ldr	r3, [r7, #24]
 800f9aa:	9301      	str	r3, [sp, #4]
 800f9ac:	69fb      	ldr	r3, [r7, #28]
 800f9ae:	9300      	str	r3, [sp, #0]
 800f9b0:	6a3b      	ldr	r3, [r7, #32]
 800f9b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f9b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f9b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f9b8:	f001 fa09 	bl	8010dce <VL53L1_preset_mode_standard_ranging>
 800f9bc:	4603      	mov	r3, r0
 800f9be:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800f9c2:	e0b1      	b.n	800fb28 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 800f9c4:	69bb      	ldr	r3, [r7, #24]
 800f9c6:	9301      	str	r3, [sp, #4]
 800f9c8:	69fb      	ldr	r3, [r7, #28]
 800f9ca:	9300      	str	r3, [sp, #0]
 800f9cc:	6a3b      	ldr	r3, [r7, #32]
 800f9ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f9d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f9d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f9d4:	f001 fb19 	bl	801100a <VL53L1_preset_mode_standard_ranging_short_range>
 800f9d8:	4603      	mov	r3, r0
 800f9da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800f9de:	e0a3      	b.n	800fb28 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 800f9e0:	69bb      	ldr	r3, [r7, #24]
 800f9e2:	9301      	str	r3, [sp, #4]
 800f9e4:	69fb      	ldr	r3, [r7, #28]
 800f9e6:	9300      	str	r3, [sp, #0]
 800f9e8:	6a3b      	ldr	r3, [r7, #32]
 800f9ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f9ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f9ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f9f0:	f001 fb4c 	bl	801108c <VL53L1_preset_mode_standard_ranging_long_range>
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800f9fa:	e095      	b.n	800fb28 <VL53L1_set_preset_mode+0x29c>

#ifndef VL53L1_NOCALIB
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 800f9fc:	69bb      	ldr	r3, [r7, #24]
 800f9fe:	9301      	str	r3, [sp, #4]
 800fa00:	69fb      	ldr	r3, [r7, #28]
 800fa02:	9300      	str	r3, [sp, #0]
 800fa04:	6a3b      	ldr	r3, [r7, #32]
 800fa06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fa0a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fa0c:	f001 fb7f 	bl	801110e <VL53L1_preset_mode_standard_ranging_mm1_cal>
 800fa10:	4603      	mov	r3, r0
 800fa12:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800fa16:	e087      	b.n	800fb28 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 800fa18:	69bb      	ldr	r3, [r7, #24]
 800fa1a:	9301      	str	r3, [sp, #4]
 800fa1c:	69fb      	ldr	r3, [r7, #28]
 800fa1e:	9300      	str	r3, [sp, #0]
 800fa20:	6a3b      	ldr	r3, [r7, #32]
 800fa22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fa26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fa28:	f001 fb96 	bl	8011158 <VL53L1_preset_mode_standard_ranging_mm2_cal>
 800fa2c:	4603      	mov	r3, r0
 800fa2e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800fa32:	e079      	b.n	800fb28 <VL53L1_set_preset_mode+0x29c>
#endif

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 800fa34:	69bb      	ldr	r3, [r7, #24]
 800fa36:	9301      	str	r3, [sp, #4]
 800fa38:	69fb      	ldr	r3, [r7, #28]
 800fa3a:	9300      	str	r3, [sp, #0]
 800fa3c:	6a3b      	ldr	r3, [r7, #32]
 800fa3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fa42:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fa44:	f001 fbad 	bl	80111a2 <VL53L1_preset_mode_timed_ranging>
 800fa48:	4603      	mov	r3, r0
 800fa4a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800fa4e:	e06b      	b.n	800fb28 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 800fa50:	69bb      	ldr	r3, [r7, #24]
 800fa52:	9301      	str	r3, [sp, #4]
 800fa54:	69fb      	ldr	r3, [r7, #28]
 800fa56:	9300      	str	r3, [sp, #0]
 800fa58:	6a3b      	ldr	r3, [r7, #32]
 800fa5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fa5e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fa60:	f001 fbd9 	bl	8011216 <VL53L1_preset_mode_timed_ranging_short_range>
 800fa64:	4603      	mov	r3, r0
 800fa66:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800fa6a:	e05d      	b.n	800fb28 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 800fa6c:	69bb      	ldr	r3, [r7, #24]
 800fa6e:	9301      	str	r3, [sp, #4]
 800fa70:	69fb      	ldr	r3, [r7, #28]
 800fa72:	9300      	str	r3, [sp, #0]
 800fa74:	6a3b      	ldr	r3, [r7, #32]
 800fa76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fa7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fa7c:	f001 fc05 	bl	801128a <VL53L1_preset_mode_timed_ranging_long_range>
 800fa80:	4603      	mov	r3, r0
 800fa82:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800fa86:	e04f      	b.n	800fb28 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 800fa88:	69bb      	ldr	r3, [r7, #24]
 800fa8a:	9301      	str	r3, [sp, #4]
 800fa8c:	69fb      	ldr	r3, [r7, #28]
 800fa8e:	9300      	str	r3, [sp, #0]
 800fa90:	6a3b      	ldr	r3, [r7, #32]
 800fa92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fa96:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fa98:	f001 fcd9 	bl	801144e <VL53L1_preset_mode_olt>
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800faa2:	e041      	b.n	800fb28 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 800faa4:	69bb      	ldr	r3, [r7, #24]
 800faa6:	9301      	str	r3, [sp, #4]
 800faa8:	69fb      	ldr	r3, [r7, #28]
 800faaa:	9300      	str	r3, [sp, #0]
 800faac:	6a3b      	ldr	r3, [r7, #32]
 800faae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fab0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fab2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fab4:	f001 fc95 	bl	80113e2 <VL53L1_preset_mode_singleshot_ranging>
 800fab8:	4603      	mov	r3, r0
 800faba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800fabe:	e033      	b.n	800fb28 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 800fac0:	697b      	ldr	r3, [r7, #20]
 800fac2:	9302      	str	r3, [sp, #8]
 800fac4:	69bb      	ldr	r3, [r7, #24]
 800fac6:	9301      	str	r3, [sp, #4]
 800fac8:	69fb      	ldr	r3, [r7, #28]
 800faca:	9300      	str	r3, [sp, #0]
 800facc:	6a3b      	ldr	r3, [r7, #32]
 800face:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fad0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fad2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fad4:	f001 fc39 	bl	801134a <VL53L1_preset_mode_low_power_auto_short_ranging>
 800fad8:	4603      	mov	r3, r0
 800fada:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800fade:	e023      	b.n	800fb28 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 800fae0:	697b      	ldr	r3, [r7, #20]
 800fae2:	9302      	str	r3, [sp, #8]
 800fae4:	69bb      	ldr	r3, [r7, #24]
 800fae6:	9301      	str	r3, [sp, #4]
 800fae8:	69fb      	ldr	r3, [r7, #28]
 800faea:	9300      	str	r3, [sp, #0]
 800faec:	6a3b      	ldr	r3, [r7, #32]
 800faee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800faf0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800faf2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800faf4:	f001 fc03 	bl	80112fe <VL53L1_preset_mode_low_power_auto_ranging>
 800faf8:	4603      	mov	r3, r0
 800fafa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800fafe:	e013      	b.n	800fb28 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 800fb00:	697b      	ldr	r3, [r7, #20]
 800fb02:	9302      	str	r3, [sp, #8]
 800fb04:	69bb      	ldr	r3, [r7, #24]
 800fb06:	9301      	str	r3, [sp, #4]
 800fb08:	69fb      	ldr	r3, [r7, #28]
 800fb0a:	9300      	str	r3, [sp, #0]
 800fb0c:	6a3b      	ldr	r3, [r7, #32]
 800fb0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fb10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fb12:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fb14:	f001 fc3f 	bl	8011396 <VL53L1_preset_mode_low_power_auto_long_ranging>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800fb1e:	e003      	b.n	800fb28 <VL53L1_set_preset_mode+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800fb20:	23fc      	movs	r3, #252	@ 0xfc
 800fb22:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		break;
 800fb26:	bf00      	nop

	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 800fb28:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d105      	bne.n	800fb3c <VL53L1_set_preset_mode+0x2b0>

		pstatic->dss_config__target_total_rate_mcps =
 800fb30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb32:	893a      	ldrh	r2, [r7, #8]
 800fb34:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 800fb36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb38:	893a      	ldrh	r2, [r7, #8]
 800fb3a:	831a      	strh	r2, [r3, #24]
	/*
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
 800fb3c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d108      	bne.n	800fb56 <VL53L1_set_preset_mode+0x2ca>
		status =
			VL53L1_set_timeouts_us(
 800fb44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fb46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fb48:	6879      	ldr	r1, [r7, #4]
 800fb4a:	68f8      	ldr	r0, [r7, #12]
 800fb4c:	f7ff fca2 	bl	800f494 <VL53L1_set_timeouts_us>
 800fb50:	4603      	mov	r3, r0
 800fb52:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 800fb56:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d106      	bne.n	800fb6c <VL53L1_set_preset_mode+0x2e0>
		status =
			VL53L1_set_inter_measurement_period_ms(
 800fb5e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800fb60:	68f8      	ldr	r0, [r7, #12]
 800fb62:	f7ff fc6e 	bl	800f442 <VL53L1_set_inter_measurement_period_ms>
 800fb66:	4603      	mov	r3, r0
 800fb68:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				Dev,
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
 800fb6c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800fb70:	4618      	mov	r0, r3
 800fb72:	3738      	adds	r7, #56	@ 0x38
 800fb74:	46bd      	mov	sp, r7
 800fb76:	bd80      	pop	{r7, pc}

0800fb78 <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 800fb78:	b480      	push	{r7}
 800fb7a:	b085      	sub	sp, #20
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
 800fb80:	6039      	str	r1, [r7, #0]
	 * Gets the Sigma Threshold value for Lite Mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800fb82:	2300      	movs	r3, #0
 800fb84:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 800fb8a:	68bb      	ldr	r3, [r7, #8]
 800fb8c:	f8b3 21a6 	ldrh.w	r2, [r3, #422]	@ 0x1a6
	*plite_sigma =
 800fb90:	683b      	ldr	r3, [r7, #0]
 800fb92:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800fb94:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800fb98:	4618      	mov	r0, r3
 800fb9a:	3714      	adds	r7, #20
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba2:	4770      	bx	lr

0800fba4 <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 800fba4:	b480      	push	{r7}
 800fba6:	b085      	sub	sp, #20
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
 800fbac:	460b      	mov	r3, r1
 800fbae:	807b      	strh	r3, [r7, #2]
	 * Sets the Sigma threshold value for Lite mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 800fbb8:	68bb      	ldr	r3, [r7, #8]
 800fbba:	887a      	ldrh	r2, [r7, #2]
 800fbbc:	f8a3 21a6 	strh.w	r2, [r3, #422]	@ 0x1a6

	LOG_FUNCTION_END(status);

	return status;
 800fbc0:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	3714      	adds	r7, #20
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbce:	4770      	bx	lr

0800fbd0 <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 800fbd0:	b480      	push	{r7}
 800fbd2:	b085      	sub	sp, #20
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
 800fbd8:	6039      	str	r1, [r7, #0]
	 * Gets the Min Count Rate value for Lite Mode
	 *
	 * (fixed point 9.7 Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800fbda:	2300      	movs	r3, #0
 800fbdc:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
			pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 800fbe2:	68bb      	ldr	r3, [r7, #8]
 800fbe4:	f8b3 21a8 	ldrh.w	r2, [r3, #424]	@ 0x1a8
	*plite_mincountrate =
 800fbe8:	683b      	ldr	r3, [r7, #0]
 800fbea:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800fbec:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	3714      	adds	r7, #20
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfa:	4770      	bx	lr

0800fbfc <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 800fbfc:	b480      	push	{r7}
 800fbfe:	b085      	sub	sp, #20
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	6078      	str	r0, [r7, #4]
 800fc04:	460b      	mov	r3, r1
 800fc06:	807b      	strh	r3, [r7, #2]
	 * Sets the Min COunt Rate value for Lite mode
	 *
	 * (fixed point 19.7Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800fc08:	2300      	movs	r3, #0
 800fc0a:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 800fc10:	68bb      	ldr	r3, [r7, #8]
 800fc12:	887a      	ldrh	r2, [r7, #2]
 800fc14:	f8a3 21a8 	strh.w	r2, [r3, #424]	@ 0x1a8
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 800fc18:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	3714      	adds	r7, #20
 800fc20:	46bd      	mov	sp, r7
 800fc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc26:	4770      	bx	lr

0800fc28 <VL53L1_set_vhv_loopbound>:


VL53L1_Error VL53L1_set_vhv_loopbound(
	VL53L1_DEV                   Dev,
	uint8_t                      vhv_loopbound)
{
 800fc28:	b480      	push	{r7}
 800fc2a:	b085      	sub	sp, #20
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
 800fc30:	460b      	mov	r3, r1
 800fc32:	70fb      	strb	r3, [r7, #3]
	 * - ensure that any change here is followed by a
	 * init_and_start_range with full i2c packet
	 * configuration.
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800fc34:	2300      	movs	r3, #0
 800fc36:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800fc3c:	68bb      	ldr	r3, [r7, #8]
 800fc3e:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 800fc42:	f003 0303 	and.w	r3, r3, #3
 800fc46:	b2da      	uxtb	r2, r3
 800fc48:	78fb      	ldrb	r3, [r7, #3]
 800fc4a:	009b      	lsls	r3, r3, #2
 800fc4c:	b2db      	uxtb	r3, r3
 800fc4e:	4413      	add	r3, r2
 800fc50:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800fc52:	68bb      	ldr	r3, [r7, #8]
 800fc54:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160
			(vhv_loopbound * 4);

	LOG_FUNCTION_END(status);

	return status;
 800fc58:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	3714      	adds	r7, #20
 800fc60:	46bd      	mov	sp, r7
 800fc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc66:	4770      	bx	lr

0800fc68 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b0d0      	sub	sp, #320	@ 0x140
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fc72:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800fc76:	6018      	str	r0, [r3, #0]
 800fc78:	4608      	mov	r0, r1
 800fc7a:	4611      	mov	r1, r2
 800fc7c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fc80:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800fc84:	4602      	mov	r2, r0
 800fc86:	701a      	strb	r2, [r3, #0]
 800fc88:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fc8c:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 800fc90:	460a      	mov	r2, r1
 800fc92:	701a      	strb	r2, [r3, #0]
	 * system_control is always sent as the last byte of this
	 * register group (mode_start) either triggers the range
	 * or enables the next range
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800fc94:	2300      	movs	r3, #0
 800fc96:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800fc9a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fc9e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 800fca8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800fcac:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800fcb0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 800fcb4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800fcb8:	3342      	adds	r3, #66	@ 0x42
 800fcba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800fcbe:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800fcc2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fcc6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 800fcca:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800fcce:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800fcd2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 800fcd6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800fcda:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800fcde:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800fce2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800fce6:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 800fcea:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800fcee:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800fcf2:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 800fcf6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 800fcfa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800fcfe:	332c      	adds	r3, #44	@ 0x2c
 800fd00:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 800fd04:	f107 030c 	add.w	r3, r7, #12
 800fd08:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	uint16_t i                          = 0;
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
	uint16_t i2c_index                  = 0;
 800fd12:	2300      	movs	r3, #0
 800fd14:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
	uint16_t i2c_buffer_offset_bytes    = 0;
 800fd18:	2300      	movs	r3, #0
 800fd1a:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 800fd1e:	2300      	movs	r3, #0
 800fd20:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c

	LOG_FUNCTION_START("");

	/* save measurement mode */
	pdev->measurement_mode = measurement_mode;
 800fd24:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800fd28:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800fd2c:	f2a2 123d 	subw	r2, r2, #317	@ 0x13d
 800fd30:	7812      	ldrb	r2, [r2, #0]
 800fd32:	709a      	strb	r2, [r3, #2]

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 800fd34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fd38:	791b      	ldrb	r3, [r3, #4]
 800fd3a:	b25b      	sxtb	r3, r3
 800fd3c:	f003 030f 	and.w	r3, r3, #15
 800fd40:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 800fd42:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fd46:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800fd4a:	f993 3000 	ldrsb.w	r3, [r3]
 800fd4e:	4313      	orrs	r3, r2
 800fd50:	b25b      	sxtb	r3, r3
 800fd52:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 800fd54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fd58:	711a      	strb	r2, [r3, #4]
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 800fd5a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800fd5e:	f8b3 2142 	ldrh.w	r2, [r3, #322]	@ 0x142
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 800fd62:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800fd66:	f8a3 217c 	strh.w	r2, [r3, #380]	@ 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 800fd6a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800fd6e:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
 800fd72:	2bff      	cmp	r3, #255	@ 0xff
 800fd74:	d104      	bne.n	800fd80 <VL53L1_init_and_start_range+0x118>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 800fd76:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800fd7a:	2200      	movs	r2, #0
 800fd7c:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800fd80:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800fd84:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 800fd88:	2b01      	cmp	r3, #1
 800fd8a:	d139      	bne.n	800fe00 <VL53L1_init_and_start_range+0x198>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800fd8c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800fd90:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d133      	bne.n	800fe00 <VL53L1_init_and_start_range+0x198>
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 800fd98:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800fd9c:	f893 2186 	ldrb.w	r2, [r3, #390]	@ 0x186
		pdev->low_power_auto_data.saved_interrupt_config =
 800fda0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800fda4:	f883 22e7 	strb.w	r2, [r3, #743]	@ 0x2e7
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 800fda8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800fdac:	2220      	movs	r2, #32
 800fdae:	f883 2186 	strb.w	r2, [r3, #390]	@ 0x186
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 800fdb2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800fdb6:	f893 31c5 	ldrb.w	r3, [r3, #453]	@ 0x1c5
 800fdba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d10c      	bne.n	800fddc <VL53L1_init_and_start_range+0x174>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 800fdc2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800fdc6:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	@ 0x58
 800fdca:	b29b      	uxth	r3, r3
 800fdcc:	009b      	lsls	r3, r3, #2
 800fdce:	b29b      	uxth	r3, r3
 800fdd0:	b21a      	sxth	r2, r3
			pdev->customer.algo__part_to_part_range_offset_mm =
 800fdd2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800fdd6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
 800fdda:	e004      	b.n	800fde6 <VL53L1_init_and_start_range+0x17e>
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 800fddc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800fde0:	2200      	movs	r2, #0
 800fde2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
		}

		/* make sure config gets written out */
		if (device_config_level <
 800fde6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fdea:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 800fdee:	781b      	ldrb	r3, [r3, #0]
 800fdf0:	2b04      	cmp	r3, #4
 800fdf2:	d805      	bhi.n	800fe00 <VL53L1_init_and_start_range+0x198>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 800fdf4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fdf8:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 800fdfc:	2205      	movs	r2, #5
 800fdfe:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800fe00:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800fe04:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 800fe08:	2b01      	cmp	r3, #1
 800fe0a:	d113      	bne.n	800fe34 <VL53L1_init_and_start_range+0x1cc>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 800fe0c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800fe10:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800fe14:	2b01      	cmp	r3, #1
 800fe16:	d10d      	bne.n	800fe34 <VL53L1_init_and_start_range+0x1cc>
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 800fe18:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800fe1c:	f893 22e7 	ldrb.w	r2, [r3, #743]	@ 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio =
 800fe20:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800fe24:	f883 2186 	strb.w	r2, [r3, #390]	@ 0x186

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 800fe28:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fe2c:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 800fe30:	2206      	movs	r2, #6
 800fe32:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine Initial I2C index
	 */

	switch (device_config_level) {
 800fe34:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fe38:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 800fe3c:	781b      	ldrb	r3, [r3, #0]
 800fe3e:	3b01      	subs	r3, #1
 800fe40:	2b05      	cmp	r3, #5
 800fe42:	d827      	bhi.n	800fe94 <VL53L1_init_and_start_range+0x22c>
 800fe44:	a201      	add	r2, pc, #4	@ (adr r2, 800fe4c <VL53L1_init_and_start_range+0x1e4>)
 800fe46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe4a:	bf00      	nop
 800fe4c:	0800fe8d 	.word	0x0800fe8d
 800fe50:	0800fe85 	.word	0x0800fe85
 800fe54:	0800fe7d 	.word	0x0800fe7d
 800fe58:	0800fe75 	.word	0x0800fe75
 800fe5c:	0800fe6d 	.word	0x0800fe6d
 800fe60:	0800fe65 	.word	0x0800fe65
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 800fe64:	2301      	movs	r3, #1
 800fe66:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 800fe6a:	e017      	b.n	800fe9c <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 800fe6c:	230d      	movs	r3, #13
 800fe6e:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 800fe72:	e013      	b.n	800fe9c <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 800fe74:	2324      	movs	r3, #36	@ 0x24
 800fe76:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 800fe7a:	e00f      	b.n	800fe9c <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 800fe7c:	2344      	movs	r3, #68	@ 0x44
 800fe7e:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 800fe82:	e00b      	b.n	800fe9c <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 800fe84:	235a      	movs	r3, #90	@ 0x5a
 800fe86:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 800fe8a:	e007      	b.n	800fe9c <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 800fe8c:	2371      	movs	r3, #113	@ 0x71
 800fe8e:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 800fe92:	e003      	b.n	800fe9c <VL53L1_init_and_start_range+0x234>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 800fe94:	2383      	movs	r3, #131	@ 0x83
 800fe96:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 800fe9a:	bf00      	nop
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 800fe9c:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 800fea0:	f1c3 0388 	rsb	r3, r3, #136	@ 0x88
 800fea4:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c
			 VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			 i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
 800fea8:	f107 030c 	add.w	r3, r7, #12
 800feac:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800feb0:	2300      	movs	r3, #0
 800feb2:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 800feb6:	e00b      	b.n	800fed0 <VL53L1_init_and_start_range+0x268>
		*pbuffer++ = 0;
 800feb8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800febc:	1c5a      	adds	r2, r3, #1
 800febe:	f8c7 2138 	str.w	r2, [r7, #312]	@ 0x138
 800fec2:	2200      	movs	r2, #0
 800fec4:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800fec6:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 800feca:	3301      	adds	r3, #1
 800fecc:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 800fed0:	f8b7 2136 	ldrh.w	r2, [r7, #310]	@ 0x136
 800fed4:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 800fed8:	429a      	cmp	r2, r3
 800feda:	d3ed      	bcc.n	800feb8 <VL53L1_init_and_start_range+0x250>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 800fedc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fee0:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 800fee4:	781b      	ldrb	r3, [r3, #0]
 800fee6:	2b05      	cmp	r3, #5
 800fee8:	d917      	bls.n	800ff1a <VL53L1_init_and_start_range+0x2b2>
 800feea:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d113      	bne.n	800ff1a <VL53L1_init_and_start_range+0x2b2>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800fef2:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 800fef6:	f1c3 0301 	rsb	r3, r3, #1
 800fefa:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800fefe:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 800ff02:	f107 020c 	add.w	r2, r7, #12
 800ff06:	4413      	add	r3, r2
 800ff08:	461a      	mov	r2, r3
 800ff0a:	210b      	movs	r1, #11
 800ff0c:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 800ff10:	f002 f9e0 	bl	80122d4 <VL53L1_i2c_encode_static_nvm_managed>
 800ff14:	4603      	mov	r3, r0
 800ff16:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 800ff1a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ff1e:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 800ff22:	781b      	ldrb	r3, [r3, #0]
 800ff24:	2b04      	cmp	r3, #4
 800ff26:	d917      	bls.n	800ff58 <VL53L1_init_and_start_range+0x2f0>
 800ff28:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d113      	bne.n	800ff58 <VL53L1_init_and_start_range+0x2f0>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800ff30:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 800ff34:	f1c3 030d 	rsb	r3, r3, #13
 800ff38:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800ff3c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 800ff40:	f107 020c 	add.w	r2, r7, #12
 800ff44:	4413      	add	r3, r2
 800ff46:	461a      	mov	r2, r3
 800ff48:	2117      	movs	r1, #23
 800ff4a:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 800ff4e:	f002 fa9d 	bl	801248c <VL53L1_i2c_encode_customer_nvm_managed>
 800ff52:	4603      	mov	r3, r0
 800ff54:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 800ff58:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ff5c:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 800ff60:	781b      	ldrb	r3, [r3, #0]
 800ff62:	2b03      	cmp	r3, #3
 800ff64:	d917      	bls.n	800ff96 <VL53L1_init_and_start_range+0x32e>
 800ff66:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d113      	bne.n	800ff96 <VL53L1_init_and_start_range+0x32e>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800ff6e:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 800ff72:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 800ff76:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800ff7a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_static_config(
 800ff7e:	f107 020c 	add.w	r2, r7, #12
 800ff82:	4413      	add	r3, r2
 800ff84:	461a      	mov	r2, r3
 800ff86:	2120      	movs	r1, #32
 800ff88:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 800ff8c:	f002 fbbc 	bl	8012708 <VL53L1_i2c_encode_static_config>
 800ff90:	4603      	mov	r3, r0
 800ff92:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 800ff96:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ff9a:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 800ff9e:	781b      	ldrb	r3, [r3, #0]
 800ffa0:	2b02      	cmp	r3, #2
 800ffa2:	d917      	bls.n	800ffd4 <VL53L1_init_and_start_range+0x36c>
 800ffa4:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d113      	bne.n	800ffd4 <VL53L1_init_and_start_range+0x36c>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800ffac:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 800ffb0:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 800ffb4:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800ffb8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_general_config(
 800ffbc:	f107 020c 	add.w	r2, r7, #12
 800ffc0:	4413      	add	r3, r2
 800ffc2:	461a      	mov	r2, r3
 800ffc4:	2116      	movs	r1, #22
 800ffc6:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800ffca:	f002 fc80 	bl	80128ce <VL53L1_i2c_encode_general_config>
 800ffce:	4603      	mov	r3, r0
 800ffd0:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 800ffd4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ffd8:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 800ffdc:	781b      	ldrb	r3, [r3, #0]
 800ffde:	2b01      	cmp	r3, #1
 800ffe0:	d917      	bls.n	8010012 <VL53L1_init_and_start_range+0x3aa>
 800ffe2:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d113      	bne.n	8010012 <VL53L1_init_and_start_range+0x3aa>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800ffea:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 800ffee:	f1c3 035a 	rsb	r3, r3, #90	@ 0x5a
 800fff2:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800fff6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_timing_config(
 800fffa:	f107 020c 	add.w	r2, r7, #12
 800fffe:	4413      	add	r3, r2
 8010000:	461a      	mov	r2, r3
 8010002:	2117      	movs	r1, #23
 8010004:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8010008:	f002 fce5 	bl	80129d6 <VL53L1_i2c_encode_timing_config>
 801000c:	4603      	mov	r3, r0
 801000e:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8010012:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010016:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 801001a:	781b      	ldrb	r3, [r3, #0]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d036      	beq.n	801008e <VL53L1_init_and_start_range+0x426>
 8010020:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8010024:	2b00      	cmp	r3, #0
 8010026:	d132      	bne.n	801008e <VL53L1_init_and_start_range+0x426>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8010028:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 801002c:	f1c3 0371 	rsb	r3, r3, #113	@ 0x71
 8010030:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;

		/* If in back to back mode, use GPH ID from cfg_state */
		if ((psystem->system__mode_start &
 8010034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010038:	791b      	ldrb	r3, [r3, #4]
 801003a:	f003 0320 	and.w	r3, r3, #32
 801003e:	2b00      	cmp	r3, #0
 8010040:	d017      	beq.n	8010072 <VL53L1_init_and_start_range+0x40a>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 8010042:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8010046:	789b      	ldrb	r3, [r3, #2]
 8010048:	f043 0301 	orr.w	r3, r3, #1
 801004c:	b2da      	uxtb	r2, r3
 801004e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8010052:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 8010054:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8010058:	789b      	ldrb	r3, [r3, #2]
 801005a:	f043 0301 	orr.w	r3, r3, #1
 801005e:	b2da      	uxtb	r2, r3
 8010060:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8010064:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 8010066:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801006a:	789a      	ldrb	r2, [r3, #2]
 801006c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8010070:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8010072:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_dynamic_config(
 8010076:	f107 020c 	add.w	r2, r7, #12
 801007a:	4413      	add	r3, r2
 801007c:	461a      	mov	r2, r3
 801007e:	2112      	movs	r1, #18
 8010080:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8010084:	f002 fd29 	bl	8012ada <VL53L1_i2c_encode_dynamic_config>
 8010088:	4603      	mov	r3, r0
 801008a:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (status == VL53L1_ERROR_NONE) {
 801008e:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8010092:	2b00      	cmp	r3, #0
 8010094:	d113      	bne.n	80100be <VL53L1_init_and_start_range+0x456>

		i2c_buffer_offset_bytes = \
 8010096:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 801009a:	f1c3 0383 	rsb	r3, r3, #131	@ 0x83
 801009e:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80100a2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_system_control(
 80100a6:	f107 020c 	add.w	r2, r7, #12
 80100aa:	4413      	add	r3, r2
 80100ac:	461a      	mov	r2, r3
 80100ae:	2105      	movs	r1, #5
 80100b0:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 80100b4:	f002 fd96 	bl	8012be4 <VL53L1_i2c_encode_system_control>
 80100b8:	4603      	mov	r3, r0
 80100ba:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 80100be:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d10f      	bne.n	80100e6 <VL53L1_init_and_start_range+0x47e>
		status =
			VL53L1_WriteMulti(
 80100c6:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 80100ca:	f107 020c 	add.w	r2, r7, #12
 80100ce:	f8b7 1134 	ldrh.w	r1, [r7, #308]	@ 0x134
 80100d2:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 80100d6:	f5a0 709e 	sub.w	r0, r0, #316	@ 0x13c
 80100da:	6800      	ldr	r0, [r0, #0]
 80100dc:	f003 fa44 	bl	8013568 <VL53L1_WriteMulti>
 80100e0:	4603      	mov	r3, r0
 80100e2:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 80100e6:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d109      	bne.n	8010102 <VL53L1_init_and_start_range+0x49a>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 80100ee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80100f2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80100f6:	6818      	ldr	r0, [r3, #0]
 80100f8:	f001 fa10 	bl	801151c <VL53L1_update_ll_driver_rd_state>
 80100fc:	4603      	mov	r3, r0
 80100fe:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

	if (status == VL53L1_ERROR_NONE)
 8010102:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8010106:	2b00      	cmp	r3, #0
 8010108:	d109      	bne.n	801011e <VL53L1_init_and_start_range+0x4b6>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 801010a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801010e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8010112:	6818      	ldr	r0, [r3, #0]
 8010114:	f001 fad5 	bl	80116c2 <VL53L1_update_ll_driver_cfg_state>
 8010118:	4603      	mov	r3, r0
 801011a:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

	LOG_FUNCTION_END(status);

	return status;
 801011e:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
}
 8010122:	4618      	mov	r0, r3
 8010124:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8010128:	46bd      	mov	sp, r7
 801012a:	bd80      	pop	{r7, pc}

0801012c <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 801012c:	b580      	push	{r7, lr}
 801012e:	b0c8      	sub	sp, #288	@ 0x120
 8010130:	af00      	add	r7, sp, #0
 8010132:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010136:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 801013a:	6018      	str	r0, [r3, #0]
 801013c:	460a      	mov	r2, r1
 801013e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010142:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8010146:	701a      	strb	r2, [r3, #0]
	/*
	 * Read via a single I2C multiple byte transaction all
	 * of the requested device measurement data results
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8010148:	2300      	movs	r3, #0
 801014a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 801014e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010152:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 801015c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8010160:	f503 73e7 	add.w	r3, r3, #462	@ 0x1ce
 8010164:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 8010168:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801016c:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8010170:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 8010174:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8010178:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 801017c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 8010180:	2388      	movs	r3, #136	@ 0x88
 8010182:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 8010186:	2300      	movs	r3, #0
 8010188:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 801018c:	2300      	movs	r3, #0
 801018e:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 8010192:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010196:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 801019a:	781b      	ldrb	r3, [r3, #0]
 801019c:	2b01      	cmp	r3, #1
 801019e:	d008      	beq.n	80101b2 <VL53L1_get_measurement_results+0x86>
 80101a0:	2b02      	cmp	r3, #2
 80101a2:	d10d      	bne.n	80101c0 <VL53L1_get_measurement_results+0x94>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 80101a4:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 80101a8:	f5c3 7387 	rsb	r3, r3, #270	@ 0x10e
 80101ac:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 80101b0:	e00a      	b.n	80101c8 <VL53L1_get_measurement_results+0x9c>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 80101b2:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 80101b6:	f1c3 03d5 	rsb	r3, r3, #213	@ 0xd5
 80101ba:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 80101be:	e003      	b.n	80101c8 <VL53L1_get_measurement_results+0x9c>
	default:
		i2c_buffer_size_bytes =
 80101c0:	232c      	movs	r3, #44	@ 0x2c
 80101c2:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 80101c6:	bf00      	nop
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80101c8:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d10f      	bne.n	80101f0 <VL53L1_get_measurement_results+0xc4>
		status =
			VL53L1_ReadMulti(
 80101d0:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 80101d4:	f107 0208 	add.w	r2, r7, #8
 80101d8:	f8b7 110a 	ldrh.w	r1, [r7, #266]	@ 0x10a
 80101dc:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 80101e0:	f5a0 708e 	sub.w	r0, r0, #284	@ 0x11c
 80101e4:	6800      	ldr	r0, [r0, #0]
 80101e6:	f003 f9f5 	bl	80135d4 <VL53L1_ReadMulti>
 80101ea:	4603      	mov	r3, r0
 80101ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 80101f0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80101f4:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 80101f8:	781b      	ldrb	r3, [r3, #0]
 80101fa:	2b01      	cmp	r3, #1
 80101fc:	d917      	bls.n	801022e <VL53L1_get_measurement_results+0x102>
 80101fe:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8010202:	2b00      	cmp	r3, #0
 8010204:	d113      	bne.n	801022e <VL53L1_get_measurement_results+0x102>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8010206:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 801020a:	f1c3 03d6 	rsb	r3, r3, #214	@ 0xd6
 801020e:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8010212:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53L1_i2c_decode_debug_results(
 8010216:	f107 0208 	add.w	r2, r7, #8
 801021a:	4413      	add	r3, r2
 801021c:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8010220:	4619      	mov	r1, r3
 8010222:	2038      	movs	r0, #56	@ 0x38
 8010224:	f002 fe70 	bl	8012f08 <VL53L1_i2c_decode_debug_results>
 8010228:	4603      	mov	r3, r0
 801022a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 801022e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010232:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8010236:	781b      	ldrb	r3, [r3, #0]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d017      	beq.n	801026c <VL53L1_get_measurement_results+0x140>
 801023c:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8010240:	2b00      	cmp	r3, #0
 8010242:	d113      	bne.n	801026c <VL53L1_get_measurement_results+0x140>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8010244:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8010248:	f1c3 03b4 	rsb	r3, r3, #180	@ 0xb4
 801024c:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8010250:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53L1_i2c_decode_core_results(
 8010254:	f107 0208 	add.w	r2, r7, #8
 8010258:	4413      	add	r3, r2
 801025a:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 801025e:	4619      	mov	r1, r3
 8010260:	2021      	movs	r0, #33	@ 0x21
 8010262:	f002 fdf0 	bl	8012e46 <VL53L1_i2c_decode_core_results>
 8010266:	4603      	mov	r3, r0
 8010268:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 801026c:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8010270:	2b00      	cmp	r3, #0
 8010272:	d110      	bne.n	8010296 <VL53L1_get_measurement_results+0x16a>

		i2c_buffer_offset_bytes = 0;
 8010274:	2300      	movs	r3, #0
 8010276:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 801027a:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53L1_i2c_decode_system_results(
 801027e:	f107 0208 	add.w	r2, r7, #8
 8010282:	4413      	add	r3, r2
 8010284:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8010288:	4619      	mov	r1, r3
 801028a:	202c      	movs	r0, #44	@ 0x2c
 801028c:	f002 fce5 	bl	8012c5a <VL53L1_i2c_decode_system_results>
 8010290:	4603      	mov	r3, r0
 8010292:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 8010296:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
}
 801029a:	4618      	mov	r0, r3
 801029c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80102a0:	46bd      	mov	sp, r7
 80102a2:	bd80      	pop	{r7, pc}

080102a4 <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b088      	sub	sp, #32
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	60f8      	str	r0, [r7, #12]
 80102ac:	460b      	mov	r3, r1
 80102ae:	607a      	str	r2, [r7, #4]
 80102b0:	72fb      	strb	r3, [r7, #11]
	 *  VL53L1_copy_sys_and_core_results_to_range_results()
	 *
	 *  The input measurement mode controls what happens next ...
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80102b2:	2300      	movs	r3, #0
 80102b4:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev =
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 80102c0:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults = &(pres->range_results);
 80102c2:	697b      	ldr	r3, [r7, #20]
 80102c4:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	/* Get device results */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80102c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d106      	bne.n	80102dc <VL53L1_get_device_results+0x38>
		status = VL53L1_get_measurement_results(
 80102ce:	7afb      	ldrb	r3, [r7, #11]
 80102d0:	4619      	mov	r1, r3
 80102d2:	68f8      	ldr	r0, [r7, #12]
 80102d4:	f7ff ff2a 	bl	801012c <VL53L1_get_measurement_results>
 80102d8:	4603      	mov	r3, r0
 80102da:	77fb      	strb	r3, [r7, #31]
						Dev,
						device_results_level);

	if (status == VL53L1_ERROR_NONE)
 80102dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d10c      	bne.n	80102fe <VL53L1_get_device_results+0x5a>
		VL53L1_copy_sys_and_core_results_to_range_results(
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 80102e4:	69bb      	ldr	r3, [r7, #24]
 80102e6:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
		VL53L1_copy_sys_and_core_results_to_range_results(
 80102ea:	4618      	mov	r0, r3
 80102ec:	69bb      	ldr	r3, [r7, #24]
 80102ee:	f503 71e7 	add.w	r1, r3, #462	@ 0x1ce
 80102f2:	69bb      	ldr	r3, [r7, #24]
 80102f4:	f503 7222 	add.w	r2, r3, #648	@ 0x288
 80102f8:	693b      	ldr	r3, [r7, #16]
 80102fa:	f000 f85d 	bl	80103b8 <VL53L1_copy_sys_and_core_results_to_range_results>
				&(pdev->core_results),
				presults);

	/* Start Patch_LowPowerAutoMode */
	/* process results from first range of low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 80102fe:	69bb      	ldr	r3, [r7, #24]
 8010300:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 8010304:	2b01      	cmp	r3, #1
 8010306:	d11f      	bne.n	8010348 <VL53L1_get_device_results+0xa4>
		/* change to manual calibrations. Only needed on the
		 * first range out  */
		if ((status == VL53L1_ERROR_NONE) &&
 8010308:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d10e      	bne.n	801032e <VL53L1_get_device_results+0x8a>
			(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8010310:	69bb      	ldr	r3, [r7, #24]
 8010312:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 8010316:	2b00      	cmp	r3, #0
 8010318:	d109      	bne.n	801032e <VL53L1_get_device_results+0x8a>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 801031a:	68f8      	ldr	r0, [r7, #12]
 801031c:	f001 ff3f 	bl	801219e <VL53L1_low_power_auto_setup_manual_calibration>
 8010320:	4603      	mov	r3, r0
 8010322:	77fb      	strb	r3, [r7, #31]
					Dev);
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 8010324:	69bb      	ldr	r3, [r7, #24]
 8010326:	2201      	movs	r2, #1
 8010328:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
 801032c:	e00c      	b.n	8010348 <VL53L1_get_device_results+0xa4>
		} else if ((status == VL53L1_ERROR_NONE) &&
 801032e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d108      	bne.n	8010348 <VL53L1_get_device_results+0xa4>
			(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8010336:	69bb      	ldr	r3, [r7, #24]
 8010338:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
		} else if ((status == VL53L1_ERROR_NONE) &&
 801033c:	2b01      	cmp	r3, #1
 801033e:	d103      	bne.n	8010348 <VL53L1_get_device_results+0xa4>
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 8010340:	69bb      	ldr	r3, [r7, #24]
 8010342:	2202      	movs	r2, #2
 8010344:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
	}
	/* End Patch_LowPowerAutoMode */

	/* copy current state into results */

	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 8010348:	69bb      	ldr	r3, [r7, #24]
 801034a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 801034e:	693b      	ldr	r3, [r7, #16]
 8010350:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 8010352:	69bb      	ldr	r3, [r7, #24]
 8010354:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8010358:	693b      	ldr	r3, [r7, #16]
 801035a:	705a      	strb	r2, [r3, #1]

	/* copy internal structure to supplied output pointer */

	memcpy(
 801035c:	2284      	movs	r2, #132	@ 0x84
 801035e:	6939      	ldr	r1, [r7, #16]
 8010360:	6878      	ldr	r0, [r7, #4]
 8010362:	f004 f9bc 	bl	80146de <memcpy>
	/*
	 * Check LL driver and Device are in Sync
	 * If not an error is raised
	 */

	if (status == VL53L1_ERROR_NONE)
 8010366:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d104      	bne.n	8010378 <VL53L1_get_device_results+0xd4>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 801036e:	68f8      	ldr	r0, [r7, #12]
 8010370:	f001 f95c 	bl	801162c <VL53L1_check_ll_driver_rd_state>
 8010374:	4603      	mov	r3, r0
 8010376:	77fb      	strb	r3, [r7, #31]
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8010378:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801037c:	4618      	mov	r0, r3
 801037e:	3720      	adds	r7, #32
 8010380:	46bd      	mov	sp, r7
 8010382:	bd80      	pop	{r7, pc}

08010384 <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 8010384:	b580      	push	{r7, lr}
 8010386:	b084      	sub	sp, #16
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
 801038c:	460b      	mov	r3, r1
 801038e:	70fb      	strb	r3, [r7, #3]
	/*
	 * Enable next range by sending handshake which
	 * clears the interrupt
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8010390:	2300      	movs	r3, #0
 8010392:	73fb      	strb	r3, [r7, #15]
	/* Dynamic GPH Management     */
	/* Setup GPH absorption point and config values for next measurement */

	/* Update GPH registers, clear interrupt and set measurement mode */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8010394:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010398:	2b00      	cmp	r3, #0
 801039a:	d107      	bne.n	80103ac <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 801039c:	78fb      	ldrb	r3, [r7, #3]
 801039e:	2203      	movs	r2, #3
 80103a0:	4619      	mov	r1, r3
 80103a2:	6878      	ldr	r0, [r7, #4]
 80103a4:	f7ff fc60 	bl	800fc68 <VL53L1_init_and_start_range>
 80103a8:	4603      	mov	r3, r0
 80103aa:	73fb      	strb	r3, [r7, #15]
					measurement_mode,
					VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 80103ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80103b0:	4618      	mov	r0, r3
 80103b2:	3710      	adds	r7, #16
 80103b4:	46bd      	mov	sp, r7
 80103b6:	bd80      	pop	{r7, pc}

080103b8 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 80103b8:	b480      	push	{r7}
 80103ba:	b089      	sub	sp, #36	@ 0x24
 80103bc:	af00      	add	r7, sp, #0
 80103be:	60f8      	str	r0, [r7, #12]
 80103c0:	60b9      	str	r1, [r7, #8]
 80103c2:	607a      	str	r2, [r7, #4]
 80103c4:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 80103c6:	2300      	movs	r3, #0
 80103c8:	77fb      	strb	r3, [r7, #31]

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 80103ca:	2300      	movs	r3, #0
 80103cc:	613b      	str	r3, [r7, #16]
	uint32_t tmpu32 = 0;
 80103ce:	2300      	movs	r3, #0
 80103d0:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count    = psys->result__stream_count;
 80103d2:	68bb      	ldr	r3, [r7, #8]
 80103d4:	78da      	ldrb	r2, [r3, #3]
 80103d6:	683b      	ldr	r3, [r7, #0]
 80103d8:	709a      	strb	r2, [r3, #2]

	pdata = &(presults->data[0]);
 80103da:	683b      	ldr	r3, [r7, #0]
 80103dc:	3304      	adds	r3, #4
 80103de:	61bb      	str	r3, [r7, #24]

	for (i = 0 ; i < 2 ; i++) {
 80103e0:	2300      	movs	r3, #0
 80103e2:	77fb      	strb	r3, [r7, #31]
 80103e4:	e0d0      	b.n	8010588 <VL53L1_copy_sys_and_core_results_to_range_results+0x1d0>

		pdata->range_id     = i;
 80103e6:	69bb      	ldr	r3, [r7, #24]
 80103e8:	7ffa      	ldrb	r2, [r7, #31]
 80103ea:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 80103ec:	69bb      	ldr	r3, [r7, #24]
 80103ee:	2200      	movs	r2, #0
 80103f0:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 80103f2:	68bb      	ldr	r3, [r7, #8]
 80103f4:	78db      	ldrb	r3, [r3, #3]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d10a      	bne.n	8010410 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
 80103fa:	68bb      	ldr	r3, [r7, #8]
 80103fc:	785b      	ldrb	r3, [r3, #1]
 80103fe:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 8010402:	2b09      	cmp	r3, #9
 8010404:	d104      	bne.n	8010410 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 8010406:	69bb      	ldr	r3, [r7, #24]
 8010408:	2213      	movs	r2, #19
 801040a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801040e:	e007      	b.n	8010420 <VL53L1_copy_sys_and_core_results_to_range_results+0x68>
		} else {
			pdata->range_status =
					psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 8010410:	68bb      	ldr	r3, [r7, #8]
 8010412:	785b      	ldrb	r3, [r3, #1]
 8010414:	f003 031f 	and.w	r3, r3, #31
 8010418:	b2da      	uxtb	r2, r3
			pdata->range_status =
 801041a:	69bb      	ldr	r3, [r7, #24]
 801041c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
		}

		switch (i) {
 8010420:	7ffb      	ldrb	r3, [r7, #31]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d002      	beq.n	801042c <VL53L1_copy_sys_and_core_results_to_range_results+0x74>
 8010426:	2b01      	cmp	r3, #1
 8010428:	d05d      	beq.n	80104e6 <VL53L1_copy_sys_and_core_results_to_range_results+0x12e>
 801042a:	e0a7      	b.n	801057c <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>

		case 0:

			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 801042c:	68bb      	ldr	r3, [r7, #8]
 801042e:	789b      	ldrb	r3, [r3, #2]
 8010430:	2b07      	cmp	r3, #7
 8010432:	d104      	bne.n	801043e <VL53L1_copy_sys_and_core_results_to_range_results+0x86>
				pdata->actual_effective_spads =
					psys->result__mm_inner_actual_effective_spads_sd0;
 8010434:	68bb      	ldr	r3, [r7, #8]
 8010436:	8a5a      	ldrh	r2, [r3, #18]
				pdata->actual_effective_spads =
 8010438:	69bb      	ldr	r3, [r7, #24]
 801043a:	821a      	strh	r2, [r3, #16]
 801043c:	e00c      	b.n	8010458 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 801043e:	68bb      	ldr	r3, [r7, #8]
 8010440:	789b      	ldrb	r3, [r3, #2]
 8010442:	2b08      	cmp	r3, #8
 8010444:	d104      	bne.n	8010450 <VL53L1_copy_sys_and_core_results_to_range_results+0x98>
				pdata->actual_effective_spads =
						psys->result__mm_outer_actual_effective_spads_sd0;
 8010446:	68bb      	ldr	r3, [r7, #8]
 8010448:	8a9a      	ldrh	r2, [r3, #20]
				pdata->actual_effective_spads =
 801044a:	69bb      	ldr	r3, [r7, #24]
 801044c:	821a      	strh	r2, [r3, #16]
 801044e:	e003      	b.n	8010458 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else
				pdata->actual_effective_spads =
					psys->result__dss_actual_effective_spads_sd0;
 8010450:	68bb      	ldr	r3, [r7, #8]
 8010452:	889a      	ldrh	r2, [r3, #4]
				pdata->actual_effective_spads =
 8010454:	69bb      	ldr	r3, [r7, #24]
 8010456:	821a      	strh	r2, [r3, #16]

			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 8010458:	68bb      	ldr	r3, [r7, #8]
 801045a:	8a1a      	ldrh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
 801045c:	69bb      	ldr	r3, [r7, #24]
 801045e:	859a      	strh	r2, [r3, #44]	@ 0x2c
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 8010460:	68bb      	ldr	r3, [r7, #8]
 8010462:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 8010464:	69bb      	ldr	r3, [r7, #24]
 8010466:	85da      	strh	r2, [r3, #46]	@ 0x2e
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 8010468:	68bb      	ldr	r3, [r7, #8]
 801046a:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 801046c:	69bb      	ldr	r3, [r7, #24]
 801046e:	861a      	strh	r2, [r3, #48]	@ 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 8010470:	68bb      	ldr	r3, [r7, #8]
 8010472:	895b      	ldrh	r3, [r3, #10]
 8010474:	015b      	lsls	r3, r3, #5
 8010476:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 8010478:	697b      	ldr	r3, [r7, #20]
 801047a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801047e:	d302      	bcc.n	8010486 <VL53L1_copy_sys_and_core_results_to_range_results+0xce>
				tmpu32 = 0xFFFF;
 8010480:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010484:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 8010486:	697b      	ldr	r3, [r7, #20]
 8010488:	b29a      	uxth	r2, r3
 801048a:	69bb      	ldr	r3, [r7, #24]
 801048c:	871a      	strh	r2, [r3, #56]	@ 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd0;
 801048e:	68bb      	ldr	r3, [r7, #8]
 8010490:	899a      	ldrh	r2, [r3, #12]
			pdata->median_phase =
 8010492:	69bb      	ldr	r3, [r7, #24]
 8010494:	875a      	strh	r2, [r3, #58]	@ 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd0;
 8010496:	68bb      	ldr	r3, [r7, #8]
 8010498:	89db      	ldrh	r3, [r3, #14]
			range_mm =
 801049a:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 801049c:	693b      	ldr	r3, [r7, #16]
 801049e:	68fa      	ldr	r2, [r7, #12]
 80104a0:	fb02 f303 	mul.w	r3, r2, r3
 80104a4:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 80104a6:	693b      	ldr	r3, [r7, #16]
 80104a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80104ac:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 80104ae:	693b      	ldr	r3, [r7, #16]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	da01      	bge.n	80104b8 <VL53L1_copy_sys_and_core_results_to_range_results+0x100>
 80104b4:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 80104b8:	12db      	asrs	r3, r3, #11
 80104ba:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 80104bc:	693b      	ldr	r3, [r7, #16]
 80104be:	b21a      	sxth	r2, r3
 80104c0:	69bb      	ldr	r3, [r7, #24]
 80104c2:	879a      	strh	r2, [r3, #60]	@ 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd0;
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	685a      	ldr	r2, [r3, #4]
			pdata->ranging_total_events =
 80104c8:	69bb      	ldr	r3, [r7, #24]
 80104ca:	625a      	str	r2, [r3, #36]	@ 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd0;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	689a      	ldr	r2, [r3, #8]
			pdata->signal_total_events =
 80104d0:	69bb      	ldr	r3, [r7, #24]
 80104d2:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 80104d8:	69bb      	ldr	r3, [r7, #24]
 80104da:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd0;
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	681a      	ldr	r2, [r3, #0]
			pdata->ambient_window_events =
 80104e0:	69bb      	ldr	r3, [r7, #24]
 80104e2:	621a      	str	r2, [r3, #32]

			break;
 80104e4:	e04a      	b.n	801057c <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>
		case 1:

			pdata->actual_effective_spads =
				psys->result__dss_actual_effective_spads_sd1;
 80104e6:	68bb      	ldr	r3, [r7, #8]
 80104e8:	8b1a      	ldrh	r2, [r3, #24]
			pdata->actual_effective_spads =
 80104ea:	69bb      	ldr	r3, [r7, #24]
 80104ec:	821a      	strh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 80104ee:	68bb      	ldr	r3, [r7, #8]
 80104f0:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 80104f2:	69bb      	ldr	r3, [r7, #24]
 80104f4:	859a      	strh	r2, [r3, #44]	@ 0x2c
			pdata->avg_signal_count_rate_mcps =
 80104f6:	69bb      	ldr	r3, [r7, #24]
 80104f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80104fc:	85da      	strh	r2, [r3, #46]	@ 0x2e
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 80104fe:	68bb      	ldr	r3, [r7, #8]
 8010500:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 8010502:	69bb      	ldr	r3, [r7, #24]
 8010504:	861a      	strh	r2, [r3, #48]	@ 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 8010506:	68bb      	ldr	r3, [r7, #8]
 8010508:	8bdb      	ldrh	r3, [r3, #30]
 801050a:	015b      	lsls	r3, r3, #5
 801050c:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 801050e:	697b      	ldr	r3, [r7, #20]
 8010510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010514:	d302      	bcc.n	801051c <VL53L1_copy_sys_and_core_results_to_range_results+0x164>
				tmpu32 = 0xFFFF;
 8010516:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801051a:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 801051c:	697b      	ldr	r3, [r7, #20]
 801051e:	b29a      	uxth	r2, r3
 8010520:	69bb      	ldr	r3, [r7, #24]
 8010522:	871a      	strh	r2, [r3, #56]	@ 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd1;
 8010524:	68bb      	ldr	r3, [r7, #8]
 8010526:	8c1a      	ldrh	r2, [r3, #32]
			pdata->median_phase =
 8010528:	69bb      	ldr	r3, [r7, #24]
 801052a:	875a      	strh	r2, [r3, #58]	@ 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd1;
 801052c:	68bb      	ldr	r3, [r7, #8]
 801052e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
			range_mm =
 8010530:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 8010532:	693b      	ldr	r3, [r7, #16]
 8010534:	68fa      	ldr	r2, [r7, #12]
 8010536:	fb02 f303 	mul.w	r3, r2, r3
 801053a:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 801053c:	693b      	ldr	r3, [r7, #16]
 801053e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010542:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 8010544:	693b      	ldr	r3, [r7, #16]
 8010546:	2b00      	cmp	r3, #0
 8010548:	da01      	bge.n	801054e <VL53L1_copy_sys_and_core_results_to_range_results+0x196>
 801054a:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 801054e:	12db      	asrs	r3, r3, #11
 8010550:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 8010552:	693b      	ldr	r3, [r7, #16]
 8010554:	b21a      	sxth	r2, r3
 8010556:	69bb      	ldr	r3, [r7, #24]
 8010558:	879a      	strh	r2, [r3, #60]	@ 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd1;
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	695a      	ldr	r2, [r3, #20]
			pdata->ranging_total_events =
 801055e:	69bb      	ldr	r3, [r7, #24]
 8010560:	625a      	str	r2, [r3, #36]	@ 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd1;
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	699a      	ldr	r2, [r3, #24]
			pdata->signal_total_events =
 8010566:	69bb      	ldr	r3, [r7, #24]
 8010568:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 801056e:	69bb      	ldr	r3, [r7, #24]
 8010570:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd1;
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	691a      	ldr	r2, [r3, #16]
			pdata->ambient_window_events =
 8010576:	69bb      	ldr	r3, [r7, #24]
 8010578:	621a      	str	r2, [r3, #32]

			break;
 801057a:	bf00      	nop
		}

		pdata++;
 801057c:	69bb      	ldr	r3, [r7, #24]
 801057e:	3340      	adds	r3, #64	@ 0x40
 8010580:	61bb      	str	r3, [r7, #24]
	for (i = 0 ; i < 2 ; i++) {
 8010582:	7ffb      	ldrb	r3, [r7, #31]
 8010584:	3301      	adds	r3, #1
 8010586:	77fb      	strb	r3, [r7, #31]
 8010588:	7ffb      	ldrb	r3, [r7, #31]
 801058a:	2b01      	cmp	r3, #1
 801058c:	f67f af2b 	bls.w	80103e6 <VL53L1_copy_sys_and_core_results_to_range_results+0x2e>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 8010590:	683b      	ldr	r3, [r7, #0]
 8010592:	2200      	movs	r2, #0
 8010594:	70da      	strb	r2, [r3, #3]
	 * - If device error condition, update device status
	 * - Remove device status from range status output this should
	 * only contain information relating to range data
	 */

	switch (psys->result__range_status &
 8010596:	68bb      	ldr	r3, [r7, #8]
 8010598:	785b      	ldrb	r3, [r3, #1]
 801059a:	f003 031f 	and.w	r3, r3, #31
 801059e:	2b11      	cmp	r3, #17
 80105a0:	bf8c      	ite	hi
 80105a2:	2201      	movhi	r2, #1
 80105a4:	2200      	movls	r2, #0
 80105a6:	b2d2      	uxtb	r2, r2
 80105a8:	2a00      	cmp	r2, #0
 80105aa:	d117      	bne.n	80105dc <VL53L1_copy_sys_and_core_results_to_range_results+0x224>
 80105ac:	4a0e      	ldr	r2, [pc, #56]	@ (80105e8 <VL53L1_copy_sys_and_core_results_to_range_results+0x230>)
 80105ae:	fa22 f303 	lsr.w	r3, r2, r3
 80105b2:	f003 0301 	and.w	r3, r3, #1
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	bf14      	ite	ne
 80105ba:	2301      	movne	r3, #1
 80105bc:	2300      	moveq	r3, #0
 80105be:	b2db      	uxtb	r3, r3
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d00b      	beq.n	80105dc <VL53L1_copy_sys_and_core_results_to_range_results+0x224>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 80105c4:	68bb      	ldr	r3, [r7, #8]
 80105c6:	785b      	ldrb	r3, [r3, #1]
 80105c8:	f003 031f 	and.w	r3, r3, #31
 80105cc:	b2da      	uxtb	r2, r3
 80105ce:	683b      	ldr	r3, [r7, #0]
 80105d0:	70da      	strb	r2, [r3, #3]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 80105d2:	683b      	ldr	r3, [r7, #0]
 80105d4:	2200      	movs	r2, #0
 80105d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	break;
 80105da:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 80105dc:	bf00      	nop
 80105de:	3724      	adds	r7, #36	@ 0x24
 80105e0:	46bd      	mov	sp, r7
 80105e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e6:	4770      	bx	lr
 80105e8:	0002200e 	.word	0x0002200e

080105ec <VL53L1_set_GPIO_interrupt_config_struct>:
 */

VL53L1_Error VL53L1_set_GPIO_interrupt_config_struct(
	VL53L1_DEV                      Dev,
	VL53L1_GPIO_interrupt_config_t	intconf)
{
 80105ec:	b084      	sub	sp, #16
 80105ee:	b580      	push	{r7, lr}
 80105f0:	b086      	sub	sp, #24
 80105f2:	af00      	add	r7, sp, #0
 80105f4:	6078      	str	r0, [r7, #4]
 80105f6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80105fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80105fe:	2300      	movs	r3, #0
 8010600:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	613b      	str	r3, [r7, #16]
	VL53L1_GPIO_interrupt_config_t *pintconf = &(pdev->gpio_interrupt_config);
 8010606:	693b      	ldr	r3, [r7, #16]
 8010608:	3334      	adds	r3, #52	@ 0x34
 801060a:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	 /* using memcpy(dst, src, size in bytes) */
	memcpy(pintconf, &(intconf), sizeof(VL53L1_GPIO_interrupt_config_t));
 801060c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010610:	220e      	movs	r2, #14
 8010612:	4619      	mov	r1, r3
 8010614:	68f8      	ldr	r0, [r7, #12]
 8010616:	f004 f862 	bl	80146de <memcpy>

	/* encoded interrupt config */
	pdev->gen_cfg.system__interrupt_config_gpio =
		VL53L1_encode_GPIO_interrupt_config(pintconf);
 801061a:	68f8      	ldr	r0, [r7, #12]
 801061c:	f001 fca4 	bl	8011f68 <VL53L1_encode_GPIO_interrupt_config>
 8010620:	4603      	mov	r3, r0
 8010622:	461a      	mov	r2, r3
	pdev->gen_cfg.system__interrupt_config_gpio =
 8010624:	693b      	ldr	r3, [r7, #16]
 8010626:	f883 2186 	strb.w	r2, [r3, #390]	@ 0x186

	/* set thresholds */
	status = VL53L1_set_GPIO_thresholds_from_struct(
 801062a:	68f9      	ldr	r1, [r7, #12]
 801062c:	6878      	ldr	r0, [r7, #4]
 801062e:	f001 fd44 	bl	80120ba <VL53L1_set_GPIO_thresholds_from_struct>
 8010632:	4603      	mov	r3, r0
 8010634:	75fb      	strb	r3, [r7, #23]
			Dev,
			pintconf);

	LOG_FUNCTION_END(status);
	return status;
 8010636:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801063a:	4618      	mov	r0, r3
 801063c:	3718      	adds	r7, #24
 801063e:	46bd      	mov	sp, r7
 8010640:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010644:	b004      	add	sp, #16
 8010646:	4770      	bx	lr

08010648 <VL53L1_get_GPIO_interrupt_config>:
 */

VL53L1_Error VL53L1_get_GPIO_interrupt_config(
	VL53L1_DEV                      Dev,
	VL53L1_GPIO_interrupt_config_t	*pintconf)
{
 8010648:	b590      	push	{r4, r7, lr}
 801064a:	b089      	sub	sp, #36	@ 0x24
 801064c:	af00      	add	r7, sp, #0
 801064e:	6178      	str	r0, [r7, #20]
 8010650:	6139      	str	r1, [r7, #16]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8010652:	2300      	movs	r3, #0
 8010654:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8010656:	697b      	ldr	r3, [r7, #20]
 8010658:	61bb      	str	r3, [r7, #24]

	/*
	 * Decode the system__interrupt_config_gpio register
	 * This makes sure the structure is in line with the register
	 */
	pdev->gpio_interrupt_config = VL53L1_decode_GPIO_interrupt_config(
 801065a:	69bb      	ldr	r3, [r7, #24]
 801065c:	f893 2186 	ldrb.w	r2, [r3, #390]	@ 0x186
 8010660:	69bc      	ldr	r4, [r7, #24]
 8010662:	463b      	mov	r3, r7
 8010664:	4611      	mov	r1, r2
 8010666:	4618      	mov	r0, r3
 8010668:	f001 fcb4 	bl	8011fd4 <VL53L1_decode_GPIO_interrupt_config>
 801066c:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 8010670:	463c      	mov	r4, r7
 8010672:	6820      	ldr	r0, [r4, #0]
 8010674:	6861      	ldr	r1, [r4, #4]
 8010676:	68a2      	ldr	r2, [r4, #8]
 8010678:	c307      	stmia	r3!, {r0, r1, r2}
 801067a:	89a2      	ldrh	r2, [r4, #12]
 801067c:	801a      	strh	r2, [r3, #0]

	/*
	 * Readout the system thresholds
	 */
	pdev->gpio_interrupt_config.threshold_distance_high =
		pdev->dyn_cfg.system__thresh_high;
 801067e:	69bb      	ldr	r3, [r7, #24]
 8010680:	f8b3 21b6 	ldrh.w	r2, [r3, #438]	@ 0x1b6
	pdev->gpio_interrupt_config.threshold_distance_high =
 8010684:	69bb      	ldr	r3, [r7, #24]
 8010686:	875a      	strh	r2, [r3, #58]	@ 0x3a
	pdev->gpio_interrupt_config.threshold_distance_low =
		pdev->dyn_cfg.system__thresh_low;
 8010688:	69bb      	ldr	r3, [r7, #24]
 801068a:	f8b3 21b8 	ldrh.w	r2, [r3, #440]	@ 0x1b8
	pdev->gpio_interrupt_config.threshold_distance_low =
 801068e:	69bb      	ldr	r3, [r7, #24]
 8010690:	879a      	strh	r2, [r3, #60]	@ 0x3c

	pdev->gpio_interrupt_config.threshold_rate_high =
		pdev->gen_cfg.system__thresh_rate_high;
 8010692:	69bb      	ldr	r3, [r7, #24]
 8010694:	f8b3 2190 	ldrh.w	r2, [r3, #400]	@ 0x190
	pdev->gpio_interrupt_config.threshold_rate_high =
 8010698:	69bb      	ldr	r3, [r7, #24]
 801069a:	87da      	strh	r2, [r3, #62]	@ 0x3e
	pdev->gpio_interrupt_config.threshold_rate_low =
		pdev->gen_cfg.system__thresh_rate_low;
 801069c:	69bb      	ldr	r3, [r7, #24]
 801069e:	f8b3 2192 	ldrh.w	r2, [r3, #402]	@ 0x192
	pdev->gpio_interrupt_config.threshold_rate_low =
 80106a2:	69bb      	ldr	r3, [r7, #24]
 80106a4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

	if (pintconf == &(pdev->gpio_interrupt_config))	{
 80106a8:	69bb      	ldr	r3, [r7, #24]
 80106aa:	3334      	adds	r3, #52	@ 0x34
 80106ac:	693a      	ldr	r2, [r7, #16]
 80106ae:	429a      	cmp	r2, r3
 80106b0:	d006      	beq.n	80106c0 <VL53L1_get_GPIO_interrupt_config+0x78>
		/* Cowardly refusing to copy the same memory locations */
	} else {

		/* using memcpy(dst, src, size in bytes) */
		memcpy(pintconf, &(pdev->gpio_interrupt_config),
 80106b2:	69bb      	ldr	r3, [r7, #24]
 80106b4:	3334      	adds	r3, #52	@ 0x34
 80106b6:	220e      	movs	r2, #14
 80106b8:	4619      	mov	r1, r3
 80106ba:	6938      	ldr	r0, [r7, #16]
 80106bc:	f004 f80f 	bl	80146de <memcpy>
				sizeof(VL53L1_GPIO_interrupt_config_t));
	}

	LOG_FUNCTION_END(status);
	return status;
 80106c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80106c4:	4618      	mov	r0, r3
 80106c6:	3724      	adds	r7, #36	@ 0x24
 80106c8:	46bd      	mov	sp, r7
 80106ca:	bd90      	pop	{r4, r7, pc}

080106cc <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 80106cc:	b480      	push	{r7}
 80106ce:	b087      	sub	sp, #28
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	60f8      	str	r0, [r7, #12]
 80106d4:	460b      	mov	r3, r1
 80106d6:	607a      	str	r2, [r7, #4]
 80106d8:	817b      	strh	r3, [r7, #10]
	 * Gets the requested tuning parm value
	 * - Large case statement for returns
	 * - if key does not match, INVALID parm error returned
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80106da:	2300      	movs	r3, #0
 80106dc:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 80106e2:	897b      	ldrh	r3, [r7, #10]
 80106e4:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80106e8:	2b38      	cmp	r3, #56	@ 0x38
 80106ea:	f200 8204 	bhi.w	8010af6 <VL53L1_get_tuning_parm+0x42a>
 80106ee:	a201      	add	r2, pc, #4	@ (adr r2, 80106f4 <VL53L1_get_tuning_parm+0x28>)
 80106f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106f4:	080107d9 	.word	0x080107d9
 80106f8:	080107e7 	.word	0x080107e7
 80106fc:	080107f5 	.word	0x080107f5
 8010700:	08010803 	.word	0x08010803
 8010704:	08010811 	.word	0x08010811
 8010708:	0801081f 	.word	0x0801081f
 801070c:	0801082d 	.word	0x0801082d
 8010710:	0801083b 	.word	0x0801083b
 8010714:	08010849 	.word	0x08010849
 8010718:	08010857 	.word	0x08010857
 801071c:	08010865 	.word	0x08010865
 8010720:	08010873 	.word	0x08010873
 8010724:	08010881 	.word	0x08010881
 8010728:	0801088f 	.word	0x0801088f
 801072c:	0801089d 	.word	0x0801089d
 8010730:	080108ab 	.word	0x080108ab
 8010734:	080108b9 	.word	0x080108b9
 8010738:	080108c7 	.word	0x080108c7
 801073c:	080108d5 	.word	0x080108d5
 8010740:	080108e3 	.word	0x080108e3
 8010744:	080108f1 	.word	0x080108f1
 8010748:	080108ff 	.word	0x080108ff
 801074c:	0801090d 	.word	0x0801090d
 8010750:	0801091b 	.word	0x0801091b
 8010754:	08010929 	.word	0x08010929
 8010758:	08010937 	.word	0x08010937
 801075c:	08010945 	.word	0x08010945
 8010760:	08010953 	.word	0x08010953
 8010764:	08010961 	.word	0x08010961
 8010768:	0801096f 	.word	0x0801096f
 801076c:	0801097d 	.word	0x0801097d
 8010770:	0801098b 	.word	0x0801098b
 8010774:	08010999 	.word	0x08010999
 8010778:	080109a7 	.word	0x080109a7
 801077c:	080109b5 	.word	0x080109b5
 8010780:	080109c3 	.word	0x080109c3
 8010784:	080109d1 	.word	0x080109d1
 8010788:	080109df 	.word	0x080109df
 801078c:	080109ed 	.word	0x080109ed
 8010790:	080109fb 	.word	0x080109fb
 8010794:	08010a09 	.word	0x08010a09
 8010798:	08010a17 	.word	0x08010a17
 801079c:	08010a25 	.word	0x08010a25
 80107a0:	08010a33 	.word	0x08010a33
 80107a4:	08010a41 	.word	0x08010a41
 80107a8:	08010a4f 	.word	0x08010a4f
 80107ac:	08010a5d 	.word	0x08010a5d
 80107b0:	08010a6b 	.word	0x08010a6b
 80107b4:	08010a79 	.word	0x08010a79
 80107b8:	08010a87 	.word	0x08010a87
 80107bc:	08010a95 	.word	0x08010a95
 80107c0:	08010aa3 	.word	0x08010aa3
 80107c4:	08010ab1 	.word	0x08010ab1
 80107c8:	08010abf 	.word	0x08010abf
 80107cc:	08010acd 	.word	0x08010acd
 80107d0:	08010adb 	.word	0x08010adb
 80107d4:	08010ae9 	.word	0x08010ae9

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 80107d8:	693b      	ldr	r3, [r7, #16]
 80107da:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 80107de:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	601a      	str	r2, [r3, #0]
	break;
 80107e4:	e18e      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 80107e6:	693b      	ldr	r3, [r7, #16]
 80107e8:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 80107ec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	601a      	str	r2, [r3, #0]
	break;
 80107f2:	e187      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 80107f4:	693b      	ldr	r3, [r7, #16]
 80107f6:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 80107fa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	601a      	str	r2, [r3, #0]
	break;
 8010800:	e180      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 8010802:	693b      	ldr	r3, [r7, #16]
 8010804:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8010808:	461a      	mov	r2, r3
		*ptuning_parm_value =
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	601a      	str	r2, [r3, #0]
	break;
 801080e:	e179      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8010810:	693b      	ldr	r3, [r7, #16]
 8010812:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8010816:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	601a      	str	r2, [r3, #0]
	break;
 801081c:	e172      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 801081e:	693b      	ldr	r3, [r7, #16]
 8010820:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 8010824:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	601a      	str	r2, [r3, #0]
	break;
 801082a:	e16b      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 801082c:	693b      	ldr	r3, [r7, #16]
 801082e:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8010832:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	601a      	str	r2, [r3, #0]
	break;
 8010838:	e164      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 801083a:	693b      	ldr	r3, [r7, #16]
 801083c:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8010840:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	601a      	str	r2, [r3, #0]
	break;
 8010846:	e15d      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 8010848:	693b      	ldr	r3, [r7, #16]
 801084a:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	@ 0xb6
 801084e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	601a      	str	r2, [r3, #0]
	break;
 8010854:	e156      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8010856:	693b      	ldr	r3, [r7, #16]
 8010858:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 801085c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	601a      	str	r2, [r3, #0]
	break;
 8010862:	e14f      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8010864:	693b      	ldr	r3, [r7, #16]
 8010866:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 801086a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	601a      	str	r2, [r3, #0]
	break;
 8010870:	e148      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 8010872:	693b      	ldr	r3, [r7, #16]
 8010874:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8010878:	461a      	mov	r2, r3
		*ptuning_parm_value =
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	601a      	str	r2, [r3, #0]
	break;
 801087e:	e141      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8010880:	693b      	ldr	r3, [r7, #16]
 8010882:	f8b3 30be 	ldrh.w	r3, [r3, #190]	@ 0xbe
 8010886:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	601a      	str	r2, [r3, #0]
	break;
 801088c:	e13a      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 801088e:	693b      	ldr	r3, [r7, #16]
 8010890:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	@ 0xc0
 8010894:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	601a      	str	r2, [r3, #0]
	break;
 801089a:	e133      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 801089c:	693b      	ldr	r3, [r7, #16]
 801089e:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 80108a2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	601a      	str	r2, [r3, #0]
	break;
 80108a8:	e12c      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 80108aa:	693b      	ldr	r3, [r7, #16]
 80108ac:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 80108b0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	601a      	str	r2, [r3, #0]
	break;
 80108b6:	e125      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 80108b8:	693b      	ldr	r3, [r7, #16]
 80108ba:	f893 30c4 	ldrb.w	r3, [r3, #196]	@ 0xc4
 80108be:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	601a      	str	r2, [r3, #0]
	break;
 80108c4:	e11e      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 80108c6:	693b      	ldr	r3, [r7, #16]
 80108c8:	f893 3140 	ldrb.w	r3, [r3, #320]	@ 0x140
 80108cc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	601a      	str	r2, [r3, #0]
	break;
 80108d2:	e117      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg ;
 80108d4:	693b      	ldr	r3, [r7, #16]
 80108d6:	f893 30c5 	ldrb.w	r3, [r3, #197]	@ 0xc5
 80108da:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	601a      	str	r2, [r3, #0]
	break;
 80108e0:	e110      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 80108e2:	693b      	ldr	r3, [r7, #16]
 80108e4:	f893 30c7 	ldrb.w	r3, [r3, #199]	@ 0xc7
 80108e8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	601a      	str	r2, [r3, #0]
	break;
 80108ee:	e109      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 80108f0:	693b      	ldr	r3, [r7, #16]
 80108f2:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 80108f6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	601a      	str	r2, [r3, #0]
	break;
 80108fc:	e102      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 80108fe:	693b      	ldr	r3, [r7, #16]
 8010900:	f9b3 313e 	ldrsh.w	r3, [r3, #318]	@ 0x13e
 8010904:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	601a      	str	r2, [r3, #0]
	break;
 801090a:	e0fb      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 801090c:	693b      	ldr	r3, [r7, #16]
 801090e:	f893 30aa 	ldrb.w	r3, [r3, #170]	@ 0xaa
 8010912:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	601a      	str	r2, [r3, #0]
	break;
 8010918:	e0f4      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 801091a:	693b      	ldr	r3, [r7, #16]
 801091c:	f893 30ab 	ldrb.w	r3, [r3, #171]	@ 0xab
 8010920:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	601a      	str	r2, [r3, #0]
	break;
 8010926:	e0ed      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8010928:	693b      	ldr	r3, [r7, #16]
 801092a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801092e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	601a      	str	r2, [r3, #0]
	break;
 8010934:	e0e6      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8010936:	693b      	ldr	r3, [r7, #16]
 8010938:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801093c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	601a      	str	r2, [r3, #0]
	break;
 8010942:	e0df      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 8010944:	693b      	ldr	r3, [r7, #16]
 8010946:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 801094a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	601a      	str	r2, [r3, #0]
	break;
 8010950:	e0d8      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 8010952:	693b      	ldr	r3, [r7, #16]
 8010954:	f893 30af 	ldrb.w	r3, [r3, #175]	@ 0xaf
 8010958:	461a      	mov	r2, r3
		*ptuning_parm_value =
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	601a      	str	r2, [r3, #0]
	break;
 801095e:	e0d1      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8010960:	693b      	ldr	r3, [r7, #16]
 8010962:	f893 30c6 	ldrb.w	r3, [r3, #198]	@ 0xc6
 8010966:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	601a      	str	r2, [r3, #0]
	break;
 801096c:	e0ca      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
				(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 801096e:	693b      	ldr	r3, [r7, #16]
 8010970:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 8010974:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	601a      	str	r2, [r3, #0]
	break;
 801097a:	e0c3      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.device_test_mode;
 801097c:	693b      	ldr	r3, [r7, #16]
 801097e:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 8010982:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	601a      	str	r2, [r3, #0]
	break;
 8010988:	e0bc      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.vcsel_period;
 801098a:	693b      	ldr	r3, [r7, #16]
 801098c:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 8010990:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	601a      	str	r2, [r3, #0]
	break;
 8010996:	e0b5      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.timeout_us;
 8010998:	693b      	ldr	r3, [r7, #16]
 801099a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 801099e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	601a      	str	r2, [r3, #0]
	break;
 80109a4:	e0ae      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.target_count_rate_mcps;
 80109a6:	693b      	ldr	r3, [r7, #16]
 80109a8:	f8b3 3118 	ldrh.w	r3, [r3, #280]	@ 0x118
 80109ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	601a      	str	r2, [r3, #0]
	break;
 80109b2:	e0a7      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 80109b4:	693b      	ldr	r3, [r7, #16]
 80109b6:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
 80109ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	601a      	str	r2, [r3, #0]
	break;
 80109c0:	e0a0      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 80109c2:	693b      	ldr	r3, [r7, #16]
 80109c4:	f8b3 311c 	ldrh.w	r3, [r3, #284]	@ 0x11c
 80109c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	601a      	str	r2, [r3, #0]
	break;
 80109ce:	e099      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 80109d0:	693b      	ldr	r3, [r7, #16]
 80109d2:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 80109d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	601a      	str	r2, [r3, #0]
	break;
 80109dc:	e092      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 80109de:	693b      	ldr	r3, [r7, #16]
 80109e0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80109e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	601a      	str	r2, [r3, #0]
	break;
 80109ea:	e08b      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 80109ec:	693b      	ldr	r3, [r7, #16]
 80109ee:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80109f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	601a      	str	r2, [r3, #0]
	break;
 80109f8:	e084      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 80109fa:	693b      	ldr	r3, [r7, #16]
 80109fc:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8010a00:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	601a      	str	r2, [r3, #0]
	break;
 8010a06:	e07d      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8010a08:	693b      	ldr	r3, [r7, #16]
 8010a0a:	f893 3154 	ldrb.w	r3, [r3, #340]	@ 0x154
 8010a0e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	601a      	str	r2, [r3, #0]
	break;
 8010a14:	e076      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 8010a16:	693b      	ldr	r3, [r7, #16]
 8010a18:	f893 3155 	ldrb.w	r3, [r3, #341]	@ 0x155
 8010a1c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	601a      	str	r2, [r3, #0]
	break;
 8010a22:	e06f      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8010a24:	693b      	ldr	r3, [r7, #16]
 8010a26:	f893 3156 	ldrb.w	r3, [r3, #342]	@ 0x156
 8010a2a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	601a      	str	r2, [r3, #0]
	break;
 8010a30:	e068      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_period;
 8010a32:	693b      	ldr	r3, [r7, #16]
 8010a34:	f893 3121 	ldrb.w	r3, [r3, #289]	@ 0x121
 8010a38:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	601a      	str	r2, [r3, #0]
	break;
 8010a3e:	e061      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_start;
 8010a40:	693b      	ldr	r3, [r7, #16]
 8010a42:	f893 3122 	ldrb.w	r3, [r3, #290]	@ 0x122
 8010a46:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	601a      	str	r2, [r3, #0]
	break;
 8010a4c:	e05a      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 8010a4e:	693b      	ldr	r3, [r7, #16]
 8010a50:	f8b3 3128 	ldrh.w	r3, [r3, #296]	@ 0x128
 8010a54:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	601a      	str	r2, [r3, #0]
	break;
 8010a5a:	e053      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 8010a5c:	693b      	ldr	r3, [r7, #16]
 8010a5e:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	@ 0xca
 8010a62:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	601a      	str	r2, [r3, #0]
	break;
 8010a68:	e04c      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 8010a6a:	693b      	ldr	r3, [r7, #16]
 8010a6c:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	@ 0xcc
 8010a70:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	601a      	str	r2, [r3, #0]
	break;
 8010a76:	e045      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8010a78:	693b      	ldr	r3, [r7, #16]
 8010a7a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8010a7e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	601a      	str	r2, [r3, #0]
	break;
 8010a84:	e03e      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8010a86:	693b      	ldr	r3, [r7, #16]
 8010a88:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8010a8c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	601a      	str	r2, [r3, #0]
	break;
 8010a92:	e037      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 8010a94:	693b      	ldr	r3, [r7, #16]
 8010a96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8010a9a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	601a      	str	r2, [r3, #0]
	break;
 8010aa0:	e030      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 8010aa2:	693b      	ldr	r3, [r7, #16]
 8010aa4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8010aa8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	601a      	str	r2, [r3, #0]
	break;
 8010aae:	e029      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 8010ab0:	693b      	ldr	r3, [r7, #16]
 8010ab2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8010ab6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	601a      	str	r2, [r3, #0]
	break;
 8010abc:	e022      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 8010abe:	693b      	ldr	r3, [r7, #16]
 8010ac0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8010ac4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	601a      	str	r2, [r3, #0]
	break;
 8010aca:	e01b      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
				(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 8010acc:	693b      	ldr	r3, [r7, #16]
 8010ace:	f893 32e4 	ldrb.w	r3, [r3, #740]	@ 0x2e4
 8010ad2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	601a      	str	r2, [r3, #0]
	break;
 8010ad8:	e014      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8010ada:	693b      	ldr	r3, [r7, #16]
 8010adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010ae0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	601a      	str	r2, [r3, #0]
	break;
 8010ae6:	e00d      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 8010ae8:	693b      	ldr	r3, [r7, #16]
 8010aea:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8010aee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	601a      	str	r2, [r3, #0]
	break;
 8010af4:	e006      	b.n	8010b04 <VL53L1_get_tuning_parm+0x438>


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8010afc:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 8010afe:	23fc      	movs	r3, #252	@ 0xfc
 8010b00:	75fb      	strb	r3, [r7, #23]
	break;
 8010b02:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8010b04:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010b08:	4618      	mov	r0, r3
 8010b0a:	371c      	adds	r7, #28
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b12:	4770      	bx	lr

08010b14 <VL53L1_init_refspadchar_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 8010b14:	b480      	push	{r7}
 8010b16:	b085      	sub	sp, #20
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Ref SPAD Char data structures preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8010b1c:	2300      	movs	r3, #0
 8010b1e:	73fb      	strb	r3, [r7, #15]
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	2208      	movs	r2, #8
 8010b24:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	220b      	movs	r2, #11
 8010b2a:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010b32:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8010b3a:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8010b42:	815a      	strh	r2, [r3, #10]
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8010b4a:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8010b4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010b50:	4618      	mov	r0, r3
 8010b52:	3714      	adds	r7, #20
 8010b54:	46bd      	mov	sp, r7
 8010b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b5a:	4770      	bx	lr

08010b5c <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 8010b5c:	b480      	push	{r7}
 8010b5e:	b085      	sub	sp, #20
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes SPAD Self Check (SSC) data structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8010b64:	2300      	movs	r3, #0
 8010b66:	73fb      	strb	r3, [r7, #15]
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	2200      	movs	r2, #0
 8010b6c:	701a      	strb	r2, [r3, #0]

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	2212      	movs	r2, #18
 8010b72:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start  =
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	220f      	movs	r2, #15
 8010b78:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	2202      	movs	r2, #2
 8010b7e:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 8010b86:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	220c      	movs	r2, #12
 8010b8c:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8010b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010b92:	4618      	mov	r0, r3
 8010b94:	3714      	adds	r7, #20
 8010b96:	46bd      	mov	sp, r7
 8010b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9c:	4770      	bx	lr

08010b9e <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 8010b9e:	b580      	push	{r7, lr}
 8010ba0:	b084      	sub	sp, #16
 8010ba2:	af00      	add	r7, sp, #0
 8010ba4:	6078      	str	r0, [r7, #4]
 8010ba6:	6039      	str	r1, [r7, #0]
	/*
	 * Initializes Xtalk Config structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8010ba8:	2300      	movs	r3, #0
 8010baa:	73fb      	strb	r3, [r7, #15]
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	895b      	ldrh	r3, [r3, #10]
 8010bb0:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 8010bb2:	683b      	ldr	r3, [r7, #0]
 8010bb4:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 8010bbc:	683b      	ldr	r3, [r7, #0]
 8010bbe:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 8010bc6:	683b      	ldr	r3, [r7, #0]
 8010bc8:	80da      	strh	r2, [r3, #6]

	/* Store NVM defaults for later use */

	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	895b      	ldrh	r3, [r3, #10]
 8010bce:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 8010bd0:	683b      	ldr	r3, [r7, #0]
 8010bd2:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 8010bda:	683b      	ldr	r3, [r7, #0]
 8010bdc:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 8010be4:	683b      	ldr	r3, [r7, #0]
 8010be6:	81da      	strh	r2, [r3, #14]

	pdata->lite_mode_crosstalk_margin_kcps                     =
 8010be8:	683b      	ldr	r3, [r7, #0]
 8010bea:	2200      	movs	r2, #0
 8010bec:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 8010bee:	683b      	ldr	r3, [r7, #0]
 8010bf0:	2240      	movs	r2, #64	@ 0x40
 8010bf2:	751a      	strb	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 8010bf4:	683b      	ldr	r3, [r7, #0]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d10d      	bne.n	8010c18 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
 8010bfc:	683b      	ldr	r3, [r7, #0]
 8010bfe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d108      	bne.n	8010c18 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 8010c06:	683b      	ldr	r3, [r7, #0]
 8010c08:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d103      	bne.n	8010c18 <VL53L1_init_xtalk_config_struct+0x7a>
		pdata->global_crosstalk_compensation_enable = 0x00;
 8010c10:	683b      	ldr	r3, [r7, #0]
 8010c12:	2200      	movs	r2, #0
 8010c14:	741a      	strb	r2, [r3, #16]
 8010c16:	e002      	b.n	8010c1e <VL53L1_init_xtalk_config_struct+0x80>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 8010c18:	683b      	ldr	r3, [r7, #0]
 8010c1a:	2201      	movs	r2, #1
 8010c1c:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 8010c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d114      	bne.n	8010c50 <VL53L1_init_xtalk_config_struct+0xb2>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 8010c26:	683b      	ldr	r3, [r7, #0]
 8010c28:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 8010c2a:	2b01      	cmp	r3, #1
 8010c2c:	d110      	bne.n	8010c50 <VL53L1_init_xtalk_config_struct+0xb2>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 8010c2e:	683b      	ldr	r3, [r7, #0]
 8010c30:	6818      	ldr	r0, [r3, #0]
 8010c32:	683b      	ldr	r3, [r7, #0]
 8010c34:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8010c38:	683b      	ldr	r3, [r7, #0]
 8010c3a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8010c3e:	683b      	ldr	r3, [r7, #0]
 8010c40:	7d1b      	ldrb	r3, [r3, #20]
 8010c42:	f000 ff99 	bl	8011b78 <VL53L1_calc_range_ignore_threshold>
 8010c46:	4603      	mov	r3, r0
 8010c48:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 8010c4a:	683b      	ldr	r3, [r7, #0]
 8010c4c:	82da      	strh	r2, [r3, #22]
 8010c4e:	e002      	b.n	8010c56 <VL53L1_init_xtalk_config_struct+0xb8>
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 8010c50:	683b      	ldr	r3, [r7, #0]
 8010c52:	2200      	movs	r2, #0
 8010c54:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 8010c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	3710      	adds	r7, #16
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	bd80      	pop	{r7, pc}

08010c62 <VL53L1_init_offset_cal_config_struct>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 8010c62:	b480      	push	{r7}
 8010c64:	b085      	sub	sp, #20
 8010c66:	af00      	add	r7, sp, #0
 8010c68:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Offset Calibration Config structure
	 * - for use with VL53L1_run_offset_calibration()
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps          =
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8010c74:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us                  =
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010c7c:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us                     =
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8010c84:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us                        =
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8010c8c:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	2208      	movs	r2, #8
 8010c92:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	2228      	movs	r2, #40	@ 0x28
 8010c98:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	2209      	movs	r2, #9
 8010c9e:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8010ca0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	3714      	adds	r7, #20
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cae:	4770      	bx	lr

08010cb0 <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 8010cb0:	b480      	push	{r7}
 8010cb2:	b085      	sub	sp, #20
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes  Tuning Param storage structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8010cb8:	2300      	movs	r3, #0
 8010cba:	73fb      	strb	r3, [r7, #15]
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version              =
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	f248 0203 	movw	r2, #32771	@ 0x8003
 8010cc2:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	f248 0201 	movw	r2, #32769	@ 0x8001
 8010cca:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	f248 0241 	movw	r2, #32833	@ 0x8041
 8010cd2:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	220e      	movs	r2, #14
 8010cd8:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	220a      	movs	r2, #10
 8010cde:	71da      	strb	r2, [r3, #7]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	2206      	movs	r2, #6
 8010ce4:	721a      	strb	r2, [r3, #8]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	220e      	movs	r2, #14
 8010cea:	725a      	strb	r2, [r3, #9]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	220a      	movs	r2, #10
 8010cf0:	729a      	strb	r2, [r3, #10]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	2206      	movs	r2, #6
 8010cf6:	72da      	strb	r2, [r3, #11]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	2202      	movs	r2, #2
 8010cfc:	731a      	strb	r2, [r3, #12]
			VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	2221      	movs	r2, #33	@ 0x21
 8010d02:	735a      	strb	r2, [r3, #13]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	2200      	movs	r2, #0
 8010d08:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	2200      	movs	r2, #0
 8010d0e:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8010d16:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8010d1e:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8010d26:	82da      	strh	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	22c0      	movs	r2, #192	@ 0xc0
 8010d2c:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	22c0      	movs	r2, #192	@ 0xc0
 8010d32:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	22c0      	movs	r2, #192	@ 0xc0
 8010d38:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	2208      	movs	r2, #8
 8010d3e:	779a      	strb	r2, [r3, #30]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	2210      	movs	r2, #16
 8010d44:	77da      	strb	r2, [r3, #31]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	2201      	movs	r2, #1
 8010d4a:	f883 2020 	strb.w	r2, [r3, #32]
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	2202      	movs	r2, #2
 8010d52:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	2201      	movs	r2, #1
 8010d5a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	2202      	movs	r2, #2
 8010d62:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	2200      	movs	r2, #0
 8010d6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8010d74:	84da      	strh	r2, [r3, #38]	@ 0x26
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8010d7c:	851a      	strh	r2, [r3, #40]	@ 0x28
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	f248 0230 	movw	r2, #32816	@ 0x8030
 8010d84:	62da      	str	r2, [r3, #44]	@ 0x2c
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010d8c:	631a      	str	r2, [r3, #48]	@ 0x30
			VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8010d94:	635a      	str	r2, [r3, #52]	@ 0x34
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8010d9c:	639a      	str	r2, [r3, #56]	@ 0x38
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	f24f 6218 	movw	r2, #63000	@ 0xf618
 8010da4:	641a      	str	r2, [r3, #64]	@ 0x40
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8010dac:	645a      	str	r2, [r3, #68]	@ 0x44
			VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8010db4:	63da      	str	r2, [r3, #60]	@ 0x3c
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8010dbc:	649a      	str	r2, [r3, #72]	@ 0x48
			VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 8010dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	3714      	adds	r7, #20
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dcc:	4770      	bx	lr

08010dce <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8010dce:	b480      	push	{r7}
 8010dd0:	b087      	sub	sp, #28
 8010dd2:	af00      	add	r7, sp, #0
 8010dd4:	60f8      	str	r0, [r7, #12]
 8010dd6:	60b9      	str	r1, [r7, #8]
 8010dd8:	607a      	str	r2, [r7, #4]
 8010dda:	603b      	str	r3, [r7, #0]
	 *  - back to back
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8010ddc:	2300      	movs	r3, #0
 8010dde:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8010de6:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl                                      = 0x00;
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	2200      	movs	r2, #0
 8010dec:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	2200      	movs	r2, #0
 8010df2:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	2200      	movs	r2, #0
 8010df8:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	2200      	movs	r2, #0
 8010dfe:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	2200      	movs	r2, #0
 8010e04:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	2200      	movs	r2, #0
 8010e0a:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status                                  = 0x00;
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	2200      	movs	r2, #0
 8010e10:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	2200      	movs	r2, #0
 8010e16:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	729a      	strb	r2, [r3, #10]

	/*
	 *  0 - gpio__extsup_hv
	 *  1 - gpio__vmodeint_hv
	 */
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	2200      	movs	r2, #0
 8010e22:	72da      	strb	r2, [r3, #11]
	 * Set interrupt active low
	 *
	 *  3:0 - gpio__mux_select_hv
	 *    4 - gpio__mux_active_high_hv
	 */
	pstatic->gpio_hv_mux__ctrl  = \
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	2211      	movs	r2, #17
 8010e28:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	2202      	movs	r2, #2
 8010e2e:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status                              = 0x00;
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	2200      	movs	r2, #0
 8010e34:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	2202      	movs	r2, #2
 8010e3a:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	2208      	movs	r2, #8
 8010e40:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	2200      	movs	r2, #0
 8010e46:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 8010e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e4a:	7f9a      	ldrb	r2, [r3, #30]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 8010e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e52:	7fda      	ldrb	r2, [r3, #31]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 8010e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e5a:	f893 2020 	ldrb.w	r2, [r3, #32]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	751a      	strb	r2, [r3, #20]
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	2201      	movs	r2, #1
 8010e66:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	2200      	movs	r2, #0
 8010e6c:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	2200      	movs	r2, #0
 8010e72:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	2200      	movs	r2, #0
 8010e78:	831a      	strh	r2, [r3, #24]

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	22ff      	movs	r2, #255	@ 0xff
 8010e7e:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 8010e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e82:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->algo__range_min_clip                             =
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	76da      	strb	r2, [r3, #27]
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 8010e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e8a:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->algo__consistency_check__tolerance               =
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	2200      	movs	r2, #0
 8010e94:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	2200      	movs	r2, #0
 8010e9a:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	2200      	movs	r2, #0
 8010ea0:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value           = 0x00;
 8010ea2:	68bb      	ldr	r3, [r7, #8]
 8010ea4:	2200      	movs	r2, #0
 8010ea6:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider                   = 0x00;
 8010ea8:	68bb      	ldr	r3, [r7, #8]
 8010eaa:	2200      	movs	r2, #0
 8010eac:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 8010eae:	68bb      	ldr	r3, [r7, #8]
 8010eb0:	2220      	movs	r2, #32
 8010eb2:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 8010eb4:	68bb      	ldr	r3, [r7, #8]
 8010eb6:	220b      	movs	r2, #11
 8010eb8:	70da      	strb	r2, [r3, #3]
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 8010eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ebc:	89da      	ldrh	r2, [r3, #14]
	pgeneral->cal_config__repeat_rate                         =
 8010ebe:	68bb      	ldr	r3, [r7, #8]
 8010ec0:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width                      = 0x02;
 8010ec2:	68bb      	ldr	r3, [r7, #8]
 8010ec4:	2202      	movs	r2, #2
 8010ec6:	719a      	strb	r2, [r3, #6]
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 8010ec8:	68bb      	ldr	r3, [r7, #8]
 8010eca:	220d      	movs	r2, #13
 8010ecc:	71da      	strb	r2, [r3, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 8010ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ed0:	7b5a      	ldrb	r2, [r3, #13]
	pgeneral->phasecal_config__target                         =
 8010ed2:	68bb      	ldr	r3, [r7, #8]
 8010ed4:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override                       = 0x00;
 8010ed6:	68bb      	ldr	r3, [r7, #8]
 8010ed8:	2200      	movs	r2, #0
 8010eda:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 8010edc:	68bb      	ldr	r3, [r7, #8]
 8010ede:	2201      	movs	r2, #1
 8010ee0:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
 8010ee2:	68bb      	ldr	r3, [r7, #8]
 8010ee4:	2200      	movs	r2, #0
 8010ee6:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 8010ee8:	68bb      	ldr	r3, [r7, #8]
 8010eea:	2200      	movs	r2, #0
 8010eec:	81da      	strh	r2, [r3, #14]
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 8010eee:	68bb      	ldr	r3, [r7, #8]
 8010ef0:	f44f 420c 	mov.w	r2, #35840	@ 0x8c00
 8010ef4:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 8010ef6:	68bb      	ldr	r3, [r7, #8]
 8010ef8:	2200      	movs	r2, #0
 8010efa:	749a      	strb	r2, [r3, #18]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 8010efc:	68bb      	ldr	r3, [r7, #8]
 8010efe:	2238      	movs	r2, #56	@ 0x38
 8010f00:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit                     = 0xFF;
 8010f02:	68bb      	ldr	r3, [r7, #8]
 8010f04:	22ff      	movs	r2, #255	@ 0xff
 8010f06:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit                     = 0x01;
 8010f08:	68bb      	ldr	r3, [r7, #8]
 8010f0a:	2201      	movs	r2, #1
 8010f0c:	755a      	strb	r2, [r3, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	2200      	movs	r2, #0
 8010f12:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	221a      	movs	r2, #26
 8010f18:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	2200      	movs	r2, #0
 8010f1e:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	2220      	movs	r2, #32
 8010f24:	70da      	strb	r2, [r3, #3]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	2201      	movs	r2, #1
 8010f2a:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	22cc      	movs	r2, #204	@ 0xcc
 8010f30:	715a      	strb	r2, [r3, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	220b      	movs	r2, #11
 8010f36:	719a      	strb	r2, [r3, #6]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	2201      	movs	r2, #1
 8010f3c:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	22f5      	movs	r2, #245	@ 0xf5
 8010f42:	721a      	strb	r2, [r3, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	2209      	movs	r2, #9
 8010f48:	725a      	strb	r2, [r3, #9]
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 8010f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f4c:	8a9a      	ldrh	r2, [r3, #20]
	ptiming->range_config__sigma_thresh                       =
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	815a      	strh	r2, [r3, #10]
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 8010f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f54:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	819a      	strh	r2, [r3, #12]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	2208      	movs	r2, #8
 8010f5e:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	2278      	movs	r2, #120	@ 0x78
 8010f64:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	2200      	movs	r2, #0
 8010f6a:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable                        = 0x00;
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	2200      	movs	r2, #0
 8010f70:	751a      	strb	r2, [r3, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 8010f72:	683b      	ldr	r3, [r7, #0]
 8010f74:	2201      	movs	r2, #1
 8010f76:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 8010f78:	683b      	ldr	r3, [r7, #0]
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
 8010f7e:	683b      	ldr	r3, [r7, #0]
 8010f80:	2200      	movs	r2, #0
 8010f82:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 8010f84:	683b      	ldr	r3, [r7, #0]
 8010f86:	2200      	movs	r2, #0
 8010f88:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 8010f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f8c:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
	pdynamic->system__seed_config =
 8010f90:	683b      	ldr	r3, [r7, #0]
 8010f92:	71da      	strb	r2, [r3, #7]

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 8010f94:	683b      	ldr	r3, [r7, #0]
 8010f96:	220b      	movs	r2, #11
 8010f98:	721a      	strb	r2, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 8010f9a:	683b      	ldr	r3, [r7, #0]
 8010f9c:	2209      	movs	r2, #9
 8010f9e:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 8010fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fa2:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 8010fa4:	683b      	ldr	r3, [r7, #0]
 8010fa6:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;;
 8010fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010faa:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 8010fac:	683b      	ldr	r3, [r7, #0]
 8010fae:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 8010fb0:	683b      	ldr	r3, [r7, #0]
 8010fb2:	2201      	movs	r2, #1
 8010fb4:	731a      	strb	r2, [r3, #12]
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 8010fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fb8:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
	pdynamic->sd_config__first_order_select =
 8010fbc:	683b      	ldr	r3, [r7, #0]
 8010fbe:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 8010fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fc2:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
	pdynamic->sd_config__quantifier         =
 8010fc6:	683b      	ldr	r3, [r7, #0]
 8010fc8:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 8010fca:	683b      	ldr	r3, [r7, #0]
 8010fcc:	22c7      	movs	r2, #199	@ 0xc7
 8010fce:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8010fd0:	683b      	ldr	r3, [r7, #0]
 8010fd2:	22ff      	movs	r2, #255	@ 0xff
 8010fd4:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          = \
 8010fd6:	683b      	ldr	r3, [r7, #0]
 8010fd8:	22db      	movs	r2, #219	@ 0xdb
 8010fda:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN | \
			VL53L1_SEQUENCE_DSS2_EN | \
			VL53L1_SEQUENCE_MM2_EN | \
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold                   = 0x02;
 8010fdc:	683b      	ldr	r3, [r7, #0]
 8010fde:	2202      	movs	r2, #2
 8010fe0:	749a      	strb	r2, [r3, #18]

	/* System control */


	psystem->system__stream_count_ctrl                         = 0x00;
 8010fe2:	6a3b      	ldr	r3, [r7, #32]
 8010fe4:	2200      	movs	r2, #0
 8010fe6:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable                                  = 0x01;
 8010fe8:	6a3b      	ldr	r3, [r7, #32]
 8010fea:	2201      	movs	r2, #1
 8010fec:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           = \
 8010fee:	6a3b      	ldr	r3, [r7, #32]
 8010ff0:	2201      	movs	r2, #1
 8010ff2:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                = \
 8010ff4:	6a3b      	ldr	r3, [r7, #32]
 8010ff6:	2221      	movs	r2, #33	@ 0x21
 8010ff8:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD | \
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 8010ffa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010ffe:	4618      	mov	r0, r3
 8011000:	371c      	adds	r7, #28
 8011002:	46bd      	mov	sp, r7
 8011004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011008:	4770      	bx	lr

0801100a <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 801100a:	b580      	push	{r7, lr}
 801100c:	b088      	sub	sp, #32
 801100e:	af02      	add	r7, sp, #8
 8011010:	60f8      	str	r0, [r7, #12]
 8011012:	60b9      	str	r1, [r7, #8]
 8011014:	607a      	str	r2, [r7, #4]
 8011016:	603b      	str	r3, [r7, #0]
	 * (up to 1.4 metres)
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8011018:	2300      	movs	r3, #0
 801101a:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 801101c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801101e:	9301      	str	r3, [sp, #4]
 8011020:	6a3b      	ldr	r3, [r7, #32]
 8011022:	9300      	str	r3, [sp, #0]
 8011024:	683b      	ldr	r3, [r7, #0]
 8011026:	687a      	ldr	r2, [r7, #4]
 8011028:	68b9      	ldr	r1, [r7, #8]
 801102a:	68f8      	ldr	r0, [r7, #12]
 801102c:	f7ff fecf 	bl	8010dce <VL53L1_preset_mode_standard_ranging>
 8011030:	4603      	mov	r3, r0
 8011032:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8011034:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011038:	2b00      	cmp	r3, #0
 801103a:	d121      	bne.n	8011080 <VL53L1_preset_mode_standard_ranging_short_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	2207      	movs	r2, #7
 8011040:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	2205      	movs	r2, #5
 8011046:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 8011048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801104a:	8ada      	ldrh	r2, [r3, #22]
		ptiming->range_config__sigma_thresh                  =
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 8011050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011052:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	2208      	movs	r2, #8
 801105c:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	2238      	movs	r2, #56	@ 0x38
 8011062:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 8011064:	683b      	ldr	r3, [r7, #0]
 8011066:	2207      	movs	r2, #7
 8011068:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 801106a:	683b      	ldr	r3, [r7, #0]
 801106c:	2205      	movs	r2, #5
 801106e:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 8011070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011072:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 8011074:	683b      	ldr	r3, [r7, #0]
 8011076:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 8011078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801107a:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 801107c:	683b      	ldr	r3, [r7, #0]
 801107e:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 8011080:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011084:	4618      	mov	r0, r3
 8011086:	3718      	adds	r7, #24
 8011088:	46bd      	mov	sp, r7
 801108a:	bd80      	pop	{r7, pc}

0801108c <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 801108c:	b580      	push	{r7, lr}
 801108e:	b088      	sub	sp, #32
 8011090:	af02      	add	r7, sp, #8
 8011092:	60f8      	str	r0, [r7, #12]
 8011094:	60b9      	str	r1, [r7, #8]
 8011096:	607a      	str	r2, [r7, #4]
 8011098:	603b      	str	r3, [r7, #0]
	 * (up to 4.8 metres)
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801109a:	2300      	movs	r3, #0
 801109c:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 801109e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110a0:	9301      	str	r3, [sp, #4]
 80110a2:	6a3b      	ldr	r3, [r7, #32]
 80110a4:	9300      	str	r3, [sp, #0]
 80110a6:	683b      	ldr	r3, [r7, #0]
 80110a8:	687a      	ldr	r2, [r7, #4]
 80110aa:	68b9      	ldr	r1, [r7, #8]
 80110ac:	68f8      	ldr	r0, [r7, #12]
 80110ae:	f7ff fe8e 	bl	8010dce <VL53L1_preset_mode_standard_ranging>
 80110b2:	4603      	mov	r3, r0
 80110b4:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80110b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d121      	bne.n	8011102 <VL53L1_preset_mode_standard_ranging_long_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	220f      	movs	r2, #15
 80110c2:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	220d      	movs	r2, #13
 80110c8:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 80110ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110cc:	8a5a      	ldrh	r2, [r3, #18]
		ptiming->range_config__sigma_thresh                  =
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 80110d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110d4:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	2208      	movs	r2, #8
 80110de:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	22b8      	movs	r2, #184	@ 0xb8
 80110e4:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
 80110e6:	683b      	ldr	r3, [r7, #0]
 80110e8:	220f      	movs	r2, #15
 80110ea:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 80110ec:	683b      	ldr	r3, [r7, #0]
 80110ee:	220d      	movs	r2, #13
 80110f0:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 80110f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110f4:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 80110f6:	683b      	ldr	r3, [r7, #0]
 80110f8:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 80110fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110fc:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 80110fe:	683b      	ldr	r3, [r7, #0]
 8011100:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 8011102:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011106:	4618      	mov	r0, r3
 8011108:	3718      	adds	r7, #24
 801110a:	46bd      	mov	sp, r7
 801110c:	bd80      	pop	{r7, pc}

0801110e <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 801110e:	b580      	push	{r7, lr}
 8011110:	b088      	sub	sp, #32
 8011112:	af02      	add	r7, sp, #8
 8011114:	60f8      	str	r0, [r7, #12]
 8011116:	60b9      	str	r1, [r7, #8]
 8011118:	607a      	str	r2, [r7, #4]
 801111a:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801111c:	2300      	movs	r3, #0
 801111e:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8011120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011122:	9301      	str	r3, [sp, #4]
 8011124:	6a3b      	ldr	r3, [r7, #32]
 8011126:	9300      	str	r3, [sp, #0]
 8011128:	683b      	ldr	r3, [r7, #0]
 801112a:	687a      	ldr	r2, [r7, #4]
 801112c:	68b9      	ldr	r1, [r7, #8]
 801112e:	68f8      	ldr	r0, [r7, #12]
 8011130:	f7ff fe4d 	bl	8010dce <VL53L1_preset_mode_standard_ranging>
 8011134:	4603      	mov	r3, r0
 8011136:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8011138:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801113c:	2b00      	cmp	r3, #0
 801113e:	d105      	bne.n	801114c <VL53L1_preset_mode_standard_ranging_mm1_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 8011140:	68bb      	ldr	r3, [r7, #8]
 8011142:	2202      	movs	r2, #2
 8011144:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 8011146:	683b      	ldr	r3, [r7, #0]
 8011148:	223b      	movs	r2, #59	@ 0x3b
 801114a:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 801114c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011150:	4618      	mov	r0, r3
 8011152:	3718      	adds	r7, #24
 8011154:	46bd      	mov	sp, r7
 8011156:	bd80      	pop	{r7, pc}

08011158 <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8011158:	b580      	push	{r7, lr}
 801115a:	b088      	sub	sp, #32
 801115c:	af02      	add	r7, sp, #8
 801115e:	60f8      	str	r0, [r7, #12]
 8011160:	60b9      	str	r1, [r7, #8]
 8011162:	607a      	str	r2, [r7, #4]
 8011164:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8011166:	2300      	movs	r3, #0
 8011168:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 801116a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801116c:	9301      	str	r3, [sp, #4]
 801116e:	6a3b      	ldr	r3, [r7, #32]
 8011170:	9300      	str	r3, [sp, #0]
 8011172:	683b      	ldr	r3, [r7, #0]
 8011174:	687a      	ldr	r2, [r7, #4]
 8011176:	68b9      	ldr	r1, [r7, #8]
 8011178:	68f8      	ldr	r0, [r7, #12]
 801117a:	f7ff fe28 	bl	8010dce <VL53L1_preset_mode_standard_ranging>
 801117e:	4603      	mov	r3, r0
 8011180:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8011182:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d105      	bne.n	8011196 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 801118a:	68bb      	ldr	r3, [r7, #8]
 801118c:	2202      	movs	r2, #2
 801118e:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 8011190:	683b      	ldr	r3, [r7, #0]
 8011192:	225b      	movs	r2, #91	@ 0x5b
 8011194:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8011196:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801119a:	4618      	mov	r0, r3
 801119c:	3718      	adds	r7, #24
 801119e:	46bd      	mov	sp, r7
 80111a0:	bd80      	pop	{r7, pc}

080111a2 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80111a2:	b580      	push	{r7, lr}
 80111a4:	b088      	sub	sp, #32
 80111a6:	af02      	add	r7, sp, #8
 80111a8:	60f8      	str	r0, [r7, #12]
 80111aa:	60b9      	str	r1, [r7, #8]
 80111ac:	607a      	str	r2, [r7, #4]
 80111ae:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80111b0:	2300      	movs	r3, #0
 80111b2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 80111b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111b6:	9301      	str	r3, [sp, #4]
 80111b8:	6a3b      	ldr	r3, [r7, #32]
 80111ba:	9300      	str	r3, [sp, #0]
 80111bc:	683b      	ldr	r3, [r7, #0]
 80111be:	687a      	ldr	r2, [r7, #4]
 80111c0:	68b9      	ldr	r1, [r7, #8]
 80111c2:	68f8      	ldr	r0, [r7, #12]
 80111c4:	f7ff fe03 	bl	8010dce <VL53L1_preset_mode_standard_ranging>
 80111c8:	4603      	mov	r3, r0
 80111ca:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80111cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d11a      	bne.n	801120a <VL53L1_preset_mode_timed_ranging+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 80111d4:	683b      	ldr	r3, [r7, #0]
 80111d6:	2200      	movs	r2, #0
 80111d8:	749a      	strb	r2, [r3, #18]

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	2200      	movs	r2, #0
 80111de:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	22b1      	movs	r2, #177	@ 0xb1
 80111e4:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	2200      	movs	r2, #0
 80111ea:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	22d4      	movs	r2, #212	@ 0xd4
 80111f0:	721a      	strb	r2, [r3, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80111f8:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 80111fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111fc:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 8011200:	683b      	ldr	r3, [r7, #0]
 8011202:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 8011204:	6a3b      	ldr	r3, [r7, #32]
 8011206:	2240      	movs	r2, #64	@ 0x40
 8011208:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 801120a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801120e:	4618      	mov	r0, r3
 8011210:	3718      	adds	r7, #24
 8011212:	46bd      	mov	sp, r7
 8011214:	bd80      	pop	{r7, pc}

08011216 <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8011216:	b580      	push	{r7, lr}
 8011218:	b088      	sub	sp, #32
 801121a:	af02      	add	r7, sp, #8
 801121c:	60f8      	str	r0, [r7, #12]
 801121e:	60b9      	str	r1, [r7, #8]
 8011220:	607a      	str	r2, [r7, #4]
 8011222:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8011224:	2300      	movs	r3, #0
 8011226:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 8011228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801122a:	9301      	str	r3, [sp, #4]
 801122c:	6a3b      	ldr	r3, [r7, #32]
 801122e:	9300      	str	r3, [sp, #0]
 8011230:	683b      	ldr	r3, [r7, #0]
 8011232:	687a      	ldr	r2, [r7, #4]
 8011234:	68b9      	ldr	r1, [r7, #8]
 8011236:	68f8      	ldr	r0, [r7, #12]
 8011238:	f7ff fee7 	bl	801100a <VL53L1_preset_mode_standard_ranging_short_range>
 801123c:	4603      	mov	r3, r0
 801123e:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8011240:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d11a      	bne.n	801127e <VL53L1_preset_mode_timed_ranging_short_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8011248:	683b      	ldr	r3, [r7, #0]
 801124a:	2200      	movs	r2, #0
 801124c:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	2201      	movs	r2, #1
 8011252:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	2284      	movs	r2, #132	@ 0x84
 8011258:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	2201      	movs	r2, #1
 801125e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	22b1      	movs	r2, #177	@ 0xb1
 8011264:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 801126c:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 801126e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011270:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 8011274:	683b      	ldr	r3, [r7, #0]
 8011276:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 8011278:	6a3b      	ldr	r3, [r7, #32]
 801127a:	2240      	movs	r2, #64	@ 0x40
 801127c:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 801127e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011282:	4618      	mov	r0, r3
 8011284:	3718      	adds	r7, #24
 8011286:	46bd      	mov	sp, r7
 8011288:	bd80      	pop	{r7, pc}

0801128a <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 801128a:	b580      	push	{r7, lr}
 801128c:	b088      	sub	sp, #32
 801128e:	af02      	add	r7, sp, #8
 8011290:	60f8      	str	r0, [r7, #12]
 8011292:	60b9      	str	r1, [r7, #8]
 8011294:	607a      	str	r2, [r7, #4]
 8011296:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8011298:	2300      	movs	r3, #0
 801129a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 801129c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801129e:	9301      	str	r3, [sp, #4]
 80112a0:	6a3b      	ldr	r3, [r7, #32]
 80112a2:	9300      	str	r3, [sp, #0]
 80112a4:	683b      	ldr	r3, [r7, #0]
 80112a6:	687a      	ldr	r2, [r7, #4]
 80112a8:	68b9      	ldr	r1, [r7, #8]
 80112aa:	68f8      	ldr	r0, [r7, #12]
 80112ac:	f7ff feee 	bl	801108c <VL53L1_preset_mode_standard_ranging_long_range>
 80112b0:	4603      	mov	r3, r0
 80112b2:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80112b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d11a      	bne.n	80112f2 <VL53L1_preset_mode_timed_ranging_long_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 80112bc:	683b      	ldr	r3, [r7, #0]
 80112be:	2200      	movs	r2, #0
 80112c0:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	2200      	movs	r2, #0
 80112c6:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	2297      	movs	r2, #151	@ 0x97
 80112cc:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	2200      	movs	r2, #0
 80112d2:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	22b1      	movs	r2, #177	@ 0xb1
 80112d8:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80112e0:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 80112e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112e4:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 80112e8:	683b      	ldr	r3, [r7, #0]
 80112ea:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 80112ec:	6a3b      	ldr	r3, [r7, #32]
 80112ee:	2240      	movs	r2, #64	@ 0x40
 80112f0:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 80112f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80112f6:	4618      	mov	r0, r3
 80112f8:	3718      	adds	r7, #24
 80112fa:	46bd      	mov	sp, r7
 80112fc:	bd80      	pop	{r7, pc}

080112fe <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 80112fe:	b580      	push	{r7, lr}
 8011300:	b088      	sub	sp, #32
 8011302:	af02      	add	r7, sp, #8
 8011304:	60f8      	str	r0, [r7, #12]
 8011306:	60b9      	str	r1, [r7, #8]
 8011308:	607a      	str	r2, [r7, #4]
 801130a:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801130c:	2300      	movs	r3, #0
 801130e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 8011310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011312:	9301      	str	r3, [sp, #4]
 8011314:	6a3b      	ldr	r3, [r7, #32]
 8011316:	9300      	str	r3, [sp, #0]
 8011318:	683b      	ldr	r3, [r7, #0]
 801131a:	687a      	ldr	r2, [r7, #4]
 801131c:	68b9      	ldr	r1, [r7, #8]
 801131e:	68f8      	ldr	r0, [r7, #12]
 8011320:	f7ff ff3f 	bl	80111a2 <VL53L1_preset_mode_timed_ranging>
 8011324:	4603      	mov	r3, r0
 8011326:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8011328:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801132c:	2b00      	cmp	r3, #0
 801132e:	d106      	bne.n	801133e <VL53L1_preset_mode_low_power_auto_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 8011330:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011332:	6839      	ldr	r1, [r7, #0]
 8011334:	68b8      	ldr	r0, [r7, #8]
 8011336:	f000 ff19 	bl	801216c <VL53L1_config_low_power_auto_mode>
 801133a:	4603      	mov	r3, r0
 801133c:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 801133e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011342:	4618      	mov	r0, r3
 8011344:	3718      	adds	r7, #24
 8011346:	46bd      	mov	sp, r7
 8011348:	bd80      	pop	{r7, pc}

0801134a <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 801134a:	b580      	push	{r7, lr}
 801134c:	b088      	sub	sp, #32
 801134e:	af02      	add	r7, sp, #8
 8011350:	60f8      	str	r0, [r7, #12]
 8011352:	60b9      	str	r1, [r7, #8]
 8011354:	607a      	str	r2, [r7, #4]
 8011356:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8011358:	2300      	movs	r3, #0
 801135a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 801135c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801135e:	9301      	str	r3, [sp, #4]
 8011360:	6a3b      	ldr	r3, [r7, #32]
 8011362:	9300      	str	r3, [sp, #0]
 8011364:	683b      	ldr	r3, [r7, #0]
 8011366:	687a      	ldr	r2, [r7, #4]
 8011368:	68b9      	ldr	r1, [r7, #8]
 801136a:	68f8      	ldr	r0, [r7, #12]
 801136c:	f7ff ff53 	bl	8011216 <VL53L1_preset_mode_timed_ranging_short_range>
 8011370:	4603      	mov	r3, r0
 8011372:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8011374:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d106      	bne.n	801138a <VL53L1_preset_mode_low_power_auto_short_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 801137c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801137e:	6839      	ldr	r1, [r7, #0]
 8011380:	68b8      	ldr	r0, [r7, #8]
 8011382:	f000 fef3 	bl	801216c <VL53L1_config_low_power_auto_mode>
 8011386:	4603      	mov	r3, r0
 8011388:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 801138a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801138e:	4618      	mov	r0, r3
 8011390:	3718      	adds	r7, #24
 8011392:	46bd      	mov	sp, r7
 8011394:	bd80      	pop	{r7, pc}

08011396 <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8011396:	b580      	push	{r7, lr}
 8011398:	b088      	sub	sp, #32
 801139a:	af02      	add	r7, sp, #8
 801139c:	60f8      	str	r0, [r7, #12]
 801139e:	60b9      	str	r1, [r7, #8]
 80113a0:	607a      	str	r2, [r7, #4]
 80113a2:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80113a4:	2300      	movs	r3, #0
 80113a6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 80113a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113aa:	9301      	str	r3, [sp, #4]
 80113ac:	6a3b      	ldr	r3, [r7, #32]
 80113ae:	9300      	str	r3, [sp, #0]
 80113b0:	683b      	ldr	r3, [r7, #0]
 80113b2:	687a      	ldr	r2, [r7, #4]
 80113b4:	68b9      	ldr	r1, [r7, #8]
 80113b6:	68f8      	ldr	r0, [r7, #12]
 80113b8:	f7ff ff67 	bl	801128a <VL53L1_preset_mode_timed_ranging_long_range>
 80113bc:	4603      	mov	r3, r0
 80113be:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 80113c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d106      	bne.n	80113d6 <VL53L1_preset_mode_low_power_auto_long_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 80113c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80113ca:	6839      	ldr	r1, [r7, #0]
 80113cc:	68b8      	ldr	r0, [r7, #8]
 80113ce:	f000 fecd 	bl	801216c <VL53L1_config_low_power_auto_mode>
 80113d2:	4603      	mov	r3, r0
 80113d4:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 80113d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80113da:	4618      	mov	r0, r3
 80113dc:	3718      	adds	r7, #24
 80113de:	46bd      	mov	sp, r7
 80113e0:	bd80      	pop	{r7, pc}

080113e2 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80113e2:	b580      	push	{r7, lr}
 80113e4:	b088      	sub	sp, #32
 80113e6:	af02      	add	r7, sp, #8
 80113e8:	60f8      	str	r0, [r7, #12]
 80113ea:	60b9      	str	r1, [r7, #8]
 80113ec:	607a      	str	r2, [r7, #4]
 80113ee:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80113f0:	2300      	movs	r3, #0
 80113f2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 80113f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113f6:	9301      	str	r3, [sp, #4]
 80113f8:	6a3b      	ldr	r3, [r7, #32]
 80113fa:	9300      	str	r3, [sp, #0]
 80113fc:	683b      	ldr	r3, [r7, #0]
 80113fe:	687a      	ldr	r2, [r7, #4]
 8011400:	68b9      	ldr	r1, [r7, #8]
 8011402:	68f8      	ldr	r0, [r7, #12]
 8011404:	f7ff fce3 	bl	8010dce <VL53L1_preset_mode_standard_ranging>
 8011408:	4603      	mov	r3, r0
 801140a:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 801140c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011410:	2b00      	cmp	r3, #0
 8011412:	d116      	bne.n	8011442 <VL53L1_preset_mode_singleshot_ranging+0x60>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8011414:	683b      	ldr	r3, [r7, #0]
 8011416:	2200      	movs	r2, #0
 8011418:	749a      	strb	r2, [r3, #18]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	2200      	movs	r2, #0
 801141e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	22b1      	movs	r2, #177	@ 0xb1
 8011424:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	2200      	movs	r2, #0
 801142a:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	22d4      	movs	r2, #212	@ 0xd4
 8011430:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8011432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011434:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 8011438:	683b      	ldr	r3, [r7, #0]
 801143a:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 801143c:	6a3b      	ldr	r3, [r7, #32]
 801143e:	2210      	movs	r2, #16
 8011440:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 8011442:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011446:	4618      	mov	r0, r3
 8011448:	3718      	adds	r7, #24
 801144a:	46bd      	mov	sp, r7
 801144c:	bd80      	pop	{r7, pc}

0801144e <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 801144e:	b580      	push	{r7, lr}
 8011450:	b088      	sub	sp, #32
 8011452:	af02      	add	r7, sp, #8
 8011454:	60f8      	str	r0, [r7, #12]
 8011456:	60b9      	str	r1, [r7, #8]
 8011458:	607a      	str	r2, [r7, #4]
 801145a:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_OLT
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801145c:	2300      	movs	r3, #0
 801145e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8011460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011462:	9301      	str	r3, [sp, #4]
 8011464:	6a3b      	ldr	r3, [r7, #32]
 8011466:	9300      	str	r3, [sp, #0]
 8011468:	683b      	ldr	r3, [r7, #0]
 801146a:	687a      	ldr	r2, [r7, #4]
 801146c:	68b9      	ldr	r1, [r7, #8]
 801146e:	68f8      	ldr	r0, [r7, #12]
 8011470:	f7ff fcad 	bl	8010dce <VL53L1_preset_mode_standard_ranging>
 8011474:	4603      	mov	r3, r0
 8011476:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8011478:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d102      	bne.n	8011486 <VL53L1_preset_mode_olt+0x38>

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 8011480:	6a3b      	ldr	r3, [r7, #32]
 8011482:	2201      	movs	r2, #1
 8011484:	705a      	strb	r2, [r3, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
 8011486:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801148a:	4618      	mov	r0, r3
 801148c:	3718      	adds	r7, #24
 801148e:	46bd      	mov	sp, r7
 8011490:	bd80      	pop	{r7, pc}

08011492 <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 8011492:	b480      	push	{r7}
 8011494:	b085      	sub	sp, #20
 8011496:	af00      	add	r7, sp, #0
 8011498:	6078      	str	r0, [r7, #4]
	/**
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	2201      	movs	r2, #1
 80114a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	2202      	movs	r2, #2
 80114aa:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	220d      	movs	r2, #13
 80114b2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	f640 028e 	movw	r2, #2190	@ 0x88e
 80114bc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80114be:	bf00      	nop
 80114c0:	3714      	adds	r7, #20
 80114c2:	46bd      	mov	sp, r7
 80114c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c8:	4770      	bx	lr

080114ca <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 80114ca:	b480      	push	{r7}
 80114cc:	b085      	sub	sp, #20
 80114ce:	af00      	add	r7, sp, #0
 80114d0:	6078      	str	r0, [r7, #4]
 80114d2:	460b      	mov	r3, r1
 80114d4:	70fb      	strb	r3, [r7, #3]
	/**
	 * Initialise LL Driver state variables
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	332c      	adds	r3, #44	@ 0x2c
 80114de:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 80114e0:	68bb      	ldr	r3, [r7, #8]
 80114e2:	78fa      	ldrb	r2, [r7, #3]
 80114e4:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 80114e6:	68bb      	ldr	r3, [r7, #8]
 80114e8:	2200      	movs	r2, #0
 80114ea:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 80114ec:	68bb      	ldr	r3, [r7, #8]
 80114ee:	2202      	movs	r2, #2
 80114f0:	709a      	strb	r2, [r3, #2]
	pstate->cfg_timing_status = 0;
 80114f2:	68bb      	ldr	r3, [r7, #8]
 80114f4:	2200      	movs	r2, #0
 80114f6:	70da      	strb	r2, [r3, #3]

	pstate->rd_device_state   = device_state;
 80114f8:	68bb      	ldr	r3, [r7, #8]
 80114fa:	78fa      	ldrb	r2, [r7, #3]
 80114fc:	711a      	strb	r2, [r3, #4]
	pstate->rd_stream_count   = 0;
 80114fe:	68bb      	ldr	r3, [r7, #8]
 8011500:	2200      	movs	r2, #0
 8011502:	715a      	strb	r2, [r3, #5]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8011504:	68bb      	ldr	r3, [r7, #8]
 8011506:	2202      	movs	r2, #2
 8011508:	719a      	strb	r2, [r3, #6]
	pstate->rd_timing_status  = 0;
 801150a:	68bb      	ldr	r3, [r7, #8]
 801150c:	2200      	movs	r2, #0
 801150e:	71da      	strb	r2, [r3, #7]

}
 8011510:	bf00      	nop
 8011512:	3714      	adds	r7, #20
 8011514:	46bd      	mov	sp, r7
 8011516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151a:	4770      	bx	lr

0801151c <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 801151c:	b480      	push	{r7}
 801151e:	b087      	sub	sp, #28
 8011520:	af00      	add	r7, sp, #0
 8011522:	6078      	str	r0, [r7, #4]
	 * VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC
	 * VL53L1_DEVICESTATE_RANGING_GATHER_DATA
	 * VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA
	 */

	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 8011524:	2300      	movs	r3, #0
 8011526:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 801152c:	693b      	ldr	r3, [r7, #16]
 801152e:	332c      	adds	r3, #44	@ 0x2c
 8011530:	60fb      	str	r3, [r7, #12]

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 8011532:	693b      	ldr	r3, [r7, #16]
 8011534:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 8011538:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801153c:	2b00      	cmp	r3, #0
 801153e:	d10c      	bne.n	801155a <VL53L1_update_ll_driver_rd_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	2203      	movs	r2, #3
 8011544:	711a      	strb	r2, [r3, #4]
		pstate->rd_stream_count  = 0;
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	2200      	movs	r2, #0
 801154a:	715a      	strb	r2, [r3, #5]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	2202      	movs	r2, #2
 8011550:	719a      	strb	r2, [r3, #6]
		pstate->rd_timing_status = 0;
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	2200      	movs	r2, #0
 8011556:	71da      	strb	r2, [r3, #7]
 8011558:	e060      	b.n	801161c <VL53L1_update_ll_driver_rd_state+0x100>

		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	795b      	ldrb	r3, [r3, #5]
 801155e:	2bff      	cmp	r3, #255	@ 0xff
 8011560:	d103      	bne.n	801156a <VL53L1_update_ll_driver_rd_state+0x4e>
			pstate->rd_stream_count = 0x80;
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	2280      	movs	r2, #128	@ 0x80
 8011566:	715a      	strb	r2, [r3, #5]
 8011568:	e005      	b.n	8011576 <VL53L1_update_ll_driver_rd_state+0x5a>
		} else {
			pstate->rd_stream_count++;
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	795b      	ldrb	r3, [r3, #5]
 801156e:	3301      	adds	r3, #1
 8011570:	b2da      	uxtb	r2, r3
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	715a      	strb	r2, [r3, #5]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	799b      	ldrb	r3, [r3, #6]
 801157a:	f083 0302 	eor.w	r3, r3, #2
 801157e:	b2da      	uxtb	r2, r3
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	719a      	strb	r2, [r3, #6]

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	791b      	ldrb	r3, [r3, #4]
 8011588:	3b03      	subs	r3, #3
 801158a:	2b05      	cmp	r3, #5
 801158c:	d839      	bhi.n	8011602 <VL53L1_update_ll_driver_rd_state+0xe6>
 801158e:	a201      	add	r2, pc, #4	@ (adr r2, 8011594 <VL53L1_update_ll_driver_rd_state+0x78>)
 8011590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011594:	080115ad 	.word	0x080115ad
 8011598:	08011603 	.word	0x08011603
 801159c:	08011603 	.word	0x08011603
 80115a0:	080115d7 	.word	0x080115d7
 80115a4:	080115e5 	.word	0x080115e5
 80115a8:	080115ed 	.word	0x080115ed

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 80115ac:	693b      	ldr	r3, [r7, #16]
 80115ae:	f893 31c6 	ldrb.w	r3, [r3, #454]	@ 0x1c6
 80115b2:	f003 0302 	and.w	r3, r3, #2
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	dd03      	ble.n	80115c2 <VL53L1_update_ll_driver_rd_state+0xa6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	2206      	movs	r2, #6
 80115be:	711a      	strb	r2, [r3, #4]
 80115c0:	e002      	b.n	80115c8 <VL53L1_update_ll_driver_rd_state+0xac>
					VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				pstate->rd_device_state =
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	2208      	movs	r2, #8
 80115c6:	711a      	strb	r2, [r3, #4]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			}

			pstate->rd_stream_count  = 0;
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	2200      	movs	r2, #0
 80115cc:	715a      	strb	r2, [r3, #5]
			pstate->rd_timing_status = 0;
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	2200      	movs	r2, #0
 80115d2:	71da      	strb	r2, [r3, #7]

		break;
 80115d4:	e022      	b.n	801161c <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:

			pstate->rd_stream_count = 0;
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	2200      	movs	r2, #0
 80115da:	715a      	strb	r2, [r3, #5]
			pstate->rd_device_state =
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	2208      	movs	r2, #8
 80115e0:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 80115e2:	e01b      	b.n	801161c <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:

			pstate->rd_device_state =
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	2208      	movs	r2, #8
 80115e8:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 80115ea:	e017      	b.n	801161c <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:

			pstate->rd_timing_status ^= 0x01;
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	79db      	ldrb	r3, [r3, #7]
 80115f0:	f083 0301 	eor.w	r3, r3, #1
 80115f4:	b2da      	uxtb	r2, r3
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	71da      	strb	r2, [r3, #7]

			pstate->rd_device_state =
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	2208      	movs	r2, #8
 80115fe:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 8011600:	e00c      	b.n	801161c <VL53L1_update_ll_driver_rd_state+0x100>

		default:

			pstate->rd_device_state  =
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	2203      	movs	r2, #3
 8011606:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	2200      	movs	r2, #0
 801160c:	715a      	strb	r2, [r3, #5]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	2202      	movs	r2, #2
 8011612:	719a      	strb	r2, [r3, #6]
			pstate->rd_timing_status = 0;
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	2200      	movs	r2, #0
 8011618:	71da      	strb	r2, [r3, #7]

		break;
 801161a:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 801161c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011620:	4618      	mov	r0, r3
 8011622:	371c      	adds	r7, #28
 8011624:	46bd      	mov	sp, r7
 8011626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162a:	4770      	bx	lr

0801162c <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 801162c:	b480      	push	{r7}
 801162e:	b089      	sub	sp, #36	@ 0x24
 8011630:	af00      	add	r7, sp, #0
 8011632:	6078      	str	r0, [r7, #4]
	 * matches the state and stream count received from the device
	 *
	 * Check is only use in back to back mode
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 8011634:	2300      	movs	r3, #0
 8011636:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 801163c:	69bb      	ldr	r3, [r7, #24]
 801163e:	332c      	adds	r3, #44	@ 0x2c
 8011640:	617b      	str	r3, [r7, #20]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 8011642:	69bb      	ldr	r3, [r7, #24]
 8011644:	f503 73e7 	add.w	r3, r3, #462	@ 0x1ce
 8011648:	613b      	str	r3, [r7, #16]

	uint8_t   device_range_status   = 0;
 801164a:	2300      	movs	r3, #0
 801164c:	73fb      	strb	r3, [r7, #15]
	uint8_t   device_stream_count   = 0;
 801164e:	2300      	movs	r3, #0
 8011650:	73bb      	strb	r3, [r7, #14]
	uint8_t   device_gph_id         = 0;
 8011652:	2300      	movs	r3, #0
 8011654:	737b      	strb	r3, [r7, #13]
#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	device_range_status =
			psys_results->result__range_status &
 8011656:	693b      	ldr	r3, [r7, #16]
 8011658:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 801165a:	f003 031f 	and.w	r3, r3, #31
 801165e:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 8011660:	693b      	ldr	r3, [r7, #16]
 8011662:	78db      	ldrb	r3, [r3, #3]
 8011664:	73bb      	strb	r3, [r7, #14]

	/* load the correct GPH ID */
	device_gph_id = (psys_results->result__interrupt_status &
 8011666:	693b      	ldr	r3, [r7, #16]
 8011668:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 801166a:	111b      	asrs	r3, r3, #4
 801166c:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 801166e:	f003 0302 	and.w	r3, r3, #2
 8011672:	737b      	strb	r3, [r7, #13]

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 8011674:	69bb      	ldr	r3, [r7, #24]
 8011676:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 801167a:	f003 0320 	and.w	r3, r3, #32
 801167e:	2b00      	cmp	r3, #0
 8011680:	d017      	beq.n	80116b2 <VL53L1_check_ll_driver_rd_state+0x86>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 8011682:	697b      	ldr	r3, [r7, #20]
 8011684:	791b      	ldrb	r3, [r3, #4]
 8011686:	2b06      	cmp	r3, #6
 8011688:	d105      	bne.n	8011696 <VL53L1_check_ll_driver_rd_state+0x6a>
			VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

			if (device_range_status !=
 801168a:	7bfb      	ldrb	r3, [r7, #15]
 801168c:	2b12      	cmp	r3, #18
 801168e:	d010      	beq.n	80116b2 <VL53L1_check_ll_driver_rd_state+0x86>
				VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 8011690:	23ef      	movs	r3, #239	@ 0xef
 8011692:	77fb      	strb	r3, [r7, #31]
 8011694:	e00d      	b.n	80116b2 <VL53L1_check_ll_driver_rd_state+0x86>
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 8011696:	697b      	ldr	r3, [r7, #20]
 8011698:	795b      	ldrb	r3, [r3, #5]
 801169a:	7bba      	ldrb	r2, [r7, #14]
 801169c:	429a      	cmp	r2, r3
 801169e:	d001      	beq.n	80116a4 <VL53L1_check_ll_driver_rd_state+0x78>
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 80116a0:	23ee      	movs	r3, #238	@ 0xee
 80116a2:	77fb      	strb	r3, [r7, #31]

		/*
		 * Check Read state GPH ID
		 */

		if (pstate->rd_gph_id != device_gph_id) {
 80116a4:	697b      	ldr	r3, [r7, #20]
 80116a6:	799b      	ldrb	r3, [r3, #6]
 80116a8:	7b7a      	ldrb	r2, [r7, #13]
 80116aa:	429a      	cmp	r2, r3
 80116ac:	d001      	beq.n	80116b2 <VL53L1_check_ll_driver_rd_state+0x86>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 80116ae:	23ed      	movs	r3, #237	@ 0xed
 80116b0:	77fb      	strb	r3, [r7, #31]

	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
 80116b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80116b6:	4618      	mov	r0, r3
 80116b8:	3724      	adds	r7, #36	@ 0x24
 80116ba:	46bd      	mov	sp, r7
 80116bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c0:	4770      	bx	lr

080116c2 <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 80116c2:	b480      	push	{r7}
 80116c4:	b087      	sub	sp, #28
 80116c6:	af00      	add	r7, sp, #0
 80116c8:	6078      	str	r0, [r7, #4]
	/**
	 * State machine for configuration device state
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 80116ca:	2300      	movs	r3, #0
 80116cc:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t  *pdev =
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 80116d2:	693b      	ldr	r3, [r7, #16]
 80116d4:	332c      	adds	r3, #44	@ 0x2c
 80116d6:	60fb      	str	r3, [r7, #12]
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 80116d8:	693b      	ldr	r3, [r7, #16]
 80116da:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 80116de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d10c      	bne.n	8011700 <VL53L1_update_ll_driver_cfg_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	2203      	movs	r2, #3
 80116ea:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	2200      	movs	r2, #0
 80116f0:	705a      	strb	r2, [r3, #1]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	2202      	movs	r2, #2
 80116f6:	709a      	strb	r2, [r3, #2]
		pstate->cfg_timing_status = 0;
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	2200      	movs	r2, #0
 80116fc:	70da      	strb	r2, [r3, #3]
 80116fe:	e03e      	b.n	801177e <VL53L1_update_ll_driver_cfg_state+0xbc>

		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	785b      	ldrb	r3, [r3, #1]
 8011704:	2bff      	cmp	r3, #255	@ 0xff
 8011706:	d103      	bne.n	8011710 <VL53L1_update_ll_driver_cfg_state+0x4e>
			pstate->cfg_stream_count = 0x80;
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	2280      	movs	r2, #128	@ 0x80
 801170c:	705a      	strb	r2, [r3, #1]
 801170e:	e005      	b.n	801171c <VL53L1_update_ll_driver_cfg_state+0x5a>
		} else {
			pstate->cfg_stream_count++;
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	785b      	ldrb	r3, [r3, #1]
 8011714:	3301      	adds	r3, #1
 8011716:	b2da      	uxtb	r2, r3
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	705a      	strb	r2, [r3, #1]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	789b      	ldrb	r3, [r3, #2]
 8011720:	f083 0302 	eor.w	r3, r3, #2
 8011724:	b2da      	uxtb	r2, r3
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	709a      	strb	r2, [r3, #2]

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	781b      	ldrb	r3, [r3, #0]
 801172e:	2b03      	cmp	r3, #3
 8011730:	d002      	beq.n	8011738 <VL53L1_update_ll_driver_cfg_state+0x76>
 8011732:	2b04      	cmp	r3, #4
 8011734:	d00e      	beq.n	8011754 <VL53L1_update_ll_driver_cfg_state+0x92>
 8011736:	e015      	b.n	8011764 <VL53L1_update_ll_driver_cfg_state+0xa2>

		case VL53L1_DEVICESTATE_SW_STANDBY:

			pstate->cfg_timing_status ^= 0x01;
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	78db      	ldrb	r3, [r3, #3]
 801173c:	f083 0301 	eor.w	r3, r3, #1
 8011740:	b2da      	uxtb	r2, r3
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	70da      	strb	r2, [r3, #3]
			pstate->cfg_stream_count = 1;
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	2201      	movs	r2, #1
 801174a:	705a      	strb	r2, [r3, #1]

			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	2204      	movs	r2, #4
 8011750:	701a      	strb	r2, [r3, #0]
		break;
 8011752:	e014      	b.n	801177e <VL53L1_update_ll_driver_cfg_state+0xbc>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:

			pstate->cfg_timing_status ^= 0x01;
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	78db      	ldrb	r3, [r3, #3]
 8011758:	f083 0301 	eor.w	r3, r3, #1
 801175c:	b2da      	uxtb	r2, r3
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	70da      	strb	r2, [r3, #3]

		break;
 8011762:	e00c      	b.n	801177e <VL53L1_update_ll_driver_cfg_state+0xbc>

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	2203      	movs	r2, #3
 8011768:	701a      	strb	r2, [r3, #0]
			pstate->cfg_stream_count = 0;
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	2200      	movs	r2, #0
 801176e:	705a      	strb	r2, [r3, #1]
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	2202      	movs	r2, #2
 8011774:	709a      	strb	r2, [r3, #2]
			pstate->cfg_timing_status = 0;
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	2200      	movs	r2, #0
 801177a:	70da      	strb	r2, [r3, #3]

		break;
 801177c:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 801177e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011782:	4618      	mov	r0, r3
 8011784:	371c      	adds	r7, #28
 8011786:	46bd      	mov	sp, r7
 8011788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178c:	4770      	bx	lr

0801178e <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 801178e:	b480      	push	{r7}
 8011790:	b083      	sub	sp, #12
 8011792:	af00      	add	r7, sp, #0
 8011794:	6078      	str	r0, [r7, #4]
 8011796:	6039      	str	r1, [r7, #0]
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	7c1a      	ldrb	r2, [r3, #16]
 801179c:	683b      	ldr	r3, [r7, #0]
 801179e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 80117a0:	683b      	ldr	r3, [r7, #0]
 80117a2:	3301      	adds	r3, #1
 80117a4:	687a      	ldr	r2, [r7, #4]
 80117a6:	7c52      	ldrb	r2, [r2, #17]
 80117a8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 80117aa:	683b      	ldr	r3, [r7, #0]
 80117ac:	3302      	adds	r3, #2
 80117ae:	687a      	ldr	r2, [r7, #4]
 80117b0:	7c92      	ldrb	r2, [r2, #18]
 80117b2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 80117b4:	683b      	ldr	r3, [r7, #0]
 80117b6:	3303      	adds	r3, #3
 80117b8:	687a      	ldr	r2, [r7, #4]
 80117ba:	7cd2      	ldrb	r2, [r2, #19]
 80117bc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 80117be:	683b      	ldr	r3, [r7, #0]
 80117c0:	3304      	adds	r3, #4
 80117c2:	687a      	ldr	r2, [r7, #4]
 80117c4:	7d12      	ldrb	r2, [r2, #20]
 80117c6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 80117c8:	683b      	ldr	r3, [r7, #0]
 80117ca:	3305      	adds	r3, #5
 80117cc:	687a      	ldr	r2, [r7, #4]
 80117ce:	7d52      	ldrb	r2, [r2, #21]
 80117d0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 80117d2:	683b      	ldr	r3, [r7, #0]
 80117d4:	3306      	adds	r3, #6
 80117d6:	687a      	ldr	r2, [r7, #4]
 80117d8:	7d92      	ldrb	r2, [r2, #22]
 80117da:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 80117dc:	683b      	ldr	r3, [r7, #0]
 80117de:	3307      	adds	r3, #7
 80117e0:	687a      	ldr	r2, [r7, #4]
 80117e2:	7dd2      	ldrb	r2, [r2, #23]
 80117e4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 80117e6:	683b      	ldr	r3, [r7, #0]
 80117e8:	3308      	adds	r3, #8
 80117ea:	687a      	ldr	r2, [r7, #4]
 80117ec:	7e12      	ldrb	r2, [r2, #24]
 80117ee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 80117f0:	683b      	ldr	r3, [r7, #0]
 80117f2:	3309      	adds	r3, #9
 80117f4:	687a      	ldr	r2, [r7, #4]
 80117f6:	7e52      	ldrb	r2, [r2, #25]
 80117f8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 80117fa:	683b      	ldr	r3, [r7, #0]
 80117fc:	330a      	adds	r3, #10
 80117fe:	687a      	ldr	r2, [r7, #4]
 8011800:	7e92      	ldrb	r2, [r2, #26]
 8011802:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 8011804:	683b      	ldr	r3, [r7, #0]
 8011806:	330b      	adds	r3, #11
 8011808:	687a      	ldr	r2, [r7, #4]
 801180a:	7ed2      	ldrb	r2, [r2, #27]
 801180c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 801180e:	683b      	ldr	r3, [r7, #0]
 8011810:	330c      	adds	r3, #12
 8011812:	687a      	ldr	r2, [r7, #4]
 8011814:	7f12      	ldrb	r2, [r2, #28]
 8011816:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 8011818:	683b      	ldr	r3, [r7, #0]
 801181a:	330d      	adds	r3, #13
 801181c:	687a      	ldr	r2, [r7, #4]
 801181e:	7f52      	ldrb	r2, [r2, #29]
 8011820:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 8011822:	683b      	ldr	r3, [r7, #0]
 8011824:	330e      	adds	r3, #14
 8011826:	687a      	ldr	r2, [r7, #4]
 8011828:	7f92      	ldrb	r2, [r2, #30]
 801182a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 801182c:	683b      	ldr	r3, [r7, #0]
 801182e:	330f      	adds	r3, #15
 8011830:	687a      	ldr	r2, [r7, #4]
 8011832:	7fd2      	ldrb	r2, [r2, #31]
 8011834:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 8011836:	683b      	ldr	r3, [r7, #0]
 8011838:	3310      	adds	r3, #16
 801183a:	687a      	ldr	r2, [r7, #4]
 801183c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8011840:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 8011842:	683b      	ldr	r3, [r7, #0]
 8011844:	3311      	adds	r3, #17
 8011846:	687a      	ldr	r2, [r7, #4]
 8011848:	f892 2021 	ldrb.w	r2, [r2, #33]	@ 0x21
 801184c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 801184e:	683b      	ldr	r3, [r7, #0]
 8011850:	3312      	adds	r3, #18
 8011852:	687a      	ldr	r2, [r7, #4]
 8011854:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
 8011858:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 801185a:	683b      	ldr	r3, [r7, #0]
 801185c:	3313      	adds	r3, #19
 801185e:	687a      	ldr	r2, [r7, #4]
 8011860:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 8011864:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 8011866:	683b      	ldr	r3, [r7, #0]
 8011868:	3314      	adds	r3, #20
 801186a:	687a      	ldr	r2, [r7, #4]
 801186c:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8011870:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 8011872:	683b      	ldr	r3, [r7, #0]
 8011874:	3315      	adds	r3, #21
 8011876:	687a      	ldr	r2, [r7, #4]
 8011878:	f892 2025 	ldrb.w	r2, [r2, #37]	@ 0x25
 801187c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 801187e:	683b      	ldr	r3, [r7, #0]
 8011880:	3316      	adds	r3, #22
 8011882:	687a      	ldr	r2, [r7, #4]
 8011884:	f892 2026 	ldrb.w	r2, [r2, #38]	@ 0x26
 8011888:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 801188a:	683b      	ldr	r3, [r7, #0]
 801188c:	3317      	adds	r3, #23
 801188e:	687a      	ldr	r2, [r7, #4]
 8011890:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 8011894:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 8011896:	683b      	ldr	r3, [r7, #0]
 8011898:	3318      	adds	r3, #24
 801189a:	687a      	ldr	r2, [r7, #4]
 801189c:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 80118a0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 80118a2:	683b      	ldr	r3, [r7, #0]
 80118a4:	3319      	adds	r3, #25
 80118a6:	687a      	ldr	r2, [r7, #4]
 80118a8:	f892 2029 	ldrb.w	r2, [r2, #41]	@ 0x29
 80118ac:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 80118ae:	683b      	ldr	r3, [r7, #0]
 80118b0:	331a      	adds	r3, #26
 80118b2:	687a      	ldr	r2, [r7, #4]
 80118b4:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
 80118b8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 80118ba:	683b      	ldr	r3, [r7, #0]
 80118bc:	331b      	adds	r3, #27
 80118be:	687a      	ldr	r2, [r7, #4]
 80118c0:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
 80118c4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 80118c6:	683b      	ldr	r3, [r7, #0]
 80118c8:	331c      	adds	r3, #28
 80118ca:	687a      	ldr	r2, [r7, #4]
 80118cc:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 80118d0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 80118d2:	683b      	ldr	r3, [r7, #0]
 80118d4:	331d      	adds	r3, #29
 80118d6:	687a      	ldr	r2, [r7, #4]
 80118d8:	f892 202d 	ldrb.w	r2, [r2, #45]	@ 0x2d
 80118dc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 80118de:	683b      	ldr	r3, [r7, #0]
 80118e0:	331e      	adds	r3, #30
 80118e2:	687a      	ldr	r2, [r7, #4]
 80118e4:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 80118e8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 80118ea:	683b      	ldr	r3, [r7, #0]
 80118ec:	331f      	adds	r3, #31
 80118ee:	687a      	ldr	r2, [r7, #4]
 80118f0:	f892 202f 	ldrb.w	r2, [r2, #47]	@ 0x2f
 80118f4:	701a      	strb	r2, [r3, #0]
}
 80118f6:	bf00      	nop
 80118f8:	370c      	adds	r7, #12
 80118fa:	46bd      	mov	sp, r7
 80118fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011900:	4770      	bx	lr

08011902 <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8011902:	b480      	push	{r7}
 8011904:	b085      	sub	sp, #20
 8011906:	af00      	add	r7, sp, #0
 8011908:	4603      	mov	r3, r0
 801190a:	603a      	str	r2, [r7, #0]
 801190c:	80fb      	strh	r3, [r7, #6]
 801190e:	460b      	mov	r3, r1
 8011910:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a uint16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 8011912:	2300      	movs	r3, #0
 8011914:	81fb      	strh	r3, [r7, #14]
	uint16_t   data = 0;
 8011916:	2300      	movs	r3, #0
 8011918:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 801191a:	88fb      	ldrh	r3, [r7, #6]
 801191c:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 801191e:	2300      	movs	r3, #0
 8011920:	81fb      	strh	r3, [r7, #14]
 8011922:	e00e      	b.n	8011942 <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8011924:	88ba      	ldrh	r2, [r7, #4]
 8011926:	89fb      	ldrh	r3, [r7, #14]
 8011928:	1ad3      	subs	r3, r2, r3
 801192a:	3b01      	subs	r3, #1
 801192c:	683a      	ldr	r2, [r7, #0]
 801192e:	4413      	add	r3, r2
 8011930:	89ba      	ldrh	r2, [r7, #12]
 8011932:	b2d2      	uxtb	r2, r2
 8011934:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 8011936:	89bb      	ldrh	r3, [r7, #12]
 8011938:	0a1b      	lsrs	r3, r3, #8
 801193a:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 801193c:	89fb      	ldrh	r3, [r7, #14]
 801193e:	3301      	adds	r3, #1
 8011940:	81fb      	strh	r3, [r7, #14]
 8011942:	89fa      	ldrh	r2, [r7, #14]
 8011944:	88bb      	ldrh	r3, [r7, #4]
 8011946:	429a      	cmp	r2, r3
 8011948:	d3ec      	bcc.n	8011924 <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 801194a:	bf00      	nop
 801194c:	bf00      	nop
 801194e:	3714      	adds	r7, #20
 8011950:	46bd      	mov	sp, r7
 8011952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011956:	4770      	bx	lr

08011958 <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8011958:	b480      	push	{r7}
 801195a:	b085      	sub	sp, #20
 801195c:	af00      	add	r7, sp, #0
 801195e:	4603      	mov	r3, r0
 8011960:	6039      	str	r1, [r7, #0]
 8011962:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;
 8011964:	2300      	movs	r3, #0
 8011966:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0) {
 8011968:	e00b      	b.n	8011982 <VL53L1_i2c_decode_uint16_t+0x2a>
		value = (value << 8) | (uint16_t)*pbuffer++;
 801196a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801196e:	021b      	lsls	r3, r3, #8
 8011970:	b21a      	sxth	r2, r3
 8011972:	683b      	ldr	r3, [r7, #0]
 8011974:	1c59      	adds	r1, r3, #1
 8011976:	6039      	str	r1, [r7, #0]
 8011978:	781b      	ldrb	r3, [r3, #0]
 801197a:	b21b      	sxth	r3, r3
 801197c:	4313      	orrs	r3, r2
 801197e:	b21b      	sxth	r3, r3
 8011980:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 8011982:	88fb      	ldrh	r3, [r7, #6]
 8011984:	1e5a      	subs	r2, r3, #1
 8011986:	80fa      	strh	r2, [r7, #6]
 8011988:	2b00      	cmp	r3, #0
 801198a:	d1ee      	bne.n	801196a <VL53L1_i2c_decode_uint16_t+0x12>
	}

	return value;
 801198c:	89fb      	ldrh	r3, [r7, #14]
}
 801198e:	4618      	mov	r0, r3
 8011990:	3714      	adds	r7, #20
 8011992:	46bd      	mov	sp, r7
 8011994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011998:	4770      	bx	lr

0801199a <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 801199a:	b480      	push	{r7}
 801199c:	b085      	sub	sp, #20
 801199e:	af00      	add	r7, sp, #0
 80119a0:	4603      	mov	r3, r0
 80119a2:	603a      	str	r2, [r7, #0]
 80119a4:	80fb      	strh	r3, [r7, #6]
 80119a6:	460b      	mov	r3, r1
 80119a8:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a int16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 80119aa:	2300      	movs	r3, #0
 80119ac:	81fb      	strh	r3, [r7, #14]
	int16_t    data = 0;
 80119ae:	2300      	movs	r3, #0
 80119b0:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 80119b2:	88fb      	ldrh	r3, [r7, #6]
 80119b4:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 80119b6:	2300      	movs	r3, #0
 80119b8:	81fb      	strh	r3, [r7, #14]
 80119ba:	e00f      	b.n	80119dc <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 80119bc:	88ba      	ldrh	r2, [r7, #4]
 80119be:	89fb      	ldrh	r3, [r7, #14]
 80119c0:	1ad3      	subs	r3, r2, r3
 80119c2:	3b01      	subs	r3, #1
 80119c4:	683a      	ldr	r2, [r7, #0]
 80119c6:	4413      	add	r3, r2
 80119c8:	89ba      	ldrh	r2, [r7, #12]
 80119ca:	b2d2      	uxtb	r2, r2
 80119cc:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 80119ce:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80119d2:	121b      	asrs	r3, r3, #8
 80119d4:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 80119d6:	89fb      	ldrh	r3, [r7, #14]
 80119d8:	3301      	adds	r3, #1
 80119da:	81fb      	strh	r3, [r7, #14]
 80119dc:	89fa      	ldrh	r2, [r7, #14]
 80119de:	88bb      	ldrh	r3, [r7, #4]
 80119e0:	429a      	cmp	r2, r3
 80119e2:	d3eb      	bcc.n	80119bc <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 80119e4:	bf00      	nop
 80119e6:	bf00      	nop
 80119e8:	3714      	adds	r7, #20
 80119ea:	46bd      	mov	sp, r7
 80119ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f0:	4770      	bx	lr

080119f2 <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80119f2:	b480      	push	{r7}
 80119f4:	b085      	sub	sp, #20
 80119f6:	af00      	add	r7, sp, #0
 80119f8:	4603      	mov	r3, r0
 80119fa:	6039      	str	r1, [r7, #0]
 80119fc:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int16_t    value = 0x00;
 80119fe:	2300      	movs	r3, #0
 8011a00:	81fb      	strh	r3, [r7, #14]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 8011a02:	683b      	ldr	r3, [r7, #0]
 8011a04:	781b      	ldrb	r3, [r3, #0]
 8011a06:	b25b      	sxtb	r3, r3
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	da0d      	bge.n	8011a28 <VL53L1_i2c_decode_int16_t+0x36>
		value = 0xFFFF;
 8011a0c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011a10:	81fb      	strh	r3, [r7, #14]
	}

	while (count-- > 0) {
 8011a12:	e009      	b.n	8011a28 <VL53L1_i2c_decode_int16_t+0x36>
		value = (value << 8) | (int16_t)*pbuffer++;
 8011a14:	89fb      	ldrh	r3, [r7, #14]
 8011a16:	021b      	lsls	r3, r3, #8
 8011a18:	b21a      	sxth	r2, r3
 8011a1a:	683b      	ldr	r3, [r7, #0]
 8011a1c:	1c59      	adds	r1, r3, #1
 8011a1e:	6039      	str	r1, [r7, #0]
 8011a20:	781b      	ldrb	r3, [r3, #0]
 8011a22:	b21b      	sxth	r3, r3
 8011a24:	4313      	orrs	r3, r2
 8011a26:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 8011a28:	88fb      	ldrh	r3, [r7, #6]
 8011a2a:	1e5a      	subs	r2, r3, #1
 8011a2c:	80fa      	strh	r2, [r7, #6]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d1f0      	bne.n	8011a14 <VL53L1_i2c_decode_int16_t+0x22>
	}

	return value;
 8011a32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8011a36:	4618      	mov	r0, r3
 8011a38:	3714      	adds	r7, #20
 8011a3a:	46bd      	mov	sp, r7
 8011a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a40:	4770      	bx	lr

08011a42 <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8011a42:	b480      	push	{r7}
 8011a44:	b087      	sub	sp, #28
 8011a46:	af00      	add	r7, sp, #0
 8011a48:	60f8      	str	r0, [r7, #12]
 8011a4a:	460b      	mov	r3, r1
 8011a4c:	607a      	str	r2, [r7, #4]
 8011a4e:	817b      	strh	r3, [r7, #10]
	/*
	 * Encodes a uint32_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 8011a50:	2300      	movs	r3, #0
 8011a52:	82fb      	strh	r3, [r7, #22]
	uint32_t   data = 0;
 8011a54:	2300      	movs	r3, #0
 8011a56:	613b      	str	r3, [r7, #16]

	data =  ip_value;
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count ; i++) {
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	82fb      	strh	r3, [r7, #22]
 8011a60:	e00e      	b.n	8011a80 <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8011a62:	897a      	ldrh	r2, [r7, #10]
 8011a64:	8afb      	ldrh	r3, [r7, #22]
 8011a66:	1ad3      	subs	r3, r2, r3
 8011a68:	3b01      	subs	r3, #1
 8011a6a:	687a      	ldr	r2, [r7, #4]
 8011a6c:	4413      	add	r3, r2
 8011a6e:	693a      	ldr	r2, [r7, #16]
 8011a70:	b2d2      	uxtb	r2, r2
 8011a72:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 8011a74:	693b      	ldr	r3, [r7, #16]
 8011a76:	0a1b      	lsrs	r3, r3, #8
 8011a78:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count ; i++) {
 8011a7a:	8afb      	ldrh	r3, [r7, #22]
 8011a7c:	3301      	adds	r3, #1
 8011a7e:	82fb      	strh	r3, [r7, #22]
 8011a80:	8afa      	ldrh	r2, [r7, #22]
 8011a82:	897b      	ldrh	r3, [r7, #10]
 8011a84:	429a      	cmp	r2, r3
 8011a86:	d3ec      	bcc.n	8011a62 <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 8011a88:	bf00      	nop
 8011a8a:	bf00      	nop
 8011a8c:	371c      	adds	r7, #28
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a94:	4770      	bx	lr

08011a96 <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8011a96:	b480      	push	{r7}
 8011a98:	b085      	sub	sp, #20
 8011a9a:	af00      	add	r7, sp, #0
 8011a9c:	4603      	mov	r3, r0
 8011a9e:	6039      	str	r1, [r7, #0]
 8011aa0:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t   value = 0x00;
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	60fb      	str	r3, [r7, #12]

	while (count-- > 0) {
 8011aa6:	e007      	b.n	8011ab8 <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	021a      	lsls	r2, r3, #8
 8011aac:	683b      	ldr	r3, [r7, #0]
 8011aae:	1c59      	adds	r1, r3, #1
 8011ab0:	6039      	str	r1, [r7, #0]
 8011ab2:	781b      	ldrb	r3, [r3, #0]
 8011ab4:	4313      	orrs	r3, r2
 8011ab6:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 8011ab8:	88fb      	ldrh	r3, [r7, #6]
 8011aba:	1e5a      	subs	r2, r3, #1
 8011abc:	80fa      	strh	r2, [r7, #6]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d1f2      	bne.n	8011aa8 <VL53L1_i2c_decode_uint32_t+0x12>
	}

	return value;
 8011ac2:	68fb      	ldr	r3, [r7, #12]
}
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	3714      	adds	r7, #20
 8011ac8:	46bd      	mov	sp, r7
 8011aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ace:	4770      	bx	lr

08011ad0 <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8011ad0:	b480      	push	{r7}
 8011ad2:	b085      	sub	sp, #20
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	4603      	mov	r3, r0
 8011ad8:	6039      	str	r1, [r7, #0]
 8011ada:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int32_t    value = 0x00;
 8011adc:	2300      	movs	r3, #0
 8011ade:	60fb      	str	r3, [r7, #12]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 8011ae0:	683b      	ldr	r3, [r7, #0]
 8011ae2:	781b      	ldrb	r3, [r3, #0]
 8011ae4:	b25b      	sxtb	r3, r3
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	da0b      	bge.n	8011b02 <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 8011aea:	f04f 33ff 	mov.w	r3, #4294967295
 8011aee:	60fb      	str	r3, [r7, #12]
	}

	while (count-- > 0) {
 8011af0:	e007      	b.n	8011b02 <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	021a      	lsls	r2, r3, #8
 8011af6:	683b      	ldr	r3, [r7, #0]
 8011af8:	1c59      	adds	r1, r3, #1
 8011afa:	6039      	str	r1, [r7, #0]
 8011afc:	781b      	ldrb	r3, [r3, #0]
 8011afe:	4313      	orrs	r3, r2
 8011b00:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 8011b02:	88fb      	ldrh	r3, [r7, #6]
 8011b04:	1e5a      	subs	r2, r3, #1
 8011b06:	80fa      	strh	r2, [r7, #6]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d1f2      	bne.n	8011af2 <VL53L1_i2c_decode_int32_t+0x22>
	}

	return value;
 8011b0c:	68fb      	ldr	r3, [r7, #12]
}
 8011b0e:	4618      	mov	r0, r3
 8011b10:	3714      	adds	r7, #20
 8011b12:	46bd      	mov	sp, r7
 8011b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b18:	4770      	bx	lr

08011b1a <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 8011b1a:	b580      	push	{r7, lr}
 8011b1c:	b086      	sub	sp, #24
 8011b1e:	af00      	add	r7, sp, #0
 8011b20:	4603      	mov	r3, r0
 8011b22:	460a      	mov	r2, r1
 8011b24:	80fb      	strh	r3, [r7, #6]
 8011b26:	4613      	mov	r3, r2
 8011b28:	717b      	strb	r3, [r7, #5]
	 *
	 * Macro period fixed point format = unsigned 12.12
	 * Maximum supported macro period  = 4095.9999 us
	 */

	uint32_t  pll_period_us        = 0;
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	617b      	str	r3, [r7, #20]
	uint8_t   vcsel_period_pclks   = 0;
 8011b2e:	2300      	movs	r3, #0
 8011b30:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 8011b32:	2300      	movs	r3, #0
 8011b34:	60fb      	str	r3, [r7, #12]

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 8011b36:	88fb      	ldrh	r3, [r7, #6]
 8011b38:	4618      	mov	r0, r3
 8011b3a:	f000 fb75 	bl	8012228 <VL53L1_calc_pll_period_us>
 8011b3e:	6178      	str	r0, [r7, #20]

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 8011b40:	797b      	ldrb	r3, [r7, #5]
 8011b42:	4618      	mov	r0, r3
 8011b44:	f000 fb84 	bl	8012250 <VL53L1_decode_vcsel_period>
 8011b48:	4603      	mov	r3, r0
 8011b4a:	74fb      	strb	r3, [r7, #19]
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 8011b4c:	697a      	ldr	r2, [r7, #20]
 8011b4e:	4613      	mov	r3, r2
 8011b50:	00db      	lsls	r3, r3, #3
 8011b52:	4413      	add	r3, r2
 8011b54:	021b      	lsls	r3, r3, #8
 8011b56:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	099b      	lsrs	r3, r3, #6
 8011b5c:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 8011b5e:	7cfa      	ldrb	r2, [r7, #19]
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	fb02 f303 	mul.w	r3, r2, r3
 8011b66:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	099b      	lsrs	r3, r3, #6
 8011b6c:	60fb      	str	r3, [r7, #12]
			macro_period_us);
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
 8011b6e:	68fb      	ldr	r3, [r7, #12]
}
 8011b70:	4618      	mov	r0, r3
 8011b72:	3718      	adds	r7, #24
 8011b74:	46bd      	mov	sp, r7
 8011b76:	bd80      	pop	{r7, pc}

08011b78 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 8011b78:	b480      	push	{r7}
 8011b7a:	b089      	sub	sp, #36	@ 0x24
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	60f8      	str	r0, [r7, #12]
 8011b80:	4608      	mov	r0, r1
 8011b82:	4611      	mov	r1, r2
 8011b84:	461a      	mov	r2, r3
 8011b86:	4603      	mov	r3, r0
 8011b88:	817b      	strh	r3, [r7, #10]
 8011b8a:	460b      	mov	r3, r1
 8011b8c:	813b      	strh	r3, [r7, #8]
 8011b8e:	4613      	mov	r3, r2
 8011b90:	71fb      	strb	r3, [r7, #7]
	 * Range ignore threshold rate is then multiplied by user input
	 * rate_mult (in 3.5 fractional format)
	 *
	 */

	int32_t    range_ignore_thresh_int  = 0;
 8011b92:	2300      	movs	r3, #0
 8011b94:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 8011b96:	2300      	movs	r3, #0
 8011b98:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 8011b9a:	2300      	movs	r3, #0
 8011b9c:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 8011b9e:	2300      	movs	r3, #0
 8011ba0:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 8011ba2:	2300      	movs	r3, #0
 8011ba4:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	011b      	lsls	r3, r3, #4
 8011baa:	4a23      	ldr	r2, [pc, #140]	@ (8011c38 <VL53L1_calc_range_ignore_threshold+0xc0>)
 8011bac:	fb82 1203 	smull	r1, r2, r2, r3
 8011bb0:	1192      	asrs	r2, r2, #6
 8011bb2:	17db      	asrs	r3, r3, #31
 8011bb4:	1ad3      	subs	r3, r2, r3
 8011bb6:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0) {
 8011bb8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	da03      	bge.n	8011bc8 <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 8011bc0:	897b      	ldrh	r3, [r7, #10]
 8011bc2:	425b      	negs	r3, r3
 8011bc4:	b29b      	uxth	r3, r3
 8011bc6:	83bb      	strh	r3, [r7, #28]
	}

	if (y_gradient < 0) {
 8011bc8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	da03      	bge.n	8011bd8 <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 8011bd0:	893b      	ldrh	r3, [r7, #8]
 8011bd2:	425b      	negs	r3, r3
 8011bd4:	b29b      	uxth	r3, r3
 8011bd6:	837b      	strh	r3, [r7, #26]

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 8011bd8:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8011bdc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8011be0:	4413      	add	r3, r2
 8011be2:	015b      	lsls	r3, r3, #5
 8011be4:	617b      	str	r3, [r7, #20]

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 8011be6:	697b      	ldr	r3, [r7, #20]
 8011be8:	4a13      	ldr	r2, [pc, #76]	@ (8011c38 <VL53L1_calc_range_ignore_threshold+0xc0>)
 8011bea:	fb82 1203 	smull	r1, r2, r2, r3
 8011bee:	1192      	asrs	r2, r2, #6
 8011bf0:	17db      	asrs	r3, r3, #31
 8011bf2:	1ad3      	subs	r3, r2, r3
 8011bf4:	617b      	str	r3, [r7, #20]

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 8011bf6:	697a      	ldr	r2, [r7, #20]
 8011bf8:	693b      	ldr	r3, [r7, #16]
 8011bfa:	4413      	add	r3, r2
 8011bfc:	617b      	str	r3, [r7, #20]

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 8011bfe:	79fa      	ldrb	r2, [r7, #7]
 8011c00:	697b      	ldr	r3, [r7, #20]
 8011c02:	fb02 f303 	mul.w	r3, r2, r3
 8011c06:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 8011c08:	697b      	ldr	r3, [r7, #20]
 8011c0a:	3310      	adds	r3, #16
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	da00      	bge.n	8011c12 <VL53L1_calc_range_ignore_threshold+0x9a>
 8011c10:	331f      	adds	r3, #31
 8011c12:	115b      	asrs	r3, r3, #5
 8011c14:	617b      	str	r3, [r7, #20]

	/* Finally clip and output in correct format */

	if (range_ignore_thresh_int > 0xFFFF) {
 8011c16:	697b      	ldr	r3, [r7, #20]
 8011c18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011c1c:	db03      	blt.n	8011c26 <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 8011c1e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011c22:	83fb      	strh	r3, [r7, #30]
 8011c24:	e001      	b.n	8011c2a <VL53L1_calc_range_ignore_threshold+0xb2>
	} else {
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 8011c26:	697b      	ldr	r3, [r7, #20]
 8011c28:	83fb      	strh	r3, [r7, #30]
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 8011c2a:	8bfb      	ldrh	r3, [r7, #30]
}
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	3724      	adds	r7, #36	@ 0x24
 8011c30:	46bd      	mov	sp, r7
 8011c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c36:	4770      	bx	lr
 8011c38:	10624dd3 	.word	0x10624dd3

08011c3c <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8011c3c:	b480      	push	{r7}
 8011c3e:	b085      	sub	sp, #20
 8011c40:	af00      	add	r7, sp, #0
 8011c42:	6078      	str	r0, [r7, #4]
 8011c44:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 8011c46:	2300      	movs	r3, #0
 8011c48:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	031a      	lsls	r2, r3, #12
 8011c4e:	683b      	ldr	r3, [r7, #0]
 8011c50:	085b      	lsrs	r3, r3, #1
 8011c52:	441a      	add	r2, r3
	timeout_mclks   =
 8011c54:	683b      	ldr	r3, [r7, #0]
 8011c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8011c5a:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 8011c5c:	68fb      	ldr	r3, [r7, #12]
}
 8011c5e:	4618      	mov	r0, r3
 8011c60:	3714      	adds	r7, #20
 8011c62:	46bd      	mov	sp, r7
 8011c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c68:	4770      	bx	lr

08011c6a <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8011c6a:	b580      	push	{r7, lr}
 8011c6c:	b084      	sub	sp, #16
 8011c6e:	af00      	add	r7, sp, #0
 8011c70:	6078      	str	r0, [r7, #4]
 8011c72:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 8011c74:	2300      	movs	r3, #0
 8011c76:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 8011c78:	2300      	movs	r3, #0
 8011c7a:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 8011c7c:	6839      	ldr	r1, [r7, #0]
 8011c7e:	6878      	ldr	r0, [r7, #4]
 8011c80:	f7ff ffdc 	bl	8011c3c <VL53L1_calc_timeout_mclks>
 8011c84:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 8011c86:	68f8      	ldr	r0, [r7, #12]
 8011c88:	f000 f860 	bl	8011d4c <VL53L1_encode_timeout>
 8011c8c:	4603      	mov	r3, r0
 8011c8e:	817b      	strh	r3, [r7, #10]
			timeout_encoded, timeout_encoded);
#endif

	LOG_FUNCTION_END(0);

	return timeout_encoded;
 8011c90:	897b      	ldrh	r3, [r7, #10]
}
 8011c92:	4618      	mov	r0, r3
 8011c94:	3710      	adds	r7, #16
 8011c96:	46bd      	mov	sp, r7
 8011c98:	bd80      	pop	{r7, pc}

08011c9a <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 8011c9a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8011c9e:	b087      	sub	sp, #28
 8011ca0:	af00      	add	r7, sp, #0
 8011ca2:	6078      	str	r0, [r7, #4]
 8011ca4:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_us     = 0;
 8011ca6:	2100      	movs	r1, #0
 8011ca8:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 8011caa:	f04f 0000 	mov.w	r0, #0
 8011cae:	f04f 0100 	mov.w	r1, #0
 8011cb2:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 8011cb6:	6879      	ldr	r1, [r7, #4]
 8011cb8:	2000      	movs	r0, #0
 8011cba:	4688      	mov	r8, r1
 8011cbc:	4681      	mov	r9, r0
 8011cbe:	6839      	ldr	r1, [r7, #0]
 8011cc0:	2000      	movs	r0, #0
 8011cc2:	460c      	mov	r4, r1
 8011cc4:	4605      	mov	r5, r0
 8011cc6:	fb04 f009 	mul.w	r0, r4, r9
 8011cca:	fb08 f105 	mul.w	r1, r8, r5
 8011cce:	4401      	add	r1, r0
 8011cd0:	fba8 2304 	umull	r2, r3, r8, r4
 8011cd4:	4419      	add	r1, r3
 8011cd6:	460b      	mov	r3, r1
 8011cd8:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8011cdc:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 8011ce0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011ce4:	f512 6a00 	adds.w	sl, r2, #2048	@ 0x800
 8011ce8:	f143 0b00 	adc.w	fp, r3, #0
 8011cec:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 8011cf0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011cf4:	f04f 0200 	mov.w	r2, #0
 8011cf8:	f04f 0300 	mov.w	r3, #0
 8011cfc:	0b02      	lsrs	r2, r0, #12
 8011cfe:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8011d02:	0b0b      	lsrs	r3, r1, #12
 8011d04:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 8011d08:	68bb      	ldr	r3, [r7, #8]
 8011d0a:	617b      	str	r3, [r7, #20]
			timeout_us, timeout_us);
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
 8011d0c:	697b      	ldr	r3, [r7, #20]
}
 8011d0e:	4618      	mov	r0, r3
 8011d10:	371c      	adds	r7, #28
 8011d12:	46bd      	mov	sp, r7
 8011d14:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8011d18:	4770      	bx	lr

08011d1a <VL53L1_calc_decoded_timeout_us>:
}

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 8011d1a:	b580      	push	{r7, lr}
 8011d1c:	b084      	sub	sp, #16
 8011d1e:	af00      	add	r7, sp, #0
 8011d20:	4603      	mov	r3, r0
 8011d22:	6039      	str	r1, [r7, #0]
 8011d24:	80fb      	strh	r3, [r7, #6]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks  = 0;
 8011d26:	2300      	movs	r3, #0
 8011d28:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 8011d2e:	88fb      	ldrh	r3, [r7, #6]
 8011d30:	4618      	mov	r0, r3
 8011d32:	f000 f835 	bl	8011da0 <VL53L1_decode_timeout>
 8011d36:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 8011d38:	6839      	ldr	r1, [r7, #0]
 8011d3a:	68f8      	ldr	r0, [r7, #12]
 8011d3c:	f7ff ffad 	bl	8011c9a <VL53L1_calc_timeout_us>
 8011d40:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 8011d42:	68bb      	ldr	r3, [r7, #8]
}
 8011d44:	4618      	mov	r0, r3
 8011d46:	3710      	adds	r7, #16
 8011d48:	46bd      	mov	sp, r7
 8011d4a:	bd80      	pop	{r7, pc}

08011d4c <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 8011d4c:	b480      	push	{r7}
 8011d4e:	b087      	sub	sp, #28
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	6078      	str	r0, [r7, #4]
	/*
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8011d54:	2300      	movs	r3, #0
 8011d56:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8011d58:	2300      	movs	r3, #0
 8011d5a:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8011d5c:	2300      	movs	r3, #0
 8011d5e:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d015      	beq.n	8011d92 <VL53L1_encode_timeout+0x46>
		ls_byte = timeout_mclks - 1;
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	3b01      	subs	r3, #1
 8011d6a:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8011d6c:	e005      	b.n	8011d7a <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8011d6e:	693b      	ldr	r3, [r7, #16]
 8011d70:	085b      	lsrs	r3, r3, #1
 8011d72:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8011d74:	89fb      	ldrh	r3, [r7, #14]
 8011d76:	3301      	adds	r3, #1
 8011d78:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8011d7a:	693b      	ldr	r3, [r7, #16]
 8011d7c:	2bff      	cmp	r3, #255	@ 0xff
 8011d7e:	d8f6      	bhi.n	8011d6e <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8011d80:	89fb      	ldrh	r3, [r7, #14]
 8011d82:	021b      	lsls	r3, r3, #8
 8011d84:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8011d86:	693b      	ldr	r3, [r7, #16]
 8011d88:	b29b      	uxth	r3, r3
 8011d8a:	b2db      	uxtb	r3, r3
 8011d8c:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8011d8e:	4413      	add	r3, r2
 8011d90:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8011d92:	8afb      	ldrh	r3, [r7, #22]
}
 8011d94:	4618      	mov	r0, r3
 8011d96:	371c      	adds	r7, #28
 8011d98:	46bd      	mov	sp, r7
 8011d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9e:	4770      	bx	lr

08011da0 <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 8011da0:	b480      	push	{r7}
 8011da2:	b085      	sub	sp, #20
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	4603      	mov	r3, r0
 8011da8:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decode 16-bit timeout register value
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8011daa:	2300      	movs	r3, #0
 8011dac:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8011dae:	88fb      	ldrh	r3, [r7, #6]
 8011db0:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8011db2:	88fa      	ldrh	r2, [r7, #6]
 8011db4:	0a12      	lsrs	r2, r2, #8
 8011db6:	b292      	uxth	r2, r2
 8011db8:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8011dba:	3301      	adds	r3, #1
 8011dbc:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8011dbe:	68fb      	ldr	r3, [r7, #12]
}
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	3714      	adds	r7, #20
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dca:	4770      	bx	lr

08011dcc <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 8011dcc:	b580      	push	{r7, lr}
 8011dce:	b088      	sub	sp, #32
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	60f8      	str	r0, [r7, #12]
 8011dd4:	60b9      	str	r1, [r7, #8]
 8011dd6:	607a      	str	r2, [r7, #4]
 8011dd8:	807b      	strh	r3, [r7, #2]
	 * into the appropriate register values
	 *
	 * Must also be run after the VCSEL period settings are changed
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8011dda:	2300      	movs	r3, #0
 8011ddc:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 8011dde:	2300      	movs	r3, #0
 8011de0:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 8011de2:	2300      	movs	r3, #0
 8011de4:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 8011de6:	2300      	movs	r3, #0
 8011de8:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 8011dea:	887b      	ldrh	r3, [r7, #2]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d102      	bne.n	8011df6 <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8011df0:	23f1      	movs	r3, #241	@ 0xf1
 8011df2:	77fb      	strb	r3, [r7, #31]
 8011df4:	e05d      	b.n	8011eb2 <VL53L1_calc_timeout_register_values+0xe6>
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 8011df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011df8:	799a      	ldrb	r2, [r3, #6]
 8011dfa:	887b      	ldrh	r3, [r7, #2]
 8011dfc:	4611      	mov	r1, r2
 8011dfe:	4618      	mov	r0, r3
 8011e00:	f7ff fe8b 	bl	8011b1a <VL53L1_calc_macro_period_us>
 8011e04:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);

		/*  Update Phase timeout - uses Timing A */
		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 8011e06:	6979      	ldr	r1, [r7, #20]
 8011e08:	68f8      	ldr	r0, [r7, #12]
 8011e0a:	f7ff ff17 	bl	8011c3c <VL53L1_calc_timeout_mclks>
 8011e0e:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);

		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
 8011e10:	69bb      	ldr	r3, [r7, #24]
 8011e12:	2bff      	cmp	r3, #255	@ 0xff
 8011e14:	d901      	bls.n	8011e1a <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 8011e16:	23ff      	movs	r3, #255	@ 0xff
 8011e18:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 8011e1a:	69bb      	ldr	r3, [r7, #24]
 8011e1c:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 8011e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e20:	71da      	strb	r2, [r3, #7]

		/*  Update MM Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 8011e22:	6979      	ldr	r1, [r7, #20]
 8011e24:	68b8      	ldr	r0, [r7, #8]
 8011e26:	f7ff ff20 	bl	8011c6a <VL53L1_calc_encoded_timeout>
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8011e2e:	8a7b      	ldrh	r3, [r7, #18]
 8011e30:	0a1b      	lsrs	r3, r3, #8
 8011e32:	b29b      	uxth	r3, r3
 8011e34:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 8011e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e38:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8011e3a:	8a7b      	ldrh	r3, [r7, #18]
 8011e3c:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 8011e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e40:	705a      	strb	r2, [r3, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 8011e42:	6979      	ldr	r1, [r7, #20]
 8011e44:	6878      	ldr	r0, [r7, #4]
 8011e46:	f7ff ff10 	bl	8011c6a <VL53L1_calc_encoded_timeout>
 8011e4a:	4603      	mov	r3, r0
 8011e4c:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8011e4e:	8a7b      	ldrh	r3, [r7, #18]
 8011e50:	0a1b      	lsrs	r3, r3, #8
 8011e52:	b29b      	uxth	r3, r3
 8011e54:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 8011e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e58:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8011e5a:	8a7b      	ldrh	r3, [r7, #18]
 8011e5c:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 8011e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e60:	715a      	strb	r2, [r3, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 8011e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e64:	7a5a      	ldrb	r2, [r3, #9]
 8011e66:	887b      	ldrh	r3, [r7, #2]
 8011e68:	4611      	mov	r1, r2
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	f7ff fe55 	bl	8011b1a <VL53L1_calc_macro_period_us>
 8011e70:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 8011e72:	6979      	ldr	r1, [r7, #20]
 8011e74:	68b8      	ldr	r0, [r7, #8]
 8011e76:	f7ff fef8 	bl	8011c6a <VL53L1_calc_encoded_timeout>
 8011e7a:	4603      	mov	r3, r0
 8011e7c:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8011e7e:	8a7b      	ldrh	r3, [r7, #18]
 8011e80:	0a1b      	lsrs	r3, r3, #8
 8011e82:	b29b      	uxth	r3, r3
 8011e84:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 8011e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e88:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8011e8a:	8a7b      	ldrh	r3, [r7, #18]
 8011e8c:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 8011e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e90:	70da      	strb	r2, [r3, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 8011e92:	6979      	ldr	r1, [r7, #20]
 8011e94:	6878      	ldr	r0, [r7, #4]
 8011e96:	f7ff fee8 	bl	8011c6a <VL53L1_calc_encoded_timeout>
 8011e9a:	4603      	mov	r3, r0
 8011e9c:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8011e9e:	8a7b      	ldrh	r3, [r7, #18]
 8011ea0:	0a1b      	lsrs	r3, r3, #8
 8011ea2:	b29b      	uxth	r3, r3
 8011ea4:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 8011ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ea8:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8011eaa:	8a7b      	ldrh	r3, [r7, #18]
 8011eac:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 8011eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011eb0:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 8011eb2:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	3720      	adds	r7, #32
 8011eba:	46bd      	mov	sp, r7
 8011ebc:	bd80      	pop	{r7, pc}

08011ebe <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 8011ebe:	b480      	push	{r7}
 8011ec0:	b083      	sub	sp, #12
 8011ec2:	af00      	add	r7, sp, #0
 8011ec4:	4603      	mov	r3, r0
 8011ec6:	603a      	str	r2, [r7, #0]
 8011ec8:	71fb      	strb	r3, [r7, #7]
 8011eca:	460b      	mov	r3, r1
 8011ecc:	71bb      	strb	r3, [r7, #6]
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 8011ece:	79fb      	ldrb	r3, [r7, #7]
 8011ed0:	2b07      	cmp	r3, #7
 8011ed2:	d90a      	bls.n	8011eea <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 8011ed4:	79bb      	ldrb	r3, [r7, #6]
 8011ed6:	00db      	lsls	r3, r3, #3
 8011ed8:	b2da      	uxtb	r2, r3
 8011eda:	79fb      	ldrb	r3, [r7, #7]
 8011edc:	1ad3      	subs	r3, r2, r3
 8011ede:	b2db      	uxtb	r3, r3
 8011ee0:	3b71      	subs	r3, #113	@ 0x71
 8011ee2:	b2da      	uxtb	r2, r3
 8011ee4:	683b      	ldr	r3, [r7, #0]
 8011ee6:	701a      	strb	r2, [r3, #0]
	} else {
		*pspad_number = ((15-col) << 3) + row;
	}
}
 8011ee8:	e00a      	b.n	8011f00 <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 8011eea:	79bb      	ldrb	r3, [r7, #6]
 8011eec:	f1c3 030f 	rsb	r3, r3, #15
 8011ef0:	b2db      	uxtb	r3, r3
 8011ef2:	00db      	lsls	r3, r3, #3
 8011ef4:	b2da      	uxtb	r2, r3
 8011ef6:	79fb      	ldrb	r3, [r7, #7]
 8011ef8:	4413      	add	r3, r2
 8011efa:	b2da      	uxtb	r2, r3
 8011efc:	683b      	ldr	r3, [r7, #0]
 8011efe:	701a      	strb	r2, [r3, #0]
}
 8011f00:	bf00      	nop
 8011f02:	370c      	adds	r7, #12
 8011f04:	46bd      	mov	sp, r7
 8011f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f0a:	4770      	bx	lr

08011f0c <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 8011f0c:	b480      	push	{r7}
 8011f0e:	b085      	sub	sp, #20
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	4603      	mov	r3, r0
 8011f14:	60b9      	str	r1, [r7, #8]
 8011f16:	607a      	str	r2, [r7, #4]
 8011f18:	73fb      	strb	r3, [r7, #15]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 8011f1a:	7bfb      	ldrb	r3, [r7, #15]
 8011f1c:	091b      	lsrs	r3, r3, #4
 8011f1e:	b2da      	uxtb	r2, r3
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 8011f24:	7bfb      	ldrb	r3, [r7, #15]
 8011f26:	f003 030f 	and.w	r3, r3, #15
 8011f2a:	b2da      	uxtb	r2, r3
 8011f2c:	68bb      	ldr	r3, [r7, #8]
 8011f2e:	701a      	strb	r2, [r3, #0]

}
 8011f30:	bf00      	nop
 8011f32:	3714      	adds	r7, #20
 8011f34:	46bd      	mov	sp, r7
 8011f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f3a:	4770      	bx	lr

08011f3c <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 8011f3c:	b480      	push	{r7}
 8011f3e:	b083      	sub	sp, #12
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	4603      	mov	r3, r0
 8011f44:	603a      	str	r2, [r7, #0]
 8011f46:	71fb      	strb	r3, [r7, #7]
 8011f48:	460b      	mov	r3, r1
 8011f4a:	71bb      	strb	r3, [r7, #6]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 8011f4c:	79bb      	ldrb	r3, [r7, #6]
 8011f4e:	011b      	lsls	r3, r3, #4
 8011f50:	b2da      	uxtb	r2, r3
 8011f52:	79fb      	ldrb	r3, [r7, #7]
 8011f54:	4413      	add	r3, r2
 8011f56:	b2da      	uxtb	r2, r3
 8011f58:	683b      	ldr	r3, [r7, #0]
 8011f5a:	701a      	strb	r2, [r3, #0]

}
 8011f5c:	bf00      	nop
 8011f5e:	370c      	adds	r7, #12
 8011f60:	46bd      	mov	sp, r7
 8011f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f66:	4770      	bx	lr

08011f68 <VL53L1_encode_GPIO_interrupt_config>:
 * Encodes VL53L1_GPIO_interrupt_config_t structure to FW register format
 */

uint8_t	VL53L1_encode_GPIO_interrupt_config(
	VL53L1_GPIO_interrupt_config_t	*pintconf)
{
 8011f68:	b480      	push	{r7}
 8011f6a:	b085      	sub	sp, #20
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]
	uint8_t system__interrupt_config;

	system__interrupt_config = pintconf->intr_mode_distance;
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	781b      	ldrb	r3, [r3, #0]
 8011f74:	73fb      	strb	r3, [r7, #15]
	system__interrupt_config |= ((pintconf->intr_mode_rate) << 2);
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	785b      	ldrb	r3, [r3, #1]
 8011f7a:	b25b      	sxtb	r3, r3
 8011f7c:	009b      	lsls	r3, r3, #2
 8011f7e:	b25a      	sxtb	r2, r3
 8011f80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f84:	4313      	orrs	r3, r2
 8011f86:	b25b      	sxtb	r3, r3
 8011f88:	73fb      	strb	r3, [r7, #15]
	system__interrupt_config |= ((pintconf->intr_new_measure_ready) << 5);
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	789b      	ldrb	r3, [r3, #2]
 8011f8e:	b25b      	sxtb	r3, r3
 8011f90:	015b      	lsls	r3, r3, #5
 8011f92:	b25a      	sxtb	r2, r3
 8011f94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f98:	4313      	orrs	r3, r2
 8011f9a:	b25b      	sxtb	r3, r3
 8011f9c:	73fb      	strb	r3, [r7, #15]
	system__interrupt_config |= ((pintconf->intr_no_target) << 6);
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	78db      	ldrb	r3, [r3, #3]
 8011fa2:	b25b      	sxtb	r3, r3
 8011fa4:	019b      	lsls	r3, r3, #6
 8011fa6:	b25a      	sxtb	r2, r3
 8011fa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011fac:	4313      	orrs	r3, r2
 8011fae:	b25b      	sxtb	r3, r3
 8011fb0:	73fb      	strb	r3, [r7, #15]
	system__interrupt_config |= ((pintconf->intr_combined_mode) << 7);
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	791b      	ldrb	r3, [r3, #4]
 8011fb6:	b25b      	sxtb	r3, r3
 8011fb8:	01db      	lsls	r3, r3, #7
 8011fba:	b25a      	sxtb	r2, r3
 8011fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011fc0:	4313      	orrs	r3, r2
 8011fc2:	b25b      	sxtb	r3, r3
 8011fc4:	73fb      	strb	r3, [r7, #15]

	return system__interrupt_config;
 8011fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fc8:	4618      	mov	r0, r3
 8011fca:	3714      	adds	r7, #20
 8011fcc:	46bd      	mov	sp, r7
 8011fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd2:	4770      	bx	lr

08011fd4 <VL53L1_decode_GPIO_interrupt_config>:
 * Decodes FW register to VL53L1_GPIO_interrupt_config_t structure
 */

VL53L1_GPIO_interrupt_config_t VL53L1_decode_GPIO_interrupt_config(
	uint8_t		system__interrupt_config)
{
 8011fd4:	b490      	push	{r4, r7}
 8011fd6:	b086      	sub	sp, #24
 8011fd8:	af00      	add	r7, sp, #0
 8011fda:	6078      	str	r0, [r7, #4]
 8011fdc:	460b      	mov	r3, r1
 8011fde:	70fb      	strb	r3, [r7, #3]
	VL53L1_GPIO_interrupt_config_t	intconf;

	intconf.intr_mode_distance = system__interrupt_config & 0x03;
 8011fe0:	78fb      	ldrb	r3, [r7, #3]
 8011fe2:	f003 0303 	and.w	r3, r3, #3
 8011fe6:	b2db      	uxtb	r3, r3
 8011fe8:	723b      	strb	r3, [r7, #8]
	intconf.intr_mode_rate = (system__interrupt_config >> 2) & 0x03;
 8011fea:	78fb      	ldrb	r3, [r7, #3]
 8011fec:	089b      	lsrs	r3, r3, #2
 8011fee:	b2db      	uxtb	r3, r3
 8011ff0:	f003 0303 	and.w	r3, r3, #3
 8011ff4:	b2db      	uxtb	r3, r3
 8011ff6:	727b      	strb	r3, [r7, #9]
	intconf.intr_new_measure_ready = (system__interrupt_config >> 5) & 0x01;
 8011ff8:	78fb      	ldrb	r3, [r7, #3]
 8011ffa:	095b      	lsrs	r3, r3, #5
 8011ffc:	b2db      	uxtb	r3, r3
 8011ffe:	f003 0301 	and.w	r3, r3, #1
 8012002:	b2db      	uxtb	r3, r3
 8012004:	72bb      	strb	r3, [r7, #10]
	intconf.intr_no_target = (system__interrupt_config >> 6) & 0x01;
 8012006:	78fb      	ldrb	r3, [r7, #3]
 8012008:	099b      	lsrs	r3, r3, #6
 801200a:	b2db      	uxtb	r3, r3
 801200c:	f003 0301 	and.w	r3, r3, #1
 8012010:	b2db      	uxtb	r3, r3
 8012012:	72fb      	strb	r3, [r7, #11]
	intconf.intr_combined_mode = (system__interrupt_config >> 7) & 0x01;
 8012014:	78fb      	ldrb	r3, [r7, #3]
 8012016:	09db      	lsrs	r3, r3, #7
 8012018:	b2db      	uxtb	r3, r3
 801201a:	733b      	strb	r3, [r7, #12]

	/* set some default values */
	intconf.threshold_rate_low = 0;
 801201c:	2300      	movs	r3, #0
 801201e:	82bb      	strh	r3, [r7, #20]
	intconf.threshold_rate_high = 0;
 8012020:	2300      	movs	r3, #0
 8012022:	827b      	strh	r3, [r7, #18]
	intconf.threshold_distance_low = 0;
 8012024:	2300      	movs	r3, #0
 8012026:	823b      	strh	r3, [r7, #16]
	intconf.threshold_distance_high = 0;
 8012028:	2300      	movs	r3, #0
 801202a:	81fb      	strh	r3, [r7, #14]

	return intconf;
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	461c      	mov	r4, r3
 8012030:	f107 0308 	add.w	r3, r7, #8
 8012034:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012036:	6020      	str	r0, [r4, #0]
 8012038:	6061      	str	r1, [r4, #4]
 801203a:	60a2      	str	r2, [r4, #8]
 801203c:	881b      	ldrh	r3, [r3, #0]
 801203e:	81a3      	strh	r3, [r4, #12]
}
 8012040:	6878      	ldr	r0, [r7, #4]
 8012042:	3718      	adds	r7, #24
 8012044:	46bd      	mov	sp, r7
 8012046:	bc90      	pop	{r4, r7}
 8012048:	4770      	bx	lr

0801204a <VL53L1_set_GPIO_distance_threshold>:

VL53L1_Error VL53L1_set_GPIO_distance_threshold(
	VL53L1_DEV                      Dev,
	uint16_t			threshold_high,
	uint16_t			threshold_low)
{
 801204a:	b480      	push	{r7}
 801204c:	b085      	sub	sp, #20
 801204e:	af00      	add	r7, sp, #0
 8012050:	6078      	str	r0, [r7, #4]
 8012052:	460b      	mov	r3, r1
 8012054:	807b      	strh	r3, [r7, #2]
 8012056:	4613      	mov	r3, r2
 8012058:	803b      	strh	r3, [r7, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801205a:	2300      	movs	r3, #0
 801205c:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->dyn_cfg.system__thresh_high = threshold_high;
 8012062:	68bb      	ldr	r3, [r7, #8]
 8012064:	887a      	ldrh	r2, [r7, #2]
 8012066:	f8a3 21b6 	strh.w	r2, [r3, #438]	@ 0x1b6
	pdev->dyn_cfg.system__thresh_low = threshold_low;
 801206a:	68bb      	ldr	r3, [r7, #8]
 801206c:	883a      	ldrh	r2, [r7, #0]
 801206e:	f8a3 21b8 	strh.w	r2, [r3, #440]	@ 0x1b8

	LOG_FUNCTION_END(status);
	return status;
 8012072:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012076:	4618      	mov	r0, r3
 8012078:	3714      	adds	r7, #20
 801207a:	46bd      	mov	sp, r7
 801207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012080:	4770      	bx	lr

08012082 <VL53L1_set_GPIO_rate_threshold>:

VL53L1_Error VL53L1_set_GPIO_rate_threshold(
	VL53L1_DEV                      Dev,
	uint16_t			threshold_high,
	uint16_t			threshold_low)
{
 8012082:	b480      	push	{r7}
 8012084:	b085      	sub	sp, #20
 8012086:	af00      	add	r7, sp, #0
 8012088:	6078      	str	r0, [r7, #4]
 801208a:	460b      	mov	r3, r1
 801208c:	807b      	strh	r3, [r7, #2]
 801208e:	4613      	mov	r3, r2
 8012090:	803b      	strh	r3, [r7, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8012092:	2300      	movs	r3, #0
 8012094:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->gen_cfg.system__thresh_rate_high = threshold_high;
 801209a:	68bb      	ldr	r3, [r7, #8]
 801209c:	887a      	ldrh	r2, [r7, #2]
 801209e:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190
	pdev->gen_cfg.system__thresh_rate_low = threshold_low;
 80120a2:	68bb      	ldr	r3, [r7, #8]
 80120a4:	883a      	ldrh	r2, [r7, #0]
 80120a6:	f8a3 2192 	strh.w	r2, [r3, #402]	@ 0x192

	LOG_FUNCTION_END(status);
	return status;
 80120aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80120ae:	4618      	mov	r0, r3
 80120b0:	3714      	adds	r7, #20
 80120b2:	46bd      	mov	sp, r7
 80120b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b8:	4770      	bx	lr

080120ba <VL53L1_set_GPIO_thresholds_from_struct>:
 */

VL53L1_Error VL53L1_set_GPIO_thresholds_from_struct(
	VL53L1_DEV                      Dev,
	VL53L1_GPIO_interrupt_config_t *pintconf)
{
 80120ba:	b580      	push	{r7, lr}
 80120bc:	b084      	sub	sp, #16
 80120be:	af00      	add	r7, sp, #0
 80120c0:	6078      	str	r0, [r7, #4]
 80120c2:	6039      	str	r1, [r7, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80120c4:	2300      	movs	r3, #0
 80120c6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_GPIO_distance_threshold(
 80120c8:	683b      	ldr	r3, [r7, #0]
 80120ca:	88d9      	ldrh	r1, [r3, #6]
 80120cc:	683b      	ldr	r3, [r7, #0]
 80120ce:	891b      	ldrh	r3, [r3, #8]
 80120d0:	461a      	mov	r2, r3
 80120d2:	6878      	ldr	r0, [r7, #4]
 80120d4:	f7ff ffb9 	bl	801204a <VL53L1_set_GPIO_distance_threshold>
 80120d8:	4603      	mov	r3, r0
 80120da:	73fb      	strb	r3, [r7, #15]
			Dev,
			pintconf->threshold_distance_high,
			pintconf->threshold_distance_low);

	if (status == VL53L1_ERROR_NONE) {
 80120dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d109      	bne.n	80120f8 <VL53L1_set_GPIO_thresholds_from_struct+0x3e>
		status =
			VL53L1_set_GPIO_rate_threshold(
 80120e4:	683b      	ldr	r3, [r7, #0]
 80120e6:	8959      	ldrh	r1, [r3, #10]
 80120e8:	683b      	ldr	r3, [r7, #0]
 80120ea:	899b      	ldrh	r3, [r3, #12]
 80120ec:	461a      	mov	r2, r3
 80120ee:	6878      	ldr	r0, [r7, #4]
 80120f0:	f7ff ffc7 	bl	8012082 <VL53L1_set_GPIO_rate_threshold>
 80120f4:	4603      	mov	r3, r0
 80120f6:	73fb      	strb	r3, [r7, #15]
				pintconf->threshold_rate_high,
				pintconf->threshold_rate_low);
	}

	LOG_FUNCTION_END(status);
	return status;
 80120f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80120fc:	4618      	mov	r0, r3
 80120fe:	3710      	adds	r7, #16
 8012100:	46bd      	mov	sp, r7
 8012102:	bd80      	pop	{r7, pc}

08012104 <VL53L1_low_power_auto_data_init>:
/* Start Patch_LowPowerAutoMode */

VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 8012104:	b480      	push	{r7}
 8012106:	b085      	sub	sp, #20
 8012108:	af00      	add	r7, sp, #0
 801210a:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes internal data structures for low power auto mode
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801210c:	2300      	movs	r3, #0
 801210e:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 8012114:	68bb      	ldr	r3, [r7, #8]
 8012116:	2203      	movs	r2, #3
 8012118:	f883 22e4 	strb.w	r2, [r3, #740]	@ 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 801211c:	68bb      	ldr	r3, [r7, #8]
 801211e:	2200      	movs	r2, #0
 8012120:	f883 22e5 	strb.w	r2, [r3, #741]	@ 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 8012124:	68bb      	ldr	r3, [r7, #8]
 8012126:	2200      	movs	r2, #0
 8012128:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 801212c:	68bb      	ldr	r3, [r7, #8]
 801212e:	2200      	movs	r2, #0
 8012130:	f883 22e7 	strb.w	r2, [r3, #743]	@ 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 8012134:	68bb      	ldr	r3, [r7, #8]
 8012136:	2200      	movs	r2, #0
 8012138:	f883 22e8 	strb.w	r2, [r3, #744]	@ 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 801213c:	68bb      	ldr	r3, [r7, #8]
 801213e:	2200      	movs	r2, #0
 8012140:	f883 22e9 	strb.w	r2, [r3, #745]	@ 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 8012144:	68bb      	ldr	r3, [r7, #8]
 8012146:	2200      	movs	r2, #0
 8012148:	f883 22ea 	strb.w	r2, [r3, #746]	@ 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 801214c:	68bb      	ldr	r3, [r7, #8]
 801214e:	2200      	movs	r2, #0
 8012150:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 8012154:	68bb      	ldr	r3, [r7, #8]
 8012156:	2200      	movs	r2, #0
 8012158:	f8a3 22f0 	strh.w	r2, [r3, #752]	@ 0x2f0

	LOG_FUNCTION_END(status);

	return status;
 801215c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012160:	4618      	mov	r0, r3
 8012162:	3714      	adds	r7, #20
 8012164:	46bd      	mov	sp, r7
 8012166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801216a:	4770      	bx	lr

0801216c <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 801216c:	b480      	push	{r7}
 801216e:	b087      	sub	sp, #28
 8012170:	af00      	add	r7, sp, #0
 8012172:	60f8      	str	r0, [r7, #12]
 8012174:	60b9      	str	r1, [r7, #8]
 8012176:	607a      	str	r2, [r7, #4]
	/*
	 * Initializes configs for when low power auto presets are selected
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8012178:	2300      	movs	r3, #0
 801217a:	75fb      	strb	r3, [r7, #23]
	SUPPRESS_UNUSED_WARNING(pgeneral);

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	2201      	movs	r2, #1
 8012180:	705a      	strb	r2, [r3, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	2200      	movs	r2, #0
 8012186:	709a      	strb	r2, [r3, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 8012188:	68bb      	ldr	r3, [r7, #8]
 801218a:	229b      	movs	r2, #155	@ 0x9b
 801218c:	745a      	strb	r2, [r3, #17]
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	LOG_FUNCTION_END(status);

	return status;
 801218e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012192:	4618      	mov	r0, r3
 8012194:	371c      	adds	r7, #28
 8012196:	46bd      	mov	sp, r7
 8012198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801219c:	4770      	bx	lr

0801219e <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 801219e:	b480      	push	{r7}
 80121a0:	b085      	sub	sp, #20
 80121a2:	af00      	add	r7, sp, #0
 80121a4:	6078      	str	r0, [r7, #4]
	/*
	 * Setup ranges after the first one in low power auto mode by turning
	 * off FW calibration steps and programming static values
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80121aa:	2300      	movs	r3, #0
 80121ac:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	f893 2163 	ldrb.w	r2, [r3, #355]	@ 0x163
	pdev->low_power_auto_data.saved_vhv_init =
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	f883 22e8 	strb.w	r2, [r3, #744]	@ 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	f893 2160 	ldrb.w	r2, [r3, #352]	@ 0x160
	pdev->low_power_auto_data.saved_vhv_timeout =
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	f883 22e9 	strb.w	r2, [r3, #745]	@ 0x2e9

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	f893 3163 	ldrb.w	r3, [r3, #355]	@ 0x163
 80121cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80121d0:	b2da      	uxtb	r2, r3
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 80121de:	f003 0303 	and.w	r3, r3, #3
 80121e2:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	f893 32e4 	ldrb.w	r3, [r3, #740]	@ 0x2e4
 80121ea:	009b      	lsls	r3, r3, #2
 80121ec:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 80121ee:	4413      	add	r3, r2
 80121f0:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	2201      	movs	r2, #1
 80121fc:	f883 218d 	strb.w	r2, [r3, #397]	@ 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	f893 22ae 	ldrb.w	r2, [r3, #686]	@ 0x2ae
	pdev->low_power_auto_data.first_run_phasecal_result =
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	f883 22ea 	strb.w	r2, [r3, #746]	@ 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	f893 22ea 	ldrb.w	r2, [r3, #746]	@ 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	f883 2187 	strb.w	r2, [r3, #391]	@ 0x187

	LOG_FUNCTION_END(status);

	return status;
 8012218:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801221c:	4618      	mov	r0, r3
 801221e:	3714      	adds	r7, #20
 8012220:	46bd      	mov	sp, r7
 8012222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012226:	4770      	bx	lr

08012228 <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 8012228:	b480      	push	{r7}
 801222a:	b085      	sub	sp, #20
 801222c:	af00      	add	r7, sp, #0
 801222e:	4603      	mov	r3, r0
 8012230:	80fb      	strh	r3, [r7, #6]
	 *  ->  only the 18 LS bits are used
	 *
	 *  2^30 = (2^24) (1.0us) * 4096 (2^12) / 64 (PLL Multiplier)
	 */

	uint32_t  pll_period_us        = 0;
 8012232:	2300      	movs	r3, #0
 8012234:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pll_period_us = (0x01 << 30) / fast_osc_frequency;
 8012236:	88fb      	ldrh	r3, [r7, #6]
 8012238:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 801223c:	fb92 f3f3 	sdiv	r3, r2, r3
 8012240:	60fb      	str	r3, [r7, #12]
			pll_period_us);
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
 8012242:	68fb      	ldr	r3, [r7, #12]
}
 8012244:	4618      	mov	r0, r3
 8012246:	3714      	adds	r7, #20
 8012248:	46bd      	mov	sp, r7
 801224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801224e:	4770      	bx	lr

08012250 <VL53L1_decode_vcsel_period>:
	return range_mm;
}
#endif

uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8012250:	b480      	push	{r7}
 8012252:	b085      	sub	sp, #20
 8012254:	af00      	add	r7, sp, #0
 8012256:	4603      	mov	r3, r0
 8012258:	71fb      	strb	r3, [r7, #7]
	/*
	 * Converts the encoded VCSEL period register value into
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 801225a:	2300      	movs	r3, #0
 801225c:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 801225e:	79fb      	ldrb	r3, [r7, #7]
 8012260:	3301      	adds	r3, #1
 8012262:	b2db      	uxtb	r3, r3
 8012264:	005b      	lsls	r3, r3, #1
 8012266:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8012268:	7bfb      	ldrb	r3, [r7, #15]
}
 801226a:	4618      	mov	r0, r3
 801226c:	3714      	adds	r7, #20
 801226e:	46bd      	mov	sp, r7
 8012270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012274:	4770      	bx	lr

08012276 <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 8012276:	b480      	push	{r7}
 8012278:	b085      	sub	sp, #20
 801227a:	af00      	add	r7, sp, #0
 801227c:	4603      	mov	r3, r0
 801227e:	60b9      	str	r1, [r7, #8]
 8012280:	607a      	str	r2, [r7, #4]
 8012282:	73fb      	strb	r3, [r7, #15]
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 8012284:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012288:	2b00      	cmp	r3, #0
 801228a:	da10      	bge.n	80122ae <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 801228c:	7bfb      	ldrb	r3, [r7, #15]
 801228e:	43db      	mvns	r3, r3
 8012290:	b2db      	uxtb	r3, r3
 8012292:	f003 0307 	and.w	r3, r3, #7
 8012296:	b2db      	uxtb	r3, r3
 8012298:	3308      	adds	r3, #8
 801229a:	b2da      	uxtb	r2, r3
 801229c:	68bb      	ldr	r3, [r7, #8]
 801229e:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 80122a0:	7bfb      	ldrb	r3, [r7, #15]
 80122a2:	3b80      	subs	r3, #128	@ 0x80
 80122a4:	10db      	asrs	r3, r3, #3
 80122a6:	b2da      	uxtb	r2, r3
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 80122ac:	e00c      	b.n	80122c8 <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 80122ae:	7bfb      	ldrb	r3, [r7, #15]
 80122b0:	f003 0307 	and.w	r3, r3, #7
 80122b4:	b2da      	uxtb	r2, r3
 80122b6:	68bb      	ldr	r3, [r7, #8]
 80122b8:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 80122ba:	7bfb      	ldrb	r3, [r7, #15]
 80122bc:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 80122c0:	10db      	asrs	r3, r3, #3
 80122c2:	b2da      	uxtb	r2, r3
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	701a      	strb	r2, [r3, #0]
}
 80122c8:	bf00      	nop
 80122ca:	3714      	adds	r7, #20
 80122cc:	46bd      	mov	sp, r7
 80122ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122d2:	4770      	bx	lr

080122d4 <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80122d4:	b580      	push	{r7, lr}
 80122d6:	b086      	sub	sp, #24
 80122d8:	af00      	add	r7, sp, #0
 80122da:	60f8      	str	r0, [r7, #12]
 80122dc:	460b      	mov	r3, r1
 80122de:	607a      	str	r2, [r7, #4]
 80122e0:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80122e2:	2300      	movs	r3, #0
 80122e4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 80122e6:	897b      	ldrh	r3, [r7, #10]
 80122e8:	2b0a      	cmp	r3, #10
 80122ea:	d802      	bhi.n	80122f2 <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80122ec:	f06f 0309 	mvn.w	r3, #9
 80122f0:	e047      	b.n	8012382 <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	781b      	ldrb	r3, [r3, #0]
 80122f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80122fa:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8012308:	f002 020f 	and.w	r2, r2, #15
 801230c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 801230e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8012318:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801231c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 801231e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8012328:	f002 0203 	and.w	r2, r2, #3
 801232c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 801232e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 8012338:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801233c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 801233e:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	88d8      	ldrh	r0, [r3, #6]
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	3305      	adds	r3, #5
 8012348:	461a      	mov	r2, r3
 801234a:	2102      	movs	r1, #2
 801234c:	f7ff fad9 	bl	8011902 <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 8012354:	68fa      	ldr	r2, [r7, #12]
 8012356:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8012358:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 801235e:	68fa      	ldr	r2, [r7, #12]
 8012360:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8012362:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 801236c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8012370:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8012372:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 8012378:	68fa      	ldr	r2, [r7, #12]
 801237a:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 801237c:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 801237e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012382:	4618      	mov	r0, r3
 8012384:	3718      	adds	r7, #24
 8012386:	46bd      	mov	sp, r7
 8012388:	bd80      	pop	{r7, pc}

0801238a <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 801238a:	b580      	push	{r7, lr}
 801238c:	b086      	sub	sp, #24
 801238e:	af00      	add	r7, sp, #0
 8012390:	4603      	mov	r3, r0
 8012392:	60b9      	str	r1, [r7, #8]
 8012394:	607a      	str	r2, [r7, #4]
 8012396:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_static_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012398:	2300      	movs	r3, #0
 801239a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 801239c:	89fb      	ldrh	r3, [r7, #14]
 801239e:	2b0a      	cmp	r3, #10
 80123a0:	d802      	bhi.n	80123a8 <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80123a2:	f06f 0309 	mvn.w	r3, #9
 80123a6:	e046      	b.n	8012436 <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 80123a8:	68bb      	ldr	r3, [r7, #8]
 80123aa:	781b      	ldrb	r3, [r3, #0]
 80123ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80123b0:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 80123b6:	68bb      	ldr	r3, [r7, #8]
 80123b8:	3301      	adds	r3, #1
 80123ba:	781b      	ldrb	r3, [r3, #0]
 80123bc:	f003 030f 	and.w	r3, r3, #15
 80123c0:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 80123c6:	68bb      	ldr	r3, [r7, #8]
 80123c8:	3302      	adds	r3, #2
 80123ca:	781b      	ldrb	r3, [r3, #0]
 80123cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80123d0:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 80123d6:	68bb      	ldr	r3, [r7, #8]
 80123d8:	3303      	adds	r3, #3
 80123da:	781b      	ldrb	r3, [r3, #0]
 80123dc:	f003 0303 	and.w	r3, r3, #3
 80123e0:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 80123e6:	68bb      	ldr	r3, [r7, #8]
 80123e8:	3304      	adds	r3, #4
 80123ea:	781b      	ldrb	r3, [r3, #0]
 80123ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80123f0:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 80123f6:	68bb      	ldr	r3, [r7, #8]
 80123f8:	3305      	adds	r3, #5
 80123fa:	4619      	mov	r1, r3
 80123fc:	2002      	movs	r0, #2
 80123fe:	f7ff faab 	bl	8011958 <VL53L1_i2c_decode_uint16_t>
 8012402:	4603      	mov	r3, r0
 8012404:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 801240a:	68bb      	ldr	r3, [r7, #8]
 801240c:	79da      	ldrb	r2, [r3, #7]
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 8012412:	68bb      	ldr	r3, [r7, #8]
 8012414:	7a1a      	ldrb	r2, [r3, #8]
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 801241a:	68bb      	ldr	r3, [r7, #8]
 801241c:	3309      	adds	r3, #9
 801241e:	781b      	ldrb	r3, [r3, #0]
 8012420:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012424:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 801242a:	68bb      	ldr	r3, [r7, #8]
 801242c:	7a9a      	ldrb	r2, [r3, #10]
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 8012432:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012436:	4618      	mov	r0, r3
 8012438:	3718      	adds	r7, #24
 801243a:	46bd      	mov	sp, r7
 801243c:	bd80      	pop	{r7, pc}

0801243e <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 801243e:	b580      	push	{r7, lr}
 8012440:	b086      	sub	sp, #24
 8012442:	af00      	add	r7, sp, #0
 8012444:	6078      	str	r0, [r7, #4]
 8012446:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_static_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012448:	2300      	movs	r3, #0
 801244a:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 801244c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012450:	2b00      	cmp	r3, #0
 8012452:	d108      	bne.n	8012466 <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 8012454:	f107 020c 	add.w	r2, r7, #12
 8012458:	230b      	movs	r3, #11
 801245a:	2101      	movs	r1, #1
 801245c:	6878      	ldr	r0, [r7, #4]
 801245e:	f001 f8b9 	bl	80135d4 <VL53L1_ReadMulti>
 8012462:	4603      	mov	r3, r0
 8012464:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8012466:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801246a:	2b00      	cmp	r3, #0
 801246c:	d108      	bne.n	8012480 <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 801246e:	f107 030c 	add.w	r3, r7, #12
 8012472:	683a      	ldr	r2, [r7, #0]
 8012474:	4619      	mov	r1, r3
 8012476:	200b      	movs	r0, #11
 8012478:	f7ff ff87 	bl	801238a <VL53L1_i2c_decode_static_nvm_managed>
 801247c:	4603      	mov	r3, r0
 801247e:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8012480:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012484:	4618      	mov	r0, r3
 8012486:	3718      	adds	r7, #24
 8012488:	46bd      	mov	sp, r7
 801248a:	bd80      	pop	{r7, pc}

0801248c <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 801248c:	b580      	push	{r7, lr}
 801248e:	b086      	sub	sp, #24
 8012490:	af00      	add	r7, sp, #0
 8012492:	60f8      	str	r0, [r7, #12]
 8012494:	460b      	mov	r3, r1
 8012496:	607a      	str	r2, [r7, #4]
 8012498:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_customer_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 801249a:	2300      	movs	r3, #0
 801249c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 801249e:	897b      	ldrh	r3, [r7, #10]
 80124a0:	2b16      	cmp	r3, #22
 80124a2:	d802      	bhi.n	80124aa <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80124a4:	f06f 0309 	mvn.w	r3, #9
 80124a8:	e076      	b.n	8012598 <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 80124b6:	68fa      	ldr	r2, [r7, #12]
 80124b8:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 80124ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 80124c0:	68fa      	ldr	r2, [r7, #12]
 80124c2:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 80124c4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 80124ca:	68fa      	ldr	r2, [r7, #12]
 80124cc:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 80124ce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 80124d4:	68fa      	ldr	r2, [r7, #12]
 80124d6:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 80124d8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 80124e2:	f002 020f 	and.w	r2, r2, #15
 80124e6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 80124e8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 80124ee:	68fa      	ldr	r2, [r7, #12]
 80124f0:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 80124f2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 80124fc:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8012500:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8012502:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 801250c:	f002 0203 	and.w	r2, r2, #3
 8012510:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8012512:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	8958      	ldrh	r0, [r3, #10]
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	3309      	adds	r3, #9
 801251c:	461a      	mov	r2, r3
 801251e:	2102      	movs	r1, #2
 8012520:	f7ff f9ef 	bl	8011902 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	330b      	adds	r3, #11
 801252e:	461a      	mov	r2, r3
 8012530:	2102      	movs	r1, #2
 8012532:	f7ff fa32 	bl	801199a <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	330d      	adds	r3, #13
 8012540:	461a      	mov	r2, r3
 8012542:	2102      	movs	r1, #2
 8012544:	f7ff fa29 	bl	801199a <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	8a18      	ldrh	r0, [r3, #16]
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	330f      	adds	r3, #15
 8012550:	461a      	mov	r2, r3
 8012552:	2102      	movs	r1, #2
 8012554:	f7ff f9d5 	bl	8011902 <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 801255e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012562:	b218      	sxth	r0, r3
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	3311      	adds	r3, #17
 8012568:	461a      	mov	r2, r3
 801256a:	2102      	movs	r1, #2
 801256c:	f7ff fa15 	bl	801199a <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	3313      	adds	r3, #19
 801257a:	461a      	mov	r2, r3
 801257c:	2102      	movs	r1, #2
 801257e:	f7ff fa0c 	bl	801199a <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	3315      	adds	r3, #21
 801258c:	461a      	mov	r2, r3
 801258e:	2102      	movs	r1, #2
 8012590:	f7ff fa03 	bl	801199a <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 8012594:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012598:	4618      	mov	r0, r3
 801259a:	3718      	adds	r7, #24
 801259c:	46bd      	mov	sp, r7
 801259e:	bd80      	pop	{r7, pc}

080125a0 <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 80125a0:	b580      	push	{r7, lr}
 80125a2:	b086      	sub	sp, #24
 80125a4:	af00      	add	r7, sp, #0
 80125a6:	4603      	mov	r3, r0
 80125a8:	60b9      	str	r1, [r7, #8]
 80125aa:	607a      	str	r2, [r7, #4]
 80125ac:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_customer_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80125ae:	2300      	movs	r3, #0
 80125b0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 80125b2:	89fb      	ldrh	r3, [r7, #14]
 80125b4:	2b16      	cmp	r3, #22
 80125b6:	d802      	bhi.n	80125be <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80125b8:	f06f 0309 	mvn.w	r3, #9
 80125bc:	e079      	b.n	80126b2 <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 80125be:	68bb      	ldr	r3, [r7, #8]
 80125c0:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 80125c6:	68bb      	ldr	r3, [r7, #8]
 80125c8:	785a      	ldrb	r2, [r3, #1]
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 80125ce:	68bb      	ldr	r3, [r7, #8]
 80125d0:	789a      	ldrb	r2, [r3, #2]
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 80125d6:	68bb      	ldr	r3, [r7, #8]
 80125d8:	78da      	ldrb	r2, [r3, #3]
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 80125de:	68bb      	ldr	r3, [r7, #8]
 80125e0:	791a      	ldrb	r2, [r3, #4]
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 80125e6:	68bb      	ldr	r3, [r7, #8]
 80125e8:	3305      	adds	r3, #5
 80125ea:	781b      	ldrb	r3, [r3, #0]
 80125ec:	f003 030f 	and.w	r3, r3, #15
 80125f0:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 80125f6:	68bb      	ldr	r3, [r7, #8]
 80125f8:	799a      	ldrb	r2, [r3, #6]
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 80125fe:	68bb      	ldr	r3, [r7, #8]
 8012600:	3307      	adds	r3, #7
 8012602:	781b      	ldrb	r3, [r3, #0]
 8012604:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012608:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 801260e:	68bb      	ldr	r3, [r7, #8]
 8012610:	3308      	adds	r3, #8
 8012612:	781b      	ldrb	r3, [r3, #0]
 8012614:	f003 0303 	and.w	r3, r3, #3
 8012618:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 801261e:	68bb      	ldr	r3, [r7, #8]
 8012620:	3309      	adds	r3, #9
 8012622:	4619      	mov	r1, r3
 8012624:	2002      	movs	r0, #2
 8012626:	f7ff f997 	bl	8011958 <VL53L1_i2c_decode_uint16_t>
 801262a:	4603      	mov	r3, r0
 801262c:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 8012632:	68bb      	ldr	r3, [r7, #8]
 8012634:	330b      	adds	r3, #11
 8012636:	4619      	mov	r1, r3
 8012638:	2002      	movs	r0, #2
 801263a:	f7ff f9da 	bl	80119f2 <VL53L1_i2c_decode_int16_t>
 801263e:	4603      	mov	r3, r0
 8012640:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 8012646:	68bb      	ldr	r3, [r7, #8]
 8012648:	330d      	adds	r3, #13
 801264a:	4619      	mov	r1, r3
 801264c:	2002      	movs	r0, #2
 801264e:	f7ff f9d0 	bl	80119f2 <VL53L1_i2c_decode_int16_t>
 8012652:	4603      	mov	r3, r0
 8012654:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 801265a:	68bb      	ldr	r3, [r7, #8]
 801265c:	330f      	adds	r3, #15
 801265e:	4619      	mov	r1, r3
 8012660:	2002      	movs	r0, #2
 8012662:	f7ff f979 	bl	8011958 <VL53L1_i2c_decode_uint16_t>
 8012666:	4603      	mov	r3, r0
 8012668:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 801266e:	68bb      	ldr	r3, [r7, #8]
 8012670:	3311      	adds	r3, #17
 8012672:	4619      	mov	r1, r3
 8012674:	2002      	movs	r0, #2
 8012676:	f7ff f9bc 	bl	80119f2 <VL53L1_i2c_decode_int16_t>
 801267a:	4603      	mov	r3, r0
 801267c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012680:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 8012686:	68bb      	ldr	r3, [r7, #8]
 8012688:	3313      	adds	r3, #19
 801268a:	4619      	mov	r1, r3
 801268c:	2002      	movs	r0, #2
 801268e:	f7ff f9b0 	bl	80119f2 <VL53L1_i2c_decode_int16_t>
 8012692:	4603      	mov	r3, r0
 8012694:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 801269a:	68bb      	ldr	r3, [r7, #8]
 801269c:	3315      	adds	r3, #21
 801269e:	4619      	mov	r1, r3
 80126a0:	2002      	movs	r0, #2
 80126a2:	f7ff f9a6 	bl	80119f2 <VL53L1_i2c_decode_int16_t>
 80126a6:	4603      	mov	r3, r0
 80126a8:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 80126ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80126b2:	4618      	mov	r0, r3
 80126b4:	3718      	adds	r7, #24
 80126b6:	46bd      	mov	sp, r7
 80126b8:	bd80      	pop	{r7, pc}

080126ba <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 80126ba:	b580      	push	{r7, lr}
 80126bc:	b088      	sub	sp, #32
 80126be:	af00      	add	r7, sp, #0
 80126c0:	6078      	str	r0, [r7, #4]
 80126c2:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_customer_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80126c4:	2300      	movs	r3, #0
 80126c6:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80126c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d108      	bne.n	80126e2 <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 80126d0:	f107 0208 	add.w	r2, r7, #8
 80126d4:	2317      	movs	r3, #23
 80126d6:	210d      	movs	r1, #13
 80126d8:	6878      	ldr	r0, [r7, #4]
 80126da:	f000 ff7b 	bl	80135d4 <VL53L1_ReadMulti>
 80126de:	4603      	mov	r3, r0
 80126e0:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 80126e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d108      	bne.n	80126fc <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 80126ea:	f107 0308 	add.w	r3, r7, #8
 80126ee:	683a      	ldr	r2, [r7, #0]
 80126f0:	4619      	mov	r1, r3
 80126f2:	2017      	movs	r0, #23
 80126f4:	f7ff ff54 	bl	80125a0 <VL53L1_i2c_decode_customer_nvm_managed>
 80126f8:	4603      	mov	r3, r0
 80126fa:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 80126fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012700:	4618      	mov	r0, r3
 8012702:	3720      	adds	r7, #32
 8012704:	46bd      	mov	sp, r7
 8012706:	bd80      	pop	{r7, pc}

08012708 <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8012708:	b580      	push	{r7, lr}
 801270a:	b086      	sub	sp, #24
 801270c:	af00      	add	r7, sp, #0
 801270e:	60f8      	str	r0, [r7, #12]
 8012710:	460b      	mov	r3, r1
 8012712:	607a      	str	r2, [r7, #4]
 8012714:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_config_t into a I2C write buffer
	 * Buffer must be at least 32 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012716:	2300      	movs	r3, #0
 8012718:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 801271a:	897b      	ldrh	r3, [r7, #10]
 801271c:	2b1f      	cmp	r3, #31
 801271e:	d802      	bhi.n	8012726 <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012720:	f06f 0309 	mvn.w	r3, #9
 8012724:	e0cf      	b.n	80128c6 <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	881b      	ldrh	r3, [r3, #0]
 801272a:	687a      	ldr	r2, [r7, #4]
 801272c:	2102      	movs	r1, #2
 801272e:	4618      	mov	r0, r3
 8012730:	f7ff f8e7 	bl	8011902 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 801273c:	f002 0201 	and.w	r2, r2, #1
 8012740:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8012742:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 801274c:	f002 020f 	and.w	r2, r2, #15
 8012750:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8012752:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 801275c:	f002 020f 	and.w	r2, r2, #15
 8012760:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8012762:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 801276c:	f002 021f 	and.w	r2, r2, #31
 8012770:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8012772:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 801277c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8012780:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8012782:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 801278c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8012790:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8012792:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 801279c:	f002 0201 	and.w	r2, r2, #1
 80127a0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 80127a2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 80127a8:	68fa      	ldr	r2, [r7, #12]
 80127aa:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 80127ac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 80127b6:	f002 0201 	and.w	r2, r2, #1
 80127ba:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 80127bc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 80127c6:	f002 0203 	and.w	r2, r2, #3
 80127ca:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 80127cc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 80127d6:	f002 021f 	and.w	r2, r2, #31
 80127da:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 80127dc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 80127e6:	f002 0203 	and.w	r2, r2, #3
 80127ea:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 80127ec:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 80127f6:	f002 0203 	and.w	r2, r2, #3
 80127fa:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 80127fc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8012806:	f002 0207 	and.w	r2, r2, #7
 801280a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 801280c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8012816:	f002 021f 	and.w	r2, r2, #31
 801281a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 801281c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8012826:	f002 0201 	and.w	r2, r2, #1
 801282a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 801282c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 8012832:	68fa      	ldr	r2, [r7, #12]
 8012834:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8012836:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 801283c:	68fa      	ldr	r2, [r7, #12]
 801283e:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8012840:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 8012846:	68fa      	ldr	r2, [r7, #12]
 8012848:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 801284a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 8012850:	68fa      	ldr	r2, [r7, #12]
 8012852:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8012854:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 801285a:	68fa      	ldr	r2, [r7, #12]
 801285c:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 801285e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 8012864:	68fa      	ldr	r2, [r7, #12]
 8012866:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 8012868:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	8b18      	ldrh	r0, [r3, #24]
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	3318      	adds	r3, #24
 8012872:	461a      	mov	r2, r3
 8012874:	2102      	movs	r1, #2
 8012876:	f7ff f844 	bl	8011902 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 801287e:	68fa      	ldr	r2, [r7, #12]
 8012880:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 8012882:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 8012888:	68fa      	ldr	r2, [r7, #12]
 801288a:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 801288c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 8012896:	f002 020f 	and.w	r2, r2, #15
 801289a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 801289c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 80128a2:	68fa      	ldr	r2, [r7, #12]
 80128a4:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 80128a6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 80128b0:	f002 020f 	and.w	r2, r2, #15
 80128b4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 80128b6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 80128bc:	68fa      	ldr	r2, [r7, #12]
 80128be:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 80128c0:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80128c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80128c6:	4618      	mov	r0, r3
 80128c8:	3718      	adds	r7, #24
 80128ca:	46bd      	mov	sp, r7
 80128cc:	bd80      	pop	{r7, pc}

080128ce <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80128ce:	b580      	push	{r7, lr}
 80128d0:	b086      	sub	sp, #24
 80128d2:	af00      	add	r7, sp, #0
 80128d4:	60f8      	str	r0, [r7, #12]
 80128d6:	460b      	mov	r3, r1
 80128d8:	607a      	str	r2, [r7, #4]
 80128da:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_general_config_t into a I2C write buffer
	 * Buffer must be at least 22 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80128dc:	2300      	movs	r3, #0
 80128de:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 80128e0:	897b      	ldrh	r3, [r7, #10]
 80128e2:	2b15      	cmp	r3, #21
 80128e4:	d802      	bhi.n	80128ec <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80128e6:	f06f 0309 	mvn.w	r3, #9
 80128ea:	e070      	b.n	80129ce <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 80128f8:	68fa      	ldr	r2, [r7, #12]
 80128fa:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 80128fc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 8012902:	68fa      	ldr	r2, [r7, #12]
 8012904:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8012906:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 8012910:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8012914:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8012916:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 801291c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012920:	b298      	uxth	r0, r3
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	3304      	adds	r3, #4
 8012926:	461a      	mov	r2, r3
 8012928:	2102      	movs	r1, #2
 801292a:	f7fe ffea 	bl	8011902 <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 8012936:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801293a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 801293c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 8012942:	68fa      	ldr	r2, [r7, #12]
 8012944:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 8012946:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 801294c:	68fa      	ldr	r2, [r7, #12]
 801294e:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8012950:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 801295a:	f002 0201 	and.w	r2, r2, #1
 801295e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8012960:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 801296a:	f002 0207 	and.w	r2, r2, #7
 801296e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8012970:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	8998      	ldrh	r0, [r3, #12]
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	330c      	adds	r3, #12
 801297a:	461a      	mov	r2, r3
 801297c:	2102      	movs	r1, #2
 801297e:	f7fe ffc0 	bl	8011902 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	89d8      	ldrh	r0, [r3, #14]
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	330e      	adds	r3, #14
 801298a:	461a      	mov	r2, r3
 801298c:	2102      	movs	r1, #2
 801298e:	f7fe ffb8 	bl	8011902 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	8a18      	ldrh	r0, [r3, #16]
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	3310      	adds	r3, #16
 801299a:	461a      	mov	r2, r3
 801299c:	2102      	movs	r1, #2
 801299e:	f7fe ffb0 	bl	8011902 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 80129a6:	68fa      	ldr	r2, [r7, #12]
 80129a8:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 80129aa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 80129b0:	68fa      	ldr	r2, [r7, #12]
 80129b2:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 80129b4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 80129ba:	68fa      	ldr	r2, [r7, #12]
 80129bc:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 80129be:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 80129c4:	68fa      	ldr	r2, [r7, #12]
 80129c6:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 80129c8:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80129ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80129ce:	4618      	mov	r0, r3
 80129d0:	3718      	adds	r7, #24
 80129d2:	46bd      	mov	sp, r7
 80129d4:	bd80      	pop	{r7, pc}

080129d6 <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80129d6:	b580      	push	{r7, lr}
 80129d8:	b086      	sub	sp, #24
 80129da:	af00      	add	r7, sp, #0
 80129dc:	60f8      	str	r0, [r7, #12]
 80129de:	460b      	mov	r3, r1
 80129e0:	607a      	str	r2, [r7, #4]
 80129e2:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_timing_config_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80129e4:	2300      	movs	r3, #0
 80129e6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 80129e8:	897b      	ldrh	r3, [r7, #10]
 80129ea:	2b16      	cmp	r3, #22
 80129ec:	d802      	bhi.n	80129f4 <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80129ee:	f06f 0309 	mvn.w	r3, #9
 80129f2:	e06e      	b.n	8012ad2 <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	781b      	ldrb	r3, [r3, #0]
 80129f8:	f003 030f 	and.w	r3, r3, #15
 80129fc:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 8012a06:	68fa      	ldr	r2, [r7, #12]
 8012a08:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8012a0a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8012a14:	f002 020f 	and.w	r2, r2, #15
 8012a18:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8012a1a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 8012a20:	68fa      	ldr	r2, [r7, #12]
 8012a22:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8012a24:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8012a2e:	f002 020f 	and.w	r2, r2, #15
 8012a32:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8012a34:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 8012a3a:	68fa      	ldr	r2, [r7, #12]
 8012a3c:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 8012a3e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 8012a48:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8012a4c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8012a4e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8012a58:	f002 020f 	and.w	r2, r2, #15
 8012a5c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8012a5e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 8012a64:	68fa      	ldr	r2, [r7, #12]
 8012a66:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8012a68:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 8012a72:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8012a76:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8012a78:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8012a7a:	68fb      	ldr	r3, [r7, #12]
 8012a7c:	8958      	ldrh	r0, [r3, #10]
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	330a      	adds	r3, #10
 8012a82:	461a      	mov	r2, r3
 8012a84:	2102      	movs	r1, #2
 8012a86:	f7fe ff3c 	bl	8011902 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	8998      	ldrh	r0, [r3, #12]
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	330c      	adds	r3, #12
 8012a92:	461a      	mov	r2, r3
 8012a94:	2102      	movs	r1, #2
 8012a96:	f7fe ff34 	bl	8011902 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 8012a9e:	68fa      	ldr	r2, [r7, #12]
 8012aa0:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 8012aa2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 8012aa8:	68fa      	ldr	r2, [r7, #12]
 8012aaa:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 8012aac:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	6918      	ldr	r0, [r3, #16]
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	3312      	adds	r3, #18
 8012ab6:	461a      	mov	r2, r3
 8012ab8:	2104      	movs	r1, #4
 8012aba:	f7fe ffc2 	bl	8011a42 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 8012ac6:	f002 0201 	and.w	r2, r2, #1
 8012aca:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 8012acc:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8012ace:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	3718      	adds	r7, #24
 8012ad6:	46bd      	mov	sp, r7
 8012ad8:	bd80      	pop	{r7, pc}

08012ada <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8012ada:	b580      	push	{r7, lr}
 8012adc:	b086      	sub	sp, #24
 8012ade:	af00      	add	r7, sp, #0
 8012ae0:	60f8      	str	r0, [r7, #12]
 8012ae2:	460b      	mov	r3, r1
 8012ae4:	607a      	str	r2, [r7, #4]
 8012ae6:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_dynamic_config_t into a I2C write buffer
	 * Buffer must be at least 18 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012ae8:	2300      	movs	r3, #0
 8012aea:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8012aec:	897b      	ldrh	r3, [r7, #10]
 8012aee:	2b11      	cmp	r3, #17
 8012af0:	d802      	bhi.n	8012af8 <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012af2:	f06f 0309 	mvn.w	r3, #9
 8012af6:	e071      	b.n	8012bdc <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	781b      	ldrb	r3, [r3, #0]
 8012afc:	f003 0303 	and.w	r3, r3, #3
 8012b00:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	8858      	ldrh	r0, [r3, #2]
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	3301      	adds	r3, #1
 8012b0e:	461a      	mov	r2, r3
 8012b10:	2102      	movs	r1, #2
 8012b12:	f7fe fef6 	bl	8011902 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	8898      	ldrh	r0, [r3, #4]
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	3303      	adds	r3, #3
 8012b1e:	461a      	mov	r2, r3
 8012b20:	2102      	movs	r1, #2
 8012b22:	f7fe feee 	bl	8011902 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8012b2e:	f002 0201 	and.w	r2, r2, #1
 8012b32:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8012b34:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 8012b3e:	f002 0207 	and.w	r2, r2, #7
 8012b42:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8012b44:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 8012b4a:	68fa      	ldr	r2, [r7, #12]
 8012b4c:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8012b4e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 8012b54:	68fa      	ldr	r2, [r7, #12]
 8012b56:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8012b58:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8012b62:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8012b66:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8012b68:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8012b72:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8012b76:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8012b78:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8012b82:	f002 0203 	and.w	r2, r2, #3
 8012b86:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8012b88:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 8012b8a:	68fb      	ldr	r3, [r7, #12]
 8012b8c:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 8012b92:	f002 0203 	and.w	r2, r2, #3
 8012b96:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8012b98:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 8012ba2:	f002 020f 	and.w	r2, r2, #15
 8012ba6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8012ba8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 8012bae:	68fa      	ldr	r2, [r7, #12]
 8012bb0:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 8012bb2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 8012bb8:	68fa      	ldr	r2, [r7, #12]
 8012bba:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 8012bbc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 8012bc2:	68fa      	ldr	r2, [r7, #12]
 8012bc4:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 8012bc6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 8012bd0:	f002 0203 	and.w	r2, r2, #3
 8012bd4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8012bd6:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8012bd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012bdc:	4618      	mov	r0, r3
 8012bde:	3718      	adds	r7, #24
 8012be0:	46bd      	mov	sp, r7
 8012be2:	bd80      	pop	{r7, pc}

08012be4 <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8012be4:	b480      	push	{r7}
 8012be6:	b087      	sub	sp, #28
 8012be8:	af00      	add	r7, sp, #0
 8012bea:	60f8      	str	r0, [r7, #12]
 8012bec:	460b      	mov	r3, r1
 8012bee:	607a      	str	r2, [r7, #4]
 8012bf0:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_system_control_t into a I2C write buffer
	 * Buffer must be at least 5 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012bf2:	2300      	movs	r3, #0
 8012bf4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 8012bf6:	897b      	ldrh	r3, [r7, #10]
 8012bf8:	2b04      	cmp	r3, #4
 8012bfa:	d802      	bhi.n	8012c02 <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012bfc:	f06f 0309 	mvn.w	r3, #9
 8012c00:	e025      	b.n	8012c4e <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	781b      	ldrb	r3, [r3, #0]
 8012c06:	f003 0301 	and.w	r3, r3, #1
 8012c0a:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 8012c18:	f002 0201 	and.w	r2, r2, #1
 8012c1c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8012c1e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 8012c28:	f002 0201 	and.w	r2, r2, #1
 8012c2c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8012c2e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 8012c38:	f002 0203 	and.w	r2, r2, #3
 8012c3c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8012c3e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	3304      	adds	r3, #4
		pdata->system__mode_start;
 8012c44:	68fa      	ldr	r2, [r7, #12]
 8012c46:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8012c48:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8012c4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012c4e:	4618      	mov	r0, r3
 8012c50:	371c      	adds	r7, #28
 8012c52:	46bd      	mov	sp, r7
 8012c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c58:	4770      	bx	lr

08012c5a <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 8012c5a:	b580      	push	{r7, lr}
 8012c5c:	b086      	sub	sp, #24
 8012c5e:	af00      	add	r7, sp, #0
 8012c60:	4603      	mov	r3, r0
 8012c62:	60b9      	str	r1, [r7, #8]
 8012c64:	607a      	str	r2, [r7, #4]
 8012c66:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_system_results_t from the input I2C read buffer
	 * Buffer must be at least 44 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012c68:	2300      	movs	r3, #0
 8012c6a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 8012c6c:	89fb      	ldrh	r3, [r7, #14]
 8012c6e:	2b2b      	cmp	r3, #43	@ 0x2b
 8012c70:	d802      	bhi.n	8012c78 <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012c72:	f06f 0309 	mvn.w	r3, #9
 8012c76:	e0e2      	b.n	8012e3e <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 8012c78:	68bb      	ldr	r3, [r7, #8]
 8012c7a:	781b      	ldrb	r3, [r3, #0]
 8012c7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012c80:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 8012c86:	68bb      	ldr	r3, [r7, #8]
 8012c88:	785a      	ldrb	r2, [r3, #1]
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 8012c8e:	68bb      	ldr	r3, [r7, #8]
 8012c90:	3302      	adds	r3, #2
 8012c92:	781b      	ldrb	r3, [r3, #0]
 8012c94:	f003 030f 	and.w	r3, r3, #15
 8012c98:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 8012c9e:	68bb      	ldr	r3, [r7, #8]
 8012ca0:	78da      	ldrb	r2, [r3, #3]
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 8012ca6:	68bb      	ldr	r3, [r7, #8]
 8012ca8:	3304      	adds	r3, #4
 8012caa:	4619      	mov	r1, r3
 8012cac:	2002      	movs	r0, #2
 8012cae:	f7fe fe53 	bl	8011958 <VL53L1_i2c_decode_uint16_t>
 8012cb2:	4603      	mov	r3, r0
 8012cb4:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 8012cba:	68bb      	ldr	r3, [r7, #8]
 8012cbc:	3306      	adds	r3, #6
 8012cbe:	4619      	mov	r1, r3
 8012cc0:	2002      	movs	r0, #2
 8012cc2:	f7fe fe49 	bl	8011958 <VL53L1_i2c_decode_uint16_t>
 8012cc6:	4603      	mov	r3, r0
 8012cc8:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 8012cce:	68bb      	ldr	r3, [r7, #8]
 8012cd0:	3308      	adds	r3, #8
 8012cd2:	4619      	mov	r1, r3
 8012cd4:	2002      	movs	r0, #2
 8012cd6:	f7fe fe3f 	bl	8011958 <VL53L1_i2c_decode_uint16_t>
 8012cda:	4603      	mov	r3, r0
 8012cdc:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 8012ce2:	68bb      	ldr	r3, [r7, #8]
 8012ce4:	330a      	adds	r3, #10
 8012ce6:	4619      	mov	r1, r3
 8012ce8:	2002      	movs	r0, #2
 8012cea:	f7fe fe35 	bl	8011958 <VL53L1_i2c_decode_uint16_t>
 8012cee:	4603      	mov	r3, r0
 8012cf0:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 8012cf6:	68bb      	ldr	r3, [r7, #8]
 8012cf8:	330c      	adds	r3, #12
 8012cfa:	4619      	mov	r1, r3
 8012cfc:	2002      	movs	r0, #2
 8012cfe:	f7fe fe2b 	bl	8011958 <VL53L1_i2c_decode_uint16_t>
 8012d02:	4603      	mov	r3, r0
 8012d04:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 8012d0a:	68bb      	ldr	r3, [r7, #8]
 8012d0c:	330e      	adds	r3, #14
 8012d0e:	4619      	mov	r1, r3
 8012d10:	2002      	movs	r0, #2
 8012d12:	f7fe fe21 	bl	8011958 <VL53L1_i2c_decode_uint16_t>
 8012d16:	4603      	mov	r3, r0
 8012d18:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 8012d1e:	68bb      	ldr	r3, [r7, #8]
 8012d20:	3310      	adds	r3, #16
 8012d22:	4619      	mov	r1, r3
 8012d24:	2002      	movs	r0, #2
 8012d26:	f7fe fe17 	bl	8011958 <VL53L1_i2c_decode_uint16_t>
 8012d2a:	4603      	mov	r3, r0
 8012d2c:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 8012d32:	68bb      	ldr	r3, [r7, #8]
 8012d34:	3312      	adds	r3, #18
 8012d36:	4619      	mov	r1, r3
 8012d38:	2002      	movs	r0, #2
 8012d3a:	f7fe fe0d 	bl	8011958 <VL53L1_i2c_decode_uint16_t>
 8012d3e:	4603      	mov	r3, r0
 8012d40:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 8012d46:	68bb      	ldr	r3, [r7, #8]
 8012d48:	3314      	adds	r3, #20
 8012d4a:	4619      	mov	r1, r3
 8012d4c:	2002      	movs	r0, #2
 8012d4e:	f7fe fe03 	bl	8011958 <VL53L1_i2c_decode_uint16_t>
 8012d52:	4603      	mov	r3, r0
 8012d54:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8012d5a:	68bb      	ldr	r3, [r7, #8]
 8012d5c:	3316      	adds	r3, #22
 8012d5e:	4619      	mov	r1, r3
 8012d60:	2002      	movs	r0, #2
 8012d62:	f7fe fdf9 	bl	8011958 <VL53L1_i2c_decode_uint16_t>
 8012d66:	4603      	mov	r3, r0
 8012d68:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8012d6e:	68bb      	ldr	r3, [r7, #8]
 8012d70:	3318      	adds	r3, #24
 8012d72:	4619      	mov	r1, r3
 8012d74:	2002      	movs	r0, #2
 8012d76:	f7fe fdef 	bl	8011958 <VL53L1_i2c_decode_uint16_t>
 8012d7a:	4603      	mov	r3, r0
 8012d7c:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 8012d82:	68bb      	ldr	r3, [r7, #8]
 8012d84:	331a      	adds	r3, #26
 8012d86:	4619      	mov	r1, r3
 8012d88:	2002      	movs	r0, #2
 8012d8a:	f7fe fde5 	bl	8011958 <VL53L1_i2c_decode_uint16_t>
 8012d8e:	4603      	mov	r3, r0
 8012d90:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 8012d96:	68bb      	ldr	r3, [r7, #8]
 8012d98:	331c      	adds	r3, #28
 8012d9a:	4619      	mov	r1, r3
 8012d9c:	2002      	movs	r0, #2
 8012d9e:	f7fe fddb 	bl	8011958 <VL53L1_i2c_decode_uint16_t>
 8012da2:	4603      	mov	r3, r0
 8012da4:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 8012daa:	68bb      	ldr	r3, [r7, #8]
 8012dac:	331e      	adds	r3, #30
 8012dae:	4619      	mov	r1, r3
 8012db0:	2002      	movs	r0, #2
 8012db2:	f7fe fdd1 	bl	8011958 <VL53L1_i2c_decode_uint16_t>
 8012db6:	4603      	mov	r3, r0
 8012db8:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 8012dbe:	68bb      	ldr	r3, [r7, #8]
 8012dc0:	3320      	adds	r3, #32
 8012dc2:	4619      	mov	r1, r3
 8012dc4:	2002      	movs	r0, #2
 8012dc6:	f7fe fdc7 	bl	8011958 <VL53L1_i2c_decode_uint16_t>
 8012dca:	4603      	mov	r3, r0
 8012dcc:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 8012dd2:	68bb      	ldr	r3, [r7, #8]
 8012dd4:	3322      	adds	r3, #34	@ 0x22
 8012dd6:	4619      	mov	r1, r3
 8012dd8:	2002      	movs	r0, #2
 8012dda:	f7fe fdbd 	bl	8011958 <VL53L1_i2c_decode_uint16_t>
 8012dde:	4603      	mov	r3, r0
 8012de0:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	845a      	strh	r2, [r3, #34]	@ 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 8012de6:	68bb      	ldr	r3, [r7, #8]
 8012de8:	3324      	adds	r3, #36	@ 0x24
 8012dea:	4619      	mov	r1, r3
 8012dec:	2002      	movs	r0, #2
 8012dee:	f7fe fdb3 	bl	8011958 <VL53L1_i2c_decode_uint16_t>
 8012df2:	4603      	mov	r3, r0
 8012df4:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	849a      	strh	r2, [r3, #36]	@ 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 8012dfa:	68bb      	ldr	r3, [r7, #8]
 8012dfc:	3326      	adds	r3, #38	@ 0x26
 8012dfe:	4619      	mov	r1, r3
 8012e00:	2002      	movs	r0, #2
 8012e02:	f7fe fda9 	bl	8011958 <VL53L1_i2c_decode_uint16_t>
 8012e06:	4603      	mov	r3, r0
 8012e08:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	84da      	strh	r2, [r3, #38]	@ 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 8012e0e:	68bb      	ldr	r3, [r7, #8]
 8012e10:	3328      	adds	r3, #40	@ 0x28
 8012e12:	4619      	mov	r1, r3
 8012e14:	2002      	movs	r0, #2
 8012e16:	f7fe fd9f 	bl	8011958 <VL53L1_i2c_decode_uint16_t>
 8012e1a:	4603      	mov	r3, r0
 8012e1c:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	851a      	strh	r2, [r3, #40]	@ 0x28
	pdata->result__spare_3_sd1 =
 8012e22:	68bb      	ldr	r3, [r7, #8]
 8012e24:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 8012e2e:	68bb      	ldr	r3, [r7, #8]
 8012e30:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 8012e3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012e3e:	4618      	mov	r0, r3
 8012e40:	3718      	adds	r7, #24
 8012e42:	46bd      	mov	sp, r7
 8012e44:	bd80      	pop	{r7, pc}

08012e46 <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 8012e46:	b580      	push	{r7, lr}
 8012e48:	b086      	sub	sp, #24
 8012e4a:	af00      	add	r7, sp, #0
 8012e4c:	4603      	mov	r3, r0
 8012e4e:	60b9      	str	r1, [r7, #8]
 8012e50:	607a      	str	r2, [r7, #4]
 8012e52:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_core_results_t from the input I2C read buffer
	 * Buffer must be at least 33 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012e54:	2300      	movs	r3, #0
 8012e56:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 8012e58:	89fb      	ldrh	r3, [r7, #14]
 8012e5a:	2b20      	cmp	r3, #32
 8012e5c:	d802      	bhi.n	8012e64 <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012e5e:	f06f 0309 	mvn.w	r3, #9
 8012e62:	e04d      	b.n	8012f00 <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 8012e64:	68b9      	ldr	r1, [r7, #8]
 8012e66:	2004      	movs	r0, #4
 8012e68:	f7fe fe15 	bl	8011a96 <VL53L1_i2c_decode_uint32_t>
 8012e6c:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 8012e72:	68bb      	ldr	r3, [r7, #8]
 8012e74:	3304      	adds	r3, #4
 8012e76:	4619      	mov	r1, r3
 8012e78:	2004      	movs	r0, #4
 8012e7a:	f7fe fe0c 	bl	8011a96 <VL53L1_i2c_decode_uint32_t>
 8012e7e:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 8012e84:	68bb      	ldr	r3, [r7, #8]
 8012e86:	3308      	adds	r3, #8
 8012e88:	4619      	mov	r1, r3
 8012e8a:	2004      	movs	r0, #4
 8012e8c:	f7fe fe20 	bl	8011ad0 <VL53L1_i2c_decode_int32_t>
 8012e90:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 8012e96:	68bb      	ldr	r3, [r7, #8]
 8012e98:	330c      	adds	r3, #12
 8012e9a:	4619      	mov	r1, r3
 8012e9c:	2004      	movs	r0, #4
 8012e9e:	f7fe fdfa 	bl	8011a96 <VL53L1_i2c_decode_uint32_t>
 8012ea2:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 8012ea8:	68bb      	ldr	r3, [r7, #8]
 8012eaa:	3310      	adds	r3, #16
 8012eac:	4619      	mov	r1, r3
 8012eae:	2004      	movs	r0, #4
 8012eb0:	f7fe fdf1 	bl	8011a96 <VL53L1_i2c_decode_uint32_t>
 8012eb4:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 8012eba:	68bb      	ldr	r3, [r7, #8]
 8012ebc:	3314      	adds	r3, #20
 8012ebe:	4619      	mov	r1, r3
 8012ec0:	2004      	movs	r0, #4
 8012ec2:	f7fe fde8 	bl	8011a96 <VL53L1_i2c_decode_uint32_t>
 8012ec6:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 8012ecc:	68bb      	ldr	r3, [r7, #8]
 8012ece:	3318      	adds	r3, #24
 8012ed0:	4619      	mov	r1, r3
 8012ed2:	2004      	movs	r0, #4
 8012ed4:	f7fe fdfc 	bl	8011ad0 <VL53L1_i2c_decode_int32_t>
 8012ed8:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 8012ede:	68bb      	ldr	r3, [r7, #8]
 8012ee0:	331c      	adds	r3, #28
 8012ee2:	4619      	mov	r1, r3
 8012ee4:	2004      	movs	r0, #4
 8012ee6:	f7fe fdd6 	bl	8011a96 <VL53L1_i2c_decode_uint32_t>
 8012eea:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 8012ef0:	68bb      	ldr	r3, [r7, #8]
 8012ef2:	f893 2020 	ldrb.w	r2, [r3, #32]
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 8012efc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012f00:	4618      	mov	r0, r3
 8012f02:	3718      	adds	r7, #24
 8012f04:	46bd      	mov	sp, r7
 8012f06:	bd80      	pop	{r7, pc}

08012f08 <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 8012f08:	b580      	push	{r7, lr}
 8012f0a:	b086      	sub	sp, #24
 8012f0c:	af00      	add	r7, sp, #0
 8012f0e:	4603      	mov	r3, r0
 8012f10:	60b9      	str	r1, [r7, #8]
 8012f12:	607a      	str	r2, [r7, #4]
 8012f14:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_debug_results_t from the input I2C read buffer
	 * Buffer must be at least 56 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012f16:	2300      	movs	r3, #0
 8012f18:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 8012f1a:	89fb      	ldrh	r3, [r7, #14]
 8012f1c:	2b37      	cmp	r3, #55	@ 0x37
 8012f1e:	d802      	bhi.n	8012f26 <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012f20:	f06f 0309 	mvn.w	r3, #9
 8012f24:	e15e      	b.n	80131e4 <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 8012f26:	68b9      	ldr	r1, [r7, #8]
 8012f28:	2002      	movs	r0, #2
 8012f2a:	f7fe fd15 	bl	8011958 <VL53L1_i2c_decode_uint16_t>
 8012f2e:	4603      	mov	r3, r0
 8012f30:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 8012f36:	68bb      	ldr	r3, [r7, #8]
 8012f38:	3302      	adds	r3, #2
 8012f3a:	781b      	ldrb	r3, [r3, #0]
 8012f3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012f40:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 8012f46:	68bb      	ldr	r3, [r7, #8]
 8012f48:	3303      	adds	r3, #3
 8012f4a:	781b      	ldrb	r3, [r3, #0]
 8012f4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012f50:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 8012f56:	68bb      	ldr	r3, [r7, #8]
 8012f58:	3304      	adds	r3, #4
 8012f5a:	781b      	ldrb	r3, [r3, #0]
 8012f5c:	f003 0303 	and.w	r3, r3, #3
 8012f60:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 8012f66:	68bb      	ldr	r3, [r7, #8]
 8012f68:	3305      	adds	r3, #5
 8012f6a:	781b      	ldrb	r3, [r3, #0]
 8012f6c:	f003 0301 	and.w	r3, r3, #1
 8012f70:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 8012f76:	68bb      	ldr	r3, [r7, #8]
 8012f78:	3306      	adds	r3, #6
 8012f7a:	781b      	ldrb	r3, [r3, #0]
 8012f7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012f80:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 8012f86:	68bb      	ldr	r3, [r7, #8]
 8012f88:	3307      	adds	r3, #7
 8012f8a:	781b      	ldrb	r3, [r3, #0]
 8012f8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012f90:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 8012f96:	68bb      	ldr	r3, [r7, #8]
 8012f98:	3308      	adds	r3, #8
 8012f9a:	4619      	mov	r1, r3
 8012f9c:	2002      	movs	r0, #2
 8012f9e:	f7fe fcdb 	bl	8011958 <VL53L1_i2c_decode_uint16_t>
 8012fa2:	4603      	mov	r3, r0
 8012fa4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012fa8:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 8012fae:	68bb      	ldr	r3, [r7, #8]
 8012fb0:	330a      	adds	r3, #10
 8012fb2:	781b      	ldrb	r3, [r3, #0]
 8012fb4:	f003 0303 	and.w	r3, r3, #3
 8012fb8:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 8012fbe:	68bb      	ldr	r3, [r7, #8]
 8012fc0:	330b      	adds	r3, #11
 8012fc2:	781b      	ldrb	r3, [r3, #0]
 8012fc4:	f003 0303 	and.w	r3, r3, #3
 8012fc8:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 8012fce:	68bb      	ldr	r3, [r7, #8]
 8012fd0:	330c      	adds	r3, #12
 8012fd2:	781b      	ldrb	r3, [r3, #0]
 8012fd4:	f003 030f 	and.w	r3, r3, #15
 8012fd8:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 8012fde:	68bb      	ldr	r3, [r7, #8]
 8012fe0:	330d      	adds	r3, #13
 8012fe2:	781b      	ldrb	r3, [r3, #0]
 8012fe4:	f003 0307 	and.w	r3, r3, #7
 8012fe8:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 8012fee:	68bb      	ldr	r3, [r7, #8]
 8012ff0:	330e      	adds	r3, #14
 8012ff2:	781b      	ldrb	r3, [r3, #0]
 8012ff4:	f003 0301 	and.w	r3, r3, #1
 8012ff8:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 8012ffe:	68bb      	ldr	r3, [r7, #8]
 8013000:	330f      	adds	r3, #15
 8013002:	781b      	ldrb	r3, [r3, #0]
 8013004:	f003 0303 	and.w	r3, r3, #3
 8013008:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 801300e:	68bb      	ldr	r3, [r7, #8]
 8013010:	7c1a      	ldrb	r2, [r3, #16]
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 8013016:	68bb      	ldr	r3, [r7, #8]
 8013018:	7c5a      	ldrb	r2, [r3, #17]
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 801301e:	68bb      	ldr	r3, [r7, #8]
 8013020:	3312      	adds	r3, #18
 8013022:	4619      	mov	r1, r3
 8013024:	2002      	movs	r0, #2
 8013026:	f7fe fc97 	bl	8011958 <VL53L1_i2c_decode_uint16_t>
 801302a:	4603      	mov	r3, r0
 801302c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013030:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8013036:	68bb      	ldr	r3, [r7, #8]
 8013038:	3316      	adds	r3, #22
 801303a:	4619      	mov	r1, r3
 801303c:	2002      	movs	r0, #2
 801303e:	f7fe fc8b 	bl	8011958 <VL53L1_i2c_decode_uint16_t>
 8013042:	4603      	mov	r3, r0
 8013044:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 801304a:	68bb      	ldr	r3, [r7, #8]
 801304c:	3318      	adds	r3, #24
 801304e:	4619      	mov	r1, r3
 8013050:	2002      	movs	r0, #2
 8013052:	f7fe fc81 	bl	8011958 <VL53L1_i2c_decode_uint16_t>
 8013056:	4603      	mov	r3, r0
 8013058:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 801305e:	68bb      	ldr	r3, [r7, #8]
 8013060:	331a      	adds	r3, #26
 8013062:	781b      	ldrb	r3, [r3, #0]
 8013064:	f003 0301 	and.w	r3, r3, #1
 8013068:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 801306e:	68bb      	ldr	r3, [r7, #8]
 8013070:	331b      	adds	r3, #27
 8013072:	781b      	ldrb	r3, [r3, #0]
 8013074:	f003 0307 	and.w	r3, r3, #7
 8013078:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 801307e:	68bb      	ldr	r3, [r7, #8]
 8013080:	7f1a      	ldrb	r2, [r3, #28]
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 8013086:	68bb      	ldr	r3, [r7, #8]
 8013088:	7f5a      	ldrb	r2, [r3, #29]
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 801308e:	68bb      	ldr	r3, [r7, #8]
 8013090:	331e      	adds	r3, #30
 8013092:	781b      	ldrb	r3, [r3, #0]
 8013094:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013098:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 801309e:	68bb      	ldr	r3, [r7, #8]
 80130a0:	331f      	adds	r3, #31
 80130a2:	781b      	ldrb	r3, [r3, #0]
 80130a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80130a8:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 80130ae:	68bb      	ldr	r3, [r7, #8]
 80130b0:	3320      	adds	r3, #32
 80130b2:	781b      	ldrb	r3, [r3, #0]
 80130b4:	f003 0303 	and.w	r3, r3, #3
 80130b8:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 80130be:	68bb      	ldr	r3, [r7, #8]
 80130c0:	3321      	adds	r3, #33	@ 0x21
 80130c2:	781b      	ldrb	r3, [r3, #0]
 80130c4:	f003 030f 	and.w	r3, r3, #15
 80130c8:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 80130ce:	68bb      	ldr	r3, [r7, #8]
 80130d0:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 80130da:	68bb      	ldr	r3, [r7, #8]
 80130dc:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 80130e6:	68bb      	ldr	r3, [r7, #8]
 80130e8:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 80130f2:	68bb      	ldr	r3, [r7, #8]
 80130f4:	3325      	adds	r3, #37	@ 0x25
 80130f6:	781b      	ldrb	r3, [r3, #0]
 80130f8:	f003 0301 	and.w	r3, r3, #1
 80130fc:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 8013104:	68bb      	ldr	r3, [r7, #8]
 8013106:	3326      	adds	r3, #38	@ 0x26
 8013108:	781b      	ldrb	r3, [r3, #0]
 801310a:	f003 0303 	and.w	r3, r3, #3
 801310e:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 8013116:	68bb      	ldr	r3, [r7, #8]
 8013118:	3327      	adds	r3, #39	@ 0x27
 801311a:	781b      	ldrb	r3, [r3, #0]
 801311c:	f003 031f 	and.w	r3, r3, #31
 8013120:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 8013128:	68bb      	ldr	r3, [r7, #8]
 801312a:	3328      	adds	r3, #40	@ 0x28
 801312c:	781b      	ldrb	r3, [r3, #0]
 801312e:	f003 031f 	and.w	r3, r3, #31
 8013132:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 801313a:	68bb      	ldr	r3, [r7, #8]
 801313c:	3329      	adds	r3, #41	@ 0x29
 801313e:	781b      	ldrb	r3, [r3, #0]
 8013140:	f003 031f 	and.w	r3, r3, #31
 8013144:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 801314c:	68bb      	ldr	r3, [r7, #8]
 801314e:	332a      	adds	r3, #42	@ 0x2a
 8013150:	781b      	ldrb	r3, [r3, #0]
 8013152:	f003 0301 	and.w	r3, r3, #1
 8013156:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 801315e:	68bb      	ldr	r3, [r7, #8]
 8013160:	332b      	adds	r3, #43	@ 0x2b
 8013162:	781b      	ldrb	r3, [r3, #0]
 8013164:	f003 0301 	and.w	r3, r3, #1
 8013168:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 8013170:	68bb      	ldr	r3, [r7, #8]
 8013172:	332c      	adds	r3, #44	@ 0x2c
 8013174:	781b      	ldrb	r3, [r3, #0]
 8013176:	f003 0303 	and.w	r3, r3, #3
 801317a:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 8013182:	68bb      	ldr	r3, [r7, #8]
 8013184:	332d      	adds	r3, #45	@ 0x2d
 8013186:	781b      	ldrb	r3, [r3, #0]
 8013188:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801318c:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 8013194:	68bb      	ldr	r3, [r7, #8]
 8013196:	332e      	adds	r3, #46	@ 0x2e
 8013198:	4619      	mov	r1, r3
 801319a:	2004      	movs	r0, #4
 801319c:	f7fe fc7b 	bl	8011a96 <VL53L1_i2c_decode_uint32_t>
 80131a0:	4603      	mov	r3, r0
 80131a2:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	62da      	str	r2, [r3, #44]	@ 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 80131aa:	68bb      	ldr	r3, [r7, #8]
 80131ac:	3332      	adds	r3, #50	@ 0x32
 80131ae:	4619      	mov	r1, r3
 80131b0:	2004      	movs	r0, #4
 80131b2:	f7fe fc70 	bl	8011a96 <VL53L1_i2c_decode_uint32_t>
 80131b6:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	631a      	str	r2, [r3, #48]	@ 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 80131bc:	68bb      	ldr	r3, [r7, #8]
 80131be:	3336      	adds	r3, #54	@ 0x36
 80131c0:	781b      	ldrb	r3, [r3, #0]
 80131c2:	f003 0301 	and.w	r3, r3, #1
 80131c6:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 80131ce:	68bb      	ldr	r3, [r7, #8]
 80131d0:	3337      	adds	r3, #55	@ 0x37
 80131d2:	781b      	ldrb	r3, [r3, #0]
 80131d4:	f003 0301 	and.w	r3, r3, #1
 80131d8:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

	LOG_FUNCTION_END(status);

	return status;
 80131e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80131e4:	4618      	mov	r0, r3
 80131e6:	3718      	adds	r7, #24
 80131e8:	46bd      	mov	sp, r7
 80131ea:	bd80      	pop	{r7, pc}

080131ec <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 80131ec:	b580      	push	{r7, lr}
 80131ee:	b086      	sub	sp, #24
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	4603      	mov	r3, r0
 80131f4:	60b9      	str	r1, [r7, #8]
 80131f6:	607a      	str	r2, [r7, #4]
 80131f8:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_nvm_copy_data_t from the input I2C read buffer
	 * Buffer must be at least 49 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80131fa:	2300      	movs	r3, #0
 80131fc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 80131fe:	89fb      	ldrh	r3, [r7, #14]
 8013200:	2b30      	cmp	r3, #48	@ 0x30
 8013202:	d802      	bhi.n	801320a <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8013204:	f06f 0309 	mvn.w	r3, #9
 8013208:	e112      	b.n	8013430 <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 801320a:	68bb      	ldr	r3, [r7, #8]
 801320c:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 8013212:	68bb      	ldr	r3, [r7, #8]
 8013214:	785a      	ldrb	r2, [r3, #1]
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 801321a:	68bb      	ldr	r3, [r7, #8]
 801321c:	789a      	ldrb	r2, [r3, #2]
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 8013222:	68bb      	ldr	r3, [r7, #8]
 8013224:	3303      	adds	r3, #3
 8013226:	4619      	mov	r1, r3
 8013228:	2002      	movs	r0, #2
 801322a:	f7fe fb95 	bl	8011958 <VL53L1_i2c_decode_uint16_t>
 801322e:	4603      	mov	r3, r0
 8013230:	461a      	mov	r2, r3
	pdata->identification__module_id =
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 8013236:	68bb      	ldr	r3, [r7, #8]
 8013238:	3305      	adds	r3, #5
 801323a:	781b      	ldrb	r3, [r3, #0]
 801323c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013240:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 8013246:	68bb      	ldr	r3, [r7, #8]
 8013248:	3306      	adds	r3, #6
 801324a:	781b      	ldrb	r3, [r3, #0]
 801324c:	f003 0307 	and.w	r3, r3, #7
 8013250:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 8013256:	68bb      	ldr	r3, [r7, #8]
 8013258:	3307      	adds	r3, #7
 801325a:	781b      	ldrb	r3, [r3, #0]
 801325c:	f003 0307 	and.w	r3, r3, #7
 8013260:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 8013266:	68bb      	ldr	r3, [r7, #8]
 8013268:	3308      	adds	r3, #8
 801326a:	781b      	ldrb	r3, [r3, #0]
 801326c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013270:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 8013276:	68bb      	ldr	r3, [r7, #8]
 8013278:	3309      	adds	r3, #9
 801327a:	781b      	ldrb	r3, [r3, #0]
 801327c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013280:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 8013286:	68bb      	ldr	r3, [r7, #8]
 8013288:	330a      	adds	r3, #10
 801328a:	781b      	ldrb	r3, [r3, #0]
 801328c:	f003 0301 	and.w	r3, r3, #1
 8013290:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 8013296:	68bb      	ldr	r3, [r7, #8]
 8013298:	330b      	adds	r3, #11
 801329a:	781b      	ldrb	r3, [r3, #0]
 801329c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80132a0:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 80132a6:	68bb      	ldr	r3, [r7, #8]
 80132a8:	330c      	adds	r3, #12
 80132aa:	781b      	ldrb	r3, [r3, #0]
 80132ac:	f003 0301 	and.w	r3, r3, #1
 80132b0:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 80132b6:	68bb      	ldr	r3, [r7, #8]
 80132b8:	330d      	adds	r3, #13
 80132ba:	781b      	ldrb	r3, [r3, #0]
 80132bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80132c0:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 80132c6:	68bb      	ldr	r3, [r7, #8]
 80132c8:	330e      	adds	r3, #14
 80132ca:	781b      	ldrb	r3, [r3, #0]
 80132cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80132d0:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 80132d6:	68bb      	ldr	r3, [r7, #8]
 80132d8:	7bda      	ldrb	r2, [r3, #15]
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 80132de:	68bb      	ldr	r3, [r7, #8]
 80132e0:	7c1a      	ldrb	r2, [r3, #16]
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 80132e6:	68bb      	ldr	r3, [r7, #8]
 80132e8:	7c5a      	ldrb	r2, [r3, #17]
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 80132ee:	68bb      	ldr	r3, [r7, #8]
 80132f0:	7c9a      	ldrb	r2, [r3, #18]
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 80132f6:	68bb      	ldr	r3, [r7, #8]
 80132f8:	7cda      	ldrb	r2, [r3, #19]
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 80132fe:	68bb      	ldr	r3, [r7, #8]
 8013300:	7d1a      	ldrb	r2, [r3, #20]
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 8013306:	68bb      	ldr	r3, [r7, #8]
 8013308:	7d5a      	ldrb	r2, [r3, #21]
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 801330e:	68bb      	ldr	r3, [r7, #8]
 8013310:	7d9a      	ldrb	r2, [r3, #22]
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 8013316:	68bb      	ldr	r3, [r7, #8]
 8013318:	7dda      	ldrb	r2, [r3, #23]
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 801331e:	68bb      	ldr	r3, [r7, #8]
 8013320:	7e1a      	ldrb	r2, [r3, #24]
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 8013326:	68bb      	ldr	r3, [r7, #8]
 8013328:	7e5a      	ldrb	r2, [r3, #25]
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 801332e:	68bb      	ldr	r3, [r7, #8]
 8013330:	7e9a      	ldrb	r2, [r3, #26]
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 8013336:	68bb      	ldr	r3, [r7, #8]
 8013338:	7eda      	ldrb	r2, [r3, #27]
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 801333e:	68bb      	ldr	r3, [r7, #8]
 8013340:	7f1a      	ldrb	r2, [r3, #28]
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 8013346:	68bb      	ldr	r3, [r7, #8]
 8013348:	7f5a      	ldrb	r2, [r3, #29]
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 801334e:	68bb      	ldr	r3, [r7, #8]
 8013350:	7f9a      	ldrb	r2, [r3, #30]
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 8013356:	68bb      	ldr	r3, [r7, #8]
 8013358:	7fda      	ldrb	r2, [r3, #31]
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 8013360:	68bb      	ldr	r3, [r7, #8]
 8013362:	f893 2020 	ldrb.w	r2, [r3, #32]
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 801336c:	68bb      	ldr	r3, [r7, #8]
 801336e:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 8013378:	68bb      	ldr	r3, [r7, #8]
 801337a:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 8013384:	68bb      	ldr	r3, [r7, #8]
 8013386:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 8013390:	68bb      	ldr	r3, [r7, #8]
 8013392:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 801339c:	68bb      	ldr	r3, [r7, #8]
 801339e:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 80133a8:	68bb      	ldr	r3, [r7, #8]
 80133aa:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 80133b4:	68bb      	ldr	r3, [r7, #8]
 80133b6:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 80133c0:	68bb      	ldr	r3, [r7, #8]
 80133c2:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 80133cc:	68bb      	ldr	r3, [r7, #8]
 80133ce:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 80133d8:	68bb      	ldr	r3, [r7, #8]
 80133da:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 80133e4:	68bb      	ldr	r3, [r7, #8]
 80133e6:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 80133f0:	68bb      	ldr	r3, [r7, #8]
 80133f2:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 80133fc:	68bb      	ldr	r3, [r7, #8]
 80133fe:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 8013408:	68bb      	ldr	r3, [r7, #8]
 801340a:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 8013414:	68bb      	ldr	r3, [r7, #8]
 8013416:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 8013420:	68bb      	ldr	r3, [r7, #8]
 8013422:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 801342c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013430:	4618      	mov	r0, r3
 8013432:	3718      	adds	r7, #24
 8013434:	46bd      	mov	sp, r7
 8013436:	bd80      	pop	{r7, pc}

08013438 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8013438:	b580      	push	{r7, lr}
 801343a:	b090      	sub	sp, #64	@ 0x40
 801343c:	af00      	add	r7, sp, #0
 801343e:	6078      	str	r0, [r7, #4]
 8013440:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_nvm_copy_data_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013442:	2300      	movs	r3, #0
 8013444:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8013448:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 801344c:	2b00      	cmp	r3, #0
 801344e:	d10a      	bne.n	8013466 <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 8013450:	f107 020c 	add.w	r2, r7, #12
 8013454:	2331      	movs	r3, #49	@ 0x31
 8013456:	f240 110f 	movw	r1, #271	@ 0x10f
 801345a:	6878      	ldr	r0, [r7, #4]
 801345c:	f000 f8ba 	bl	80135d4 <VL53L1_ReadMulti>
 8013460:	4603      	mov	r3, r0
 8013462:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8013466:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 801346a:	2b00      	cmp	r3, #0
 801346c:	d109      	bne.n	8013482 <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 801346e:	f107 030c 	add.w	r3, r7, #12
 8013472:	683a      	ldr	r2, [r7, #0]
 8013474:	4619      	mov	r1, r3
 8013476:	2031      	movs	r0, #49	@ 0x31
 8013478:	f7ff feb8 	bl	80131ec <VL53L1_i2c_decode_nvm_copy_data>
 801347c:	4603      	mov	r3, r0
 801347e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8013482:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8013486:	4618      	mov	r0, r3
 8013488:	3740      	adds	r7, #64	@ 0x40
 801348a:	46bd      	mov	sp, r7
 801348c:	bd80      	pop	{r7, pc}

0801348e <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 801348e:	b580      	push	{r7, lr}
 8013490:	b086      	sub	sp, #24
 8013492:	af02      	add	r7, sp, #8
 8013494:	6078      	str	r0, [r7, #4]
 8013496:	6039      	str	r1, [r7, #0]
	/**
	 * Polls the bit 0 of the FIRMWARE__SYSTEM_STATUS register to see if
	 * the firmware is ready.
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8013498:	2300      	movs	r3, #0
 801349a:	73fb      	strb	r3, [r7, #15]
	 * it copies the NVM data into the G02 host register banks
	 * The host must wait the required time to allow the copy
	 * to complete before attempting to read the firmware status
	 */

	status = VL53L1_WaitUs(
 801349c:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 80134a0:	6878      	ldr	r0, [r7, #4]
 80134a2:	f000 f989 	bl	80137b8 <VL53L1_WaitUs>
 80134a6:	4603      	mov	r3, r0
 80134a8:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 80134aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d10b      	bne.n	80134ca <VL53L1_poll_for_boot_completion+0x3c>
		status =
			VL53L1_WaitValueMaskEx(
 80134b2:	2301      	movs	r3, #1
 80134b4:	9301      	str	r3, [sp, #4]
 80134b6:	2301      	movs	r3, #1
 80134b8:	9300      	str	r3, [sp, #0]
 80134ba:	2301      	movs	r3, #1
 80134bc:	22e5      	movs	r2, #229	@ 0xe5
 80134be:	6839      	ldr	r1, [r7, #0]
 80134c0:	6878      	ldr	r0, [r7, #4]
 80134c2:	f000 f98f 	bl	80137e4 <VL53L1_WaitValueMaskEx>
 80134c6:	4603      	mov	r3, r0
 80134c8:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 80134ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d103      	bne.n	80134da <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 80134d2:	2103      	movs	r1, #3
 80134d4:	6878      	ldr	r0, [r7, #4]
 80134d6:	f7fd fff8 	bl	80114ca <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 80134da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80134de:	4618      	mov	r0, r3
 80134e0:	3710      	adds	r7, #16
 80134e2:	46bd      	mov	sp, r7
 80134e4:	bd80      	pop	{r7, pc}

080134e6 <_I2CWrite>:
#   define VL53L1_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 80134e6:	b580      	push	{r7, lr}
 80134e8:	b088      	sub	sp, #32
 80134ea:	af02      	add	r7, sp, #8
 80134ec:	60f8      	str	r0, [r7, #12]
 80134ee:	60b9      	str	r1, [r7, #8]
 80134f0:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	330a      	adds	r3, #10
 80134f6:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	f8d3 03a0 	ldr.w	r0, [r3, #928]	@ 0x3a0
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	f893 3398 	ldrb.w	r3, [r3, #920]	@ 0x398
 8013504:	4619      	mov	r1, r3
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	b29a      	uxth	r2, r3
 801350a:	697b      	ldr	r3, [r7, #20]
 801350c:	9300      	str	r3, [sp, #0]
 801350e:	4613      	mov	r3, r2
 8013510:	68ba      	ldr	r2, [r7, #8]
 8013512:	f7f4 f9bb 	bl	800788c <HAL_I2C_Master_Transmit>
 8013516:	4603      	mov	r3, r0
 8013518:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 801351a:	693b      	ldr	r3, [r7, #16]
}
 801351c:	4618      	mov	r0, r3
 801351e:	3718      	adds	r7, #24
 8013520:	46bd      	mov	sp, r7
 8013522:	bd80      	pop	{r7, pc}

08013524 <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 8013524:	b580      	push	{r7, lr}
 8013526:	b088      	sub	sp, #32
 8013528:	af02      	add	r7, sp, #8
 801352a:	60f8      	str	r0, [r7, #12]
 801352c:	60b9      	str	r1, [r7, #8]
 801352e:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	330a      	adds	r3, #10
 8013534:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	f8d3 03a0 	ldr.w	r0, [r3, #928]	@ 0x3a0
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	f893 3398 	ldrb.w	r3, [r3, #920]	@ 0x398
 8013542:	f043 0301 	orr.w	r3, r3, #1
 8013546:	b2db      	uxtb	r3, r3
 8013548:	4619      	mov	r1, r3
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	b29a      	uxth	r2, r3
 801354e:	697b      	ldr	r3, [r7, #20]
 8013550:	9300      	str	r3, [sp, #0]
 8013552:	4613      	mov	r3, r2
 8013554:	68ba      	ldr	r2, [r7, #8]
 8013556:	f7f4 fab1 	bl	8007abc <HAL_I2C_Master_Receive>
 801355a:	4603      	mov	r3, r0
 801355c:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 801355e:	693b      	ldr	r3, [r7, #16]
}
 8013560:	4618      	mov	r0, r3
 8013562:	3718      	adds	r7, #24
 8013564:	46bd      	mov	sp, r7
 8013566:	bd80      	pop	{r7, pc}

08013568 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8013568:	b580      	push	{r7, lr}
 801356a:	b086      	sub	sp, #24
 801356c:	af00      	add	r7, sp, #0
 801356e:	60f8      	str	r0, [r7, #12]
 8013570:	607a      	str	r2, [r7, #4]
 8013572:	603b      	str	r3, [r7, #0]
 8013574:	460b      	mov	r3, r1
 8013576:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8013578:	2300      	movs	r3, #0
 801357a:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 801357c:	683b      	ldr	r3, [r7, #0]
 801357e:	2bff      	cmp	r3, #255	@ 0xff
 8013580:	d902      	bls.n	8013588 <VL53L1_WriteMulti+0x20>
        return VL53L1_ERROR_INVALID_PARAMS;
 8013582:	f06f 0303 	mvn.w	r3, #3
 8013586:	e01d      	b.n	80135c4 <VL53L1_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 8013588:	897b      	ldrh	r3, [r7, #10]
 801358a:	0a1b      	lsrs	r3, r3, #8
 801358c:	b29b      	uxth	r3, r3
 801358e:	b2da      	uxtb	r2, r3
 8013590:	4b0e      	ldr	r3, [pc, #56]	@ (80135cc <VL53L1_WriteMulti+0x64>)
 8013592:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8013594:	897b      	ldrh	r3, [r7, #10]
 8013596:	b2da      	uxtb	r2, r3
 8013598:	4b0c      	ldr	r3, [pc, #48]	@ (80135cc <VL53L1_WriteMulti+0x64>)
 801359a:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 801359c:	683a      	ldr	r2, [r7, #0]
 801359e:	6879      	ldr	r1, [r7, #4]
 80135a0:	480b      	ldr	r0, [pc, #44]	@ (80135d0 <VL53L1_WriteMulti+0x68>)
 80135a2:	f001 f89c 	bl	80146de <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 80135a6:	683b      	ldr	r3, [r7, #0]
 80135a8:	3302      	adds	r3, #2
 80135aa:	461a      	mov	r2, r3
 80135ac:	4907      	ldr	r1, [pc, #28]	@ (80135cc <VL53L1_WriteMulti+0x64>)
 80135ae:	68f8      	ldr	r0, [r7, #12]
 80135b0:	f7ff ff99 	bl	80134e6 <_I2CWrite>
 80135b4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80135b6:	693b      	ldr	r3, [r7, #16]
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d001      	beq.n	80135c0 <VL53L1_WriteMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80135bc:	23f3      	movs	r3, #243	@ 0xf3
 80135be:	75fb      	strb	r3, [r7, #23]
    }
    VL53L1_PutI2cBus();
    return Status;
 80135c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80135c4:	4618      	mov	r0, r3
 80135c6:	3718      	adds	r7, #24
 80135c8:	46bd      	mov	sp, r7
 80135ca:	bd80      	pop	{r7, pc}
 80135cc:	200011e4 	.word	0x200011e4
 80135d0:	200011e6 	.word	0x200011e6

080135d4 <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 80135d4:	b580      	push	{r7, lr}
 80135d6:	b086      	sub	sp, #24
 80135d8:	af00      	add	r7, sp, #0
 80135da:	60f8      	str	r0, [r7, #12]
 80135dc:	607a      	str	r2, [r7, #4]
 80135de:	603b      	str	r3, [r7, #0]
 80135e0:	460b      	mov	r3, r1
 80135e2:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80135e4:	2300      	movs	r3, #0
 80135e6:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80135e8:	897b      	ldrh	r3, [r7, #10]
 80135ea:	0a1b      	lsrs	r3, r3, #8
 80135ec:	b29b      	uxth	r3, r3
 80135ee:	b2da      	uxtb	r2, r3
 80135f0:	4b12      	ldr	r3, [pc, #72]	@ (801363c <VL53L1_ReadMulti+0x68>)
 80135f2:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80135f4:	897b      	ldrh	r3, [r7, #10]
 80135f6:	b2da      	uxtb	r2, r3
 80135f8:	4b10      	ldr	r3, [pc, #64]	@ (801363c <VL53L1_ReadMulti+0x68>)
 80135fa:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80135fc:	2202      	movs	r2, #2
 80135fe:	490f      	ldr	r1, [pc, #60]	@ (801363c <VL53L1_ReadMulti+0x68>)
 8013600:	68f8      	ldr	r0, [r7, #12]
 8013602:	f7ff ff70 	bl	80134e6 <_I2CWrite>
 8013606:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8013608:	693b      	ldr	r3, [r7, #16]
 801360a:	2b00      	cmp	r3, #0
 801360c:	d002      	beq.n	8013614 <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 801360e:	23f3      	movs	r3, #243	@ 0xf3
 8013610:	75fb      	strb	r3, [r7, #23]
        goto done;
 8013612:	e00c      	b.n	801362e <VL53L1_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8013614:	683a      	ldr	r2, [r7, #0]
 8013616:	6879      	ldr	r1, [r7, #4]
 8013618:	68f8      	ldr	r0, [r7, #12]
 801361a:	f7ff ff83 	bl	8013524 <_I2CRead>
 801361e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8013620:	693b      	ldr	r3, [r7, #16]
 8013622:	2b00      	cmp	r3, #0
 8013624:	d002      	beq.n	801362c <VL53L1_ReadMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8013626:	23f3      	movs	r3, #243	@ 0xf3
 8013628:	75fb      	strb	r3, [r7, #23]
 801362a:	e000      	b.n	801362e <VL53L1_ReadMulti+0x5a>
    }
done:
 801362c:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 801362e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013632:	4618      	mov	r0, r3
 8013634:	3718      	adds	r7, #24
 8013636:	46bd      	mov	sp, r7
 8013638:	bd80      	pop	{r7, pc}
 801363a:	bf00      	nop
 801363c:	200011e4 	.word	0x200011e4

08013640 <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 8013640:	b580      	push	{r7, lr}
 8013642:	b084      	sub	sp, #16
 8013644:	af00      	add	r7, sp, #0
 8013646:	6078      	str	r0, [r7, #4]
 8013648:	460b      	mov	r3, r1
 801364a:	807b      	strh	r3, [r7, #2]
 801364c:	4613      	mov	r3, r2
 801364e:	707b      	strb	r3, [r7, #1]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8013650:	2300      	movs	r3, #0
 8013652:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8013654:	887b      	ldrh	r3, [r7, #2]
 8013656:	0a1b      	lsrs	r3, r3, #8
 8013658:	b29b      	uxth	r3, r3
 801365a:	b2da      	uxtb	r2, r3
 801365c:	4b0c      	ldr	r3, [pc, #48]	@ (8013690 <VL53L1_WrByte+0x50>)
 801365e:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8013660:	887b      	ldrh	r3, [r7, #2]
 8013662:	b2da      	uxtb	r2, r3
 8013664:	4b0a      	ldr	r3, [pc, #40]	@ (8013690 <VL53L1_WrByte+0x50>)
 8013666:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8013668:	4a09      	ldr	r2, [pc, #36]	@ (8013690 <VL53L1_WrByte+0x50>)
 801366a:	787b      	ldrb	r3, [r7, #1]
 801366c:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 801366e:	2203      	movs	r2, #3
 8013670:	4907      	ldr	r1, [pc, #28]	@ (8013690 <VL53L1_WrByte+0x50>)
 8013672:	6878      	ldr	r0, [r7, #4]
 8013674:	f7ff ff37 	bl	80134e6 <_I2CWrite>
 8013678:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 801367a:	68bb      	ldr	r3, [r7, #8]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d001      	beq.n	8013684 <VL53L1_WrByte+0x44>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8013680:	23f3      	movs	r3, #243	@ 0xf3
 8013682:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 8013684:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013688:	4618      	mov	r0, r3
 801368a:	3710      	adds	r7, #16
 801368c:	46bd      	mov	sp, r7
 801368e:	bd80      	pop	{r7, pc}
 8013690:	200011e4 	.word	0x200011e4

08013694 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 8013694:	b580      	push	{r7, lr}
 8013696:	b086      	sub	sp, #24
 8013698:	af00      	add	r7, sp, #0
 801369a:	60f8      	str	r0, [r7, #12]
 801369c:	460b      	mov	r3, r1
 801369e:	607a      	str	r2, [r7, #4]
 80136a0:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80136a2:	2300      	movs	r3, #0
 80136a4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 80136a6:	897b      	ldrh	r3, [r7, #10]
 80136a8:	0a1b      	lsrs	r3, r3, #8
 80136aa:	b29b      	uxth	r3, r3
 80136ac:	b2da      	uxtb	r2, r3
 80136ae:	4b12      	ldr	r3, [pc, #72]	@ (80136f8 <VL53L1_RdByte+0x64>)
 80136b0:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 80136b2:	897b      	ldrh	r3, [r7, #10]
 80136b4:	b2da      	uxtb	r2, r3
 80136b6:	4b10      	ldr	r3, [pc, #64]	@ (80136f8 <VL53L1_RdByte+0x64>)
 80136b8:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80136ba:	2202      	movs	r2, #2
 80136bc:	490e      	ldr	r1, [pc, #56]	@ (80136f8 <VL53L1_RdByte+0x64>)
 80136be:	68f8      	ldr	r0, [r7, #12]
 80136c0:	f7ff ff11 	bl	80134e6 <_I2CWrite>
 80136c4:	6138      	str	r0, [r7, #16]
    if( status_int ){
 80136c6:	693b      	ldr	r3, [r7, #16]
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d002      	beq.n	80136d2 <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80136cc:	23f3      	movs	r3, #243	@ 0xf3
 80136ce:	75fb      	strb	r3, [r7, #23]
        goto done;
 80136d0:	e00c      	b.n	80136ec <VL53L1_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 80136d2:	2201      	movs	r2, #1
 80136d4:	6879      	ldr	r1, [r7, #4]
 80136d6:	68f8      	ldr	r0, [r7, #12]
 80136d8:	f7ff ff24 	bl	8013524 <_I2CRead>
 80136dc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80136de:	693b      	ldr	r3, [r7, #16]
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d002      	beq.n	80136ea <VL53L1_RdByte+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80136e4:	23f3      	movs	r3, #243	@ 0xf3
 80136e6:	75fb      	strb	r3, [r7, #23]
 80136e8:	e000      	b.n	80136ec <VL53L1_RdByte+0x58>
    }
done:
 80136ea:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 80136ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80136f0:	4618      	mov	r0, r3
 80136f2:	3718      	adds	r7, #24
 80136f4:	46bd      	mov	sp, r7
 80136f6:	bd80      	pop	{r7, pc}
 80136f8:	200011e4 	.word	0x200011e4

080136fc <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 80136fc:	b580      	push	{r7, lr}
 80136fe:	b086      	sub	sp, #24
 8013700:	af00      	add	r7, sp, #0
 8013702:	60f8      	str	r0, [r7, #12]
 8013704:	460b      	mov	r3, r1
 8013706:	607a      	str	r2, [r7, #4]
 8013708:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 801370a:	2300      	movs	r3, #0
 801370c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 801370e:	897b      	ldrh	r3, [r7, #10]
 8013710:	0a1b      	lsrs	r3, r3, #8
 8013712:	b29b      	uxth	r3, r3
 8013714:	b2da      	uxtb	r2, r3
 8013716:	4b17      	ldr	r3, [pc, #92]	@ (8013774 <VL53L1_RdWord+0x78>)
 8013718:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 801371a:	897b      	ldrh	r3, [r7, #10]
 801371c:	b2da      	uxtb	r2, r3
 801371e:	4b15      	ldr	r3, [pc, #84]	@ (8013774 <VL53L1_RdWord+0x78>)
 8013720:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8013722:	2202      	movs	r2, #2
 8013724:	4913      	ldr	r1, [pc, #76]	@ (8013774 <VL53L1_RdWord+0x78>)
 8013726:	68f8      	ldr	r0, [r7, #12]
 8013728:	f7ff fedd 	bl	80134e6 <_I2CWrite>
 801372c:	6138      	str	r0, [r7, #16]

    if( status_int ){
 801372e:	693b      	ldr	r3, [r7, #16]
 8013730:	2b00      	cmp	r3, #0
 8013732:	d002      	beq.n	801373a <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8013734:	23f3      	movs	r3, #243	@ 0xf3
 8013736:	75fb      	strb	r3, [r7, #23]
        goto done;
 8013738:	e015      	b.n	8013766 <VL53L1_RdWord+0x6a>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 801373a:	2202      	movs	r2, #2
 801373c:	490d      	ldr	r1, [pc, #52]	@ (8013774 <VL53L1_RdWord+0x78>)
 801373e:	68f8      	ldr	r0, [r7, #12]
 8013740:	f7ff fef0 	bl	8013524 <_I2CRead>
 8013744:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8013746:	693b      	ldr	r3, [r7, #16]
 8013748:	2b00      	cmp	r3, #0
 801374a:	d002      	beq.n	8013752 <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 801374c:	23f3      	movs	r3, #243	@ 0xf3
 801374e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8013750:	e009      	b.n	8013766 <VL53L1_RdWord+0x6a>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8013752:	4b08      	ldr	r3, [pc, #32]	@ (8013774 <VL53L1_RdWord+0x78>)
 8013754:	781b      	ldrb	r3, [r3, #0]
 8013756:	021b      	lsls	r3, r3, #8
 8013758:	b29b      	uxth	r3, r3
 801375a:	4a06      	ldr	r2, [pc, #24]	@ (8013774 <VL53L1_RdWord+0x78>)
 801375c:	7852      	ldrb	r2, [r2, #1]
 801375e:	4413      	add	r3, r2
 8013760:	b29a      	uxth	r2, r3
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 8013766:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801376a:	4618      	mov	r0, r3
 801376c:	3718      	adds	r7, #24
 801376e:	46bd      	mov	sp, r7
 8013770:	bd80      	pop	{r7, pc}
 8013772:	bf00      	nop
 8013774:	200011e4 	.word	0x200011e4

08013778 <VL53L1_GetTickCount>:
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(
	uint32_t *ptick_count_ms)
{
 8013778:	b480      	push	{r7}
 801377a:	b085      	sub	sp, #20
 801377c:	af00      	add	r7, sp, #0
 801377e:	6078      	str	r0, [r7, #4]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 8013780:	2300      	movs	r3, #0
 8013782:	73fb      	strb	r3, [r7, #15]

	//*ptick_count_ms = timeGetTime();
	*ptick_count_ms = 0;
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	2200      	movs	r2, #0
 8013788:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 801378a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801378e:	4618      	mov	r0, r3
 8013790:	3714      	adds	r7, #20
 8013792:	46bd      	mov	sp, r7
 8013794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013798:	4770      	bx	lr

0801379a <VL53L1_WaitMs>:
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}


VL53L1_Error VL53L1_WaitMs(VL53L1_Dev_t *pdev, int32_t wait_ms){
 801379a:	b580      	push	{r7, lr}
 801379c:	b082      	sub	sp, #8
 801379e:	af00      	add	r7, sp, #0
 80137a0:	6078      	str	r0, [r7, #4]
 80137a2:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_ms);
 80137a4:	683b      	ldr	r3, [r7, #0]
 80137a6:	4618      	mov	r0, r3
 80137a8:	f7f1 f886 	bl	80048b8 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 80137ac:	2300      	movs	r3, #0
}
 80137ae:	4618      	mov	r0, r3
 80137b0:	3708      	adds	r7, #8
 80137b2:	46bd      	mov	sp, r7
 80137b4:	bd80      	pop	{r7, pc}
	...

080137b8 <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us){
 80137b8:	b580      	push	{r7, lr}
 80137ba:	b082      	sub	sp, #8
 80137bc:	af00      	add	r7, sp, #0
 80137be:	6078      	str	r0, [r7, #4]
 80137c0:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_us/1000);
 80137c2:	683b      	ldr	r3, [r7, #0]
 80137c4:	4a06      	ldr	r2, [pc, #24]	@ (80137e0 <VL53L1_WaitUs+0x28>)
 80137c6:	fb82 1203 	smull	r1, r2, r2, r3
 80137ca:	1192      	asrs	r2, r2, #6
 80137cc:	17db      	asrs	r3, r3, #31
 80137ce:	1ad3      	subs	r3, r2, r3
 80137d0:	4618      	mov	r0, r3
 80137d2:	f7f1 f871 	bl	80048b8 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 80137d6:	2300      	movs	r3, #0
}
 80137d8:	4618      	mov	r0, r3
 80137da:	3708      	adds	r7, #8
 80137dc:	46bd      	mov	sp, r7
 80137de:	bd80      	pop	{r7, pc}
 80137e0:	10624dd3 	.word	0x10624dd3

080137e4 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 80137e4:	b590      	push	{r4, r7, lr}
 80137e6:	f5ad 7d0b 	sub.w	sp, sp, #556	@ 0x22c
 80137ea:	af00      	add	r7, sp, #0
 80137ec:	f507 740a 	add.w	r4, r7, #552	@ 0x228
 80137f0:	f5a4 7407 	sub.w	r4, r4, #540	@ 0x21c
 80137f4:	6020      	str	r0, [r4, #0]
 80137f6:	f507 700a 	add.w	r0, r7, #552	@ 0x228
 80137fa:	f5a0 7008 	sub.w	r0, r0, #544	@ 0x220
 80137fe:	6001      	str	r1, [r0, #0]
 8013800:	4619      	mov	r1, r3
 8013802:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013806:	f2a3 2322 	subw	r3, r3, #546	@ 0x222
 801380a:	801a      	strh	r2, [r3, #0]
 801380c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013810:	f2a3 2323 	subw	r3, r3, #547	@ 0x223
 8013814:	460a      	mov	r2, r1
 8013816:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 8013818:	2300      	movs	r3, #0
 801381a:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
	uint32_t     start_time_ms = 0;
 801381e:	2300      	movs	r3, #0
 8013820:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
	uint32_t     current_time_ms = 0;
 8013824:	2300      	movs	r3, #0
 8013826:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
	uint32_t     polling_time_ms = 0;
 801382a:	2300      	movs	r3, #0
 801382c:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
	uint8_t      byte_value      = 0;
 8013830:	2300      	movs	r3, #0
 8013832:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
	uint8_t      found           = 0;
 8013836:	2300      	movs	r3, #0
 8013838:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 801383c:	f107 0310 	add.w	r3, r7, #16
 8013840:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8013844:	493b      	ldr	r1, [pc, #236]	@ (8013934 <VL53L1_WaitValueMaskEx+0x150>)
 8013846:	4618      	mov	r0, r3
 8013848:	f000 febe 	bl	80145c8 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(&start_time_ms);
 801384c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8013850:	4618      	mov	r0, r3
 8013852:	f7ff ff91 	bl	8013778 <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 8013856:	e049      	b.n	80138ec <VL53L1_WaitValueMaskEx+0x108>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 8013858:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 801385c:	2b00      	cmp	r3, #0
 801385e:	d110      	bne.n	8013882 <VL53L1_WaitValueMaskEx+0x9e>
			status = VL53L1_RdByte(
 8013860:	f207 2213 	addw	r2, r7, #531	@ 0x213
 8013864:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013868:	f2a3 2322 	subw	r3, r3, #546	@ 0x222
 801386c:	8819      	ldrh	r1, [r3, #0]
 801386e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013872:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8013876:	6818      	ldr	r0, [r3, #0]
 8013878:	f7ff ff0c 	bl	8013694 <VL53L1_RdByte>
 801387c:	4603      	mov	r3, r0
 801387e:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
							pdev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 8013882:	f897 2213 	ldrb.w	r2, [r7, #531]	@ 0x213
 8013886:	f897 3238 	ldrb.w	r3, [r7, #568]	@ 0x238
 801388a:	4013      	ands	r3, r2
 801388c:	b2db      	uxtb	r3, r3
 801388e:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 8013892:	f2a2 2223 	subw	r2, r2, #547	@ 0x223
 8013896:	7812      	ldrb	r2, [r2, #0]
 8013898:	429a      	cmp	r2, r3
 801389a:	d102      	bne.n	80138a2 <VL53L1_WaitValueMaskEx+0xbe>
			found = 1;
 801389c:	2301      	movs	r3, #1
 801389e:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f

		if (status == VL53L1_ERROR_NONE  &&
 80138a2:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d114      	bne.n	80138d4 <VL53L1_WaitValueMaskEx+0xf0>
 80138aa:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d110      	bne.n	80138d4 <VL53L1_WaitValueMaskEx+0xf0>
			found == 0 &&
 80138b2:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d00c      	beq.n	80138d4 <VL53L1_WaitValueMaskEx+0xf0>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 80138ba:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 80138be:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80138c2:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80138c6:	4611      	mov	r1, r2
 80138c8:	6818      	ldr	r0, [r3, #0]
 80138ca:	f7ff ff66 	bl	801379a <VL53L1_WaitMs>
 80138ce:	4603      	mov	r3, r0
 80138d0:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
					pdev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(&current_time_ms);
 80138d4:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 80138d8:	4618      	mov	r0, r3
 80138da:	f7ff ff4d 	bl	8013778 <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 80138de:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 80138e2:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 80138e6:	1ad3      	subs	r3, r2, r3
 80138e8:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
		   (polling_time_ms < timeout_ms) &&
 80138ec:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d10c      	bne.n	801390e <VL53L1_WaitValueMaskEx+0x12a>
	while ((status == VL53L1_ERROR_NONE) &&
 80138f4:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80138f8:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80138fc:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 8013900:	681b      	ldr	r3, [r3, #0]
 8013902:	429a      	cmp	r2, r3
 8013904:	d203      	bcs.n	801390e <VL53L1_WaitValueMaskEx+0x12a>
		   (polling_time_ms < timeout_ms) &&
 8013906:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 801390a:	2b00      	cmp	r3, #0
 801390c:	d0a4      	beq.n	8013858 <VL53L1_WaitValueMaskEx+0x74>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 801390e:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8013912:	2b00      	cmp	r3, #0
 8013914:	d106      	bne.n	8013924 <VL53L1_WaitValueMaskEx+0x140>
 8013916:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 801391a:	2b00      	cmp	r3, #0
 801391c:	d102      	bne.n	8013924 <VL53L1_WaitValueMaskEx+0x140>
		status = VL53L1_ERROR_TIME_OUT;
 801391e:	23f9      	movs	r3, #249	@ 0xf9
 8013920:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227

	return status;
 8013924:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
}
 8013928:	4618      	mov	r0, r3
 801392a:	f507 770b 	add.w	r7, r7, #556	@ 0x22c
 801392e:	46bd      	mov	sp, r7
 8013930:	bd90      	pop	{r4, r7, pc}
 8013932:	bf00      	nop
 8013934:	08017020 	.word	0x08017020

08013938 <__cvt>:
 8013938:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801393c:	ec57 6b10 	vmov	r6, r7, d0
 8013940:	2f00      	cmp	r7, #0
 8013942:	460c      	mov	r4, r1
 8013944:	4619      	mov	r1, r3
 8013946:	463b      	mov	r3, r7
 8013948:	bfbb      	ittet	lt
 801394a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801394e:	461f      	movlt	r7, r3
 8013950:	2300      	movge	r3, #0
 8013952:	232d      	movlt	r3, #45	@ 0x2d
 8013954:	700b      	strb	r3, [r1, #0]
 8013956:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013958:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801395c:	4691      	mov	r9, r2
 801395e:	f023 0820 	bic.w	r8, r3, #32
 8013962:	bfbc      	itt	lt
 8013964:	4632      	movlt	r2, r6
 8013966:	4616      	movlt	r6, r2
 8013968:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801396c:	d005      	beq.n	801397a <__cvt+0x42>
 801396e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8013972:	d100      	bne.n	8013976 <__cvt+0x3e>
 8013974:	3401      	adds	r4, #1
 8013976:	2102      	movs	r1, #2
 8013978:	e000      	b.n	801397c <__cvt+0x44>
 801397a:	2103      	movs	r1, #3
 801397c:	ab03      	add	r3, sp, #12
 801397e:	9301      	str	r3, [sp, #4]
 8013980:	ab02      	add	r3, sp, #8
 8013982:	9300      	str	r3, [sp, #0]
 8013984:	ec47 6b10 	vmov	d0, r6, r7
 8013988:	4653      	mov	r3, sl
 801398a:	4622      	mov	r2, r4
 801398c:	f000 ff40 	bl	8014810 <_dtoa_r>
 8013990:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8013994:	4605      	mov	r5, r0
 8013996:	d119      	bne.n	80139cc <__cvt+0x94>
 8013998:	f019 0f01 	tst.w	r9, #1
 801399c:	d00e      	beq.n	80139bc <__cvt+0x84>
 801399e:	eb00 0904 	add.w	r9, r0, r4
 80139a2:	2200      	movs	r2, #0
 80139a4:	2300      	movs	r3, #0
 80139a6:	4630      	mov	r0, r6
 80139a8:	4639      	mov	r1, r7
 80139aa:	f7ed f88d 	bl	8000ac8 <__aeabi_dcmpeq>
 80139ae:	b108      	cbz	r0, 80139b4 <__cvt+0x7c>
 80139b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80139b4:	2230      	movs	r2, #48	@ 0x30
 80139b6:	9b03      	ldr	r3, [sp, #12]
 80139b8:	454b      	cmp	r3, r9
 80139ba:	d31e      	bcc.n	80139fa <__cvt+0xc2>
 80139bc:	9b03      	ldr	r3, [sp, #12]
 80139be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80139c0:	1b5b      	subs	r3, r3, r5
 80139c2:	4628      	mov	r0, r5
 80139c4:	6013      	str	r3, [r2, #0]
 80139c6:	b004      	add	sp, #16
 80139c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80139d0:	eb00 0904 	add.w	r9, r0, r4
 80139d4:	d1e5      	bne.n	80139a2 <__cvt+0x6a>
 80139d6:	7803      	ldrb	r3, [r0, #0]
 80139d8:	2b30      	cmp	r3, #48	@ 0x30
 80139da:	d10a      	bne.n	80139f2 <__cvt+0xba>
 80139dc:	2200      	movs	r2, #0
 80139de:	2300      	movs	r3, #0
 80139e0:	4630      	mov	r0, r6
 80139e2:	4639      	mov	r1, r7
 80139e4:	f7ed f870 	bl	8000ac8 <__aeabi_dcmpeq>
 80139e8:	b918      	cbnz	r0, 80139f2 <__cvt+0xba>
 80139ea:	f1c4 0401 	rsb	r4, r4, #1
 80139ee:	f8ca 4000 	str.w	r4, [sl]
 80139f2:	f8da 3000 	ldr.w	r3, [sl]
 80139f6:	4499      	add	r9, r3
 80139f8:	e7d3      	b.n	80139a2 <__cvt+0x6a>
 80139fa:	1c59      	adds	r1, r3, #1
 80139fc:	9103      	str	r1, [sp, #12]
 80139fe:	701a      	strb	r2, [r3, #0]
 8013a00:	e7d9      	b.n	80139b6 <__cvt+0x7e>

08013a02 <__exponent>:
 8013a02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013a04:	2900      	cmp	r1, #0
 8013a06:	bfba      	itte	lt
 8013a08:	4249      	neglt	r1, r1
 8013a0a:	232d      	movlt	r3, #45	@ 0x2d
 8013a0c:	232b      	movge	r3, #43	@ 0x2b
 8013a0e:	2909      	cmp	r1, #9
 8013a10:	7002      	strb	r2, [r0, #0]
 8013a12:	7043      	strb	r3, [r0, #1]
 8013a14:	dd29      	ble.n	8013a6a <__exponent+0x68>
 8013a16:	f10d 0307 	add.w	r3, sp, #7
 8013a1a:	461d      	mov	r5, r3
 8013a1c:	270a      	movs	r7, #10
 8013a1e:	461a      	mov	r2, r3
 8013a20:	fbb1 f6f7 	udiv	r6, r1, r7
 8013a24:	fb07 1416 	mls	r4, r7, r6, r1
 8013a28:	3430      	adds	r4, #48	@ 0x30
 8013a2a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8013a2e:	460c      	mov	r4, r1
 8013a30:	2c63      	cmp	r4, #99	@ 0x63
 8013a32:	f103 33ff 	add.w	r3, r3, #4294967295
 8013a36:	4631      	mov	r1, r6
 8013a38:	dcf1      	bgt.n	8013a1e <__exponent+0x1c>
 8013a3a:	3130      	adds	r1, #48	@ 0x30
 8013a3c:	1e94      	subs	r4, r2, #2
 8013a3e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013a42:	1c41      	adds	r1, r0, #1
 8013a44:	4623      	mov	r3, r4
 8013a46:	42ab      	cmp	r3, r5
 8013a48:	d30a      	bcc.n	8013a60 <__exponent+0x5e>
 8013a4a:	f10d 0309 	add.w	r3, sp, #9
 8013a4e:	1a9b      	subs	r3, r3, r2
 8013a50:	42ac      	cmp	r4, r5
 8013a52:	bf88      	it	hi
 8013a54:	2300      	movhi	r3, #0
 8013a56:	3302      	adds	r3, #2
 8013a58:	4403      	add	r3, r0
 8013a5a:	1a18      	subs	r0, r3, r0
 8013a5c:	b003      	add	sp, #12
 8013a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a60:	f813 6b01 	ldrb.w	r6, [r3], #1
 8013a64:	f801 6f01 	strb.w	r6, [r1, #1]!
 8013a68:	e7ed      	b.n	8013a46 <__exponent+0x44>
 8013a6a:	2330      	movs	r3, #48	@ 0x30
 8013a6c:	3130      	adds	r1, #48	@ 0x30
 8013a6e:	7083      	strb	r3, [r0, #2]
 8013a70:	70c1      	strb	r1, [r0, #3]
 8013a72:	1d03      	adds	r3, r0, #4
 8013a74:	e7f1      	b.n	8013a5a <__exponent+0x58>
	...

08013a78 <_printf_float>:
 8013a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a7c:	b08d      	sub	sp, #52	@ 0x34
 8013a7e:	460c      	mov	r4, r1
 8013a80:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8013a84:	4616      	mov	r6, r2
 8013a86:	461f      	mov	r7, r3
 8013a88:	4605      	mov	r5, r0
 8013a8a:	f000 fdb1 	bl	80145f0 <_localeconv_r>
 8013a8e:	6803      	ldr	r3, [r0, #0]
 8013a90:	9304      	str	r3, [sp, #16]
 8013a92:	4618      	mov	r0, r3
 8013a94:	f7ec fbec 	bl	8000270 <strlen>
 8013a98:	2300      	movs	r3, #0
 8013a9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8013a9c:	f8d8 3000 	ldr.w	r3, [r8]
 8013aa0:	9005      	str	r0, [sp, #20]
 8013aa2:	3307      	adds	r3, #7
 8013aa4:	f023 0307 	bic.w	r3, r3, #7
 8013aa8:	f103 0208 	add.w	r2, r3, #8
 8013aac:	f894 a018 	ldrb.w	sl, [r4, #24]
 8013ab0:	f8d4 b000 	ldr.w	fp, [r4]
 8013ab4:	f8c8 2000 	str.w	r2, [r8]
 8013ab8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013abc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8013ac0:	9307      	str	r3, [sp, #28]
 8013ac2:	f8cd 8018 	str.w	r8, [sp, #24]
 8013ac6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8013aca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013ace:	4b9c      	ldr	r3, [pc, #624]	@ (8013d40 <_printf_float+0x2c8>)
 8013ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8013ad4:	f7ed f82a 	bl	8000b2c <__aeabi_dcmpun>
 8013ad8:	bb70      	cbnz	r0, 8013b38 <_printf_float+0xc0>
 8013ada:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013ade:	4b98      	ldr	r3, [pc, #608]	@ (8013d40 <_printf_float+0x2c8>)
 8013ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8013ae4:	f7ed f804 	bl	8000af0 <__aeabi_dcmple>
 8013ae8:	bb30      	cbnz	r0, 8013b38 <_printf_float+0xc0>
 8013aea:	2200      	movs	r2, #0
 8013aec:	2300      	movs	r3, #0
 8013aee:	4640      	mov	r0, r8
 8013af0:	4649      	mov	r1, r9
 8013af2:	f7ec fff3 	bl	8000adc <__aeabi_dcmplt>
 8013af6:	b110      	cbz	r0, 8013afe <_printf_float+0x86>
 8013af8:	232d      	movs	r3, #45	@ 0x2d
 8013afa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013afe:	4a91      	ldr	r2, [pc, #580]	@ (8013d44 <_printf_float+0x2cc>)
 8013b00:	4b91      	ldr	r3, [pc, #580]	@ (8013d48 <_printf_float+0x2d0>)
 8013b02:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8013b06:	bf8c      	ite	hi
 8013b08:	4690      	movhi	r8, r2
 8013b0a:	4698      	movls	r8, r3
 8013b0c:	2303      	movs	r3, #3
 8013b0e:	6123      	str	r3, [r4, #16]
 8013b10:	f02b 0304 	bic.w	r3, fp, #4
 8013b14:	6023      	str	r3, [r4, #0]
 8013b16:	f04f 0900 	mov.w	r9, #0
 8013b1a:	9700      	str	r7, [sp, #0]
 8013b1c:	4633      	mov	r3, r6
 8013b1e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8013b20:	4621      	mov	r1, r4
 8013b22:	4628      	mov	r0, r5
 8013b24:	f000 f9d2 	bl	8013ecc <_printf_common>
 8013b28:	3001      	adds	r0, #1
 8013b2a:	f040 808d 	bne.w	8013c48 <_printf_float+0x1d0>
 8013b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8013b32:	b00d      	add	sp, #52	@ 0x34
 8013b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b38:	4642      	mov	r2, r8
 8013b3a:	464b      	mov	r3, r9
 8013b3c:	4640      	mov	r0, r8
 8013b3e:	4649      	mov	r1, r9
 8013b40:	f7ec fff4 	bl	8000b2c <__aeabi_dcmpun>
 8013b44:	b140      	cbz	r0, 8013b58 <_printf_float+0xe0>
 8013b46:	464b      	mov	r3, r9
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	bfbc      	itt	lt
 8013b4c:	232d      	movlt	r3, #45	@ 0x2d
 8013b4e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8013b52:	4a7e      	ldr	r2, [pc, #504]	@ (8013d4c <_printf_float+0x2d4>)
 8013b54:	4b7e      	ldr	r3, [pc, #504]	@ (8013d50 <_printf_float+0x2d8>)
 8013b56:	e7d4      	b.n	8013b02 <_printf_float+0x8a>
 8013b58:	6863      	ldr	r3, [r4, #4]
 8013b5a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8013b5e:	9206      	str	r2, [sp, #24]
 8013b60:	1c5a      	adds	r2, r3, #1
 8013b62:	d13b      	bne.n	8013bdc <_printf_float+0x164>
 8013b64:	2306      	movs	r3, #6
 8013b66:	6063      	str	r3, [r4, #4]
 8013b68:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8013b6c:	2300      	movs	r3, #0
 8013b6e:	6022      	str	r2, [r4, #0]
 8013b70:	9303      	str	r3, [sp, #12]
 8013b72:	ab0a      	add	r3, sp, #40	@ 0x28
 8013b74:	e9cd a301 	strd	sl, r3, [sp, #4]
 8013b78:	ab09      	add	r3, sp, #36	@ 0x24
 8013b7a:	9300      	str	r3, [sp, #0]
 8013b7c:	6861      	ldr	r1, [r4, #4]
 8013b7e:	ec49 8b10 	vmov	d0, r8, r9
 8013b82:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8013b86:	4628      	mov	r0, r5
 8013b88:	f7ff fed6 	bl	8013938 <__cvt>
 8013b8c:	9b06      	ldr	r3, [sp, #24]
 8013b8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013b90:	2b47      	cmp	r3, #71	@ 0x47
 8013b92:	4680      	mov	r8, r0
 8013b94:	d129      	bne.n	8013bea <_printf_float+0x172>
 8013b96:	1cc8      	adds	r0, r1, #3
 8013b98:	db02      	blt.n	8013ba0 <_printf_float+0x128>
 8013b9a:	6863      	ldr	r3, [r4, #4]
 8013b9c:	4299      	cmp	r1, r3
 8013b9e:	dd41      	ble.n	8013c24 <_printf_float+0x1ac>
 8013ba0:	f1aa 0a02 	sub.w	sl, sl, #2
 8013ba4:	fa5f fa8a 	uxtb.w	sl, sl
 8013ba8:	3901      	subs	r1, #1
 8013baa:	4652      	mov	r2, sl
 8013bac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8013bb0:	9109      	str	r1, [sp, #36]	@ 0x24
 8013bb2:	f7ff ff26 	bl	8013a02 <__exponent>
 8013bb6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013bb8:	1813      	adds	r3, r2, r0
 8013bba:	2a01      	cmp	r2, #1
 8013bbc:	4681      	mov	r9, r0
 8013bbe:	6123      	str	r3, [r4, #16]
 8013bc0:	dc02      	bgt.n	8013bc8 <_printf_float+0x150>
 8013bc2:	6822      	ldr	r2, [r4, #0]
 8013bc4:	07d2      	lsls	r2, r2, #31
 8013bc6:	d501      	bpl.n	8013bcc <_printf_float+0x154>
 8013bc8:	3301      	adds	r3, #1
 8013bca:	6123      	str	r3, [r4, #16]
 8013bcc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d0a2      	beq.n	8013b1a <_printf_float+0xa2>
 8013bd4:	232d      	movs	r3, #45	@ 0x2d
 8013bd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013bda:	e79e      	b.n	8013b1a <_printf_float+0xa2>
 8013bdc:	9a06      	ldr	r2, [sp, #24]
 8013bde:	2a47      	cmp	r2, #71	@ 0x47
 8013be0:	d1c2      	bne.n	8013b68 <_printf_float+0xf0>
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d1c0      	bne.n	8013b68 <_printf_float+0xf0>
 8013be6:	2301      	movs	r3, #1
 8013be8:	e7bd      	b.n	8013b66 <_printf_float+0xee>
 8013bea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8013bee:	d9db      	bls.n	8013ba8 <_printf_float+0x130>
 8013bf0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8013bf4:	d118      	bne.n	8013c28 <_printf_float+0x1b0>
 8013bf6:	2900      	cmp	r1, #0
 8013bf8:	6863      	ldr	r3, [r4, #4]
 8013bfa:	dd0b      	ble.n	8013c14 <_printf_float+0x19c>
 8013bfc:	6121      	str	r1, [r4, #16]
 8013bfe:	b913      	cbnz	r3, 8013c06 <_printf_float+0x18e>
 8013c00:	6822      	ldr	r2, [r4, #0]
 8013c02:	07d0      	lsls	r0, r2, #31
 8013c04:	d502      	bpl.n	8013c0c <_printf_float+0x194>
 8013c06:	3301      	adds	r3, #1
 8013c08:	440b      	add	r3, r1
 8013c0a:	6123      	str	r3, [r4, #16]
 8013c0c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8013c0e:	f04f 0900 	mov.w	r9, #0
 8013c12:	e7db      	b.n	8013bcc <_printf_float+0x154>
 8013c14:	b913      	cbnz	r3, 8013c1c <_printf_float+0x1a4>
 8013c16:	6822      	ldr	r2, [r4, #0]
 8013c18:	07d2      	lsls	r2, r2, #31
 8013c1a:	d501      	bpl.n	8013c20 <_printf_float+0x1a8>
 8013c1c:	3302      	adds	r3, #2
 8013c1e:	e7f4      	b.n	8013c0a <_printf_float+0x192>
 8013c20:	2301      	movs	r3, #1
 8013c22:	e7f2      	b.n	8013c0a <_printf_float+0x192>
 8013c24:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8013c28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013c2a:	4299      	cmp	r1, r3
 8013c2c:	db05      	blt.n	8013c3a <_printf_float+0x1c2>
 8013c2e:	6823      	ldr	r3, [r4, #0]
 8013c30:	6121      	str	r1, [r4, #16]
 8013c32:	07d8      	lsls	r0, r3, #31
 8013c34:	d5ea      	bpl.n	8013c0c <_printf_float+0x194>
 8013c36:	1c4b      	adds	r3, r1, #1
 8013c38:	e7e7      	b.n	8013c0a <_printf_float+0x192>
 8013c3a:	2900      	cmp	r1, #0
 8013c3c:	bfd4      	ite	le
 8013c3e:	f1c1 0202 	rsble	r2, r1, #2
 8013c42:	2201      	movgt	r2, #1
 8013c44:	4413      	add	r3, r2
 8013c46:	e7e0      	b.n	8013c0a <_printf_float+0x192>
 8013c48:	6823      	ldr	r3, [r4, #0]
 8013c4a:	055a      	lsls	r2, r3, #21
 8013c4c:	d407      	bmi.n	8013c5e <_printf_float+0x1e6>
 8013c4e:	6923      	ldr	r3, [r4, #16]
 8013c50:	4642      	mov	r2, r8
 8013c52:	4631      	mov	r1, r6
 8013c54:	4628      	mov	r0, r5
 8013c56:	47b8      	blx	r7
 8013c58:	3001      	adds	r0, #1
 8013c5a:	d12b      	bne.n	8013cb4 <_printf_float+0x23c>
 8013c5c:	e767      	b.n	8013b2e <_printf_float+0xb6>
 8013c5e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8013c62:	f240 80dd 	bls.w	8013e20 <_printf_float+0x3a8>
 8013c66:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8013c6a:	2200      	movs	r2, #0
 8013c6c:	2300      	movs	r3, #0
 8013c6e:	f7ec ff2b 	bl	8000ac8 <__aeabi_dcmpeq>
 8013c72:	2800      	cmp	r0, #0
 8013c74:	d033      	beq.n	8013cde <_printf_float+0x266>
 8013c76:	4a37      	ldr	r2, [pc, #220]	@ (8013d54 <_printf_float+0x2dc>)
 8013c78:	2301      	movs	r3, #1
 8013c7a:	4631      	mov	r1, r6
 8013c7c:	4628      	mov	r0, r5
 8013c7e:	47b8      	blx	r7
 8013c80:	3001      	adds	r0, #1
 8013c82:	f43f af54 	beq.w	8013b2e <_printf_float+0xb6>
 8013c86:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8013c8a:	4543      	cmp	r3, r8
 8013c8c:	db02      	blt.n	8013c94 <_printf_float+0x21c>
 8013c8e:	6823      	ldr	r3, [r4, #0]
 8013c90:	07d8      	lsls	r0, r3, #31
 8013c92:	d50f      	bpl.n	8013cb4 <_printf_float+0x23c>
 8013c94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013c98:	4631      	mov	r1, r6
 8013c9a:	4628      	mov	r0, r5
 8013c9c:	47b8      	blx	r7
 8013c9e:	3001      	adds	r0, #1
 8013ca0:	f43f af45 	beq.w	8013b2e <_printf_float+0xb6>
 8013ca4:	f04f 0900 	mov.w	r9, #0
 8013ca8:	f108 38ff 	add.w	r8, r8, #4294967295
 8013cac:	f104 0a1a 	add.w	sl, r4, #26
 8013cb0:	45c8      	cmp	r8, r9
 8013cb2:	dc09      	bgt.n	8013cc8 <_printf_float+0x250>
 8013cb4:	6823      	ldr	r3, [r4, #0]
 8013cb6:	079b      	lsls	r3, r3, #30
 8013cb8:	f100 8103 	bmi.w	8013ec2 <_printf_float+0x44a>
 8013cbc:	68e0      	ldr	r0, [r4, #12]
 8013cbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013cc0:	4298      	cmp	r0, r3
 8013cc2:	bfb8      	it	lt
 8013cc4:	4618      	movlt	r0, r3
 8013cc6:	e734      	b.n	8013b32 <_printf_float+0xba>
 8013cc8:	2301      	movs	r3, #1
 8013cca:	4652      	mov	r2, sl
 8013ccc:	4631      	mov	r1, r6
 8013cce:	4628      	mov	r0, r5
 8013cd0:	47b8      	blx	r7
 8013cd2:	3001      	adds	r0, #1
 8013cd4:	f43f af2b 	beq.w	8013b2e <_printf_float+0xb6>
 8013cd8:	f109 0901 	add.w	r9, r9, #1
 8013cdc:	e7e8      	b.n	8013cb0 <_printf_float+0x238>
 8013cde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	dc39      	bgt.n	8013d58 <_printf_float+0x2e0>
 8013ce4:	4a1b      	ldr	r2, [pc, #108]	@ (8013d54 <_printf_float+0x2dc>)
 8013ce6:	2301      	movs	r3, #1
 8013ce8:	4631      	mov	r1, r6
 8013cea:	4628      	mov	r0, r5
 8013cec:	47b8      	blx	r7
 8013cee:	3001      	adds	r0, #1
 8013cf0:	f43f af1d 	beq.w	8013b2e <_printf_float+0xb6>
 8013cf4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8013cf8:	ea59 0303 	orrs.w	r3, r9, r3
 8013cfc:	d102      	bne.n	8013d04 <_printf_float+0x28c>
 8013cfe:	6823      	ldr	r3, [r4, #0]
 8013d00:	07d9      	lsls	r1, r3, #31
 8013d02:	d5d7      	bpl.n	8013cb4 <_printf_float+0x23c>
 8013d04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013d08:	4631      	mov	r1, r6
 8013d0a:	4628      	mov	r0, r5
 8013d0c:	47b8      	blx	r7
 8013d0e:	3001      	adds	r0, #1
 8013d10:	f43f af0d 	beq.w	8013b2e <_printf_float+0xb6>
 8013d14:	f04f 0a00 	mov.w	sl, #0
 8013d18:	f104 0b1a 	add.w	fp, r4, #26
 8013d1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d1e:	425b      	negs	r3, r3
 8013d20:	4553      	cmp	r3, sl
 8013d22:	dc01      	bgt.n	8013d28 <_printf_float+0x2b0>
 8013d24:	464b      	mov	r3, r9
 8013d26:	e793      	b.n	8013c50 <_printf_float+0x1d8>
 8013d28:	2301      	movs	r3, #1
 8013d2a:	465a      	mov	r2, fp
 8013d2c:	4631      	mov	r1, r6
 8013d2e:	4628      	mov	r0, r5
 8013d30:	47b8      	blx	r7
 8013d32:	3001      	adds	r0, #1
 8013d34:	f43f aefb 	beq.w	8013b2e <_printf_float+0xb6>
 8013d38:	f10a 0a01 	add.w	sl, sl, #1
 8013d3c:	e7ee      	b.n	8013d1c <_printf_float+0x2a4>
 8013d3e:	bf00      	nop
 8013d40:	7fefffff 	.word	0x7fefffff
 8013d44:	08019928 	.word	0x08019928
 8013d48:	08019924 	.word	0x08019924
 8013d4c:	08019930 	.word	0x08019930
 8013d50:	0801992c 	.word	0x0801992c
 8013d54:	08019a63 	.word	0x08019a63
 8013d58:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013d5a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8013d5e:	4553      	cmp	r3, sl
 8013d60:	bfa8      	it	ge
 8013d62:	4653      	movge	r3, sl
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	4699      	mov	r9, r3
 8013d68:	dc36      	bgt.n	8013dd8 <_printf_float+0x360>
 8013d6a:	f04f 0b00 	mov.w	fp, #0
 8013d6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013d72:	f104 021a 	add.w	r2, r4, #26
 8013d76:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013d78:	9306      	str	r3, [sp, #24]
 8013d7a:	eba3 0309 	sub.w	r3, r3, r9
 8013d7e:	455b      	cmp	r3, fp
 8013d80:	dc31      	bgt.n	8013de6 <_printf_float+0x36e>
 8013d82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d84:	459a      	cmp	sl, r3
 8013d86:	dc3a      	bgt.n	8013dfe <_printf_float+0x386>
 8013d88:	6823      	ldr	r3, [r4, #0]
 8013d8a:	07da      	lsls	r2, r3, #31
 8013d8c:	d437      	bmi.n	8013dfe <_printf_float+0x386>
 8013d8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d90:	ebaa 0903 	sub.w	r9, sl, r3
 8013d94:	9b06      	ldr	r3, [sp, #24]
 8013d96:	ebaa 0303 	sub.w	r3, sl, r3
 8013d9a:	4599      	cmp	r9, r3
 8013d9c:	bfa8      	it	ge
 8013d9e:	4699      	movge	r9, r3
 8013da0:	f1b9 0f00 	cmp.w	r9, #0
 8013da4:	dc33      	bgt.n	8013e0e <_printf_float+0x396>
 8013da6:	f04f 0800 	mov.w	r8, #0
 8013daa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013dae:	f104 0b1a 	add.w	fp, r4, #26
 8013db2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013db4:	ebaa 0303 	sub.w	r3, sl, r3
 8013db8:	eba3 0309 	sub.w	r3, r3, r9
 8013dbc:	4543      	cmp	r3, r8
 8013dbe:	f77f af79 	ble.w	8013cb4 <_printf_float+0x23c>
 8013dc2:	2301      	movs	r3, #1
 8013dc4:	465a      	mov	r2, fp
 8013dc6:	4631      	mov	r1, r6
 8013dc8:	4628      	mov	r0, r5
 8013dca:	47b8      	blx	r7
 8013dcc:	3001      	adds	r0, #1
 8013dce:	f43f aeae 	beq.w	8013b2e <_printf_float+0xb6>
 8013dd2:	f108 0801 	add.w	r8, r8, #1
 8013dd6:	e7ec      	b.n	8013db2 <_printf_float+0x33a>
 8013dd8:	4642      	mov	r2, r8
 8013dda:	4631      	mov	r1, r6
 8013ddc:	4628      	mov	r0, r5
 8013dde:	47b8      	blx	r7
 8013de0:	3001      	adds	r0, #1
 8013de2:	d1c2      	bne.n	8013d6a <_printf_float+0x2f2>
 8013de4:	e6a3      	b.n	8013b2e <_printf_float+0xb6>
 8013de6:	2301      	movs	r3, #1
 8013de8:	4631      	mov	r1, r6
 8013dea:	4628      	mov	r0, r5
 8013dec:	9206      	str	r2, [sp, #24]
 8013dee:	47b8      	blx	r7
 8013df0:	3001      	adds	r0, #1
 8013df2:	f43f ae9c 	beq.w	8013b2e <_printf_float+0xb6>
 8013df6:	9a06      	ldr	r2, [sp, #24]
 8013df8:	f10b 0b01 	add.w	fp, fp, #1
 8013dfc:	e7bb      	b.n	8013d76 <_printf_float+0x2fe>
 8013dfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013e02:	4631      	mov	r1, r6
 8013e04:	4628      	mov	r0, r5
 8013e06:	47b8      	blx	r7
 8013e08:	3001      	adds	r0, #1
 8013e0a:	d1c0      	bne.n	8013d8e <_printf_float+0x316>
 8013e0c:	e68f      	b.n	8013b2e <_printf_float+0xb6>
 8013e0e:	9a06      	ldr	r2, [sp, #24]
 8013e10:	464b      	mov	r3, r9
 8013e12:	4442      	add	r2, r8
 8013e14:	4631      	mov	r1, r6
 8013e16:	4628      	mov	r0, r5
 8013e18:	47b8      	blx	r7
 8013e1a:	3001      	adds	r0, #1
 8013e1c:	d1c3      	bne.n	8013da6 <_printf_float+0x32e>
 8013e1e:	e686      	b.n	8013b2e <_printf_float+0xb6>
 8013e20:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8013e24:	f1ba 0f01 	cmp.w	sl, #1
 8013e28:	dc01      	bgt.n	8013e2e <_printf_float+0x3b6>
 8013e2a:	07db      	lsls	r3, r3, #31
 8013e2c:	d536      	bpl.n	8013e9c <_printf_float+0x424>
 8013e2e:	2301      	movs	r3, #1
 8013e30:	4642      	mov	r2, r8
 8013e32:	4631      	mov	r1, r6
 8013e34:	4628      	mov	r0, r5
 8013e36:	47b8      	blx	r7
 8013e38:	3001      	adds	r0, #1
 8013e3a:	f43f ae78 	beq.w	8013b2e <_printf_float+0xb6>
 8013e3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013e42:	4631      	mov	r1, r6
 8013e44:	4628      	mov	r0, r5
 8013e46:	47b8      	blx	r7
 8013e48:	3001      	adds	r0, #1
 8013e4a:	f43f ae70 	beq.w	8013b2e <_printf_float+0xb6>
 8013e4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8013e52:	2200      	movs	r2, #0
 8013e54:	2300      	movs	r3, #0
 8013e56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013e5a:	f7ec fe35 	bl	8000ac8 <__aeabi_dcmpeq>
 8013e5e:	b9c0      	cbnz	r0, 8013e92 <_printf_float+0x41a>
 8013e60:	4653      	mov	r3, sl
 8013e62:	f108 0201 	add.w	r2, r8, #1
 8013e66:	4631      	mov	r1, r6
 8013e68:	4628      	mov	r0, r5
 8013e6a:	47b8      	blx	r7
 8013e6c:	3001      	adds	r0, #1
 8013e6e:	d10c      	bne.n	8013e8a <_printf_float+0x412>
 8013e70:	e65d      	b.n	8013b2e <_printf_float+0xb6>
 8013e72:	2301      	movs	r3, #1
 8013e74:	465a      	mov	r2, fp
 8013e76:	4631      	mov	r1, r6
 8013e78:	4628      	mov	r0, r5
 8013e7a:	47b8      	blx	r7
 8013e7c:	3001      	adds	r0, #1
 8013e7e:	f43f ae56 	beq.w	8013b2e <_printf_float+0xb6>
 8013e82:	f108 0801 	add.w	r8, r8, #1
 8013e86:	45d0      	cmp	r8, sl
 8013e88:	dbf3      	blt.n	8013e72 <_printf_float+0x3fa>
 8013e8a:	464b      	mov	r3, r9
 8013e8c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8013e90:	e6df      	b.n	8013c52 <_printf_float+0x1da>
 8013e92:	f04f 0800 	mov.w	r8, #0
 8013e96:	f104 0b1a 	add.w	fp, r4, #26
 8013e9a:	e7f4      	b.n	8013e86 <_printf_float+0x40e>
 8013e9c:	2301      	movs	r3, #1
 8013e9e:	4642      	mov	r2, r8
 8013ea0:	e7e1      	b.n	8013e66 <_printf_float+0x3ee>
 8013ea2:	2301      	movs	r3, #1
 8013ea4:	464a      	mov	r2, r9
 8013ea6:	4631      	mov	r1, r6
 8013ea8:	4628      	mov	r0, r5
 8013eaa:	47b8      	blx	r7
 8013eac:	3001      	adds	r0, #1
 8013eae:	f43f ae3e 	beq.w	8013b2e <_printf_float+0xb6>
 8013eb2:	f108 0801 	add.w	r8, r8, #1
 8013eb6:	68e3      	ldr	r3, [r4, #12]
 8013eb8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013eba:	1a5b      	subs	r3, r3, r1
 8013ebc:	4543      	cmp	r3, r8
 8013ebe:	dcf0      	bgt.n	8013ea2 <_printf_float+0x42a>
 8013ec0:	e6fc      	b.n	8013cbc <_printf_float+0x244>
 8013ec2:	f04f 0800 	mov.w	r8, #0
 8013ec6:	f104 0919 	add.w	r9, r4, #25
 8013eca:	e7f4      	b.n	8013eb6 <_printf_float+0x43e>

08013ecc <_printf_common>:
 8013ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ed0:	4616      	mov	r6, r2
 8013ed2:	4698      	mov	r8, r3
 8013ed4:	688a      	ldr	r2, [r1, #8]
 8013ed6:	690b      	ldr	r3, [r1, #16]
 8013ed8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013edc:	4293      	cmp	r3, r2
 8013ede:	bfb8      	it	lt
 8013ee0:	4613      	movlt	r3, r2
 8013ee2:	6033      	str	r3, [r6, #0]
 8013ee4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013ee8:	4607      	mov	r7, r0
 8013eea:	460c      	mov	r4, r1
 8013eec:	b10a      	cbz	r2, 8013ef2 <_printf_common+0x26>
 8013eee:	3301      	adds	r3, #1
 8013ef0:	6033      	str	r3, [r6, #0]
 8013ef2:	6823      	ldr	r3, [r4, #0]
 8013ef4:	0699      	lsls	r1, r3, #26
 8013ef6:	bf42      	ittt	mi
 8013ef8:	6833      	ldrmi	r3, [r6, #0]
 8013efa:	3302      	addmi	r3, #2
 8013efc:	6033      	strmi	r3, [r6, #0]
 8013efe:	6825      	ldr	r5, [r4, #0]
 8013f00:	f015 0506 	ands.w	r5, r5, #6
 8013f04:	d106      	bne.n	8013f14 <_printf_common+0x48>
 8013f06:	f104 0a19 	add.w	sl, r4, #25
 8013f0a:	68e3      	ldr	r3, [r4, #12]
 8013f0c:	6832      	ldr	r2, [r6, #0]
 8013f0e:	1a9b      	subs	r3, r3, r2
 8013f10:	42ab      	cmp	r3, r5
 8013f12:	dc26      	bgt.n	8013f62 <_printf_common+0x96>
 8013f14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013f18:	6822      	ldr	r2, [r4, #0]
 8013f1a:	3b00      	subs	r3, #0
 8013f1c:	bf18      	it	ne
 8013f1e:	2301      	movne	r3, #1
 8013f20:	0692      	lsls	r2, r2, #26
 8013f22:	d42b      	bmi.n	8013f7c <_printf_common+0xb0>
 8013f24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013f28:	4641      	mov	r1, r8
 8013f2a:	4638      	mov	r0, r7
 8013f2c:	47c8      	blx	r9
 8013f2e:	3001      	adds	r0, #1
 8013f30:	d01e      	beq.n	8013f70 <_printf_common+0xa4>
 8013f32:	6823      	ldr	r3, [r4, #0]
 8013f34:	6922      	ldr	r2, [r4, #16]
 8013f36:	f003 0306 	and.w	r3, r3, #6
 8013f3a:	2b04      	cmp	r3, #4
 8013f3c:	bf02      	ittt	eq
 8013f3e:	68e5      	ldreq	r5, [r4, #12]
 8013f40:	6833      	ldreq	r3, [r6, #0]
 8013f42:	1aed      	subeq	r5, r5, r3
 8013f44:	68a3      	ldr	r3, [r4, #8]
 8013f46:	bf0c      	ite	eq
 8013f48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013f4c:	2500      	movne	r5, #0
 8013f4e:	4293      	cmp	r3, r2
 8013f50:	bfc4      	itt	gt
 8013f52:	1a9b      	subgt	r3, r3, r2
 8013f54:	18ed      	addgt	r5, r5, r3
 8013f56:	2600      	movs	r6, #0
 8013f58:	341a      	adds	r4, #26
 8013f5a:	42b5      	cmp	r5, r6
 8013f5c:	d11a      	bne.n	8013f94 <_printf_common+0xc8>
 8013f5e:	2000      	movs	r0, #0
 8013f60:	e008      	b.n	8013f74 <_printf_common+0xa8>
 8013f62:	2301      	movs	r3, #1
 8013f64:	4652      	mov	r2, sl
 8013f66:	4641      	mov	r1, r8
 8013f68:	4638      	mov	r0, r7
 8013f6a:	47c8      	blx	r9
 8013f6c:	3001      	adds	r0, #1
 8013f6e:	d103      	bne.n	8013f78 <_printf_common+0xac>
 8013f70:	f04f 30ff 	mov.w	r0, #4294967295
 8013f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f78:	3501      	adds	r5, #1
 8013f7a:	e7c6      	b.n	8013f0a <_printf_common+0x3e>
 8013f7c:	18e1      	adds	r1, r4, r3
 8013f7e:	1c5a      	adds	r2, r3, #1
 8013f80:	2030      	movs	r0, #48	@ 0x30
 8013f82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013f86:	4422      	add	r2, r4
 8013f88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013f8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013f90:	3302      	adds	r3, #2
 8013f92:	e7c7      	b.n	8013f24 <_printf_common+0x58>
 8013f94:	2301      	movs	r3, #1
 8013f96:	4622      	mov	r2, r4
 8013f98:	4641      	mov	r1, r8
 8013f9a:	4638      	mov	r0, r7
 8013f9c:	47c8      	blx	r9
 8013f9e:	3001      	adds	r0, #1
 8013fa0:	d0e6      	beq.n	8013f70 <_printf_common+0xa4>
 8013fa2:	3601      	adds	r6, #1
 8013fa4:	e7d9      	b.n	8013f5a <_printf_common+0x8e>
	...

08013fa8 <_printf_i>:
 8013fa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013fac:	7e0f      	ldrb	r7, [r1, #24]
 8013fae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013fb0:	2f78      	cmp	r7, #120	@ 0x78
 8013fb2:	4691      	mov	r9, r2
 8013fb4:	4680      	mov	r8, r0
 8013fb6:	460c      	mov	r4, r1
 8013fb8:	469a      	mov	sl, r3
 8013fba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013fbe:	d807      	bhi.n	8013fd0 <_printf_i+0x28>
 8013fc0:	2f62      	cmp	r7, #98	@ 0x62
 8013fc2:	d80a      	bhi.n	8013fda <_printf_i+0x32>
 8013fc4:	2f00      	cmp	r7, #0
 8013fc6:	f000 80d1 	beq.w	801416c <_printf_i+0x1c4>
 8013fca:	2f58      	cmp	r7, #88	@ 0x58
 8013fcc:	f000 80b8 	beq.w	8014140 <_printf_i+0x198>
 8013fd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013fd4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013fd8:	e03a      	b.n	8014050 <_printf_i+0xa8>
 8013fda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013fde:	2b15      	cmp	r3, #21
 8013fe0:	d8f6      	bhi.n	8013fd0 <_printf_i+0x28>
 8013fe2:	a101      	add	r1, pc, #4	@ (adr r1, 8013fe8 <_printf_i+0x40>)
 8013fe4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013fe8:	08014041 	.word	0x08014041
 8013fec:	08014055 	.word	0x08014055
 8013ff0:	08013fd1 	.word	0x08013fd1
 8013ff4:	08013fd1 	.word	0x08013fd1
 8013ff8:	08013fd1 	.word	0x08013fd1
 8013ffc:	08013fd1 	.word	0x08013fd1
 8014000:	08014055 	.word	0x08014055
 8014004:	08013fd1 	.word	0x08013fd1
 8014008:	08013fd1 	.word	0x08013fd1
 801400c:	08013fd1 	.word	0x08013fd1
 8014010:	08013fd1 	.word	0x08013fd1
 8014014:	08014153 	.word	0x08014153
 8014018:	0801407f 	.word	0x0801407f
 801401c:	0801410d 	.word	0x0801410d
 8014020:	08013fd1 	.word	0x08013fd1
 8014024:	08013fd1 	.word	0x08013fd1
 8014028:	08014175 	.word	0x08014175
 801402c:	08013fd1 	.word	0x08013fd1
 8014030:	0801407f 	.word	0x0801407f
 8014034:	08013fd1 	.word	0x08013fd1
 8014038:	08013fd1 	.word	0x08013fd1
 801403c:	08014115 	.word	0x08014115
 8014040:	6833      	ldr	r3, [r6, #0]
 8014042:	1d1a      	adds	r2, r3, #4
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	6032      	str	r2, [r6, #0]
 8014048:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801404c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014050:	2301      	movs	r3, #1
 8014052:	e09c      	b.n	801418e <_printf_i+0x1e6>
 8014054:	6833      	ldr	r3, [r6, #0]
 8014056:	6820      	ldr	r0, [r4, #0]
 8014058:	1d19      	adds	r1, r3, #4
 801405a:	6031      	str	r1, [r6, #0]
 801405c:	0606      	lsls	r6, r0, #24
 801405e:	d501      	bpl.n	8014064 <_printf_i+0xbc>
 8014060:	681d      	ldr	r5, [r3, #0]
 8014062:	e003      	b.n	801406c <_printf_i+0xc4>
 8014064:	0645      	lsls	r5, r0, #25
 8014066:	d5fb      	bpl.n	8014060 <_printf_i+0xb8>
 8014068:	f9b3 5000 	ldrsh.w	r5, [r3]
 801406c:	2d00      	cmp	r5, #0
 801406e:	da03      	bge.n	8014078 <_printf_i+0xd0>
 8014070:	232d      	movs	r3, #45	@ 0x2d
 8014072:	426d      	negs	r5, r5
 8014074:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014078:	4858      	ldr	r0, [pc, #352]	@ (80141dc <_printf_i+0x234>)
 801407a:	230a      	movs	r3, #10
 801407c:	e011      	b.n	80140a2 <_printf_i+0xfa>
 801407e:	6821      	ldr	r1, [r4, #0]
 8014080:	6833      	ldr	r3, [r6, #0]
 8014082:	0608      	lsls	r0, r1, #24
 8014084:	f853 5b04 	ldr.w	r5, [r3], #4
 8014088:	d402      	bmi.n	8014090 <_printf_i+0xe8>
 801408a:	0649      	lsls	r1, r1, #25
 801408c:	bf48      	it	mi
 801408e:	b2ad      	uxthmi	r5, r5
 8014090:	2f6f      	cmp	r7, #111	@ 0x6f
 8014092:	4852      	ldr	r0, [pc, #328]	@ (80141dc <_printf_i+0x234>)
 8014094:	6033      	str	r3, [r6, #0]
 8014096:	bf14      	ite	ne
 8014098:	230a      	movne	r3, #10
 801409a:	2308      	moveq	r3, #8
 801409c:	2100      	movs	r1, #0
 801409e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80140a2:	6866      	ldr	r6, [r4, #4]
 80140a4:	60a6      	str	r6, [r4, #8]
 80140a6:	2e00      	cmp	r6, #0
 80140a8:	db05      	blt.n	80140b6 <_printf_i+0x10e>
 80140aa:	6821      	ldr	r1, [r4, #0]
 80140ac:	432e      	orrs	r6, r5
 80140ae:	f021 0104 	bic.w	r1, r1, #4
 80140b2:	6021      	str	r1, [r4, #0]
 80140b4:	d04b      	beq.n	801414e <_printf_i+0x1a6>
 80140b6:	4616      	mov	r6, r2
 80140b8:	fbb5 f1f3 	udiv	r1, r5, r3
 80140bc:	fb03 5711 	mls	r7, r3, r1, r5
 80140c0:	5dc7      	ldrb	r7, [r0, r7]
 80140c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80140c6:	462f      	mov	r7, r5
 80140c8:	42bb      	cmp	r3, r7
 80140ca:	460d      	mov	r5, r1
 80140cc:	d9f4      	bls.n	80140b8 <_printf_i+0x110>
 80140ce:	2b08      	cmp	r3, #8
 80140d0:	d10b      	bne.n	80140ea <_printf_i+0x142>
 80140d2:	6823      	ldr	r3, [r4, #0]
 80140d4:	07df      	lsls	r7, r3, #31
 80140d6:	d508      	bpl.n	80140ea <_printf_i+0x142>
 80140d8:	6923      	ldr	r3, [r4, #16]
 80140da:	6861      	ldr	r1, [r4, #4]
 80140dc:	4299      	cmp	r1, r3
 80140de:	bfde      	ittt	le
 80140e0:	2330      	movle	r3, #48	@ 0x30
 80140e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80140e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80140ea:	1b92      	subs	r2, r2, r6
 80140ec:	6122      	str	r2, [r4, #16]
 80140ee:	f8cd a000 	str.w	sl, [sp]
 80140f2:	464b      	mov	r3, r9
 80140f4:	aa03      	add	r2, sp, #12
 80140f6:	4621      	mov	r1, r4
 80140f8:	4640      	mov	r0, r8
 80140fa:	f7ff fee7 	bl	8013ecc <_printf_common>
 80140fe:	3001      	adds	r0, #1
 8014100:	d14a      	bne.n	8014198 <_printf_i+0x1f0>
 8014102:	f04f 30ff 	mov.w	r0, #4294967295
 8014106:	b004      	add	sp, #16
 8014108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801410c:	6823      	ldr	r3, [r4, #0]
 801410e:	f043 0320 	orr.w	r3, r3, #32
 8014112:	6023      	str	r3, [r4, #0]
 8014114:	4832      	ldr	r0, [pc, #200]	@ (80141e0 <_printf_i+0x238>)
 8014116:	2778      	movs	r7, #120	@ 0x78
 8014118:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801411c:	6823      	ldr	r3, [r4, #0]
 801411e:	6831      	ldr	r1, [r6, #0]
 8014120:	061f      	lsls	r7, r3, #24
 8014122:	f851 5b04 	ldr.w	r5, [r1], #4
 8014126:	d402      	bmi.n	801412e <_printf_i+0x186>
 8014128:	065f      	lsls	r7, r3, #25
 801412a:	bf48      	it	mi
 801412c:	b2ad      	uxthmi	r5, r5
 801412e:	6031      	str	r1, [r6, #0]
 8014130:	07d9      	lsls	r1, r3, #31
 8014132:	bf44      	itt	mi
 8014134:	f043 0320 	orrmi.w	r3, r3, #32
 8014138:	6023      	strmi	r3, [r4, #0]
 801413a:	b11d      	cbz	r5, 8014144 <_printf_i+0x19c>
 801413c:	2310      	movs	r3, #16
 801413e:	e7ad      	b.n	801409c <_printf_i+0xf4>
 8014140:	4826      	ldr	r0, [pc, #152]	@ (80141dc <_printf_i+0x234>)
 8014142:	e7e9      	b.n	8014118 <_printf_i+0x170>
 8014144:	6823      	ldr	r3, [r4, #0]
 8014146:	f023 0320 	bic.w	r3, r3, #32
 801414a:	6023      	str	r3, [r4, #0]
 801414c:	e7f6      	b.n	801413c <_printf_i+0x194>
 801414e:	4616      	mov	r6, r2
 8014150:	e7bd      	b.n	80140ce <_printf_i+0x126>
 8014152:	6833      	ldr	r3, [r6, #0]
 8014154:	6825      	ldr	r5, [r4, #0]
 8014156:	6961      	ldr	r1, [r4, #20]
 8014158:	1d18      	adds	r0, r3, #4
 801415a:	6030      	str	r0, [r6, #0]
 801415c:	062e      	lsls	r6, r5, #24
 801415e:	681b      	ldr	r3, [r3, #0]
 8014160:	d501      	bpl.n	8014166 <_printf_i+0x1be>
 8014162:	6019      	str	r1, [r3, #0]
 8014164:	e002      	b.n	801416c <_printf_i+0x1c4>
 8014166:	0668      	lsls	r0, r5, #25
 8014168:	d5fb      	bpl.n	8014162 <_printf_i+0x1ba>
 801416a:	8019      	strh	r1, [r3, #0]
 801416c:	2300      	movs	r3, #0
 801416e:	6123      	str	r3, [r4, #16]
 8014170:	4616      	mov	r6, r2
 8014172:	e7bc      	b.n	80140ee <_printf_i+0x146>
 8014174:	6833      	ldr	r3, [r6, #0]
 8014176:	1d1a      	adds	r2, r3, #4
 8014178:	6032      	str	r2, [r6, #0]
 801417a:	681e      	ldr	r6, [r3, #0]
 801417c:	6862      	ldr	r2, [r4, #4]
 801417e:	2100      	movs	r1, #0
 8014180:	4630      	mov	r0, r6
 8014182:	f7ec f825 	bl	80001d0 <memchr>
 8014186:	b108      	cbz	r0, 801418c <_printf_i+0x1e4>
 8014188:	1b80      	subs	r0, r0, r6
 801418a:	6060      	str	r0, [r4, #4]
 801418c:	6863      	ldr	r3, [r4, #4]
 801418e:	6123      	str	r3, [r4, #16]
 8014190:	2300      	movs	r3, #0
 8014192:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014196:	e7aa      	b.n	80140ee <_printf_i+0x146>
 8014198:	6923      	ldr	r3, [r4, #16]
 801419a:	4632      	mov	r2, r6
 801419c:	4649      	mov	r1, r9
 801419e:	4640      	mov	r0, r8
 80141a0:	47d0      	blx	sl
 80141a2:	3001      	adds	r0, #1
 80141a4:	d0ad      	beq.n	8014102 <_printf_i+0x15a>
 80141a6:	6823      	ldr	r3, [r4, #0]
 80141a8:	079b      	lsls	r3, r3, #30
 80141aa:	d413      	bmi.n	80141d4 <_printf_i+0x22c>
 80141ac:	68e0      	ldr	r0, [r4, #12]
 80141ae:	9b03      	ldr	r3, [sp, #12]
 80141b0:	4298      	cmp	r0, r3
 80141b2:	bfb8      	it	lt
 80141b4:	4618      	movlt	r0, r3
 80141b6:	e7a6      	b.n	8014106 <_printf_i+0x15e>
 80141b8:	2301      	movs	r3, #1
 80141ba:	4632      	mov	r2, r6
 80141bc:	4649      	mov	r1, r9
 80141be:	4640      	mov	r0, r8
 80141c0:	47d0      	blx	sl
 80141c2:	3001      	adds	r0, #1
 80141c4:	d09d      	beq.n	8014102 <_printf_i+0x15a>
 80141c6:	3501      	adds	r5, #1
 80141c8:	68e3      	ldr	r3, [r4, #12]
 80141ca:	9903      	ldr	r1, [sp, #12]
 80141cc:	1a5b      	subs	r3, r3, r1
 80141ce:	42ab      	cmp	r3, r5
 80141d0:	dcf2      	bgt.n	80141b8 <_printf_i+0x210>
 80141d2:	e7eb      	b.n	80141ac <_printf_i+0x204>
 80141d4:	2500      	movs	r5, #0
 80141d6:	f104 0619 	add.w	r6, r4, #25
 80141da:	e7f5      	b.n	80141c8 <_printf_i+0x220>
 80141dc:	08019934 	.word	0x08019934
 80141e0:	08019945 	.word	0x08019945

080141e4 <std>:
 80141e4:	2300      	movs	r3, #0
 80141e6:	b510      	push	{r4, lr}
 80141e8:	4604      	mov	r4, r0
 80141ea:	e9c0 3300 	strd	r3, r3, [r0]
 80141ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80141f2:	6083      	str	r3, [r0, #8]
 80141f4:	8181      	strh	r1, [r0, #12]
 80141f6:	6643      	str	r3, [r0, #100]	@ 0x64
 80141f8:	81c2      	strh	r2, [r0, #14]
 80141fa:	6183      	str	r3, [r0, #24]
 80141fc:	4619      	mov	r1, r3
 80141fe:	2208      	movs	r2, #8
 8014200:	305c      	adds	r0, #92	@ 0x5c
 8014202:	f000 f9d9 	bl	80145b8 <memset>
 8014206:	4b0d      	ldr	r3, [pc, #52]	@ (801423c <std+0x58>)
 8014208:	6263      	str	r3, [r4, #36]	@ 0x24
 801420a:	4b0d      	ldr	r3, [pc, #52]	@ (8014240 <std+0x5c>)
 801420c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801420e:	4b0d      	ldr	r3, [pc, #52]	@ (8014244 <std+0x60>)
 8014210:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014212:	4b0d      	ldr	r3, [pc, #52]	@ (8014248 <std+0x64>)
 8014214:	6323      	str	r3, [r4, #48]	@ 0x30
 8014216:	4b0d      	ldr	r3, [pc, #52]	@ (801424c <std+0x68>)
 8014218:	6224      	str	r4, [r4, #32]
 801421a:	429c      	cmp	r4, r3
 801421c:	d006      	beq.n	801422c <std+0x48>
 801421e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014222:	4294      	cmp	r4, r2
 8014224:	d002      	beq.n	801422c <std+0x48>
 8014226:	33d0      	adds	r3, #208	@ 0xd0
 8014228:	429c      	cmp	r4, r3
 801422a:	d105      	bne.n	8014238 <std+0x54>
 801422c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014234:	f000 ba50 	b.w	80146d8 <__retarget_lock_init_recursive>
 8014238:	bd10      	pop	{r4, pc}
 801423a:	bf00      	nop
 801423c:	08014405 	.word	0x08014405
 8014240:	0801442b 	.word	0x0801442b
 8014244:	08014463 	.word	0x08014463
 8014248:	08014487 	.word	0x08014487
 801424c:	200012e4 	.word	0x200012e4

08014250 <stdio_exit_handler>:
 8014250:	4a02      	ldr	r2, [pc, #8]	@ (801425c <stdio_exit_handler+0xc>)
 8014252:	4903      	ldr	r1, [pc, #12]	@ (8014260 <stdio_exit_handler+0x10>)
 8014254:	4803      	ldr	r0, [pc, #12]	@ (8014264 <stdio_exit_handler+0x14>)
 8014256:	f000 b869 	b.w	801432c <_fwalk_sglue>
 801425a:	bf00      	nop
 801425c:	2000017c 	.word	0x2000017c
 8014260:	0801691d 	.word	0x0801691d
 8014264:	2000018c 	.word	0x2000018c

08014268 <cleanup_stdio>:
 8014268:	6841      	ldr	r1, [r0, #4]
 801426a:	4b0c      	ldr	r3, [pc, #48]	@ (801429c <cleanup_stdio+0x34>)
 801426c:	4299      	cmp	r1, r3
 801426e:	b510      	push	{r4, lr}
 8014270:	4604      	mov	r4, r0
 8014272:	d001      	beq.n	8014278 <cleanup_stdio+0x10>
 8014274:	f002 fb52 	bl	801691c <_fflush_r>
 8014278:	68a1      	ldr	r1, [r4, #8]
 801427a:	4b09      	ldr	r3, [pc, #36]	@ (80142a0 <cleanup_stdio+0x38>)
 801427c:	4299      	cmp	r1, r3
 801427e:	d002      	beq.n	8014286 <cleanup_stdio+0x1e>
 8014280:	4620      	mov	r0, r4
 8014282:	f002 fb4b 	bl	801691c <_fflush_r>
 8014286:	68e1      	ldr	r1, [r4, #12]
 8014288:	4b06      	ldr	r3, [pc, #24]	@ (80142a4 <cleanup_stdio+0x3c>)
 801428a:	4299      	cmp	r1, r3
 801428c:	d004      	beq.n	8014298 <cleanup_stdio+0x30>
 801428e:	4620      	mov	r0, r4
 8014290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014294:	f002 bb42 	b.w	801691c <_fflush_r>
 8014298:	bd10      	pop	{r4, pc}
 801429a:	bf00      	nop
 801429c:	200012e4 	.word	0x200012e4
 80142a0:	2000134c 	.word	0x2000134c
 80142a4:	200013b4 	.word	0x200013b4

080142a8 <global_stdio_init.part.0>:
 80142a8:	b510      	push	{r4, lr}
 80142aa:	4b0b      	ldr	r3, [pc, #44]	@ (80142d8 <global_stdio_init.part.0+0x30>)
 80142ac:	4c0b      	ldr	r4, [pc, #44]	@ (80142dc <global_stdio_init.part.0+0x34>)
 80142ae:	4a0c      	ldr	r2, [pc, #48]	@ (80142e0 <global_stdio_init.part.0+0x38>)
 80142b0:	601a      	str	r2, [r3, #0]
 80142b2:	4620      	mov	r0, r4
 80142b4:	2200      	movs	r2, #0
 80142b6:	2104      	movs	r1, #4
 80142b8:	f7ff ff94 	bl	80141e4 <std>
 80142bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80142c0:	2201      	movs	r2, #1
 80142c2:	2109      	movs	r1, #9
 80142c4:	f7ff ff8e 	bl	80141e4 <std>
 80142c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80142cc:	2202      	movs	r2, #2
 80142ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80142d2:	2112      	movs	r1, #18
 80142d4:	f7ff bf86 	b.w	80141e4 <std>
 80142d8:	2000141c 	.word	0x2000141c
 80142dc:	200012e4 	.word	0x200012e4
 80142e0:	08014251 	.word	0x08014251

080142e4 <__sfp_lock_acquire>:
 80142e4:	4801      	ldr	r0, [pc, #4]	@ (80142ec <__sfp_lock_acquire+0x8>)
 80142e6:	f000 b9f8 	b.w	80146da <__retarget_lock_acquire_recursive>
 80142ea:	bf00      	nop
 80142ec:	20001425 	.word	0x20001425

080142f0 <__sfp_lock_release>:
 80142f0:	4801      	ldr	r0, [pc, #4]	@ (80142f8 <__sfp_lock_release+0x8>)
 80142f2:	f000 b9f3 	b.w	80146dc <__retarget_lock_release_recursive>
 80142f6:	bf00      	nop
 80142f8:	20001425 	.word	0x20001425

080142fc <__sinit>:
 80142fc:	b510      	push	{r4, lr}
 80142fe:	4604      	mov	r4, r0
 8014300:	f7ff fff0 	bl	80142e4 <__sfp_lock_acquire>
 8014304:	6a23      	ldr	r3, [r4, #32]
 8014306:	b11b      	cbz	r3, 8014310 <__sinit+0x14>
 8014308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801430c:	f7ff bff0 	b.w	80142f0 <__sfp_lock_release>
 8014310:	4b04      	ldr	r3, [pc, #16]	@ (8014324 <__sinit+0x28>)
 8014312:	6223      	str	r3, [r4, #32]
 8014314:	4b04      	ldr	r3, [pc, #16]	@ (8014328 <__sinit+0x2c>)
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	2b00      	cmp	r3, #0
 801431a:	d1f5      	bne.n	8014308 <__sinit+0xc>
 801431c:	f7ff ffc4 	bl	80142a8 <global_stdio_init.part.0>
 8014320:	e7f2      	b.n	8014308 <__sinit+0xc>
 8014322:	bf00      	nop
 8014324:	08014269 	.word	0x08014269
 8014328:	2000141c 	.word	0x2000141c

0801432c <_fwalk_sglue>:
 801432c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014330:	4607      	mov	r7, r0
 8014332:	4688      	mov	r8, r1
 8014334:	4614      	mov	r4, r2
 8014336:	2600      	movs	r6, #0
 8014338:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801433c:	f1b9 0901 	subs.w	r9, r9, #1
 8014340:	d505      	bpl.n	801434e <_fwalk_sglue+0x22>
 8014342:	6824      	ldr	r4, [r4, #0]
 8014344:	2c00      	cmp	r4, #0
 8014346:	d1f7      	bne.n	8014338 <_fwalk_sglue+0xc>
 8014348:	4630      	mov	r0, r6
 801434a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801434e:	89ab      	ldrh	r3, [r5, #12]
 8014350:	2b01      	cmp	r3, #1
 8014352:	d907      	bls.n	8014364 <_fwalk_sglue+0x38>
 8014354:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014358:	3301      	adds	r3, #1
 801435a:	d003      	beq.n	8014364 <_fwalk_sglue+0x38>
 801435c:	4629      	mov	r1, r5
 801435e:	4638      	mov	r0, r7
 8014360:	47c0      	blx	r8
 8014362:	4306      	orrs	r6, r0
 8014364:	3568      	adds	r5, #104	@ 0x68
 8014366:	e7e9      	b.n	801433c <_fwalk_sglue+0x10>

08014368 <siprintf>:
 8014368:	b40e      	push	{r1, r2, r3}
 801436a:	b510      	push	{r4, lr}
 801436c:	b09d      	sub	sp, #116	@ 0x74
 801436e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8014370:	9002      	str	r0, [sp, #8]
 8014372:	9006      	str	r0, [sp, #24]
 8014374:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014378:	480a      	ldr	r0, [pc, #40]	@ (80143a4 <siprintf+0x3c>)
 801437a:	9107      	str	r1, [sp, #28]
 801437c:	9104      	str	r1, [sp, #16]
 801437e:	490a      	ldr	r1, [pc, #40]	@ (80143a8 <siprintf+0x40>)
 8014380:	f853 2b04 	ldr.w	r2, [r3], #4
 8014384:	9105      	str	r1, [sp, #20]
 8014386:	2400      	movs	r4, #0
 8014388:	a902      	add	r1, sp, #8
 801438a:	6800      	ldr	r0, [r0, #0]
 801438c:	9301      	str	r3, [sp, #4]
 801438e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8014390:	f001 fce4 	bl	8015d5c <_svfiprintf_r>
 8014394:	9b02      	ldr	r3, [sp, #8]
 8014396:	701c      	strb	r4, [r3, #0]
 8014398:	b01d      	add	sp, #116	@ 0x74
 801439a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801439e:	b003      	add	sp, #12
 80143a0:	4770      	bx	lr
 80143a2:	bf00      	nop
 80143a4:	20000188 	.word	0x20000188
 80143a8:	ffff0208 	.word	0xffff0208

080143ac <siscanf>:
 80143ac:	b40e      	push	{r1, r2, r3}
 80143ae:	b570      	push	{r4, r5, r6, lr}
 80143b0:	b09d      	sub	sp, #116	@ 0x74
 80143b2:	ac21      	add	r4, sp, #132	@ 0x84
 80143b4:	2500      	movs	r5, #0
 80143b6:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80143ba:	f854 6b04 	ldr.w	r6, [r4], #4
 80143be:	f8ad 2014 	strh.w	r2, [sp, #20]
 80143c2:	951b      	str	r5, [sp, #108]	@ 0x6c
 80143c4:	9002      	str	r0, [sp, #8]
 80143c6:	9006      	str	r0, [sp, #24]
 80143c8:	f7eb ff52 	bl	8000270 <strlen>
 80143cc:	4b0b      	ldr	r3, [pc, #44]	@ (80143fc <siscanf+0x50>)
 80143ce:	9003      	str	r0, [sp, #12]
 80143d0:	9007      	str	r0, [sp, #28]
 80143d2:	480b      	ldr	r0, [pc, #44]	@ (8014400 <siscanf+0x54>)
 80143d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80143d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80143da:	f8ad 3016 	strh.w	r3, [sp, #22]
 80143de:	4632      	mov	r2, r6
 80143e0:	4623      	mov	r3, r4
 80143e2:	a902      	add	r1, sp, #8
 80143e4:	6800      	ldr	r0, [r0, #0]
 80143e6:	950f      	str	r5, [sp, #60]	@ 0x3c
 80143e8:	9514      	str	r5, [sp, #80]	@ 0x50
 80143ea:	9401      	str	r4, [sp, #4]
 80143ec:	f001 fe0c 	bl	8016008 <__ssvfiscanf_r>
 80143f0:	b01d      	add	sp, #116	@ 0x74
 80143f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80143f6:	b003      	add	sp, #12
 80143f8:	4770      	bx	lr
 80143fa:	bf00      	nop
 80143fc:	08014427 	.word	0x08014427
 8014400:	20000188 	.word	0x20000188

08014404 <__sread>:
 8014404:	b510      	push	{r4, lr}
 8014406:	460c      	mov	r4, r1
 8014408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801440c:	f000 f916 	bl	801463c <_read_r>
 8014410:	2800      	cmp	r0, #0
 8014412:	bfab      	itete	ge
 8014414:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014416:	89a3      	ldrhlt	r3, [r4, #12]
 8014418:	181b      	addge	r3, r3, r0
 801441a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801441e:	bfac      	ite	ge
 8014420:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014422:	81a3      	strhlt	r3, [r4, #12]
 8014424:	bd10      	pop	{r4, pc}

08014426 <__seofread>:
 8014426:	2000      	movs	r0, #0
 8014428:	4770      	bx	lr

0801442a <__swrite>:
 801442a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801442e:	461f      	mov	r7, r3
 8014430:	898b      	ldrh	r3, [r1, #12]
 8014432:	05db      	lsls	r3, r3, #23
 8014434:	4605      	mov	r5, r0
 8014436:	460c      	mov	r4, r1
 8014438:	4616      	mov	r6, r2
 801443a:	d505      	bpl.n	8014448 <__swrite+0x1e>
 801443c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014440:	2302      	movs	r3, #2
 8014442:	2200      	movs	r2, #0
 8014444:	f000 f8e8 	bl	8014618 <_lseek_r>
 8014448:	89a3      	ldrh	r3, [r4, #12]
 801444a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801444e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014452:	81a3      	strh	r3, [r4, #12]
 8014454:	4632      	mov	r2, r6
 8014456:	463b      	mov	r3, r7
 8014458:	4628      	mov	r0, r5
 801445a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801445e:	f000 b8ff 	b.w	8014660 <_write_r>

08014462 <__sseek>:
 8014462:	b510      	push	{r4, lr}
 8014464:	460c      	mov	r4, r1
 8014466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801446a:	f000 f8d5 	bl	8014618 <_lseek_r>
 801446e:	1c43      	adds	r3, r0, #1
 8014470:	89a3      	ldrh	r3, [r4, #12]
 8014472:	bf15      	itete	ne
 8014474:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014476:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801447a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801447e:	81a3      	strheq	r3, [r4, #12]
 8014480:	bf18      	it	ne
 8014482:	81a3      	strhne	r3, [r4, #12]
 8014484:	bd10      	pop	{r4, pc}

08014486 <__sclose>:
 8014486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801448a:	f000 b8b5 	b.w	80145f8 <_close_r>

0801448e <__swbuf_r>:
 801448e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014490:	460e      	mov	r6, r1
 8014492:	4614      	mov	r4, r2
 8014494:	4605      	mov	r5, r0
 8014496:	b118      	cbz	r0, 80144a0 <__swbuf_r+0x12>
 8014498:	6a03      	ldr	r3, [r0, #32]
 801449a:	b90b      	cbnz	r3, 80144a0 <__swbuf_r+0x12>
 801449c:	f7ff ff2e 	bl	80142fc <__sinit>
 80144a0:	69a3      	ldr	r3, [r4, #24]
 80144a2:	60a3      	str	r3, [r4, #8]
 80144a4:	89a3      	ldrh	r3, [r4, #12]
 80144a6:	071a      	lsls	r2, r3, #28
 80144a8:	d501      	bpl.n	80144ae <__swbuf_r+0x20>
 80144aa:	6923      	ldr	r3, [r4, #16]
 80144ac:	b943      	cbnz	r3, 80144c0 <__swbuf_r+0x32>
 80144ae:	4621      	mov	r1, r4
 80144b0:	4628      	mov	r0, r5
 80144b2:	f000 f82b 	bl	801450c <__swsetup_r>
 80144b6:	b118      	cbz	r0, 80144c0 <__swbuf_r+0x32>
 80144b8:	f04f 37ff 	mov.w	r7, #4294967295
 80144bc:	4638      	mov	r0, r7
 80144be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144c0:	6823      	ldr	r3, [r4, #0]
 80144c2:	6922      	ldr	r2, [r4, #16]
 80144c4:	1a98      	subs	r0, r3, r2
 80144c6:	6963      	ldr	r3, [r4, #20]
 80144c8:	b2f6      	uxtb	r6, r6
 80144ca:	4283      	cmp	r3, r0
 80144cc:	4637      	mov	r7, r6
 80144ce:	dc05      	bgt.n	80144dc <__swbuf_r+0x4e>
 80144d0:	4621      	mov	r1, r4
 80144d2:	4628      	mov	r0, r5
 80144d4:	f002 fa22 	bl	801691c <_fflush_r>
 80144d8:	2800      	cmp	r0, #0
 80144da:	d1ed      	bne.n	80144b8 <__swbuf_r+0x2a>
 80144dc:	68a3      	ldr	r3, [r4, #8]
 80144de:	3b01      	subs	r3, #1
 80144e0:	60a3      	str	r3, [r4, #8]
 80144e2:	6823      	ldr	r3, [r4, #0]
 80144e4:	1c5a      	adds	r2, r3, #1
 80144e6:	6022      	str	r2, [r4, #0]
 80144e8:	701e      	strb	r6, [r3, #0]
 80144ea:	6962      	ldr	r2, [r4, #20]
 80144ec:	1c43      	adds	r3, r0, #1
 80144ee:	429a      	cmp	r2, r3
 80144f0:	d004      	beq.n	80144fc <__swbuf_r+0x6e>
 80144f2:	89a3      	ldrh	r3, [r4, #12]
 80144f4:	07db      	lsls	r3, r3, #31
 80144f6:	d5e1      	bpl.n	80144bc <__swbuf_r+0x2e>
 80144f8:	2e0a      	cmp	r6, #10
 80144fa:	d1df      	bne.n	80144bc <__swbuf_r+0x2e>
 80144fc:	4621      	mov	r1, r4
 80144fe:	4628      	mov	r0, r5
 8014500:	f002 fa0c 	bl	801691c <_fflush_r>
 8014504:	2800      	cmp	r0, #0
 8014506:	d0d9      	beq.n	80144bc <__swbuf_r+0x2e>
 8014508:	e7d6      	b.n	80144b8 <__swbuf_r+0x2a>
	...

0801450c <__swsetup_r>:
 801450c:	b538      	push	{r3, r4, r5, lr}
 801450e:	4b29      	ldr	r3, [pc, #164]	@ (80145b4 <__swsetup_r+0xa8>)
 8014510:	4605      	mov	r5, r0
 8014512:	6818      	ldr	r0, [r3, #0]
 8014514:	460c      	mov	r4, r1
 8014516:	b118      	cbz	r0, 8014520 <__swsetup_r+0x14>
 8014518:	6a03      	ldr	r3, [r0, #32]
 801451a:	b90b      	cbnz	r3, 8014520 <__swsetup_r+0x14>
 801451c:	f7ff feee 	bl	80142fc <__sinit>
 8014520:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014524:	0719      	lsls	r1, r3, #28
 8014526:	d422      	bmi.n	801456e <__swsetup_r+0x62>
 8014528:	06da      	lsls	r2, r3, #27
 801452a:	d407      	bmi.n	801453c <__swsetup_r+0x30>
 801452c:	2209      	movs	r2, #9
 801452e:	602a      	str	r2, [r5, #0]
 8014530:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014534:	81a3      	strh	r3, [r4, #12]
 8014536:	f04f 30ff 	mov.w	r0, #4294967295
 801453a:	e033      	b.n	80145a4 <__swsetup_r+0x98>
 801453c:	0758      	lsls	r0, r3, #29
 801453e:	d512      	bpl.n	8014566 <__swsetup_r+0x5a>
 8014540:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014542:	b141      	cbz	r1, 8014556 <__swsetup_r+0x4a>
 8014544:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014548:	4299      	cmp	r1, r3
 801454a:	d002      	beq.n	8014552 <__swsetup_r+0x46>
 801454c:	4628      	mov	r0, r5
 801454e:	f000 ff2f 	bl	80153b0 <_free_r>
 8014552:	2300      	movs	r3, #0
 8014554:	6363      	str	r3, [r4, #52]	@ 0x34
 8014556:	89a3      	ldrh	r3, [r4, #12]
 8014558:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801455c:	81a3      	strh	r3, [r4, #12]
 801455e:	2300      	movs	r3, #0
 8014560:	6063      	str	r3, [r4, #4]
 8014562:	6923      	ldr	r3, [r4, #16]
 8014564:	6023      	str	r3, [r4, #0]
 8014566:	89a3      	ldrh	r3, [r4, #12]
 8014568:	f043 0308 	orr.w	r3, r3, #8
 801456c:	81a3      	strh	r3, [r4, #12]
 801456e:	6923      	ldr	r3, [r4, #16]
 8014570:	b94b      	cbnz	r3, 8014586 <__swsetup_r+0x7a>
 8014572:	89a3      	ldrh	r3, [r4, #12]
 8014574:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014578:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801457c:	d003      	beq.n	8014586 <__swsetup_r+0x7a>
 801457e:	4621      	mov	r1, r4
 8014580:	4628      	mov	r0, r5
 8014582:	f002 fa19 	bl	80169b8 <__smakebuf_r>
 8014586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801458a:	f013 0201 	ands.w	r2, r3, #1
 801458e:	d00a      	beq.n	80145a6 <__swsetup_r+0x9a>
 8014590:	2200      	movs	r2, #0
 8014592:	60a2      	str	r2, [r4, #8]
 8014594:	6962      	ldr	r2, [r4, #20]
 8014596:	4252      	negs	r2, r2
 8014598:	61a2      	str	r2, [r4, #24]
 801459a:	6922      	ldr	r2, [r4, #16]
 801459c:	b942      	cbnz	r2, 80145b0 <__swsetup_r+0xa4>
 801459e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80145a2:	d1c5      	bne.n	8014530 <__swsetup_r+0x24>
 80145a4:	bd38      	pop	{r3, r4, r5, pc}
 80145a6:	0799      	lsls	r1, r3, #30
 80145a8:	bf58      	it	pl
 80145aa:	6962      	ldrpl	r2, [r4, #20]
 80145ac:	60a2      	str	r2, [r4, #8]
 80145ae:	e7f4      	b.n	801459a <__swsetup_r+0x8e>
 80145b0:	2000      	movs	r0, #0
 80145b2:	e7f7      	b.n	80145a4 <__swsetup_r+0x98>
 80145b4:	20000188 	.word	0x20000188

080145b8 <memset>:
 80145b8:	4402      	add	r2, r0
 80145ba:	4603      	mov	r3, r0
 80145bc:	4293      	cmp	r3, r2
 80145be:	d100      	bne.n	80145c2 <memset+0xa>
 80145c0:	4770      	bx	lr
 80145c2:	f803 1b01 	strb.w	r1, [r3], #1
 80145c6:	e7f9      	b.n	80145bc <memset+0x4>

080145c8 <strncpy>:
 80145c8:	b510      	push	{r4, lr}
 80145ca:	3901      	subs	r1, #1
 80145cc:	4603      	mov	r3, r0
 80145ce:	b132      	cbz	r2, 80145de <strncpy+0x16>
 80145d0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80145d4:	f803 4b01 	strb.w	r4, [r3], #1
 80145d8:	3a01      	subs	r2, #1
 80145da:	2c00      	cmp	r4, #0
 80145dc:	d1f7      	bne.n	80145ce <strncpy+0x6>
 80145de:	441a      	add	r2, r3
 80145e0:	2100      	movs	r1, #0
 80145e2:	4293      	cmp	r3, r2
 80145e4:	d100      	bne.n	80145e8 <strncpy+0x20>
 80145e6:	bd10      	pop	{r4, pc}
 80145e8:	f803 1b01 	strb.w	r1, [r3], #1
 80145ec:	e7f9      	b.n	80145e2 <strncpy+0x1a>
	...

080145f0 <_localeconv_r>:
 80145f0:	4800      	ldr	r0, [pc, #0]	@ (80145f4 <_localeconv_r+0x4>)
 80145f2:	4770      	bx	lr
 80145f4:	200002c8 	.word	0x200002c8

080145f8 <_close_r>:
 80145f8:	b538      	push	{r3, r4, r5, lr}
 80145fa:	4d06      	ldr	r5, [pc, #24]	@ (8014614 <_close_r+0x1c>)
 80145fc:	2300      	movs	r3, #0
 80145fe:	4604      	mov	r4, r0
 8014600:	4608      	mov	r0, r1
 8014602:	602b      	str	r3, [r5, #0]
 8014604:	f7ef fae8 	bl	8003bd8 <_close>
 8014608:	1c43      	adds	r3, r0, #1
 801460a:	d102      	bne.n	8014612 <_close_r+0x1a>
 801460c:	682b      	ldr	r3, [r5, #0]
 801460e:	b103      	cbz	r3, 8014612 <_close_r+0x1a>
 8014610:	6023      	str	r3, [r4, #0]
 8014612:	bd38      	pop	{r3, r4, r5, pc}
 8014614:	20001420 	.word	0x20001420

08014618 <_lseek_r>:
 8014618:	b538      	push	{r3, r4, r5, lr}
 801461a:	4d07      	ldr	r5, [pc, #28]	@ (8014638 <_lseek_r+0x20>)
 801461c:	4604      	mov	r4, r0
 801461e:	4608      	mov	r0, r1
 8014620:	4611      	mov	r1, r2
 8014622:	2200      	movs	r2, #0
 8014624:	602a      	str	r2, [r5, #0]
 8014626:	461a      	mov	r2, r3
 8014628:	f7ef fafd 	bl	8003c26 <_lseek>
 801462c:	1c43      	adds	r3, r0, #1
 801462e:	d102      	bne.n	8014636 <_lseek_r+0x1e>
 8014630:	682b      	ldr	r3, [r5, #0]
 8014632:	b103      	cbz	r3, 8014636 <_lseek_r+0x1e>
 8014634:	6023      	str	r3, [r4, #0]
 8014636:	bd38      	pop	{r3, r4, r5, pc}
 8014638:	20001420 	.word	0x20001420

0801463c <_read_r>:
 801463c:	b538      	push	{r3, r4, r5, lr}
 801463e:	4d07      	ldr	r5, [pc, #28]	@ (801465c <_read_r+0x20>)
 8014640:	4604      	mov	r4, r0
 8014642:	4608      	mov	r0, r1
 8014644:	4611      	mov	r1, r2
 8014646:	2200      	movs	r2, #0
 8014648:	602a      	str	r2, [r5, #0]
 801464a:	461a      	mov	r2, r3
 801464c:	f7ef fa8b 	bl	8003b66 <_read>
 8014650:	1c43      	adds	r3, r0, #1
 8014652:	d102      	bne.n	801465a <_read_r+0x1e>
 8014654:	682b      	ldr	r3, [r5, #0]
 8014656:	b103      	cbz	r3, 801465a <_read_r+0x1e>
 8014658:	6023      	str	r3, [r4, #0]
 801465a:	bd38      	pop	{r3, r4, r5, pc}
 801465c:	20001420 	.word	0x20001420

08014660 <_write_r>:
 8014660:	b538      	push	{r3, r4, r5, lr}
 8014662:	4d07      	ldr	r5, [pc, #28]	@ (8014680 <_write_r+0x20>)
 8014664:	4604      	mov	r4, r0
 8014666:	4608      	mov	r0, r1
 8014668:	4611      	mov	r1, r2
 801466a:	2200      	movs	r2, #0
 801466c:	602a      	str	r2, [r5, #0]
 801466e:	461a      	mov	r2, r3
 8014670:	f7ef fa96 	bl	8003ba0 <_write>
 8014674:	1c43      	adds	r3, r0, #1
 8014676:	d102      	bne.n	801467e <_write_r+0x1e>
 8014678:	682b      	ldr	r3, [r5, #0]
 801467a:	b103      	cbz	r3, 801467e <_write_r+0x1e>
 801467c:	6023      	str	r3, [r4, #0]
 801467e:	bd38      	pop	{r3, r4, r5, pc}
 8014680:	20001420 	.word	0x20001420

08014684 <__errno>:
 8014684:	4b01      	ldr	r3, [pc, #4]	@ (801468c <__errno+0x8>)
 8014686:	6818      	ldr	r0, [r3, #0]
 8014688:	4770      	bx	lr
 801468a:	bf00      	nop
 801468c:	20000188 	.word	0x20000188

08014690 <__libc_init_array>:
 8014690:	b570      	push	{r4, r5, r6, lr}
 8014692:	4d0d      	ldr	r5, [pc, #52]	@ (80146c8 <__libc_init_array+0x38>)
 8014694:	4c0d      	ldr	r4, [pc, #52]	@ (80146cc <__libc_init_array+0x3c>)
 8014696:	1b64      	subs	r4, r4, r5
 8014698:	10a4      	asrs	r4, r4, #2
 801469a:	2600      	movs	r6, #0
 801469c:	42a6      	cmp	r6, r4
 801469e:	d109      	bne.n	80146b4 <__libc_init_array+0x24>
 80146a0:	4d0b      	ldr	r5, [pc, #44]	@ (80146d0 <__libc_init_array+0x40>)
 80146a2:	4c0c      	ldr	r4, [pc, #48]	@ (80146d4 <__libc_init_array+0x44>)
 80146a4:	f002 fc56 	bl	8016f54 <_init>
 80146a8:	1b64      	subs	r4, r4, r5
 80146aa:	10a4      	asrs	r4, r4, #2
 80146ac:	2600      	movs	r6, #0
 80146ae:	42a6      	cmp	r6, r4
 80146b0:	d105      	bne.n	80146be <__libc_init_array+0x2e>
 80146b2:	bd70      	pop	{r4, r5, r6, pc}
 80146b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80146b8:	4798      	blx	r3
 80146ba:	3601      	adds	r6, #1
 80146bc:	e7ee      	b.n	801469c <__libc_init_array+0xc>
 80146be:	f855 3b04 	ldr.w	r3, [r5], #4
 80146c2:	4798      	blx	r3
 80146c4:	3601      	adds	r6, #1
 80146c6:	e7f2      	b.n	80146ae <__libc_init_array+0x1e>
 80146c8:	08019cbc 	.word	0x08019cbc
 80146cc:	08019cbc 	.word	0x08019cbc
 80146d0:	08019cbc 	.word	0x08019cbc
 80146d4:	08019cc0 	.word	0x08019cc0

080146d8 <__retarget_lock_init_recursive>:
 80146d8:	4770      	bx	lr

080146da <__retarget_lock_acquire_recursive>:
 80146da:	4770      	bx	lr

080146dc <__retarget_lock_release_recursive>:
 80146dc:	4770      	bx	lr

080146de <memcpy>:
 80146de:	440a      	add	r2, r1
 80146e0:	4291      	cmp	r1, r2
 80146e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80146e6:	d100      	bne.n	80146ea <memcpy+0xc>
 80146e8:	4770      	bx	lr
 80146ea:	b510      	push	{r4, lr}
 80146ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80146f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80146f4:	4291      	cmp	r1, r2
 80146f6:	d1f9      	bne.n	80146ec <memcpy+0xe>
 80146f8:	bd10      	pop	{r4, pc}

080146fa <quorem>:
 80146fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146fe:	6903      	ldr	r3, [r0, #16]
 8014700:	690c      	ldr	r4, [r1, #16]
 8014702:	42a3      	cmp	r3, r4
 8014704:	4607      	mov	r7, r0
 8014706:	db7e      	blt.n	8014806 <quorem+0x10c>
 8014708:	3c01      	subs	r4, #1
 801470a:	f101 0814 	add.w	r8, r1, #20
 801470e:	00a3      	lsls	r3, r4, #2
 8014710:	f100 0514 	add.w	r5, r0, #20
 8014714:	9300      	str	r3, [sp, #0]
 8014716:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801471a:	9301      	str	r3, [sp, #4]
 801471c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014720:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014724:	3301      	adds	r3, #1
 8014726:	429a      	cmp	r2, r3
 8014728:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801472c:	fbb2 f6f3 	udiv	r6, r2, r3
 8014730:	d32e      	bcc.n	8014790 <quorem+0x96>
 8014732:	f04f 0a00 	mov.w	sl, #0
 8014736:	46c4      	mov	ip, r8
 8014738:	46ae      	mov	lr, r5
 801473a:	46d3      	mov	fp, sl
 801473c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014740:	b298      	uxth	r0, r3
 8014742:	fb06 a000 	mla	r0, r6, r0, sl
 8014746:	0c02      	lsrs	r2, r0, #16
 8014748:	0c1b      	lsrs	r3, r3, #16
 801474a:	fb06 2303 	mla	r3, r6, r3, r2
 801474e:	f8de 2000 	ldr.w	r2, [lr]
 8014752:	b280      	uxth	r0, r0
 8014754:	b292      	uxth	r2, r2
 8014756:	1a12      	subs	r2, r2, r0
 8014758:	445a      	add	r2, fp
 801475a:	f8de 0000 	ldr.w	r0, [lr]
 801475e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014762:	b29b      	uxth	r3, r3
 8014764:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8014768:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801476c:	b292      	uxth	r2, r2
 801476e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014772:	45e1      	cmp	r9, ip
 8014774:	f84e 2b04 	str.w	r2, [lr], #4
 8014778:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801477c:	d2de      	bcs.n	801473c <quorem+0x42>
 801477e:	9b00      	ldr	r3, [sp, #0]
 8014780:	58eb      	ldr	r3, [r5, r3]
 8014782:	b92b      	cbnz	r3, 8014790 <quorem+0x96>
 8014784:	9b01      	ldr	r3, [sp, #4]
 8014786:	3b04      	subs	r3, #4
 8014788:	429d      	cmp	r5, r3
 801478a:	461a      	mov	r2, r3
 801478c:	d32f      	bcc.n	80147ee <quorem+0xf4>
 801478e:	613c      	str	r4, [r7, #16]
 8014790:	4638      	mov	r0, r7
 8014792:	f001 f97f 	bl	8015a94 <__mcmp>
 8014796:	2800      	cmp	r0, #0
 8014798:	db25      	blt.n	80147e6 <quorem+0xec>
 801479a:	4629      	mov	r1, r5
 801479c:	2000      	movs	r0, #0
 801479e:	f858 2b04 	ldr.w	r2, [r8], #4
 80147a2:	f8d1 c000 	ldr.w	ip, [r1]
 80147a6:	fa1f fe82 	uxth.w	lr, r2
 80147aa:	fa1f f38c 	uxth.w	r3, ip
 80147ae:	eba3 030e 	sub.w	r3, r3, lr
 80147b2:	4403      	add	r3, r0
 80147b4:	0c12      	lsrs	r2, r2, #16
 80147b6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80147ba:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80147be:	b29b      	uxth	r3, r3
 80147c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80147c4:	45c1      	cmp	r9, r8
 80147c6:	f841 3b04 	str.w	r3, [r1], #4
 80147ca:	ea4f 4022 	mov.w	r0, r2, asr #16
 80147ce:	d2e6      	bcs.n	801479e <quorem+0xa4>
 80147d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80147d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80147d8:	b922      	cbnz	r2, 80147e4 <quorem+0xea>
 80147da:	3b04      	subs	r3, #4
 80147dc:	429d      	cmp	r5, r3
 80147de:	461a      	mov	r2, r3
 80147e0:	d30b      	bcc.n	80147fa <quorem+0x100>
 80147e2:	613c      	str	r4, [r7, #16]
 80147e4:	3601      	adds	r6, #1
 80147e6:	4630      	mov	r0, r6
 80147e8:	b003      	add	sp, #12
 80147ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147ee:	6812      	ldr	r2, [r2, #0]
 80147f0:	3b04      	subs	r3, #4
 80147f2:	2a00      	cmp	r2, #0
 80147f4:	d1cb      	bne.n	801478e <quorem+0x94>
 80147f6:	3c01      	subs	r4, #1
 80147f8:	e7c6      	b.n	8014788 <quorem+0x8e>
 80147fa:	6812      	ldr	r2, [r2, #0]
 80147fc:	3b04      	subs	r3, #4
 80147fe:	2a00      	cmp	r2, #0
 8014800:	d1ef      	bne.n	80147e2 <quorem+0xe8>
 8014802:	3c01      	subs	r4, #1
 8014804:	e7ea      	b.n	80147dc <quorem+0xe2>
 8014806:	2000      	movs	r0, #0
 8014808:	e7ee      	b.n	80147e8 <quorem+0xee>
 801480a:	0000      	movs	r0, r0
 801480c:	0000      	movs	r0, r0
	...

08014810 <_dtoa_r>:
 8014810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014814:	69c7      	ldr	r7, [r0, #28]
 8014816:	b097      	sub	sp, #92	@ 0x5c
 8014818:	ed8d 0b04 	vstr	d0, [sp, #16]
 801481c:	ec55 4b10 	vmov	r4, r5, d0
 8014820:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8014822:	9107      	str	r1, [sp, #28]
 8014824:	4681      	mov	r9, r0
 8014826:	920c      	str	r2, [sp, #48]	@ 0x30
 8014828:	9311      	str	r3, [sp, #68]	@ 0x44
 801482a:	b97f      	cbnz	r7, 801484c <_dtoa_r+0x3c>
 801482c:	2010      	movs	r0, #16
 801482e:	f000 fe09 	bl	8015444 <malloc>
 8014832:	4602      	mov	r2, r0
 8014834:	f8c9 001c 	str.w	r0, [r9, #28]
 8014838:	b920      	cbnz	r0, 8014844 <_dtoa_r+0x34>
 801483a:	4ba9      	ldr	r3, [pc, #676]	@ (8014ae0 <_dtoa_r+0x2d0>)
 801483c:	21ef      	movs	r1, #239	@ 0xef
 801483e:	48a9      	ldr	r0, [pc, #676]	@ (8014ae4 <_dtoa_r+0x2d4>)
 8014840:	f002 f9b6 	bl	8016bb0 <__assert_func>
 8014844:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8014848:	6007      	str	r7, [r0, #0]
 801484a:	60c7      	str	r7, [r0, #12]
 801484c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014850:	6819      	ldr	r1, [r3, #0]
 8014852:	b159      	cbz	r1, 801486c <_dtoa_r+0x5c>
 8014854:	685a      	ldr	r2, [r3, #4]
 8014856:	604a      	str	r2, [r1, #4]
 8014858:	2301      	movs	r3, #1
 801485a:	4093      	lsls	r3, r2
 801485c:	608b      	str	r3, [r1, #8]
 801485e:	4648      	mov	r0, r9
 8014860:	f000 fee6 	bl	8015630 <_Bfree>
 8014864:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014868:	2200      	movs	r2, #0
 801486a:	601a      	str	r2, [r3, #0]
 801486c:	1e2b      	subs	r3, r5, #0
 801486e:	bfb9      	ittee	lt
 8014870:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8014874:	9305      	strlt	r3, [sp, #20]
 8014876:	2300      	movge	r3, #0
 8014878:	6033      	strge	r3, [r6, #0]
 801487a:	9f05      	ldr	r7, [sp, #20]
 801487c:	4b9a      	ldr	r3, [pc, #616]	@ (8014ae8 <_dtoa_r+0x2d8>)
 801487e:	bfbc      	itt	lt
 8014880:	2201      	movlt	r2, #1
 8014882:	6032      	strlt	r2, [r6, #0]
 8014884:	43bb      	bics	r3, r7
 8014886:	d112      	bne.n	80148ae <_dtoa_r+0x9e>
 8014888:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801488a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801488e:	6013      	str	r3, [r2, #0]
 8014890:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014894:	4323      	orrs	r3, r4
 8014896:	f000 855a 	beq.w	801534e <_dtoa_r+0xb3e>
 801489a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801489c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8014afc <_dtoa_r+0x2ec>
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	f000 855c 	beq.w	801535e <_dtoa_r+0xb4e>
 80148a6:	f10a 0303 	add.w	r3, sl, #3
 80148aa:	f000 bd56 	b.w	801535a <_dtoa_r+0xb4a>
 80148ae:	ed9d 7b04 	vldr	d7, [sp, #16]
 80148b2:	2200      	movs	r2, #0
 80148b4:	ec51 0b17 	vmov	r0, r1, d7
 80148b8:	2300      	movs	r3, #0
 80148ba:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80148be:	f7ec f903 	bl	8000ac8 <__aeabi_dcmpeq>
 80148c2:	4680      	mov	r8, r0
 80148c4:	b158      	cbz	r0, 80148de <_dtoa_r+0xce>
 80148c6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80148c8:	2301      	movs	r3, #1
 80148ca:	6013      	str	r3, [r2, #0]
 80148cc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80148ce:	b113      	cbz	r3, 80148d6 <_dtoa_r+0xc6>
 80148d0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80148d2:	4b86      	ldr	r3, [pc, #536]	@ (8014aec <_dtoa_r+0x2dc>)
 80148d4:	6013      	str	r3, [r2, #0]
 80148d6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8014b00 <_dtoa_r+0x2f0>
 80148da:	f000 bd40 	b.w	801535e <_dtoa_r+0xb4e>
 80148de:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80148e2:	aa14      	add	r2, sp, #80	@ 0x50
 80148e4:	a915      	add	r1, sp, #84	@ 0x54
 80148e6:	4648      	mov	r0, r9
 80148e8:	f001 f984 	bl	8015bf4 <__d2b>
 80148ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80148f0:	9002      	str	r0, [sp, #8]
 80148f2:	2e00      	cmp	r6, #0
 80148f4:	d078      	beq.n	80149e8 <_dtoa_r+0x1d8>
 80148f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80148f8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80148fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014900:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8014904:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8014908:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801490c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8014910:	4619      	mov	r1, r3
 8014912:	2200      	movs	r2, #0
 8014914:	4b76      	ldr	r3, [pc, #472]	@ (8014af0 <_dtoa_r+0x2e0>)
 8014916:	f7eb fcb7 	bl	8000288 <__aeabi_dsub>
 801491a:	a36b      	add	r3, pc, #428	@ (adr r3, 8014ac8 <_dtoa_r+0x2b8>)
 801491c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014920:	f7eb fe6a 	bl	80005f8 <__aeabi_dmul>
 8014924:	a36a      	add	r3, pc, #424	@ (adr r3, 8014ad0 <_dtoa_r+0x2c0>)
 8014926:	e9d3 2300 	ldrd	r2, r3, [r3]
 801492a:	f7eb fcaf 	bl	800028c <__adddf3>
 801492e:	4604      	mov	r4, r0
 8014930:	4630      	mov	r0, r6
 8014932:	460d      	mov	r5, r1
 8014934:	f7eb fdf6 	bl	8000524 <__aeabi_i2d>
 8014938:	a367      	add	r3, pc, #412	@ (adr r3, 8014ad8 <_dtoa_r+0x2c8>)
 801493a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801493e:	f7eb fe5b 	bl	80005f8 <__aeabi_dmul>
 8014942:	4602      	mov	r2, r0
 8014944:	460b      	mov	r3, r1
 8014946:	4620      	mov	r0, r4
 8014948:	4629      	mov	r1, r5
 801494a:	f7eb fc9f 	bl	800028c <__adddf3>
 801494e:	4604      	mov	r4, r0
 8014950:	460d      	mov	r5, r1
 8014952:	f7ec f901 	bl	8000b58 <__aeabi_d2iz>
 8014956:	2200      	movs	r2, #0
 8014958:	4607      	mov	r7, r0
 801495a:	2300      	movs	r3, #0
 801495c:	4620      	mov	r0, r4
 801495e:	4629      	mov	r1, r5
 8014960:	f7ec f8bc 	bl	8000adc <__aeabi_dcmplt>
 8014964:	b140      	cbz	r0, 8014978 <_dtoa_r+0x168>
 8014966:	4638      	mov	r0, r7
 8014968:	f7eb fddc 	bl	8000524 <__aeabi_i2d>
 801496c:	4622      	mov	r2, r4
 801496e:	462b      	mov	r3, r5
 8014970:	f7ec f8aa 	bl	8000ac8 <__aeabi_dcmpeq>
 8014974:	b900      	cbnz	r0, 8014978 <_dtoa_r+0x168>
 8014976:	3f01      	subs	r7, #1
 8014978:	2f16      	cmp	r7, #22
 801497a:	d852      	bhi.n	8014a22 <_dtoa_r+0x212>
 801497c:	4b5d      	ldr	r3, [pc, #372]	@ (8014af4 <_dtoa_r+0x2e4>)
 801497e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014986:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801498a:	f7ec f8a7 	bl	8000adc <__aeabi_dcmplt>
 801498e:	2800      	cmp	r0, #0
 8014990:	d049      	beq.n	8014a26 <_dtoa_r+0x216>
 8014992:	3f01      	subs	r7, #1
 8014994:	2300      	movs	r3, #0
 8014996:	9310      	str	r3, [sp, #64]	@ 0x40
 8014998:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801499a:	1b9b      	subs	r3, r3, r6
 801499c:	1e5a      	subs	r2, r3, #1
 801499e:	bf45      	ittet	mi
 80149a0:	f1c3 0301 	rsbmi	r3, r3, #1
 80149a4:	9300      	strmi	r3, [sp, #0]
 80149a6:	2300      	movpl	r3, #0
 80149a8:	2300      	movmi	r3, #0
 80149aa:	9206      	str	r2, [sp, #24]
 80149ac:	bf54      	ite	pl
 80149ae:	9300      	strpl	r3, [sp, #0]
 80149b0:	9306      	strmi	r3, [sp, #24]
 80149b2:	2f00      	cmp	r7, #0
 80149b4:	db39      	blt.n	8014a2a <_dtoa_r+0x21a>
 80149b6:	9b06      	ldr	r3, [sp, #24]
 80149b8:	970d      	str	r7, [sp, #52]	@ 0x34
 80149ba:	443b      	add	r3, r7
 80149bc:	9306      	str	r3, [sp, #24]
 80149be:	2300      	movs	r3, #0
 80149c0:	9308      	str	r3, [sp, #32]
 80149c2:	9b07      	ldr	r3, [sp, #28]
 80149c4:	2b09      	cmp	r3, #9
 80149c6:	d863      	bhi.n	8014a90 <_dtoa_r+0x280>
 80149c8:	2b05      	cmp	r3, #5
 80149ca:	bfc4      	itt	gt
 80149cc:	3b04      	subgt	r3, #4
 80149ce:	9307      	strgt	r3, [sp, #28]
 80149d0:	9b07      	ldr	r3, [sp, #28]
 80149d2:	f1a3 0302 	sub.w	r3, r3, #2
 80149d6:	bfcc      	ite	gt
 80149d8:	2400      	movgt	r4, #0
 80149da:	2401      	movle	r4, #1
 80149dc:	2b03      	cmp	r3, #3
 80149de:	d863      	bhi.n	8014aa8 <_dtoa_r+0x298>
 80149e0:	e8df f003 	tbb	[pc, r3]
 80149e4:	2b375452 	.word	0x2b375452
 80149e8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80149ec:	441e      	add	r6, r3
 80149ee:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80149f2:	2b20      	cmp	r3, #32
 80149f4:	bfc1      	itttt	gt
 80149f6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80149fa:	409f      	lslgt	r7, r3
 80149fc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8014a00:	fa24 f303 	lsrgt.w	r3, r4, r3
 8014a04:	bfd6      	itet	le
 8014a06:	f1c3 0320 	rsble	r3, r3, #32
 8014a0a:	ea47 0003 	orrgt.w	r0, r7, r3
 8014a0e:	fa04 f003 	lslle.w	r0, r4, r3
 8014a12:	f7eb fd77 	bl	8000504 <__aeabi_ui2d>
 8014a16:	2201      	movs	r2, #1
 8014a18:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8014a1c:	3e01      	subs	r6, #1
 8014a1e:	9212      	str	r2, [sp, #72]	@ 0x48
 8014a20:	e776      	b.n	8014910 <_dtoa_r+0x100>
 8014a22:	2301      	movs	r3, #1
 8014a24:	e7b7      	b.n	8014996 <_dtoa_r+0x186>
 8014a26:	9010      	str	r0, [sp, #64]	@ 0x40
 8014a28:	e7b6      	b.n	8014998 <_dtoa_r+0x188>
 8014a2a:	9b00      	ldr	r3, [sp, #0]
 8014a2c:	1bdb      	subs	r3, r3, r7
 8014a2e:	9300      	str	r3, [sp, #0]
 8014a30:	427b      	negs	r3, r7
 8014a32:	9308      	str	r3, [sp, #32]
 8014a34:	2300      	movs	r3, #0
 8014a36:	930d      	str	r3, [sp, #52]	@ 0x34
 8014a38:	e7c3      	b.n	80149c2 <_dtoa_r+0x1b2>
 8014a3a:	2301      	movs	r3, #1
 8014a3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8014a3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014a40:	eb07 0b03 	add.w	fp, r7, r3
 8014a44:	f10b 0301 	add.w	r3, fp, #1
 8014a48:	2b01      	cmp	r3, #1
 8014a4a:	9303      	str	r3, [sp, #12]
 8014a4c:	bfb8      	it	lt
 8014a4e:	2301      	movlt	r3, #1
 8014a50:	e006      	b.n	8014a60 <_dtoa_r+0x250>
 8014a52:	2301      	movs	r3, #1
 8014a54:	9309      	str	r3, [sp, #36]	@ 0x24
 8014a56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	dd28      	ble.n	8014aae <_dtoa_r+0x29e>
 8014a5c:	469b      	mov	fp, r3
 8014a5e:	9303      	str	r3, [sp, #12]
 8014a60:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8014a64:	2100      	movs	r1, #0
 8014a66:	2204      	movs	r2, #4
 8014a68:	f102 0514 	add.w	r5, r2, #20
 8014a6c:	429d      	cmp	r5, r3
 8014a6e:	d926      	bls.n	8014abe <_dtoa_r+0x2ae>
 8014a70:	6041      	str	r1, [r0, #4]
 8014a72:	4648      	mov	r0, r9
 8014a74:	f000 fd9c 	bl	80155b0 <_Balloc>
 8014a78:	4682      	mov	sl, r0
 8014a7a:	2800      	cmp	r0, #0
 8014a7c:	d142      	bne.n	8014b04 <_dtoa_r+0x2f4>
 8014a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8014af8 <_dtoa_r+0x2e8>)
 8014a80:	4602      	mov	r2, r0
 8014a82:	f240 11af 	movw	r1, #431	@ 0x1af
 8014a86:	e6da      	b.n	801483e <_dtoa_r+0x2e>
 8014a88:	2300      	movs	r3, #0
 8014a8a:	e7e3      	b.n	8014a54 <_dtoa_r+0x244>
 8014a8c:	2300      	movs	r3, #0
 8014a8e:	e7d5      	b.n	8014a3c <_dtoa_r+0x22c>
 8014a90:	2401      	movs	r4, #1
 8014a92:	2300      	movs	r3, #0
 8014a94:	9307      	str	r3, [sp, #28]
 8014a96:	9409      	str	r4, [sp, #36]	@ 0x24
 8014a98:	f04f 3bff 	mov.w	fp, #4294967295
 8014a9c:	2200      	movs	r2, #0
 8014a9e:	f8cd b00c 	str.w	fp, [sp, #12]
 8014aa2:	2312      	movs	r3, #18
 8014aa4:	920c      	str	r2, [sp, #48]	@ 0x30
 8014aa6:	e7db      	b.n	8014a60 <_dtoa_r+0x250>
 8014aa8:	2301      	movs	r3, #1
 8014aaa:	9309      	str	r3, [sp, #36]	@ 0x24
 8014aac:	e7f4      	b.n	8014a98 <_dtoa_r+0x288>
 8014aae:	f04f 0b01 	mov.w	fp, #1
 8014ab2:	f8cd b00c 	str.w	fp, [sp, #12]
 8014ab6:	465b      	mov	r3, fp
 8014ab8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8014abc:	e7d0      	b.n	8014a60 <_dtoa_r+0x250>
 8014abe:	3101      	adds	r1, #1
 8014ac0:	0052      	lsls	r2, r2, #1
 8014ac2:	e7d1      	b.n	8014a68 <_dtoa_r+0x258>
 8014ac4:	f3af 8000 	nop.w
 8014ac8:	636f4361 	.word	0x636f4361
 8014acc:	3fd287a7 	.word	0x3fd287a7
 8014ad0:	8b60c8b3 	.word	0x8b60c8b3
 8014ad4:	3fc68a28 	.word	0x3fc68a28
 8014ad8:	509f79fb 	.word	0x509f79fb
 8014adc:	3fd34413 	.word	0x3fd34413
 8014ae0:	08019963 	.word	0x08019963
 8014ae4:	0801997a 	.word	0x0801997a
 8014ae8:	7ff00000 	.word	0x7ff00000
 8014aec:	08019a64 	.word	0x08019a64
 8014af0:	3ff80000 	.word	0x3ff80000
 8014af4:	08019ae8 	.word	0x08019ae8
 8014af8:	080199d2 	.word	0x080199d2
 8014afc:	0801995f 	.word	0x0801995f
 8014b00:	08019a63 	.word	0x08019a63
 8014b04:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014b08:	6018      	str	r0, [r3, #0]
 8014b0a:	9b03      	ldr	r3, [sp, #12]
 8014b0c:	2b0e      	cmp	r3, #14
 8014b0e:	f200 80a1 	bhi.w	8014c54 <_dtoa_r+0x444>
 8014b12:	2c00      	cmp	r4, #0
 8014b14:	f000 809e 	beq.w	8014c54 <_dtoa_r+0x444>
 8014b18:	2f00      	cmp	r7, #0
 8014b1a:	dd33      	ble.n	8014b84 <_dtoa_r+0x374>
 8014b1c:	4b9c      	ldr	r3, [pc, #624]	@ (8014d90 <_dtoa_r+0x580>)
 8014b1e:	f007 020f 	and.w	r2, r7, #15
 8014b22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014b26:	ed93 7b00 	vldr	d7, [r3]
 8014b2a:	05f8      	lsls	r0, r7, #23
 8014b2c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8014b30:	ea4f 1427 	mov.w	r4, r7, asr #4
 8014b34:	d516      	bpl.n	8014b64 <_dtoa_r+0x354>
 8014b36:	4b97      	ldr	r3, [pc, #604]	@ (8014d94 <_dtoa_r+0x584>)
 8014b38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8014b3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014b40:	f7eb fe84 	bl	800084c <__aeabi_ddiv>
 8014b44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014b48:	f004 040f 	and.w	r4, r4, #15
 8014b4c:	2603      	movs	r6, #3
 8014b4e:	4d91      	ldr	r5, [pc, #580]	@ (8014d94 <_dtoa_r+0x584>)
 8014b50:	b954      	cbnz	r4, 8014b68 <_dtoa_r+0x358>
 8014b52:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8014b56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014b5a:	f7eb fe77 	bl	800084c <__aeabi_ddiv>
 8014b5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014b62:	e028      	b.n	8014bb6 <_dtoa_r+0x3a6>
 8014b64:	2602      	movs	r6, #2
 8014b66:	e7f2      	b.n	8014b4e <_dtoa_r+0x33e>
 8014b68:	07e1      	lsls	r1, r4, #31
 8014b6a:	d508      	bpl.n	8014b7e <_dtoa_r+0x36e>
 8014b6c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8014b70:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014b74:	f7eb fd40 	bl	80005f8 <__aeabi_dmul>
 8014b78:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8014b7c:	3601      	adds	r6, #1
 8014b7e:	1064      	asrs	r4, r4, #1
 8014b80:	3508      	adds	r5, #8
 8014b82:	e7e5      	b.n	8014b50 <_dtoa_r+0x340>
 8014b84:	f000 80af 	beq.w	8014ce6 <_dtoa_r+0x4d6>
 8014b88:	427c      	negs	r4, r7
 8014b8a:	4b81      	ldr	r3, [pc, #516]	@ (8014d90 <_dtoa_r+0x580>)
 8014b8c:	4d81      	ldr	r5, [pc, #516]	@ (8014d94 <_dtoa_r+0x584>)
 8014b8e:	f004 020f 	and.w	r2, r4, #15
 8014b92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b9a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8014b9e:	f7eb fd2b 	bl	80005f8 <__aeabi_dmul>
 8014ba2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014ba6:	1124      	asrs	r4, r4, #4
 8014ba8:	2300      	movs	r3, #0
 8014baa:	2602      	movs	r6, #2
 8014bac:	2c00      	cmp	r4, #0
 8014bae:	f040 808f 	bne.w	8014cd0 <_dtoa_r+0x4c0>
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d1d3      	bne.n	8014b5e <_dtoa_r+0x34e>
 8014bb6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014bb8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	f000 8094 	beq.w	8014cea <_dtoa_r+0x4da>
 8014bc2:	4b75      	ldr	r3, [pc, #468]	@ (8014d98 <_dtoa_r+0x588>)
 8014bc4:	2200      	movs	r2, #0
 8014bc6:	4620      	mov	r0, r4
 8014bc8:	4629      	mov	r1, r5
 8014bca:	f7eb ff87 	bl	8000adc <__aeabi_dcmplt>
 8014bce:	2800      	cmp	r0, #0
 8014bd0:	f000 808b 	beq.w	8014cea <_dtoa_r+0x4da>
 8014bd4:	9b03      	ldr	r3, [sp, #12]
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	f000 8087 	beq.w	8014cea <_dtoa_r+0x4da>
 8014bdc:	f1bb 0f00 	cmp.w	fp, #0
 8014be0:	dd34      	ble.n	8014c4c <_dtoa_r+0x43c>
 8014be2:	4620      	mov	r0, r4
 8014be4:	4b6d      	ldr	r3, [pc, #436]	@ (8014d9c <_dtoa_r+0x58c>)
 8014be6:	2200      	movs	r2, #0
 8014be8:	4629      	mov	r1, r5
 8014bea:	f7eb fd05 	bl	80005f8 <__aeabi_dmul>
 8014bee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014bf2:	f107 38ff 	add.w	r8, r7, #4294967295
 8014bf6:	3601      	adds	r6, #1
 8014bf8:	465c      	mov	r4, fp
 8014bfa:	4630      	mov	r0, r6
 8014bfc:	f7eb fc92 	bl	8000524 <__aeabi_i2d>
 8014c00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014c04:	f7eb fcf8 	bl	80005f8 <__aeabi_dmul>
 8014c08:	4b65      	ldr	r3, [pc, #404]	@ (8014da0 <_dtoa_r+0x590>)
 8014c0a:	2200      	movs	r2, #0
 8014c0c:	f7eb fb3e 	bl	800028c <__adddf3>
 8014c10:	4605      	mov	r5, r0
 8014c12:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8014c16:	2c00      	cmp	r4, #0
 8014c18:	d16a      	bne.n	8014cf0 <_dtoa_r+0x4e0>
 8014c1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014c1e:	4b61      	ldr	r3, [pc, #388]	@ (8014da4 <_dtoa_r+0x594>)
 8014c20:	2200      	movs	r2, #0
 8014c22:	f7eb fb31 	bl	8000288 <__aeabi_dsub>
 8014c26:	4602      	mov	r2, r0
 8014c28:	460b      	mov	r3, r1
 8014c2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014c2e:	462a      	mov	r2, r5
 8014c30:	4633      	mov	r3, r6
 8014c32:	f7eb ff71 	bl	8000b18 <__aeabi_dcmpgt>
 8014c36:	2800      	cmp	r0, #0
 8014c38:	f040 8298 	bne.w	801516c <_dtoa_r+0x95c>
 8014c3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014c40:	462a      	mov	r2, r5
 8014c42:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8014c46:	f7eb ff49 	bl	8000adc <__aeabi_dcmplt>
 8014c4a:	bb38      	cbnz	r0, 8014c9c <_dtoa_r+0x48c>
 8014c4c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8014c50:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8014c54:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	f2c0 8157 	blt.w	8014f0a <_dtoa_r+0x6fa>
 8014c5c:	2f0e      	cmp	r7, #14
 8014c5e:	f300 8154 	bgt.w	8014f0a <_dtoa_r+0x6fa>
 8014c62:	4b4b      	ldr	r3, [pc, #300]	@ (8014d90 <_dtoa_r+0x580>)
 8014c64:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014c68:	ed93 7b00 	vldr	d7, [r3]
 8014c6c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	ed8d 7b00 	vstr	d7, [sp]
 8014c74:	f280 80e5 	bge.w	8014e42 <_dtoa_r+0x632>
 8014c78:	9b03      	ldr	r3, [sp, #12]
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	f300 80e1 	bgt.w	8014e42 <_dtoa_r+0x632>
 8014c80:	d10c      	bne.n	8014c9c <_dtoa_r+0x48c>
 8014c82:	4b48      	ldr	r3, [pc, #288]	@ (8014da4 <_dtoa_r+0x594>)
 8014c84:	2200      	movs	r2, #0
 8014c86:	ec51 0b17 	vmov	r0, r1, d7
 8014c8a:	f7eb fcb5 	bl	80005f8 <__aeabi_dmul>
 8014c8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014c92:	f7eb ff37 	bl	8000b04 <__aeabi_dcmpge>
 8014c96:	2800      	cmp	r0, #0
 8014c98:	f000 8266 	beq.w	8015168 <_dtoa_r+0x958>
 8014c9c:	2400      	movs	r4, #0
 8014c9e:	4625      	mov	r5, r4
 8014ca0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014ca2:	4656      	mov	r6, sl
 8014ca4:	ea6f 0803 	mvn.w	r8, r3
 8014ca8:	2700      	movs	r7, #0
 8014caa:	4621      	mov	r1, r4
 8014cac:	4648      	mov	r0, r9
 8014cae:	f000 fcbf 	bl	8015630 <_Bfree>
 8014cb2:	2d00      	cmp	r5, #0
 8014cb4:	f000 80bd 	beq.w	8014e32 <_dtoa_r+0x622>
 8014cb8:	b12f      	cbz	r7, 8014cc6 <_dtoa_r+0x4b6>
 8014cba:	42af      	cmp	r7, r5
 8014cbc:	d003      	beq.n	8014cc6 <_dtoa_r+0x4b6>
 8014cbe:	4639      	mov	r1, r7
 8014cc0:	4648      	mov	r0, r9
 8014cc2:	f000 fcb5 	bl	8015630 <_Bfree>
 8014cc6:	4629      	mov	r1, r5
 8014cc8:	4648      	mov	r0, r9
 8014cca:	f000 fcb1 	bl	8015630 <_Bfree>
 8014cce:	e0b0      	b.n	8014e32 <_dtoa_r+0x622>
 8014cd0:	07e2      	lsls	r2, r4, #31
 8014cd2:	d505      	bpl.n	8014ce0 <_dtoa_r+0x4d0>
 8014cd4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014cd8:	f7eb fc8e 	bl	80005f8 <__aeabi_dmul>
 8014cdc:	3601      	adds	r6, #1
 8014cde:	2301      	movs	r3, #1
 8014ce0:	1064      	asrs	r4, r4, #1
 8014ce2:	3508      	adds	r5, #8
 8014ce4:	e762      	b.n	8014bac <_dtoa_r+0x39c>
 8014ce6:	2602      	movs	r6, #2
 8014ce8:	e765      	b.n	8014bb6 <_dtoa_r+0x3a6>
 8014cea:	9c03      	ldr	r4, [sp, #12]
 8014cec:	46b8      	mov	r8, r7
 8014cee:	e784      	b.n	8014bfa <_dtoa_r+0x3ea>
 8014cf0:	4b27      	ldr	r3, [pc, #156]	@ (8014d90 <_dtoa_r+0x580>)
 8014cf2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014cf4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014cf8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014cfc:	4454      	add	r4, sl
 8014cfe:	2900      	cmp	r1, #0
 8014d00:	d054      	beq.n	8014dac <_dtoa_r+0x59c>
 8014d02:	4929      	ldr	r1, [pc, #164]	@ (8014da8 <_dtoa_r+0x598>)
 8014d04:	2000      	movs	r0, #0
 8014d06:	f7eb fda1 	bl	800084c <__aeabi_ddiv>
 8014d0a:	4633      	mov	r3, r6
 8014d0c:	462a      	mov	r2, r5
 8014d0e:	f7eb fabb 	bl	8000288 <__aeabi_dsub>
 8014d12:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8014d16:	4656      	mov	r6, sl
 8014d18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014d1c:	f7eb ff1c 	bl	8000b58 <__aeabi_d2iz>
 8014d20:	4605      	mov	r5, r0
 8014d22:	f7eb fbff 	bl	8000524 <__aeabi_i2d>
 8014d26:	4602      	mov	r2, r0
 8014d28:	460b      	mov	r3, r1
 8014d2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014d2e:	f7eb faab 	bl	8000288 <__aeabi_dsub>
 8014d32:	3530      	adds	r5, #48	@ 0x30
 8014d34:	4602      	mov	r2, r0
 8014d36:	460b      	mov	r3, r1
 8014d38:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014d3c:	f806 5b01 	strb.w	r5, [r6], #1
 8014d40:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8014d44:	f7eb feca 	bl	8000adc <__aeabi_dcmplt>
 8014d48:	2800      	cmp	r0, #0
 8014d4a:	d172      	bne.n	8014e32 <_dtoa_r+0x622>
 8014d4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014d50:	4911      	ldr	r1, [pc, #68]	@ (8014d98 <_dtoa_r+0x588>)
 8014d52:	2000      	movs	r0, #0
 8014d54:	f7eb fa98 	bl	8000288 <__aeabi_dsub>
 8014d58:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8014d5c:	f7eb febe 	bl	8000adc <__aeabi_dcmplt>
 8014d60:	2800      	cmp	r0, #0
 8014d62:	f040 80b4 	bne.w	8014ece <_dtoa_r+0x6be>
 8014d66:	42a6      	cmp	r6, r4
 8014d68:	f43f af70 	beq.w	8014c4c <_dtoa_r+0x43c>
 8014d6c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8014d70:	4b0a      	ldr	r3, [pc, #40]	@ (8014d9c <_dtoa_r+0x58c>)
 8014d72:	2200      	movs	r2, #0
 8014d74:	f7eb fc40 	bl	80005f8 <__aeabi_dmul>
 8014d78:	4b08      	ldr	r3, [pc, #32]	@ (8014d9c <_dtoa_r+0x58c>)
 8014d7a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8014d7e:	2200      	movs	r2, #0
 8014d80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014d84:	f7eb fc38 	bl	80005f8 <__aeabi_dmul>
 8014d88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014d8c:	e7c4      	b.n	8014d18 <_dtoa_r+0x508>
 8014d8e:	bf00      	nop
 8014d90:	08019ae8 	.word	0x08019ae8
 8014d94:	08019ac0 	.word	0x08019ac0
 8014d98:	3ff00000 	.word	0x3ff00000
 8014d9c:	40240000 	.word	0x40240000
 8014da0:	401c0000 	.word	0x401c0000
 8014da4:	40140000 	.word	0x40140000
 8014da8:	3fe00000 	.word	0x3fe00000
 8014dac:	4631      	mov	r1, r6
 8014dae:	4628      	mov	r0, r5
 8014db0:	f7eb fc22 	bl	80005f8 <__aeabi_dmul>
 8014db4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8014db8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8014dba:	4656      	mov	r6, sl
 8014dbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014dc0:	f7eb feca 	bl	8000b58 <__aeabi_d2iz>
 8014dc4:	4605      	mov	r5, r0
 8014dc6:	f7eb fbad 	bl	8000524 <__aeabi_i2d>
 8014dca:	4602      	mov	r2, r0
 8014dcc:	460b      	mov	r3, r1
 8014dce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014dd2:	f7eb fa59 	bl	8000288 <__aeabi_dsub>
 8014dd6:	3530      	adds	r5, #48	@ 0x30
 8014dd8:	f806 5b01 	strb.w	r5, [r6], #1
 8014ddc:	4602      	mov	r2, r0
 8014dde:	460b      	mov	r3, r1
 8014de0:	42a6      	cmp	r6, r4
 8014de2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014de6:	f04f 0200 	mov.w	r2, #0
 8014dea:	d124      	bne.n	8014e36 <_dtoa_r+0x626>
 8014dec:	4baf      	ldr	r3, [pc, #700]	@ (80150ac <_dtoa_r+0x89c>)
 8014dee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8014df2:	f7eb fa4b 	bl	800028c <__adddf3>
 8014df6:	4602      	mov	r2, r0
 8014df8:	460b      	mov	r3, r1
 8014dfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014dfe:	f7eb fe8b 	bl	8000b18 <__aeabi_dcmpgt>
 8014e02:	2800      	cmp	r0, #0
 8014e04:	d163      	bne.n	8014ece <_dtoa_r+0x6be>
 8014e06:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8014e0a:	49a8      	ldr	r1, [pc, #672]	@ (80150ac <_dtoa_r+0x89c>)
 8014e0c:	2000      	movs	r0, #0
 8014e0e:	f7eb fa3b 	bl	8000288 <__aeabi_dsub>
 8014e12:	4602      	mov	r2, r0
 8014e14:	460b      	mov	r3, r1
 8014e16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014e1a:	f7eb fe5f 	bl	8000adc <__aeabi_dcmplt>
 8014e1e:	2800      	cmp	r0, #0
 8014e20:	f43f af14 	beq.w	8014c4c <_dtoa_r+0x43c>
 8014e24:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8014e26:	1e73      	subs	r3, r6, #1
 8014e28:	9313      	str	r3, [sp, #76]	@ 0x4c
 8014e2a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014e2e:	2b30      	cmp	r3, #48	@ 0x30
 8014e30:	d0f8      	beq.n	8014e24 <_dtoa_r+0x614>
 8014e32:	4647      	mov	r7, r8
 8014e34:	e03b      	b.n	8014eae <_dtoa_r+0x69e>
 8014e36:	4b9e      	ldr	r3, [pc, #632]	@ (80150b0 <_dtoa_r+0x8a0>)
 8014e38:	f7eb fbde 	bl	80005f8 <__aeabi_dmul>
 8014e3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014e40:	e7bc      	b.n	8014dbc <_dtoa_r+0x5ac>
 8014e42:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8014e46:	4656      	mov	r6, sl
 8014e48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014e4c:	4620      	mov	r0, r4
 8014e4e:	4629      	mov	r1, r5
 8014e50:	f7eb fcfc 	bl	800084c <__aeabi_ddiv>
 8014e54:	f7eb fe80 	bl	8000b58 <__aeabi_d2iz>
 8014e58:	4680      	mov	r8, r0
 8014e5a:	f7eb fb63 	bl	8000524 <__aeabi_i2d>
 8014e5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014e62:	f7eb fbc9 	bl	80005f8 <__aeabi_dmul>
 8014e66:	4602      	mov	r2, r0
 8014e68:	460b      	mov	r3, r1
 8014e6a:	4620      	mov	r0, r4
 8014e6c:	4629      	mov	r1, r5
 8014e6e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8014e72:	f7eb fa09 	bl	8000288 <__aeabi_dsub>
 8014e76:	f806 4b01 	strb.w	r4, [r6], #1
 8014e7a:	9d03      	ldr	r5, [sp, #12]
 8014e7c:	eba6 040a 	sub.w	r4, r6, sl
 8014e80:	42a5      	cmp	r5, r4
 8014e82:	4602      	mov	r2, r0
 8014e84:	460b      	mov	r3, r1
 8014e86:	d133      	bne.n	8014ef0 <_dtoa_r+0x6e0>
 8014e88:	f7eb fa00 	bl	800028c <__adddf3>
 8014e8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014e90:	4604      	mov	r4, r0
 8014e92:	460d      	mov	r5, r1
 8014e94:	f7eb fe40 	bl	8000b18 <__aeabi_dcmpgt>
 8014e98:	b9c0      	cbnz	r0, 8014ecc <_dtoa_r+0x6bc>
 8014e9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014e9e:	4620      	mov	r0, r4
 8014ea0:	4629      	mov	r1, r5
 8014ea2:	f7eb fe11 	bl	8000ac8 <__aeabi_dcmpeq>
 8014ea6:	b110      	cbz	r0, 8014eae <_dtoa_r+0x69e>
 8014ea8:	f018 0f01 	tst.w	r8, #1
 8014eac:	d10e      	bne.n	8014ecc <_dtoa_r+0x6bc>
 8014eae:	9902      	ldr	r1, [sp, #8]
 8014eb0:	4648      	mov	r0, r9
 8014eb2:	f000 fbbd 	bl	8015630 <_Bfree>
 8014eb6:	2300      	movs	r3, #0
 8014eb8:	7033      	strb	r3, [r6, #0]
 8014eba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014ebc:	3701      	adds	r7, #1
 8014ebe:	601f      	str	r7, [r3, #0]
 8014ec0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	f000 824b 	beq.w	801535e <_dtoa_r+0xb4e>
 8014ec8:	601e      	str	r6, [r3, #0]
 8014eca:	e248      	b.n	801535e <_dtoa_r+0xb4e>
 8014ecc:	46b8      	mov	r8, r7
 8014ece:	4633      	mov	r3, r6
 8014ed0:	461e      	mov	r6, r3
 8014ed2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014ed6:	2a39      	cmp	r2, #57	@ 0x39
 8014ed8:	d106      	bne.n	8014ee8 <_dtoa_r+0x6d8>
 8014eda:	459a      	cmp	sl, r3
 8014edc:	d1f8      	bne.n	8014ed0 <_dtoa_r+0x6c0>
 8014ede:	2230      	movs	r2, #48	@ 0x30
 8014ee0:	f108 0801 	add.w	r8, r8, #1
 8014ee4:	f88a 2000 	strb.w	r2, [sl]
 8014ee8:	781a      	ldrb	r2, [r3, #0]
 8014eea:	3201      	adds	r2, #1
 8014eec:	701a      	strb	r2, [r3, #0]
 8014eee:	e7a0      	b.n	8014e32 <_dtoa_r+0x622>
 8014ef0:	4b6f      	ldr	r3, [pc, #444]	@ (80150b0 <_dtoa_r+0x8a0>)
 8014ef2:	2200      	movs	r2, #0
 8014ef4:	f7eb fb80 	bl	80005f8 <__aeabi_dmul>
 8014ef8:	2200      	movs	r2, #0
 8014efa:	2300      	movs	r3, #0
 8014efc:	4604      	mov	r4, r0
 8014efe:	460d      	mov	r5, r1
 8014f00:	f7eb fde2 	bl	8000ac8 <__aeabi_dcmpeq>
 8014f04:	2800      	cmp	r0, #0
 8014f06:	d09f      	beq.n	8014e48 <_dtoa_r+0x638>
 8014f08:	e7d1      	b.n	8014eae <_dtoa_r+0x69e>
 8014f0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014f0c:	2a00      	cmp	r2, #0
 8014f0e:	f000 80ea 	beq.w	80150e6 <_dtoa_r+0x8d6>
 8014f12:	9a07      	ldr	r2, [sp, #28]
 8014f14:	2a01      	cmp	r2, #1
 8014f16:	f300 80cd 	bgt.w	80150b4 <_dtoa_r+0x8a4>
 8014f1a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8014f1c:	2a00      	cmp	r2, #0
 8014f1e:	f000 80c1 	beq.w	80150a4 <_dtoa_r+0x894>
 8014f22:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8014f26:	9c08      	ldr	r4, [sp, #32]
 8014f28:	9e00      	ldr	r6, [sp, #0]
 8014f2a:	9a00      	ldr	r2, [sp, #0]
 8014f2c:	441a      	add	r2, r3
 8014f2e:	9200      	str	r2, [sp, #0]
 8014f30:	9a06      	ldr	r2, [sp, #24]
 8014f32:	2101      	movs	r1, #1
 8014f34:	441a      	add	r2, r3
 8014f36:	4648      	mov	r0, r9
 8014f38:	9206      	str	r2, [sp, #24]
 8014f3a:	f000 fc2d 	bl	8015798 <__i2b>
 8014f3e:	4605      	mov	r5, r0
 8014f40:	b166      	cbz	r6, 8014f5c <_dtoa_r+0x74c>
 8014f42:	9b06      	ldr	r3, [sp, #24]
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	dd09      	ble.n	8014f5c <_dtoa_r+0x74c>
 8014f48:	42b3      	cmp	r3, r6
 8014f4a:	9a00      	ldr	r2, [sp, #0]
 8014f4c:	bfa8      	it	ge
 8014f4e:	4633      	movge	r3, r6
 8014f50:	1ad2      	subs	r2, r2, r3
 8014f52:	9200      	str	r2, [sp, #0]
 8014f54:	9a06      	ldr	r2, [sp, #24]
 8014f56:	1af6      	subs	r6, r6, r3
 8014f58:	1ad3      	subs	r3, r2, r3
 8014f5a:	9306      	str	r3, [sp, #24]
 8014f5c:	9b08      	ldr	r3, [sp, #32]
 8014f5e:	b30b      	cbz	r3, 8014fa4 <_dtoa_r+0x794>
 8014f60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	f000 80c6 	beq.w	80150f4 <_dtoa_r+0x8e4>
 8014f68:	2c00      	cmp	r4, #0
 8014f6a:	f000 80c0 	beq.w	80150ee <_dtoa_r+0x8de>
 8014f6e:	4629      	mov	r1, r5
 8014f70:	4622      	mov	r2, r4
 8014f72:	4648      	mov	r0, r9
 8014f74:	f000 fcc8 	bl	8015908 <__pow5mult>
 8014f78:	9a02      	ldr	r2, [sp, #8]
 8014f7a:	4601      	mov	r1, r0
 8014f7c:	4605      	mov	r5, r0
 8014f7e:	4648      	mov	r0, r9
 8014f80:	f000 fc20 	bl	80157c4 <__multiply>
 8014f84:	9902      	ldr	r1, [sp, #8]
 8014f86:	4680      	mov	r8, r0
 8014f88:	4648      	mov	r0, r9
 8014f8a:	f000 fb51 	bl	8015630 <_Bfree>
 8014f8e:	9b08      	ldr	r3, [sp, #32]
 8014f90:	1b1b      	subs	r3, r3, r4
 8014f92:	9308      	str	r3, [sp, #32]
 8014f94:	f000 80b1 	beq.w	80150fa <_dtoa_r+0x8ea>
 8014f98:	9a08      	ldr	r2, [sp, #32]
 8014f9a:	4641      	mov	r1, r8
 8014f9c:	4648      	mov	r0, r9
 8014f9e:	f000 fcb3 	bl	8015908 <__pow5mult>
 8014fa2:	9002      	str	r0, [sp, #8]
 8014fa4:	2101      	movs	r1, #1
 8014fa6:	4648      	mov	r0, r9
 8014fa8:	f000 fbf6 	bl	8015798 <__i2b>
 8014fac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014fae:	4604      	mov	r4, r0
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	f000 81d8 	beq.w	8015366 <_dtoa_r+0xb56>
 8014fb6:	461a      	mov	r2, r3
 8014fb8:	4601      	mov	r1, r0
 8014fba:	4648      	mov	r0, r9
 8014fbc:	f000 fca4 	bl	8015908 <__pow5mult>
 8014fc0:	9b07      	ldr	r3, [sp, #28]
 8014fc2:	2b01      	cmp	r3, #1
 8014fc4:	4604      	mov	r4, r0
 8014fc6:	f300 809f 	bgt.w	8015108 <_dtoa_r+0x8f8>
 8014fca:	9b04      	ldr	r3, [sp, #16]
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	f040 8097 	bne.w	8015100 <_dtoa_r+0x8f0>
 8014fd2:	9b05      	ldr	r3, [sp, #20]
 8014fd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	f040 8093 	bne.w	8015104 <_dtoa_r+0x8f4>
 8014fde:	9b05      	ldr	r3, [sp, #20]
 8014fe0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8014fe4:	0d1b      	lsrs	r3, r3, #20
 8014fe6:	051b      	lsls	r3, r3, #20
 8014fe8:	b133      	cbz	r3, 8014ff8 <_dtoa_r+0x7e8>
 8014fea:	9b00      	ldr	r3, [sp, #0]
 8014fec:	3301      	adds	r3, #1
 8014fee:	9300      	str	r3, [sp, #0]
 8014ff0:	9b06      	ldr	r3, [sp, #24]
 8014ff2:	3301      	adds	r3, #1
 8014ff4:	9306      	str	r3, [sp, #24]
 8014ff6:	2301      	movs	r3, #1
 8014ff8:	9308      	str	r3, [sp, #32]
 8014ffa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	f000 81b8 	beq.w	8015372 <_dtoa_r+0xb62>
 8015002:	6923      	ldr	r3, [r4, #16]
 8015004:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015008:	6918      	ldr	r0, [r3, #16]
 801500a:	f000 fb79 	bl	8015700 <__hi0bits>
 801500e:	f1c0 0020 	rsb	r0, r0, #32
 8015012:	9b06      	ldr	r3, [sp, #24]
 8015014:	4418      	add	r0, r3
 8015016:	f010 001f 	ands.w	r0, r0, #31
 801501a:	f000 8082 	beq.w	8015122 <_dtoa_r+0x912>
 801501e:	f1c0 0320 	rsb	r3, r0, #32
 8015022:	2b04      	cmp	r3, #4
 8015024:	dd73      	ble.n	801510e <_dtoa_r+0x8fe>
 8015026:	9b00      	ldr	r3, [sp, #0]
 8015028:	f1c0 001c 	rsb	r0, r0, #28
 801502c:	4403      	add	r3, r0
 801502e:	9300      	str	r3, [sp, #0]
 8015030:	9b06      	ldr	r3, [sp, #24]
 8015032:	4403      	add	r3, r0
 8015034:	4406      	add	r6, r0
 8015036:	9306      	str	r3, [sp, #24]
 8015038:	9b00      	ldr	r3, [sp, #0]
 801503a:	2b00      	cmp	r3, #0
 801503c:	dd05      	ble.n	801504a <_dtoa_r+0x83a>
 801503e:	9902      	ldr	r1, [sp, #8]
 8015040:	461a      	mov	r2, r3
 8015042:	4648      	mov	r0, r9
 8015044:	f000 fcba 	bl	80159bc <__lshift>
 8015048:	9002      	str	r0, [sp, #8]
 801504a:	9b06      	ldr	r3, [sp, #24]
 801504c:	2b00      	cmp	r3, #0
 801504e:	dd05      	ble.n	801505c <_dtoa_r+0x84c>
 8015050:	4621      	mov	r1, r4
 8015052:	461a      	mov	r2, r3
 8015054:	4648      	mov	r0, r9
 8015056:	f000 fcb1 	bl	80159bc <__lshift>
 801505a:	4604      	mov	r4, r0
 801505c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801505e:	2b00      	cmp	r3, #0
 8015060:	d061      	beq.n	8015126 <_dtoa_r+0x916>
 8015062:	9802      	ldr	r0, [sp, #8]
 8015064:	4621      	mov	r1, r4
 8015066:	f000 fd15 	bl	8015a94 <__mcmp>
 801506a:	2800      	cmp	r0, #0
 801506c:	da5b      	bge.n	8015126 <_dtoa_r+0x916>
 801506e:	2300      	movs	r3, #0
 8015070:	9902      	ldr	r1, [sp, #8]
 8015072:	220a      	movs	r2, #10
 8015074:	4648      	mov	r0, r9
 8015076:	f000 fafd 	bl	8015674 <__multadd>
 801507a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801507c:	9002      	str	r0, [sp, #8]
 801507e:	f107 38ff 	add.w	r8, r7, #4294967295
 8015082:	2b00      	cmp	r3, #0
 8015084:	f000 8177 	beq.w	8015376 <_dtoa_r+0xb66>
 8015088:	4629      	mov	r1, r5
 801508a:	2300      	movs	r3, #0
 801508c:	220a      	movs	r2, #10
 801508e:	4648      	mov	r0, r9
 8015090:	f000 faf0 	bl	8015674 <__multadd>
 8015094:	f1bb 0f00 	cmp.w	fp, #0
 8015098:	4605      	mov	r5, r0
 801509a:	dc6f      	bgt.n	801517c <_dtoa_r+0x96c>
 801509c:	9b07      	ldr	r3, [sp, #28]
 801509e:	2b02      	cmp	r3, #2
 80150a0:	dc49      	bgt.n	8015136 <_dtoa_r+0x926>
 80150a2:	e06b      	b.n	801517c <_dtoa_r+0x96c>
 80150a4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80150a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80150aa:	e73c      	b.n	8014f26 <_dtoa_r+0x716>
 80150ac:	3fe00000 	.word	0x3fe00000
 80150b0:	40240000 	.word	0x40240000
 80150b4:	9b03      	ldr	r3, [sp, #12]
 80150b6:	1e5c      	subs	r4, r3, #1
 80150b8:	9b08      	ldr	r3, [sp, #32]
 80150ba:	42a3      	cmp	r3, r4
 80150bc:	db09      	blt.n	80150d2 <_dtoa_r+0x8c2>
 80150be:	1b1c      	subs	r4, r3, r4
 80150c0:	9b03      	ldr	r3, [sp, #12]
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	f6bf af30 	bge.w	8014f28 <_dtoa_r+0x718>
 80150c8:	9b00      	ldr	r3, [sp, #0]
 80150ca:	9a03      	ldr	r2, [sp, #12]
 80150cc:	1a9e      	subs	r6, r3, r2
 80150ce:	2300      	movs	r3, #0
 80150d0:	e72b      	b.n	8014f2a <_dtoa_r+0x71a>
 80150d2:	9b08      	ldr	r3, [sp, #32]
 80150d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80150d6:	9408      	str	r4, [sp, #32]
 80150d8:	1ae3      	subs	r3, r4, r3
 80150da:	441a      	add	r2, r3
 80150dc:	9e00      	ldr	r6, [sp, #0]
 80150de:	9b03      	ldr	r3, [sp, #12]
 80150e0:	920d      	str	r2, [sp, #52]	@ 0x34
 80150e2:	2400      	movs	r4, #0
 80150e4:	e721      	b.n	8014f2a <_dtoa_r+0x71a>
 80150e6:	9c08      	ldr	r4, [sp, #32]
 80150e8:	9e00      	ldr	r6, [sp, #0]
 80150ea:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80150ec:	e728      	b.n	8014f40 <_dtoa_r+0x730>
 80150ee:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80150f2:	e751      	b.n	8014f98 <_dtoa_r+0x788>
 80150f4:	9a08      	ldr	r2, [sp, #32]
 80150f6:	9902      	ldr	r1, [sp, #8]
 80150f8:	e750      	b.n	8014f9c <_dtoa_r+0x78c>
 80150fa:	f8cd 8008 	str.w	r8, [sp, #8]
 80150fe:	e751      	b.n	8014fa4 <_dtoa_r+0x794>
 8015100:	2300      	movs	r3, #0
 8015102:	e779      	b.n	8014ff8 <_dtoa_r+0x7e8>
 8015104:	9b04      	ldr	r3, [sp, #16]
 8015106:	e777      	b.n	8014ff8 <_dtoa_r+0x7e8>
 8015108:	2300      	movs	r3, #0
 801510a:	9308      	str	r3, [sp, #32]
 801510c:	e779      	b.n	8015002 <_dtoa_r+0x7f2>
 801510e:	d093      	beq.n	8015038 <_dtoa_r+0x828>
 8015110:	9a00      	ldr	r2, [sp, #0]
 8015112:	331c      	adds	r3, #28
 8015114:	441a      	add	r2, r3
 8015116:	9200      	str	r2, [sp, #0]
 8015118:	9a06      	ldr	r2, [sp, #24]
 801511a:	441a      	add	r2, r3
 801511c:	441e      	add	r6, r3
 801511e:	9206      	str	r2, [sp, #24]
 8015120:	e78a      	b.n	8015038 <_dtoa_r+0x828>
 8015122:	4603      	mov	r3, r0
 8015124:	e7f4      	b.n	8015110 <_dtoa_r+0x900>
 8015126:	9b03      	ldr	r3, [sp, #12]
 8015128:	2b00      	cmp	r3, #0
 801512a:	46b8      	mov	r8, r7
 801512c:	dc20      	bgt.n	8015170 <_dtoa_r+0x960>
 801512e:	469b      	mov	fp, r3
 8015130:	9b07      	ldr	r3, [sp, #28]
 8015132:	2b02      	cmp	r3, #2
 8015134:	dd1e      	ble.n	8015174 <_dtoa_r+0x964>
 8015136:	f1bb 0f00 	cmp.w	fp, #0
 801513a:	f47f adb1 	bne.w	8014ca0 <_dtoa_r+0x490>
 801513e:	4621      	mov	r1, r4
 8015140:	465b      	mov	r3, fp
 8015142:	2205      	movs	r2, #5
 8015144:	4648      	mov	r0, r9
 8015146:	f000 fa95 	bl	8015674 <__multadd>
 801514a:	4601      	mov	r1, r0
 801514c:	4604      	mov	r4, r0
 801514e:	9802      	ldr	r0, [sp, #8]
 8015150:	f000 fca0 	bl	8015a94 <__mcmp>
 8015154:	2800      	cmp	r0, #0
 8015156:	f77f ada3 	ble.w	8014ca0 <_dtoa_r+0x490>
 801515a:	4656      	mov	r6, sl
 801515c:	2331      	movs	r3, #49	@ 0x31
 801515e:	f806 3b01 	strb.w	r3, [r6], #1
 8015162:	f108 0801 	add.w	r8, r8, #1
 8015166:	e59f      	b.n	8014ca8 <_dtoa_r+0x498>
 8015168:	9c03      	ldr	r4, [sp, #12]
 801516a:	46b8      	mov	r8, r7
 801516c:	4625      	mov	r5, r4
 801516e:	e7f4      	b.n	801515a <_dtoa_r+0x94a>
 8015170:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8015174:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015176:	2b00      	cmp	r3, #0
 8015178:	f000 8101 	beq.w	801537e <_dtoa_r+0xb6e>
 801517c:	2e00      	cmp	r6, #0
 801517e:	dd05      	ble.n	801518c <_dtoa_r+0x97c>
 8015180:	4629      	mov	r1, r5
 8015182:	4632      	mov	r2, r6
 8015184:	4648      	mov	r0, r9
 8015186:	f000 fc19 	bl	80159bc <__lshift>
 801518a:	4605      	mov	r5, r0
 801518c:	9b08      	ldr	r3, [sp, #32]
 801518e:	2b00      	cmp	r3, #0
 8015190:	d05c      	beq.n	801524c <_dtoa_r+0xa3c>
 8015192:	6869      	ldr	r1, [r5, #4]
 8015194:	4648      	mov	r0, r9
 8015196:	f000 fa0b 	bl	80155b0 <_Balloc>
 801519a:	4606      	mov	r6, r0
 801519c:	b928      	cbnz	r0, 80151aa <_dtoa_r+0x99a>
 801519e:	4b82      	ldr	r3, [pc, #520]	@ (80153a8 <_dtoa_r+0xb98>)
 80151a0:	4602      	mov	r2, r0
 80151a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80151a6:	f7ff bb4a 	b.w	801483e <_dtoa_r+0x2e>
 80151aa:	692a      	ldr	r2, [r5, #16]
 80151ac:	3202      	adds	r2, #2
 80151ae:	0092      	lsls	r2, r2, #2
 80151b0:	f105 010c 	add.w	r1, r5, #12
 80151b4:	300c      	adds	r0, #12
 80151b6:	f7ff fa92 	bl	80146de <memcpy>
 80151ba:	2201      	movs	r2, #1
 80151bc:	4631      	mov	r1, r6
 80151be:	4648      	mov	r0, r9
 80151c0:	f000 fbfc 	bl	80159bc <__lshift>
 80151c4:	f10a 0301 	add.w	r3, sl, #1
 80151c8:	9300      	str	r3, [sp, #0]
 80151ca:	eb0a 030b 	add.w	r3, sl, fp
 80151ce:	9308      	str	r3, [sp, #32]
 80151d0:	9b04      	ldr	r3, [sp, #16]
 80151d2:	f003 0301 	and.w	r3, r3, #1
 80151d6:	462f      	mov	r7, r5
 80151d8:	9306      	str	r3, [sp, #24]
 80151da:	4605      	mov	r5, r0
 80151dc:	9b00      	ldr	r3, [sp, #0]
 80151de:	9802      	ldr	r0, [sp, #8]
 80151e0:	4621      	mov	r1, r4
 80151e2:	f103 3bff 	add.w	fp, r3, #4294967295
 80151e6:	f7ff fa88 	bl	80146fa <quorem>
 80151ea:	4603      	mov	r3, r0
 80151ec:	3330      	adds	r3, #48	@ 0x30
 80151ee:	9003      	str	r0, [sp, #12]
 80151f0:	4639      	mov	r1, r7
 80151f2:	9802      	ldr	r0, [sp, #8]
 80151f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80151f6:	f000 fc4d 	bl	8015a94 <__mcmp>
 80151fa:	462a      	mov	r2, r5
 80151fc:	9004      	str	r0, [sp, #16]
 80151fe:	4621      	mov	r1, r4
 8015200:	4648      	mov	r0, r9
 8015202:	f000 fc63 	bl	8015acc <__mdiff>
 8015206:	68c2      	ldr	r2, [r0, #12]
 8015208:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801520a:	4606      	mov	r6, r0
 801520c:	bb02      	cbnz	r2, 8015250 <_dtoa_r+0xa40>
 801520e:	4601      	mov	r1, r0
 8015210:	9802      	ldr	r0, [sp, #8]
 8015212:	f000 fc3f 	bl	8015a94 <__mcmp>
 8015216:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015218:	4602      	mov	r2, r0
 801521a:	4631      	mov	r1, r6
 801521c:	4648      	mov	r0, r9
 801521e:	920c      	str	r2, [sp, #48]	@ 0x30
 8015220:	9309      	str	r3, [sp, #36]	@ 0x24
 8015222:	f000 fa05 	bl	8015630 <_Bfree>
 8015226:	9b07      	ldr	r3, [sp, #28]
 8015228:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801522a:	9e00      	ldr	r6, [sp, #0]
 801522c:	ea42 0103 	orr.w	r1, r2, r3
 8015230:	9b06      	ldr	r3, [sp, #24]
 8015232:	4319      	orrs	r1, r3
 8015234:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015236:	d10d      	bne.n	8015254 <_dtoa_r+0xa44>
 8015238:	2b39      	cmp	r3, #57	@ 0x39
 801523a:	d027      	beq.n	801528c <_dtoa_r+0xa7c>
 801523c:	9a04      	ldr	r2, [sp, #16]
 801523e:	2a00      	cmp	r2, #0
 8015240:	dd01      	ble.n	8015246 <_dtoa_r+0xa36>
 8015242:	9b03      	ldr	r3, [sp, #12]
 8015244:	3331      	adds	r3, #49	@ 0x31
 8015246:	f88b 3000 	strb.w	r3, [fp]
 801524a:	e52e      	b.n	8014caa <_dtoa_r+0x49a>
 801524c:	4628      	mov	r0, r5
 801524e:	e7b9      	b.n	80151c4 <_dtoa_r+0x9b4>
 8015250:	2201      	movs	r2, #1
 8015252:	e7e2      	b.n	801521a <_dtoa_r+0xa0a>
 8015254:	9904      	ldr	r1, [sp, #16]
 8015256:	2900      	cmp	r1, #0
 8015258:	db04      	blt.n	8015264 <_dtoa_r+0xa54>
 801525a:	9807      	ldr	r0, [sp, #28]
 801525c:	4301      	orrs	r1, r0
 801525e:	9806      	ldr	r0, [sp, #24]
 8015260:	4301      	orrs	r1, r0
 8015262:	d120      	bne.n	80152a6 <_dtoa_r+0xa96>
 8015264:	2a00      	cmp	r2, #0
 8015266:	ddee      	ble.n	8015246 <_dtoa_r+0xa36>
 8015268:	9902      	ldr	r1, [sp, #8]
 801526a:	9300      	str	r3, [sp, #0]
 801526c:	2201      	movs	r2, #1
 801526e:	4648      	mov	r0, r9
 8015270:	f000 fba4 	bl	80159bc <__lshift>
 8015274:	4621      	mov	r1, r4
 8015276:	9002      	str	r0, [sp, #8]
 8015278:	f000 fc0c 	bl	8015a94 <__mcmp>
 801527c:	2800      	cmp	r0, #0
 801527e:	9b00      	ldr	r3, [sp, #0]
 8015280:	dc02      	bgt.n	8015288 <_dtoa_r+0xa78>
 8015282:	d1e0      	bne.n	8015246 <_dtoa_r+0xa36>
 8015284:	07da      	lsls	r2, r3, #31
 8015286:	d5de      	bpl.n	8015246 <_dtoa_r+0xa36>
 8015288:	2b39      	cmp	r3, #57	@ 0x39
 801528a:	d1da      	bne.n	8015242 <_dtoa_r+0xa32>
 801528c:	2339      	movs	r3, #57	@ 0x39
 801528e:	f88b 3000 	strb.w	r3, [fp]
 8015292:	4633      	mov	r3, r6
 8015294:	461e      	mov	r6, r3
 8015296:	3b01      	subs	r3, #1
 8015298:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801529c:	2a39      	cmp	r2, #57	@ 0x39
 801529e:	d04e      	beq.n	801533e <_dtoa_r+0xb2e>
 80152a0:	3201      	adds	r2, #1
 80152a2:	701a      	strb	r2, [r3, #0]
 80152a4:	e501      	b.n	8014caa <_dtoa_r+0x49a>
 80152a6:	2a00      	cmp	r2, #0
 80152a8:	dd03      	ble.n	80152b2 <_dtoa_r+0xaa2>
 80152aa:	2b39      	cmp	r3, #57	@ 0x39
 80152ac:	d0ee      	beq.n	801528c <_dtoa_r+0xa7c>
 80152ae:	3301      	adds	r3, #1
 80152b0:	e7c9      	b.n	8015246 <_dtoa_r+0xa36>
 80152b2:	9a00      	ldr	r2, [sp, #0]
 80152b4:	9908      	ldr	r1, [sp, #32]
 80152b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80152ba:	428a      	cmp	r2, r1
 80152bc:	d028      	beq.n	8015310 <_dtoa_r+0xb00>
 80152be:	9902      	ldr	r1, [sp, #8]
 80152c0:	2300      	movs	r3, #0
 80152c2:	220a      	movs	r2, #10
 80152c4:	4648      	mov	r0, r9
 80152c6:	f000 f9d5 	bl	8015674 <__multadd>
 80152ca:	42af      	cmp	r7, r5
 80152cc:	9002      	str	r0, [sp, #8]
 80152ce:	f04f 0300 	mov.w	r3, #0
 80152d2:	f04f 020a 	mov.w	r2, #10
 80152d6:	4639      	mov	r1, r7
 80152d8:	4648      	mov	r0, r9
 80152da:	d107      	bne.n	80152ec <_dtoa_r+0xadc>
 80152dc:	f000 f9ca 	bl	8015674 <__multadd>
 80152e0:	4607      	mov	r7, r0
 80152e2:	4605      	mov	r5, r0
 80152e4:	9b00      	ldr	r3, [sp, #0]
 80152e6:	3301      	adds	r3, #1
 80152e8:	9300      	str	r3, [sp, #0]
 80152ea:	e777      	b.n	80151dc <_dtoa_r+0x9cc>
 80152ec:	f000 f9c2 	bl	8015674 <__multadd>
 80152f0:	4629      	mov	r1, r5
 80152f2:	4607      	mov	r7, r0
 80152f4:	2300      	movs	r3, #0
 80152f6:	220a      	movs	r2, #10
 80152f8:	4648      	mov	r0, r9
 80152fa:	f000 f9bb 	bl	8015674 <__multadd>
 80152fe:	4605      	mov	r5, r0
 8015300:	e7f0      	b.n	80152e4 <_dtoa_r+0xad4>
 8015302:	f1bb 0f00 	cmp.w	fp, #0
 8015306:	bfcc      	ite	gt
 8015308:	465e      	movgt	r6, fp
 801530a:	2601      	movle	r6, #1
 801530c:	4456      	add	r6, sl
 801530e:	2700      	movs	r7, #0
 8015310:	9902      	ldr	r1, [sp, #8]
 8015312:	9300      	str	r3, [sp, #0]
 8015314:	2201      	movs	r2, #1
 8015316:	4648      	mov	r0, r9
 8015318:	f000 fb50 	bl	80159bc <__lshift>
 801531c:	4621      	mov	r1, r4
 801531e:	9002      	str	r0, [sp, #8]
 8015320:	f000 fbb8 	bl	8015a94 <__mcmp>
 8015324:	2800      	cmp	r0, #0
 8015326:	dcb4      	bgt.n	8015292 <_dtoa_r+0xa82>
 8015328:	d102      	bne.n	8015330 <_dtoa_r+0xb20>
 801532a:	9b00      	ldr	r3, [sp, #0]
 801532c:	07db      	lsls	r3, r3, #31
 801532e:	d4b0      	bmi.n	8015292 <_dtoa_r+0xa82>
 8015330:	4633      	mov	r3, r6
 8015332:	461e      	mov	r6, r3
 8015334:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015338:	2a30      	cmp	r2, #48	@ 0x30
 801533a:	d0fa      	beq.n	8015332 <_dtoa_r+0xb22>
 801533c:	e4b5      	b.n	8014caa <_dtoa_r+0x49a>
 801533e:	459a      	cmp	sl, r3
 8015340:	d1a8      	bne.n	8015294 <_dtoa_r+0xa84>
 8015342:	2331      	movs	r3, #49	@ 0x31
 8015344:	f108 0801 	add.w	r8, r8, #1
 8015348:	f88a 3000 	strb.w	r3, [sl]
 801534c:	e4ad      	b.n	8014caa <_dtoa_r+0x49a>
 801534e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015350:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80153ac <_dtoa_r+0xb9c>
 8015354:	b11b      	cbz	r3, 801535e <_dtoa_r+0xb4e>
 8015356:	f10a 0308 	add.w	r3, sl, #8
 801535a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801535c:	6013      	str	r3, [r2, #0]
 801535e:	4650      	mov	r0, sl
 8015360:	b017      	add	sp, #92	@ 0x5c
 8015362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015366:	9b07      	ldr	r3, [sp, #28]
 8015368:	2b01      	cmp	r3, #1
 801536a:	f77f ae2e 	ble.w	8014fca <_dtoa_r+0x7ba>
 801536e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015370:	9308      	str	r3, [sp, #32]
 8015372:	2001      	movs	r0, #1
 8015374:	e64d      	b.n	8015012 <_dtoa_r+0x802>
 8015376:	f1bb 0f00 	cmp.w	fp, #0
 801537a:	f77f aed9 	ble.w	8015130 <_dtoa_r+0x920>
 801537e:	4656      	mov	r6, sl
 8015380:	9802      	ldr	r0, [sp, #8]
 8015382:	4621      	mov	r1, r4
 8015384:	f7ff f9b9 	bl	80146fa <quorem>
 8015388:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801538c:	f806 3b01 	strb.w	r3, [r6], #1
 8015390:	eba6 020a 	sub.w	r2, r6, sl
 8015394:	4593      	cmp	fp, r2
 8015396:	ddb4      	ble.n	8015302 <_dtoa_r+0xaf2>
 8015398:	9902      	ldr	r1, [sp, #8]
 801539a:	2300      	movs	r3, #0
 801539c:	220a      	movs	r2, #10
 801539e:	4648      	mov	r0, r9
 80153a0:	f000 f968 	bl	8015674 <__multadd>
 80153a4:	9002      	str	r0, [sp, #8]
 80153a6:	e7eb      	b.n	8015380 <_dtoa_r+0xb70>
 80153a8:	080199d2 	.word	0x080199d2
 80153ac:	08019956 	.word	0x08019956

080153b0 <_free_r>:
 80153b0:	b538      	push	{r3, r4, r5, lr}
 80153b2:	4605      	mov	r5, r0
 80153b4:	2900      	cmp	r1, #0
 80153b6:	d041      	beq.n	801543c <_free_r+0x8c>
 80153b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80153bc:	1f0c      	subs	r4, r1, #4
 80153be:	2b00      	cmp	r3, #0
 80153c0:	bfb8      	it	lt
 80153c2:	18e4      	addlt	r4, r4, r3
 80153c4:	f000 f8e8 	bl	8015598 <__malloc_lock>
 80153c8:	4a1d      	ldr	r2, [pc, #116]	@ (8015440 <_free_r+0x90>)
 80153ca:	6813      	ldr	r3, [r2, #0]
 80153cc:	b933      	cbnz	r3, 80153dc <_free_r+0x2c>
 80153ce:	6063      	str	r3, [r4, #4]
 80153d0:	6014      	str	r4, [r2, #0]
 80153d2:	4628      	mov	r0, r5
 80153d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80153d8:	f000 b8e4 	b.w	80155a4 <__malloc_unlock>
 80153dc:	42a3      	cmp	r3, r4
 80153de:	d908      	bls.n	80153f2 <_free_r+0x42>
 80153e0:	6820      	ldr	r0, [r4, #0]
 80153e2:	1821      	adds	r1, r4, r0
 80153e4:	428b      	cmp	r3, r1
 80153e6:	bf01      	itttt	eq
 80153e8:	6819      	ldreq	r1, [r3, #0]
 80153ea:	685b      	ldreq	r3, [r3, #4]
 80153ec:	1809      	addeq	r1, r1, r0
 80153ee:	6021      	streq	r1, [r4, #0]
 80153f0:	e7ed      	b.n	80153ce <_free_r+0x1e>
 80153f2:	461a      	mov	r2, r3
 80153f4:	685b      	ldr	r3, [r3, #4]
 80153f6:	b10b      	cbz	r3, 80153fc <_free_r+0x4c>
 80153f8:	42a3      	cmp	r3, r4
 80153fa:	d9fa      	bls.n	80153f2 <_free_r+0x42>
 80153fc:	6811      	ldr	r1, [r2, #0]
 80153fe:	1850      	adds	r0, r2, r1
 8015400:	42a0      	cmp	r0, r4
 8015402:	d10b      	bne.n	801541c <_free_r+0x6c>
 8015404:	6820      	ldr	r0, [r4, #0]
 8015406:	4401      	add	r1, r0
 8015408:	1850      	adds	r0, r2, r1
 801540a:	4283      	cmp	r3, r0
 801540c:	6011      	str	r1, [r2, #0]
 801540e:	d1e0      	bne.n	80153d2 <_free_r+0x22>
 8015410:	6818      	ldr	r0, [r3, #0]
 8015412:	685b      	ldr	r3, [r3, #4]
 8015414:	6053      	str	r3, [r2, #4]
 8015416:	4408      	add	r0, r1
 8015418:	6010      	str	r0, [r2, #0]
 801541a:	e7da      	b.n	80153d2 <_free_r+0x22>
 801541c:	d902      	bls.n	8015424 <_free_r+0x74>
 801541e:	230c      	movs	r3, #12
 8015420:	602b      	str	r3, [r5, #0]
 8015422:	e7d6      	b.n	80153d2 <_free_r+0x22>
 8015424:	6820      	ldr	r0, [r4, #0]
 8015426:	1821      	adds	r1, r4, r0
 8015428:	428b      	cmp	r3, r1
 801542a:	bf04      	itt	eq
 801542c:	6819      	ldreq	r1, [r3, #0]
 801542e:	685b      	ldreq	r3, [r3, #4]
 8015430:	6063      	str	r3, [r4, #4]
 8015432:	bf04      	itt	eq
 8015434:	1809      	addeq	r1, r1, r0
 8015436:	6021      	streq	r1, [r4, #0]
 8015438:	6054      	str	r4, [r2, #4]
 801543a:	e7ca      	b.n	80153d2 <_free_r+0x22>
 801543c:	bd38      	pop	{r3, r4, r5, pc}
 801543e:	bf00      	nop
 8015440:	2000142c 	.word	0x2000142c

08015444 <malloc>:
 8015444:	4b02      	ldr	r3, [pc, #8]	@ (8015450 <malloc+0xc>)
 8015446:	4601      	mov	r1, r0
 8015448:	6818      	ldr	r0, [r3, #0]
 801544a:	f000 b825 	b.w	8015498 <_malloc_r>
 801544e:	bf00      	nop
 8015450:	20000188 	.word	0x20000188

08015454 <sbrk_aligned>:
 8015454:	b570      	push	{r4, r5, r6, lr}
 8015456:	4e0f      	ldr	r6, [pc, #60]	@ (8015494 <sbrk_aligned+0x40>)
 8015458:	460c      	mov	r4, r1
 801545a:	6831      	ldr	r1, [r6, #0]
 801545c:	4605      	mov	r5, r0
 801545e:	b911      	cbnz	r1, 8015466 <sbrk_aligned+0x12>
 8015460:	f001 fb96 	bl	8016b90 <_sbrk_r>
 8015464:	6030      	str	r0, [r6, #0]
 8015466:	4621      	mov	r1, r4
 8015468:	4628      	mov	r0, r5
 801546a:	f001 fb91 	bl	8016b90 <_sbrk_r>
 801546e:	1c43      	adds	r3, r0, #1
 8015470:	d103      	bne.n	801547a <sbrk_aligned+0x26>
 8015472:	f04f 34ff 	mov.w	r4, #4294967295
 8015476:	4620      	mov	r0, r4
 8015478:	bd70      	pop	{r4, r5, r6, pc}
 801547a:	1cc4      	adds	r4, r0, #3
 801547c:	f024 0403 	bic.w	r4, r4, #3
 8015480:	42a0      	cmp	r0, r4
 8015482:	d0f8      	beq.n	8015476 <sbrk_aligned+0x22>
 8015484:	1a21      	subs	r1, r4, r0
 8015486:	4628      	mov	r0, r5
 8015488:	f001 fb82 	bl	8016b90 <_sbrk_r>
 801548c:	3001      	adds	r0, #1
 801548e:	d1f2      	bne.n	8015476 <sbrk_aligned+0x22>
 8015490:	e7ef      	b.n	8015472 <sbrk_aligned+0x1e>
 8015492:	bf00      	nop
 8015494:	20001428 	.word	0x20001428

08015498 <_malloc_r>:
 8015498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801549c:	1ccd      	adds	r5, r1, #3
 801549e:	f025 0503 	bic.w	r5, r5, #3
 80154a2:	3508      	adds	r5, #8
 80154a4:	2d0c      	cmp	r5, #12
 80154a6:	bf38      	it	cc
 80154a8:	250c      	movcc	r5, #12
 80154aa:	2d00      	cmp	r5, #0
 80154ac:	4606      	mov	r6, r0
 80154ae:	db01      	blt.n	80154b4 <_malloc_r+0x1c>
 80154b0:	42a9      	cmp	r1, r5
 80154b2:	d904      	bls.n	80154be <_malloc_r+0x26>
 80154b4:	230c      	movs	r3, #12
 80154b6:	6033      	str	r3, [r6, #0]
 80154b8:	2000      	movs	r0, #0
 80154ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80154be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015594 <_malloc_r+0xfc>
 80154c2:	f000 f869 	bl	8015598 <__malloc_lock>
 80154c6:	f8d8 3000 	ldr.w	r3, [r8]
 80154ca:	461c      	mov	r4, r3
 80154cc:	bb44      	cbnz	r4, 8015520 <_malloc_r+0x88>
 80154ce:	4629      	mov	r1, r5
 80154d0:	4630      	mov	r0, r6
 80154d2:	f7ff ffbf 	bl	8015454 <sbrk_aligned>
 80154d6:	1c43      	adds	r3, r0, #1
 80154d8:	4604      	mov	r4, r0
 80154da:	d158      	bne.n	801558e <_malloc_r+0xf6>
 80154dc:	f8d8 4000 	ldr.w	r4, [r8]
 80154e0:	4627      	mov	r7, r4
 80154e2:	2f00      	cmp	r7, #0
 80154e4:	d143      	bne.n	801556e <_malloc_r+0xd6>
 80154e6:	2c00      	cmp	r4, #0
 80154e8:	d04b      	beq.n	8015582 <_malloc_r+0xea>
 80154ea:	6823      	ldr	r3, [r4, #0]
 80154ec:	4639      	mov	r1, r7
 80154ee:	4630      	mov	r0, r6
 80154f0:	eb04 0903 	add.w	r9, r4, r3
 80154f4:	f001 fb4c 	bl	8016b90 <_sbrk_r>
 80154f8:	4581      	cmp	r9, r0
 80154fa:	d142      	bne.n	8015582 <_malloc_r+0xea>
 80154fc:	6821      	ldr	r1, [r4, #0]
 80154fe:	1a6d      	subs	r5, r5, r1
 8015500:	4629      	mov	r1, r5
 8015502:	4630      	mov	r0, r6
 8015504:	f7ff ffa6 	bl	8015454 <sbrk_aligned>
 8015508:	3001      	adds	r0, #1
 801550a:	d03a      	beq.n	8015582 <_malloc_r+0xea>
 801550c:	6823      	ldr	r3, [r4, #0]
 801550e:	442b      	add	r3, r5
 8015510:	6023      	str	r3, [r4, #0]
 8015512:	f8d8 3000 	ldr.w	r3, [r8]
 8015516:	685a      	ldr	r2, [r3, #4]
 8015518:	bb62      	cbnz	r2, 8015574 <_malloc_r+0xdc>
 801551a:	f8c8 7000 	str.w	r7, [r8]
 801551e:	e00f      	b.n	8015540 <_malloc_r+0xa8>
 8015520:	6822      	ldr	r2, [r4, #0]
 8015522:	1b52      	subs	r2, r2, r5
 8015524:	d420      	bmi.n	8015568 <_malloc_r+0xd0>
 8015526:	2a0b      	cmp	r2, #11
 8015528:	d917      	bls.n	801555a <_malloc_r+0xc2>
 801552a:	1961      	adds	r1, r4, r5
 801552c:	42a3      	cmp	r3, r4
 801552e:	6025      	str	r5, [r4, #0]
 8015530:	bf18      	it	ne
 8015532:	6059      	strne	r1, [r3, #4]
 8015534:	6863      	ldr	r3, [r4, #4]
 8015536:	bf08      	it	eq
 8015538:	f8c8 1000 	streq.w	r1, [r8]
 801553c:	5162      	str	r2, [r4, r5]
 801553e:	604b      	str	r3, [r1, #4]
 8015540:	4630      	mov	r0, r6
 8015542:	f000 f82f 	bl	80155a4 <__malloc_unlock>
 8015546:	f104 000b 	add.w	r0, r4, #11
 801554a:	1d23      	adds	r3, r4, #4
 801554c:	f020 0007 	bic.w	r0, r0, #7
 8015550:	1ac2      	subs	r2, r0, r3
 8015552:	bf1c      	itt	ne
 8015554:	1a1b      	subne	r3, r3, r0
 8015556:	50a3      	strne	r3, [r4, r2]
 8015558:	e7af      	b.n	80154ba <_malloc_r+0x22>
 801555a:	6862      	ldr	r2, [r4, #4]
 801555c:	42a3      	cmp	r3, r4
 801555e:	bf0c      	ite	eq
 8015560:	f8c8 2000 	streq.w	r2, [r8]
 8015564:	605a      	strne	r2, [r3, #4]
 8015566:	e7eb      	b.n	8015540 <_malloc_r+0xa8>
 8015568:	4623      	mov	r3, r4
 801556a:	6864      	ldr	r4, [r4, #4]
 801556c:	e7ae      	b.n	80154cc <_malloc_r+0x34>
 801556e:	463c      	mov	r4, r7
 8015570:	687f      	ldr	r7, [r7, #4]
 8015572:	e7b6      	b.n	80154e2 <_malloc_r+0x4a>
 8015574:	461a      	mov	r2, r3
 8015576:	685b      	ldr	r3, [r3, #4]
 8015578:	42a3      	cmp	r3, r4
 801557a:	d1fb      	bne.n	8015574 <_malloc_r+0xdc>
 801557c:	2300      	movs	r3, #0
 801557e:	6053      	str	r3, [r2, #4]
 8015580:	e7de      	b.n	8015540 <_malloc_r+0xa8>
 8015582:	230c      	movs	r3, #12
 8015584:	6033      	str	r3, [r6, #0]
 8015586:	4630      	mov	r0, r6
 8015588:	f000 f80c 	bl	80155a4 <__malloc_unlock>
 801558c:	e794      	b.n	80154b8 <_malloc_r+0x20>
 801558e:	6005      	str	r5, [r0, #0]
 8015590:	e7d6      	b.n	8015540 <_malloc_r+0xa8>
 8015592:	bf00      	nop
 8015594:	2000142c 	.word	0x2000142c

08015598 <__malloc_lock>:
 8015598:	4801      	ldr	r0, [pc, #4]	@ (80155a0 <__malloc_lock+0x8>)
 801559a:	f7ff b89e 	b.w	80146da <__retarget_lock_acquire_recursive>
 801559e:	bf00      	nop
 80155a0:	20001424 	.word	0x20001424

080155a4 <__malloc_unlock>:
 80155a4:	4801      	ldr	r0, [pc, #4]	@ (80155ac <__malloc_unlock+0x8>)
 80155a6:	f7ff b899 	b.w	80146dc <__retarget_lock_release_recursive>
 80155aa:	bf00      	nop
 80155ac:	20001424 	.word	0x20001424

080155b0 <_Balloc>:
 80155b0:	b570      	push	{r4, r5, r6, lr}
 80155b2:	69c6      	ldr	r6, [r0, #28]
 80155b4:	4604      	mov	r4, r0
 80155b6:	460d      	mov	r5, r1
 80155b8:	b976      	cbnz	r6, 80155d8 <_Balloc+0x28>
 80155ba:	2010      	movs	r0, #16
 80155bc:	f7ff ff42 	bl	8015444 <malloc>
 80155c0:	4602      	mov	r2, r0
 80155c2:	61e0      	str	r0, [r4, #28]
 80155c4:	b920      	cbnz	r0, 80155d0 <_Balloc+0x20>
 80155c6:	4b18      	ldr	r3, [pc, #96]	@ (8015628 <_Balloc+0x78>)
 80155c8:	4818      	ldr	r0, [pc, #96]	@ (801562c <_Balloc+0x7c>)
 80155ca:	216b      	movs	r1, #107	@ 0x6b
 80155cc:	f001 faf0 	bl	8016bb0 <__assert_func>
 80155d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80155d4:	6006      	str	r6, [r0, #0]
 80155d6:	60c6      	str	r6, [r0, #12]
 80155d8:	69e6      	ldr	r6, [r4, #28]
 80155da:	68f3      	ldr	r3, [r6, #12]
 80155dc:	b183      	cbz	r3, 8015600 <_Balloc+0x50>
 80155de:	69e3      	ldr	r3, [r4, #28]
 80155e0:	68db      	ldr	r3, [r3, #12]
 80155e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80155e6:	b9b8      	cbnz	r0, 8015618 <_Balloc+0x68>
 80155e8:	2101      	movs	r1, #1
 80155ea:	fa01 f605 	lsl.w	r6, r1, r5
 80155ee:	1d72      	adds	r2, r6, #5
 80155f0:	0092      	lsls	r2, r2, #2
 80155f2:	4620      	mov	r0, r4
 80155f4:	f001 fafa 	bl	8016bec <_calloc_r>
 80155f8:	b160      	cbz	r0, 8015614 <_Balloc+0x64>
 80155fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80155fe:	e00e      	b.n	801561e <_Balloc+0x6e>
 8015600:	2221      	movs	r2, #33	@ 0x21
 8015602:	2104      	movs	r1, #4
 8015604:	4620      	mov	r0, r4
 8015606:	f001 faf1 	bl	8016bec <_calloc_r>
 801560a:	69e3      	ldr	r3, [r4, #28]
 801560c:	60f0      	str	r0, [r6, #12]
 801560e:	68db      	ldr	r3, [r3, #12]
 8015610:	2b00      	cmp	r3, #0
 8015612:	d1e4      	bne.n	80155de <_Balloc+0x2e>
 8015614:	2000      	movs	r0, #0
 8015616:	bd70      	pop	{r4, r5, r6, pc}
 8015618:	6802      	ldr	r2, [r0, #0]
 801561a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801561e:	2300      	movs	r3, #0
 8015620:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015624:	e7f7      	b.n	8015616 <_Balloc+0x66>
 8015626:	bf00      	nop
 8015628:	08019963 	.word	0x08019963
 801562c:	080199e3 	.word	0x080199e3

08015630 <_Bfree>:
 8015630:	b570      	push	{r4, r5, r6, lr}
 8015632:	69c6      	ldr	r6, [r0, #28]
 8015634:	4605      	mov	r5, r0
 8015636:	460c      	mov	r4, r1
 8015638:	b976      	cbnz	r6, 8015658 <_Bfree+0x28>
 801563a:	2010      	movs	r0, #16
 801563c:	f7ff ff02 	bl	8015444 <malloc>
 8015640:	4602      	mov	r2, r0
 8015642:	61e8      	str	r0, [r5, #28]
 8015644:	b920      	cbnz	r0, 8015650 <_Bfree+0x20>
 8015646:	4b09      	ldr	r3, [pc, #36]	@ (801566c <_Bfree+0x3c>)
 8015648:	4809      	ldr	r0, [pc, #36]	@ (8015670 <_Bfree+0x40>)
 801564a:	218f      	movs	r1, #143	@ 0x8f
 801564c:	f001 fab0 	bl	8016bb0 <__assert_func>
 8015650:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015654:	6006      	str	r6, [r0, #0]
 8015656:	60c6      	str	r6, [r0, #12]
 8015658:	b13c      	cbz	r4, 801566a <_Bfree+0x3a>
 801565a:	69eb      	ldr	r3, [r5, #28]
 801565c:	6862      	ldr	r2, [r4, #4]
 801565e:	68db      	ldr	r3, [r3, #12]
 8015660:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015664:	6021      	str	r1, [r4, #0]
 8015666:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801566a:	bd70      	pop	{r4, r5, r6, pc}
 801566c:	08019963 	.word	0x08019963
 8015670:	080199e3 	.word	0x080199e3

08015674 <__multadd>:
 8015674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015678:	690d      	ldr	r5, [r1, #16]
 801567a:	4607      	mov	r7, r0
 801567c:	460c      	mov	r4, r1
 801567e:	461e      	mov	r6, r3
 8015680:	f101 0c14 	add.w	ip, r1, #20
 8015684:	2000      	movs	r0, #0
 8015686:	f8dc 3000 	ldr.w	r3, [ip]
 801568a:	b299      	uxth	r1, r3
 801568c:	fb02 6101 	mla	r1, r2, r1, r6
 8015690:	0c1e      	lsrs	r6, r3, #16
 8015692:	0c0b      	lsrs	r3, r1, #16
 8015694:	fb02 3306 	mla	r3, r2, r6, r3
 8015698:	b289      	uxth	r1, r1
 801569a:	3001      	adds	r0, #1
 801569c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80156a0:	4285      	cmp	r5, r0
 80156a2:	f84c 1b04 	str.w	r1, [ip], #4
 80156a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80156aa:	dcec      	bgt.n	8015686 <__multadd+0x12>
 80156ac:	b30e      	cbz	r6, 80156f2 <__multadd+0x7e>
 80156ae:	68a3      	ldr	r3, [r4, #8]
 80156b0:	42ab      	cmp	r3, r5
 80156b2:	dc19      	bgt.n	80156e8 <__multadd+0x74>
 80156b4:	6861      	ldr	r1, [r4, #4]
 80156b6:	4638      	mov	r0, r7
 80156b8:	3101      	adds	r1, #1
 80156ba:	f7ff ff79 	bl	80155b0 <_Balloc>
 80156be:	4680      	mov	r8, r0
 80156c0:	b928      	cbnz	r0, 80156ce <__multadd+0x5a>
 80156c2:	4602      	mov	r2, r0
 80156c4:	4b0c      	ldr	r3, [pc, #48]	@ (80156f8 <__multadd+0x84>)
 80156c6:	480d      	ldr	r0, [pc, #52]	@ (80156fc <__multadd+0x88>)
 80156c8:	21ba      	movs	r1, #186	@ 0xba
 80156ca:	f001 fa71 	bl	8016bb0 <__assert_func>
 80156ce:	6922      	ldr	r2, [r4, #16]
 80156d0:	3202      	adds	r2, #2
 80156d2:	f104 010c 	add.w	r1, r4, #12
 80156d6:	0092      	lsls	r2, r2, #2
 80156d8:	300c      	adds	r0, #12
 80156da:	f7ff f800 	bl	80146de <memcpy>
 80156de:	4621      	mov	r1, r4
 80156e0:	4638      	mov	r0, r7
 80156e2:	f7ff ffa5 	bl	8015630 <_Bfree>
 80156e6:	4644      	mov	r4, r8
 80156e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80156ec:	3501      	adds	r5, #1
 80156ee:	615e      	str	r6, [r3, #20]
 80156f0:	6125      	str	r5, [r4, #16]
 80156f2:	4620      	mov	r0, r4
 80156f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156f8:	080199d2 	.word	0x080199d2
 80156fc:	080199e3 	.word	0x080199e3

08015700 <__hi0bits>:
 8015700:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8015704:	4603      	mov	r3, r0
 8015706:	bf36      	itet	cc
 8015708:	0403      	lslcc	r3, r0, #16
 801570a:	2000      	movcs	r0, #0
 801570c:	2010      	movcc	r0, #16
 801570e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8015712:	bf3c      	itt	cc
 8015714:	021b      	lslcc	r3, r3, #8
 8015716:	3008      	addcc	r0, #8
 8015718:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801571c:	bf3c      	itt	cc
 801571e:	011b      	lslcc	r3, r3, #4
 8015720:	3004      	addcc	r0, #4
 8015722:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015726:	bf3c      	itt	cc
 8015728:	009b      	lslcc	r3, r3, #2
 801572a:	3002      	addcc	r0, #2
 801572c:	2b00      	cmp	r3, #0
 801572e:	db05      	blt.n	801573c <__hi0bits+0x3c>
 8015730:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8015734:	f100 0001 	add.w	r0, r0, #1
 8015738:	bf08      	it	eq
 801573a:	2020      	moveq	r0, #32
 801573c:	4770      	bx	lr

0801573e <__lo0bits>:
 801573e:	6803      	ldr	r3, [r0, #0]
 8015740:	4602      	mov	r2, r0
 8015742:	f013 0007 	ands.w	r0, r3, #7
 8015746:	d00b      	beq.n	8015760 <__lo0bits+0x22>
 8015748:	07d9      	lsls	r1, r3, #31
 801574a:	d421      	bmi.n	8015790 <__lo0bits+0x52>
 801574c:	0798      	lsls	r0, r3, #30
 801574e:	bf49      	itett	mi
 8015750:	085b      	lsrmi	r3, r3, #1
 8015752:	089b      	lsrpl	r3, r3, #2
 8015754:	2001      	movmi	r0, #1
 8015756:	6013      	strmi	r3, [r2, #0]
 8015758:	bf5c      	itt	pl
 801575a:	6013      	strpl	r3, [r2, #0]
 801575c:	2002      	movpl	r0, #2
 801575e:	4770      	bx	lr
 8015760:	b299      	uxth	r1, r3
 8015762:	b909      	cbnz	r1, 8015768 <__lo0bits+0x2a>
 8015764:	0c1b      	lsrs	r3, r3, #16
 8015766:	2010      	movs	r0, #16
 8015768:	b2d9      	uxtb	r1, r3
 801576a:	b909      	cbnz	r1, 8015770 <__lo0bits+0x32>
 801576c:	3008      	adds	r0, #8
 801576e:	0a1b      	lsrs	r3, r3, #8
 8015770:	0719      	lsls	r1, r3, #28
 8015772:	bf04      	itt	eq
 8015774:	091b      	lsreq	r3, r3, #4
 8015776:	3004      	addeq	r0, #4
 8015778:	0799      	lsls	r1, r3, #30
 801577a:	bf04      	itt	eq
 801577c:	089b      	lsreq	r3, r3, #2
 801577e:	3002      	addeq	r0, #2
 8015780:	07d9      	lsls	r1, r3, #31
 8015782:	d403      	bmi.n	801578c <__lo0bits+0x4e>
 8015784:	085b      	lsrs	r3, r3, #1
 8015786:	f100 0001 	add.w	r0, r0, #1
 801578a:	d003      	beq.n	8015794 <__lo0bits+0x56>
 801578c:	6013      	str	r3, [r2, #0]
 801578e:	4770      	bx	lr
 8015790:	2000      	movs	r0, #0
 8015792:	4770      	bx	lr
 8015794:	2020      	movs	r0, #32
 8015796:	4770      	bx	lr

08015798 <__i2b>:
 8015798:	b510      	push	{r4, lr}
 801579a:	460c      	mov	r4, r1
 801579c:	2101      	movs	r1, #1
 801579e:	f7ff ff07 	bl	80155b0 <_Balloc>
 80157a2:	4602      	mov	r2, r0
 80157a4:	b928      	cbnz	r0, 80157b2 <__i2b+0x1a>
 80157a6:	4b05      	ldr	r3, [pc, #20]	@ (80157bc <__i2b+0x24>)
 80157a8:	4805      	ldr	r0, [pc, #20]	@ (80157c0 <__i2b+0x28>)
 80157aa:	f240 1145 	movw	r1, #325	@ 0x145
 80157ae:	f001 f9ff 	bl	8016bb0 <__assert_func>
 80157b2:	2301      	movs	r3, #1
 80157b4:	6144      	str	r4, [r0, #20]
 80157b6:	6103      	str	r3, [r0, #16]
 80157b8:	bd10      	pop	{r4, pc}
 80157ba:	bf00      	nop
 80157bc:	080199d2 	.word	0x080199d2
 80157c0:	080199e3 	.word	0x080199e3

080157c4 <__multiply>:
 80157c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157c8:	4617      	mov	r7, r2
 80157ca:	690a      	ldr	r2, [r1, #16]
 80157cc:	693b      	ldr	r3, [r7, #16]
 80157ce:	429a      	cmp	r2, r3
 80157d0:	bfa8      	it	ge
 80157d2:	463b      	movge	r3, r7
 80157d4:	4689      	mov	r9, r1
 80157d6:	bfa4      	itt	ge
 80157d8:	460f      	movge	r7, r1
 80157da:	4699      	movge	r9, r3
 80157dc:	693d      	ldr	r5, [r7, #16]
 80157de:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80157e2:	68bb      	ldr	r3, [r7, #8]
 80157e4:	6879      	ldr	r1, [r7, #4]
 80157e6:	eb05 060a 	add.w	r6, r5, sl
 80157ea:	42b3      	cmp	r3, r6
 80157ec:	b085      	sub	sp, #20
 80157ee:	bfb8      	it	lt
 80157f0:	3101      	addlt	r1, #1
 80157f2:	f7ff fedd 	bl	80155b0 <_Balloc>
 80157f6:	b930      	cbnz	r0, 8015806 <__multiply+0x42>
 80157f8:	4602      	mov	r2, r0
 80157fa:	4b41      	ldr	r3, [pc, #260]	@ (8015900 <__multiply+0x13c>)
 80157fc:	4841      	ldr	r0, [pc, #260]	@ (8015904 <__multiply+0x140>)
 80157fe:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8015802:	f001 f9d5 	bl	8016bb0 <__assert_func>
 8015806:	f100 0414 	add.w	r4, r0, #20
 801580a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801580e:	4623      	mov	r3, r4
 8015810:	2200      	movs	r2, #0
 8015812:	4573      	cmp	r3, lr
 8015814:	d320      	bcc.n	8015858 <__multiply+0x94>
 8015816:	f107 0814 	add.w	r8, r7, #20
 801581a:	f109 0114 	add.w	r1, r9, #20
 801581e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8015822:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8015826:	9302      	str	r3, [sp, #8]
 8015828:	1beb      	subs	r3, r5, r7
 801582a:	3b15      	subs	r3, #21
 801582c:	f023 0303 	bic.w	r3, r3, #3
 8015830:	3304      	adds	r3, #4
 8015832:	3715      	adds	r7, #21
 8015834:	42bd      	cmp	r5, r7
 8015836:	bf38      	it	cc
 8015838:	2304      	movcc	r3, #4
 801583a:	9301      	str	r3, [sp, #4]
 801583c:	9b02      	ldr	r3, [sp, #8]
 801583e:	9103      	str	r1, [sp, #12]
 8015840:	428b      	cmp	r3, r1
 8015842:	d80c      	bhi.n	801585e <__multiply+0x9a>
 8015844:	2e00      	cmp	r6, #0
 8015846:	dd03      	ble.n	8015850 <__multiply+0x8c>
 8015848:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801584c:	2b00      	cmp	r3, #0
 801584e:	d055      	beq.n	80158fc <__multiply+0x138>
 8015850:	6106      	str	r6, [r0, #16]
 8015852:	b005      	add	sp, #20
 8015854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015858:	f843 2b04 	str.w	r2, [r3], #4
 801585c:	e7d9      	b.n	8015812 <__multiply+0x4e>
 801585e:	f8b1 a000 	ldrh.w	sl, [r1]
 8015862:	f1ba 0f00 	cmp.w	sl, #0
 8015866:	d01f      	beq.n	80158a8 <__multiply+0xe4>
 8015868:	46c4      	mov	ip, r8
 801586a:	46a1      	mov	r9, r4
 801586c:	2700      	movs	r7, #0
 801586e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015872:	f8d9 3000 	ldr.w	r3, [r9]
 8015876:	fa1f fb82 	uxth.w	fp, r2
 801587a:	b29b      	uxth	r3, r3
 801587c:	fb0a 330b 	mla	r3, sl, fp, r3
 8015880:	443b      	add	r3, r7
 8015882:	f8d9 7000 	ldr.w	r7, [r9]
 8015886:	0c12      	lsrs	r2, r2, #16
 8015888:	0c3f      	lsrs	r7, r7, #16
 801588a:	fb0a 7202 	mla	r2, sl, r2, r7
 801588e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8015892:	b29b      	uxth	r3, r3
 8015894:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015898:	4565      	cmp	r5, ip
 801589a:	f849 3b04 	str.w	r3, [r9], #4
 801589e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80158a2:	d8e4      	bhi.n	801586e <__multiply+0xaa>
 80158a4:	9b01      	ldr	r3, [sp, #4]
 80158a6:	50e7      	str	r7, [r4, r3]
 80158a8:	9b03      	ldr	r3, [sp, #12]
 80158aa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80158ae:	3104      	adds	r1, #4
 80158b0:	f1b9 0f00 	cmp.w	r9, #0
 80158b4:	d020      	beq.n	80158f8 <__multiply+0x134>
 80158b6:	6823      	ldr	r3, [r4, #0]
 80158b8:	4647      	mov	r7, r8
 80158ba:	46a4      	mov	ip, r4
 80158bc:	f04f 0a00 	mov.w	sl, #0
 80158c0:	f8b7 b000 	ldrh.w	fp, [r7]
 80158c4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80158c8:	fb09 220b 	mla	r2, r9, fp, r2
 80158cc:	4452      	add	r2, sl
 80158ce:	b29b      	uxth	r3, r3
 80158d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80158d4:	f84c 3b04 	str.w	r3, [ip], #4
 80158d8:	f857 3b04 	ldr.w	r3, [r7], #4
 80158dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80158e0:	f8bc 3000 	ldrh.w	r3, [ip]
 80158e4:	fb09 330a 	mla	r3, r9, sl, r3
 80158e8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80158ec:	42bd      	cmp	r5, r7
 80158ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80158f2:	d8e5      	bhi.n	80158c0 <__multiply+0xfc>
 80158f4:	9a01      	ldr	r2, [sp, #4]
 80158f6:	50a3      	str	r3, [r4, r2]
 80158f8:	3404      	adds	r4, #4
 80158fa:	e79f      	b.n	801583c <__multiply+0x78>
 80158fc:	3e01      	subs	r6, #1
 80158fe:	e7a1      	b.n	8015844 <__multiply+0x80>
 8015900:	080199d2 	.word	0x080199d2
 8015904:	080199e3 	.word	0x080199e3

08015908 <__pow5mult>:
 8015908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801590c:	4615      	mov	r5, r2
 801590e:	f012 0203 	ands.w	r2, r2, #3
 8015912:	4607      	mov	r7, r0
 8015914:	460e      	mov	r6, r1
 8015916:	d007      	beq.n	8015928 <__pow5mult+0x20>
 8015918:	4c25      	ldr	r4, [pc, #148]	@ (80159b0 <__pow5mult+0xa8>)
 801591a:	3a01      	subs	r2, #1
 801591c:	2300      	movs	r3, #0
 801591e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015922:	f7ff fea7 	bl	8015674 <__multadd>
 8015926:	4606      	mov	r6, r0
 8015928:	10ad      	asrs	r5, r5, #2
 801592a:	d03d      	beq.n	80159a8 <__pow5mult+0xa0>
 801592c:	69fc      	ldr	r4, [r7, #28]
 801592e:	b97c      	cbnz	r4, 8015950 <__pow5mult+0x48>
 8015930:	2010      	movs	r0, #16
 8015932:	f7ff fd87 	bl	8015444 <malloc>
 8015936:	4602      	mov	r2, r0
 8015938:	61f8      	str	r0, [r7, #28]
 801593a:	b928      	cbnz	r0, 8015948 <__pow5mult+0x40>
 801593c:	4b1d      	ldr	r3, [pc, #116]	@ (80159b4 <__pow5mult+0xac>)
 801593e:	481e      	ldr	r0, [pc, #120]	@ (80159b8 <__pow5mult+0xb0>)
 8015940:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8015944:	f001 f934 	bl	8016bb0 <__assert_func>
 8015948:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801594c:	6004      	str	r4, [r0, #0]
 801594e:	60c4      	str	r4, [r0, #12]
 8015950:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8015954:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015958:	b94c      	cbnz	r4, 801596e <__pow5mult+0x66>
 801595a:	f240 2171 	movw	r1, #625	@ 0x271
 801595e:	4638      	mov	r0, r7
 8015960:	f7ff ff1a 	bl	8015798 <__i2b>
 8015964:	2300      	movs	r3, #0
 8015966:	f8c8 0008 	str.w	r0, [r8, #8]
 801596a:	4604      	mov	r4, r0
 801596c:	6003      	str	r3, [r0, #0]
 801596e:	f04f 0900 	mov.w	r9, #0
 8015972:	07eb      	lsls	r3, r5, #31
 8015974:	d50a      	bpl.n	801598c <__pow5mult+0x84>
 8015976:	4631      	mov	r1, r6
 8015978:	4622      	mov	r2, r4
 801597a:	4638      	mov	r0, r7
 801597c:	f7ff ff22 	bl	80157c4 <__multiply>
 8015980:	4631      	mov	r1, r6
 8015982:	4680      	mov	r8, r0
 8015984:	4638      	mov	r0, r7
 8015986:	f7ff fe53 	bl	8015630 <_Bfree>
 801598a:	4646      	mov	r6, r8
 801598c:	106d      	asrs	r5, r5, #1
 801598e:	d00b      	beq.n	80159a8 <__pow5mult+0xa0>
 8015990:	6820      	ldr	r0, [r4, #0]
 8015992:	b938      	cbnz	r0, 80159a4 <__pow5mult+0x9c>
 8015994:	4622      	mov	r2, r4
 8015996:	4621      	mov	r1, r4
 8015998:	4638      	mov	r0, r7
 801599a:	f7ff ff13 	bl	80157c4 <__multiply>
 801599e:	6020      	str	r0, [r4, #0]
 80159a0:	f8c0 9000 	str.w	r9, [r0]
 80159a4:	4604      	mov	r4, r0
 80159a6:	e7e4      	b.n	8015972 <__pow5mult+0x6a>
 80159a8:	4630      	mov	r0, r6
 80159aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80159ae:	bf00      	nop
 80159b0:	08019ab0 	.word	0x08019ab0
 80159b4:	08019963 	.word	0x08019963
 80159b8:	080199e3 	.word	0x080199e3

080159bc <__lshift>:
 80159bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80159c0:	460c      	mov	r4, r1
 80159c2:	6849      	ldr	r1, [r1, #4]
 80159c4:	6923      	ldr	r3, [r4, #16]
 80159c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80159ca:	68a3      	ldr	r3, [r4, #8]
 80159cc:	4607      	mov	r7, r0
 80159ce:	4691      	mov	r9, r2
 80159d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80159d4:	f108 0601 	add.w	r6, r8, #1
 80159d8:	42b3      	cmp	r3, r6
 80159da:	db0b      	blt.n	80159f4 <__lshift+0x38>
 80159dc:	4638      	mov	r0, r7
 80159de:	f7ff fde7 	bl	80155b0 <_Balloc>
 80159e2:	4605      	mov	r5, r0
 80159e4:	b948      	cbnz	r0, 80159fa <__lshift+0x3e>
 80159e6:	4602      	mov	r2, r0
 80159e8:	4b28      	ldr	r3, [pc, #160]	@ (8015a8c <__lshift+0xd0>)
 80159ea:	4829      	ldr	r0, [pc, #164]	@ (8015a90 <__lshift+0xd4>)
 80159ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80159f0:	f001 f8de 	bl	8016bb0 <__assert_func>
 80159f4:	3101      	adds	r1, #1
 80159f6:	005b      	lsls	r3, r3, #1
 80159f8:	e7ee      	b.n	80159d8 <__lshift+0x1c>
 80159fa:	2300      	movs	r3, #0
 80159fc:	f100 0114 	add.w	r1, r0, #20
 8015a00:	f100 0210 	add.w	r2, r0, #16
 8015a04:	4618      	mov	r0, r3
 8015a06:	4553      	cmp	r3, sl
 8015a08:	db33      	blt.n	8015a72 <__lshift+0xb6>
 8015a0a:	6920      	ldr	r0, [r4, #16]
 8015a0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015a10:	f104 0314 	add.w	r3, r4, #20
 8015a14:	f019 091f 	ands.w	r9, r9, #31
 8015a18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015a1c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015a20:	d02b      	beq.n	8015a7a <__lshift+0xbe>
 8015a22:	f1c9 0e20 	rsb	lr, r9, #32
 8015a26:	468a      	mov	sl, r1
 8015a28:	2200      	movs	r2, #0
 8015a2a:	6818      	ldr	r0, [r3, #0]
 8015a2c:	fa00 f009 	lsl.w	r0, r0, r9
 8015a30:	4310      	orrs	r0, r2
 8015a32:	f84a 0b04 	str.w	r0, [sl], #4
 8015a36:	f853 2b04 	ldr.w	r2, [r3], #4
 8015a3a:	459c      	cmp	ip, r3
 8015a3c:	fa22 f20e 	lsr.w	r2, r2, lr
 8015a40:	d8f3      	bhi.n	8015a2a <__lshift+0x6e>
 8015a42:	ebac 0304 	sub.w	r3, ip, r4
 8015a46:	3b15      	subs	r3, #21
 8015a48:	f023 0303 	bic.w	r3, r3, #3
 8015a4c:	3304      	adds	r3, #4
 8015a4e:	f104 0015 	add.w	r0, r4, #21
 8015a52:	4560      	cmp	r0, ip
 8015a54:	bf88      	it	hi
 8015a56:	2304      	movhi	r3, #4
 8015a58:	50ca      	str	r2, [r1, r3]
 8015a5a:	b10a      	cbz	r2, 8015a60 <__lshift+0xa4>
 8015a5c:	f108 0602 	add.w	r6, r8, #2
 8015a60:	3e01      	subs	r6, #1
 8015a62:	4638      	mov	r0, r7
 8015a64:	612e      	str	r6, [r5, #16]
 8015a66:	4621      	mov	r1, r4
 8015a68:	f7ff fde2 	bl	8015630 <_Bfree>
 8015a6c:	4628      	mov	r0, r5
 8015a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a72:	f842 0f04 	str.w	r0, [r2, #4]!
 8015a76:	3301      	adds	r3, #1
 8015a78:	e7c5      	b.n	8015a06 <__lshift+0x4a>
 8015a7a:	3904      	subs	r1, #4
 8015a7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015a80:	f841 2f04 	str.w	r2, [r1, #4]!
 8015a84:	459c      	cmp	ip, r3
 8015a86:	d8f9      	bhi.n	8015a7c <__lshift+0xc0>
 8015a88:	e7ea      	b.n	8015a60 <__lshift+0xa4>
 8015a8a:	bf00      	nop
 8015a8c:	080199d2 	.word	0x080199d2
 8015a90:	080199e3 	.word	0x080199e3

08015a94 <__mcmp>:
 8015a94:	690a      	ldr	r2, [r1, #16]
 8015a96:	4603      	mov	r3, r0
 8015a98:	6900      	ldr	r0, [r0, #16]
 8015a9a:	1a80      	subs	r0, r0, r2
 8015a9c:	b530      	push	{r4, r5, lr}
 8015a9e:	d10e      	bne.n	8015abe <__mcmp+0x2a>
 8015aa0:	3314      	adds	r3, #20
 8015aa2:	3114      	adds	r1, #20
 8015aa4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8015aa8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015aac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015ab0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015ab4:	4295      	cmp	r5, r2
 8015ab6:	d003      	beq.n	8015ac0 <__mcmp+0x2c>
 8015ab8:	d205      	bcs.n	8015ac6 <__mcmp+0x32>
 8015aba:	f04f 30ff 	mov.w	r0, #4294967295
 8015abe:	bd30      	pop	{r4, r5, pc}
 8015ac0:	42a3      	cmp	r3, r4
 8015ac2:	d3f3      	bcc.n	8015aac <__mcmp+0x18>
 8015ac4:	e7fb      	b.n	8015abe <__mcmp+0x2a>
 8015ac6:	2001      	movs	r0, #1
 8015ac8:	e7f9      	b.n	8015abe <__mcmp+0x2a>
	...

08015acc <__mdiff>:
 8015acc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ad0:	4689      	mov	r9, r1
 8015ad2:	4606      	mov	r6, r0
 8015ad4:	4611      	mov	r1, r2
 8015ad6:	4648      	mov	r0, r9
 8015ad8:	4614      	mov	r4, r2
 8015ada:	f7ff ffdb 	bl	8015a94 <__mcmp>
 8015ade:	1e05      	subs	r5, r0, #0
 8015ae0:	d112      	bne.n	8015b08 <__mdiff+0x3c>
 8015ae2:	4629      	mov	r1, r5
 8015ae4:	4630      	mov	r0, r6
 8015ae6:	f7ff fd63 	bl	80155b0 <_Balloc>
 8015aea:	4602      	mov	r2, r0
 8015aec:	b928      	cbnz	r0, 8015afa <__mdiff+0x2e>
 8015aee:	4b3f      	ldr	r3, [pc, #252]	@ (8015bec <__mdiff+0x120>)
 8015af0:	f240 2137 	movw	r1, #567	@ 0x237
 8015af4:	483e      	ldr	r0, [pc, #248]	@ (8015bf0 <__mdiff+0x124>)
 8015af6:	f001 f85b 	bl	8016bb0 <__assert_func>
 8015afa:	2301      	movs	r3, #1
 8015afc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015b00:	4610      	mov	r0, r2
 8015b02:	b003      	add	sp, #12
 8015b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b08:	bfbc      	itt	lt
 8015b0a:	464b      	movlt	r3, r9
 8015b0c:	46a1      	movlt	r9, r4
 8015b0e:	4630      	mov	r0, r6
 8015b10:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8015b14:	bfba      	itte	lt
 8015b16:	461c      	movlt	r4, r3
 8015b18:	2501      	movlt	r5, #1
 8015b1a:	2500      	movge	r5, #0
 8015b1c:	f7ff fd48 	bl	80155b0 <_Balloc>
 8015b20:	4602      	mov	r2, r0
 8015b22:	b918      	cbnz	r0, 8015b2c <__mdiff+0x60>
 8015b24:	4b31      	ldr	r3, [pc, #196]	@ (8015bec <__mdiff+0x120>)
 8015b26:	f240 2145 	movw	r1, #581	@ 0x245
 8015b2a:	e7e3      	b.n	8015af4 <__mdiff+0x28>
 8015b2c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8015b30:	6926      	ldr	r6, [r4, #16]
 8015b32:	60c5      	str	r5, [r0, #12]
 8015b34:	f109 0310 	add.w	r3, r9, #16
 8015b38:	f109 0514 	add.w	r5, r9, #20
 8015b3c:	f104 0e14 	add.w	lr, r4, #20
 8015b40:	f100 0b14 	add.w	fp, r0, #20
 8015b44:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8015b48:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8015b4c:	9301      	str	r3, [sp, #4]
 8015b4e:	46d9      	mov	r9, fp
 8015b50:	f04f 0c00 	mov.w	ip, #0
 8015b54:	9b01      	ldr	r3, [sp, #4]
 8015b56:	f85e 0b04 	ldr.w	r0, [lr], #4
 8015b5a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8015b5e:	9301      	str	r3, [sp, #4]
 8015b60:	fa1f f38a 	uxth.w	r3, sl
 8015b64:	4619      	mov	r1, r3
 8015b66:	b283      	uxth	r3, r0
 8015b68:	1acb      	subs	r3, r1, r3
 8015b6a:	0c00      	lsrs	r0, r0, #16
 8015b6c:	4463      	add	r3, ip
 8015b6e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8015b72:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8015b76:	b29b      	uxth	r3, r3
 8015b78:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8015b7c:	4576      	cmp	r6, lr
 8015b7e:	f849 3b04 	str.w	r3, [r9], #4
 8015b82:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015b86:	d8e5      	bhi.n	8015b54 <__mdiff+0x88>
 8015b88:	1b33      	subs	r3, r6, r4
 8015b8a:	3b15      	subs	r3, #21
 8015b8c:	f023 0303 	bic.w	r3, r3, #3
 8015b90:	3415      	adds	r4, #21
 8015b92:	3304      	adds	r3, #4
 8015b94:	42a6      	cmp	r6, r4
 8015b96:	bf38      	it	cc
 8015b98:	2304      	movcc	r3, #4
 8015b9a:	441d      	add	r5, r3
 8015b9c:	445b      	add	r3, fp
 8015b9e:	461e      	mov	r6, r3
 8015ba0:	462c      	mov	r4, r5
 8015ba2:	4544      	cmp	r4, r8
 8015ba4:	d30e      	bcc.n	8015bc4 <__mdiff+0xf8>
 8015ba6:	f108 0103 	add.w	r1, r8, #3
 8015baa:	1b49      	subs	r1, r1, r5
 8015bac:	f021 0103 	bic.w	r1, r1, #3
 8015bb0:	3d03      	subs	r5, #3
 8015bb2:	45a8      	cmp	r8, r5
 8015bb4:	bf38      	it	cc
 8015bb6:	2100      	movcc	r1, #0
 8015bb8:	440b      	add	r3, r1
 8015bba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015bbe:	b191      	cbz	r1, 8015be6 <__mdiff+0x11a>
 8015bc0:	6117      	str	r7, [r2, #16]
 8015bc2:	e79d      	b.n	8015b00 <__mdiff+0x34>
 8015bc4:	f854 1b04 	ldr.w	r1, [r4], #4
 8015bc8:	46e6      	mov	lr, ip
 8015bca:	0c08      	lsrs	r0, r1, #16
 8015bcc:	fa1c fc81 	uxtah	ip, ip, r1
 8015bd0:	4471      	add	r1, lr
 8015bd2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8015bd6:	b289      	uxth	r1, r1
 8015bd8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8015bdc:	f846 1b04 	str.w	r1, [r6], #4
 8015be0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015be4:	e7dd      	b.n	8015ba2 <__mdiff+0xd6>
 8015be6:	3f01      	subs	r7, #1
 8015be8:	e7e7      	b.n	8015bba <__mdiff+0xee>
 8015bea:	bf00      	nop
 8015bec:	080199d2 	.word	0x080199d2
 8015bf0:	080199e3 	.word	0x080199e3

08015bf4 <__d2b>:
 8015bf4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015bf8:	460f      	mov	r7, r1
 8015bfa:	2101      	movs	r1, #1
 8015bfc:	ec59 8b10 	vmov	r8, r9, d0
 8015c00:	4616      	mov	r6, r2
 8015c02:	f7ff fcd5 	bl	80155b0 <_Balloc>
 8015c06:	4604      	mov	r4, r0
 8015c08:	b930      	cbnz	r0, 8015c18 <__d2b+0x24>
 8015c0a:	4602      	mov	r2, r0
 8015c0c:	4b23      	ldr	r3, [pc, #140]	@ (8015c9c <__d2b+0xa8>)
 8015c0e:	4824      	ldr	r0, [pc, #144]	@ (8015ca0 <__d2b+0xac>)
 8015c10:	f240 310f 	movw	r1, #783	@ 0x30f
 8015c14:	f000 ffcc 	bl	8016bb0 <__assert_func>
 8015c18:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8015c1c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015c20:	b10d      	cbz	r5, 8015c26 <__d2b+0x32>
 8015c22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8015c26:	9301      	str	r3, [sp, #4]
 8015c28:	f1b8 0300 	subs.w	r3, r8, #0
 8015c2c:	d023      	beq.n	8015c76 <__d2b+0x82>
 8015c2e:	4668      	mov	r0, sp
 8015c30:	9300      	str	r3, [sp, #0]
 8015c32:	f7ff fd84 	bl	801573e <__lo0bits>
 8015c36:	e9dd 1200 	ldrd	r1, r2, [sp]
 8015c3a:	b1d0      	cbz	r0, 8015c72 <__d2b+0x7e>
 8015c3c:	f1c0 0320 	rsb	r3, r0, #32
 8015c40:	fa02 f303 	lsl.w	r3, r2, r3
 8015c44:	430b      	orrs	r3, r1
 8015c46:	40c2      	lsrs	r2, r0
 8015c48:	6163      	str	r3, [r4, #20]
 8015c4a:	9201      	str	r2, [sp, #4]
 8015c4c:	9b01      	ldr	r3, [sp, #4]
 8015c4e:	61a3      	str	r3, [r4, #24]
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	bf0c      	ite	eq
 8015c54:	2201      	moveq	r2, #1
 8015c56:	2202      	movne	r2, #2
 8015c58:	6122      	str	r2, [r4, #16]
 8015c5a:	b1a5      	cbz	r5, 8015c86 <__d2b+0x92>
 8015c5c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8015c60:	4405      	add	r5, r0
 8015c62:	603d      	str	r5, [r7, #0]
 8015c64:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8015c68:	6030      	str	r0, [r6, #0]
 8015c6a:	4620      	mov	r0, r4
 8015c6c:	b003      	add	sp, #12
 8015c6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c72:	6161      	str	r1, [r4, #20]
 8015c74:	e7ea      	b.n	8015c4c <__d2b+0x58>
 8015c76:	a801      	add	r0, sp, #4
 8015c78:	f7ff fd61 	bl	801573e <__lo0bits>
 8015c7c:	9b01      	ldr	r3, [sp, #4]
 8015c7e:	6163      	str	r3, [r4, #20]
 8015c80:	3020      	adds	r0, #32
 8015c82:	2201      	movs	r2, #1
 8015c84:	e7e8      	b.n	8015c58 <__d2b+0x64>
 8015c86:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015c8a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8015c8e:	6038      	str	r0, [r7, #0]
 8015c90:	6918      	ldr	r0, [r3, #16]
 8015c92:	f7ff fd35 	bl	8015700 <__hi0bits>
 8015c96:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015c9a:	e7e5      	b.n	8015c68 <__d2b+0x74>
 8015c9c:	080199d2 	.word	0x080199d2
 8015ca0:	080199e3 	.word	0x080199e3

08015ca4 <__ssputs_r>:
 8015ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ca8:	688e      	ldr	r6, [r1, #8]
 8015caa:	461f      	mov	r7, r3
 8015cac:	42be      	cmp	r6, r7
 8015cae:	680b      	ldr	r3, [r1, #0]
 8015cb0:	4682      	mov	sl, r0
 8015cb2:	460c      	mov	r4, r1
 8015cb4:	4690      	mov	r8, r2
 8015cb6:	d82d      	bhi.n	8015d14 <__ssputs_r+0x70>
 8015cb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015cbc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015cc0:	d026      	beq.n	8015d10 <__ssputs_r+0x6c>
 8015cc2:	6965      	ldr	r5, [r4, #20]
 8015cc4:	6909      	ldr	r1, [r1, #16]
 8015cc6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015cca:	eba3 0901 	sub.w	r9, r3, r1
 8015cce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015cd2:	1c7b      	adds	r3, r7, #1
 8015cd4:	444b      	add	r3, r9
 8015cd6:	106d      	asrs	r5, r5, #1
 8015cd8:	429d      	cmp	r5, r3
 8015cda:	bf38      	it	cc
 8015cdc:	461d      	movcc	r5, r3
 8015cde:	0553      	lsls	r3, r2, #21
 8015ce0:	d527      	bpl.n	8015d32 <__ssputs_r+0x8e>
 8015ce2:	4629      	mov	r1, r5
 8015ce4:	f7ff fbd8 	bl	8015498 <_malloc_r>
 8015ce8:	4606      	mov	r6, r0
 8015cea:	b360      	cbz	r0, 8015d46 <__ssputs_r+0xa2>
 8015cec:	6921      	ldr	r1, [r4, #16]
 8015cee:	464a      	mov	r2, r9
 8015cf0:	f7fe fcf5 	bl	80146de <memcpy>
 8015cf4:	89a3      	ldrh	r3, [r4, #12]
 8015cf6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8015cfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015cfe:	81a3      	strh	r3, [r4, #12]
 8015d00:	6126      	str	r6, [r4, #16]
 8015d02:	6165      	str	r5, [r4, #20]
 8015d04:	444e      	add	r6, r9
 8015d06:	eba5 0509 	sub.w	r5, r5, r9
 8015d0a:	6026      	str	r6, [r4, #0]
 8015d0c:	60a5      	str	r5, [r4, #8]
 8015d0e:	463e      	mov	r6, r7
 8015d10:	42be      	cmp	r6, r7
 8015d12:	d900      	bls.n	8015d16 <__ssputs_r+0x72>
 8015d14:	463e      	mov	r6, r7
 8015d16:	6820      	ldr	r0, [r4, #0]
 8015d18:	4632      	mov	r2, r6
 8015d1a:	4641      	mov	r1, r8
 8015d1c:	f000 fefb 	bl	8016b16 <memmove>
 8015d20:	68a3      	ldr	r3, [r4, #8]
 8015d22:	1b9b      	subs	r3, r3, r6
 8015d24:	60a3      	str	r3, [r4, #8]
 8015d26:	6823      	ldr	r3, [r4, #0]
 8015d28:	4433      	add	r3, r6
 8015d2a:	6023      	str	r3, [r4, #0]
 8015d2c:	2000      	movs	r0, #0
 8015d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d32:	462a      	mov	r2, r5
 8015d34:	f000 ff80 	bl	8016c38 <_realloc_r>
 8015d38:	4606      	mov	r6, r0
 8015d3a:	2800      	cmp	r0, #0
 8015d3c:	d1e0      	bne.n	8015d00 <__ssputs_r+0x5c>
 8015d3e:	6921      	ldr	r1, [r4, #16]
 8015d40:	4650      	mov	r0, sl
 8015d42:	f7ff fb35 	bl	80153b0 <_free_r>
 8015d46:	230c      	movs	r3, #12
 8015d48:	f8ca 3000 	str.w	r3, [sl]
 8015d4c:	89a3      	ldrh	r3, [r4, #12]
 8015d4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015d52:	81a3      	strh	r3, [r4, #12]
 8015d54:	f04f 30ff 	mov.w	r0, #4294967295
 8015d58:	e7e9      	b.n	8015d2e <__ssputs_r+0x8a>
	...

08015d5c <_svfiprintf_r>:
 8015d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d60:	4698      	mov	r8, r3
 8015d62:	898b      	ldrh	r3, [r1, #12]
 8015d64:	061b      	lsls	r3, r3, #24
 8015d66:	b09d      	sub	sp, #116	@ 0x74
 8015d68:	4607      	mov	r7, r0
 8015d6a:	460d      	mov	r5, r1
 8015d6c:	4614      	mov	r4, r2
 8015d6e:	d510      	bpl.n	8015d92 <_svfiprintf_r+0x36>
 8015d70:	690b      	ldr	r3, [r1, #16]
 8015d72:	b973      	cbnz	r3, 8015d92 <_svfiprintf_r+0x36>
 8015d74:	2140      	movs	r1, #64	@ 0x40
 8015d76:	f7ff fb8f 	bl	8015498 <_malloc_r>
 8015d7a:	6028      	str	r0, [r5, #0]
 8015d7c:	6128      	str	r0, [r5, #16]
 8015d7e:	b930      	cbnz	r0, 8015d8e <_svfiprintf_r+0x32>
 8015d80:	230c      	movs	r3, #12
 8015d82:	603b      	str	r3, [r7, #0]
 8015d84:	f04f 30ff 	mov.w	r0, #4294967295
 8015d88:	b01d      	add	sp, #116	@ 0x74
 8015d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d8e:	2340      	movs	r3, #64	@ 0x40
 8015d90:	616b      	str	r3, [r5, #20]
 8015d92:	2300      	movs	r3, #0
 8015d94:	9309      	str	r3, [sp, #36]	@ 0x24
 8015d96:	2320      	movs	r3, #32
 8015d98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015d9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8015da0:	2330      	movs	r3, #48	@ 0x30
 8015da2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015f40 <_svfiprintf_r+0x1e4>
 8015da6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015daa:	f04f 0901 	mov.w	r9, #1
 8015dae:	4623      	mov	r3, r4
 8015db0:	469a      	mov	sl, r3
 8015db2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015db6:	b10a      	cbz	r2, 8015dbc <_svfiprintf_r+0x60>
 8015db8:	2a25      	cmp	r2, #37	@ 0x25
 8015dba:	d1f9      	bne.n	8015db0 <_svfiprintf_r+0x54>
 8015dbc:	ebba 0b04 	subs.w	fp, sl, r4
 8015dc0:	d00b      	beq.n	8015dda <_svfiprintf_r+0x7e>
 8015dc2:	465b      	mov	r3, fp
 8015dc4:	4622      	mov	r2, r4
 8015dc6:	4629      	mov	r1, r5
 8015dc8:	4638      	mov	r0, r7
 8015dca:	f7ff ff6b 	bl	8015ca4 <__ssputs_r>
 8015dce:	3001      	adds	r0, #1
 8015dd0:	f000 80a7 	beq.w	8015f22 <_svfiprintf_r+0x1c6>
 8015dd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015dd6:	445a      	add	r2, fp
 8015dd8:	9209      	str	r2, [sp, #36]	@ 0x24
 8015dda:	f89a 3000 	ldrb.w	r3, [sl]
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	f000 809f 	beq.w	8015f22 <_svfiprintf_r+0x1c6>
 8015de4:	2300      	movs	r3, #0
 8015de6:	f04f 32ff 	mov.w	r2, #4294967295
 8015dea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015dee:	f10a 0a01 	add.w	sl, sl, #1
 8015df2:	9304      	str	r3, [sp, #16]
 8015df4:	9307      	str	r3, [sp, #28]
 8015df6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015dfa:	931a      	str	r3, [sp, #104]	@ 0x68
 8015dfc:	4654      	mov	r4, sl
 8015dfe:	2205      	movs	r2, #5
 8015e00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015e04:	484e      	ldr	r0, [pc, #312]	@ (8015f40 <_svfiprintf_r+0x1e4>)
 8015e06:	f7ea f9e3 	bl	80001d0 <memchr>
 8015e0a:	9a04      	ldr	r2, [sp, #16]
 8015e0c:	b9d8      	cbnz	r0, 8015e46 <_svfiprintf_r+0xea>
 8015e0e:	06d0      	lsls	r0, r2, #27
 8015e10:	bf44      	itt	mi
 8015e12:	2320      	movmi	r3, #32
 8015e14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015e18:	0711      	lsls	r1, r2, #28
 8015e1a:	bf44      	itt	mi
 8015e1c:	232b      	movmi	r3, #43	@ 0x2b
 8015e1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015e22:	f89a 3000 	ldrb.w	r3, [sl]
 8015e26:	2b2a      	cmp	r3, #42	@ 0x2a
 8015e28:	d015      	beq.n	8015e56 <_svfiprintf_r+0xfa>
 8015e2a:	9a07      	ldr	r2, [sp, #28]
 8015e2c:	4654      	mov	r4, sl
 8015e2e:	2000      	movs	r0, #0
 8015e30:	f04f 0c0a 	mov.w	ip, #10
 8015e34:	4621      	mov	r1, r4
 8015e36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015e3a:	3b30      	subs	r3, #48	@ 0x30
 8015e3c:	2b09      	cmp	r3, #9
 8015e3e:	d94b      	bls.n	8015ed8 <_svfiprintf_r+0x17c>
 8015e40:	b1b0      	cbz	r0, 8015e70 <_svfiprintf_r+0x114>
 8015e42:	9207      	str	r2, [sp, #28]
 8015e44:	e014      	b.n	8015e70 <_svfiprintf_r+0x114>
 8015e46:	eba0 0308 	sub.w	r3, r0, r8
 8015e4a:	fa09 f303 	lsl.w	r3, r9, r3
 8015e4e:	4313      	orrs	r3, r2
 8015e50:	9304      	str	r3, [sp, #16]
 8015e52:	46a2      	mov	sl, r4
 8015e54:	e7d2      	b.n	8015dfc <_svfiprintf_r+0xa0>
 8015e56:	9b03      	ldr	r3, [sp, #12]
 8015e58:	1d19      	adds	r1, r3, #4
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	9103      	str	r1, [sp, #12]
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	bfbb      	ittet	lt
 8015e62:	425b      	neglt	r3, r3
 8015e64:	f042 0202 	orrlt.w	r2, r2, #2
 8015e68:	9307      	strge	r3, [sp, #28]
 8015e6a:	9307      	strlt	r3, [sp, #28]
 8015e6c:	bfb8      	it	lt
 8015e6e:	9204      	strlt	r2, [sp, #16]
 8015e70:	7823      	ldrb	r3, [r4, #0]
 8015e72:	2b2e      	cmp	r3, #46	@ 0x2e
 8015e74:	d10a      	bne.n	8015e8c <_svfiprintf_r+0x130>
 8015e76:	7863      	ldrb	r3, [r4, #1]
 8015e78:	2b2a      	cmp	r3, #42	@ 0x2a
 8015e7a:	d132      	bne.n	8015ee2 <_svfiprintf_r+0x186>
 8015e7c:	9b03      	ldr	r3, [sp, #12]
 8015e7e:	1d1a      	adds	r2, r3, #4
 8015e80:	681b      	ldr	r3, [r3, #0]
 8015e82:	9203      	str	r2, [sp, #12]
 8015e84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015e88:	3402      	adds	r4, #2
 8015e8a:	9305      	str	r3, [sp, #20]
 8015e8c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015f50 <_svfiprintf_r+0x1f4>
 8015e90:	7821      	ldrb	r1, [r4, #0]
 8015e92:	2203      	movs	r2, #3
 8015e94:	4650      	mov	r0, sl
 8015e96:	f7ea f99b 	bl	80001d0 <memchr>
 8015e9a:	b138      	cbz	r0, 8015eac <_svfiprintf_r+0x150>
 8015e9c:	9b04      	ldr	r3, [sp, #16]
 8015e9e:	eba0 000a 	sub.w	r0, r0, sl
 8015ea2:	2240      	movs	r2, #64	@ 0x40
 8015ea4:	4082      	lsls	r2, r0
 8015ea6:	4313      	orrs	r3, r2
 8015ea8:	3401      	adds	r4, #1
 8015eaa:	9304      	str	r3, [sp, #16]
 8015eac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015eb0:	4824      	ldr	r0, [pc, #144]	@ (8015f44 <_svfiprintf_r+0x1e8>)
 8015eb2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015eb6:	2206      	movs	r2, #6
 8015eb8:	f7ea f98a 	bl	80001d0 <memchr>
 8015ebc:	2800      	cmp	r0, #0
 8015ebe:	d036      	beq.n	8015f2e <_svfiprintf_r+0x1d2>
 8015ec0:	4b21      	ldr	r3, [pc, #132]	@ (8015f48 <_svfiprintf_r+0x1ec>)
 8015ec2:	bb1b      	cbnz	r3, 8015f0c <_svfiprintf_r+0x1b0>
 8015ec4:	9b03      	ldr	r3, [sp, #12]
 8015ec6:	3307      	adds	r3, #7
 8015ec8:	f023 0307 	bic.w	r3, r3, #7
 8015ecc:	3308      	adds	r3, #8
 8015ece:	9303      	str	r3, [sp, #12]
 8015ed0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015ed2:	4433      	add	r3, r6
 8015ed4:	9309      	str	r3, [sp, #36]	@ 0x24
 8015ed6:	e76a      	b.n	8015dae <_svfiprintf_r+0x52>
 8015ed8:	fb0c 3202 	mla	r2, ip, r2, r3
 8015edc:	460c      	mov	r4, r1
 8015ede:	2001      	movs	r0, #1
 8015ee0:	e7a8      	b.n	8015e34 <_svfiprintf_r+0xd8>
 8015ee2:	2300      	movs	r3, #0
 8015ee4:	3401      	adds	r4, #1
 8015ee6:	9305      	str	r3, [sp, #20]
 8015ee8:	4619      	mov	r1, r3
 8015eea:	f04f 0c0a 	mov.w	ip, #10
 8015eee:	4620      	mov	r0, r4
 8015ef0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015ef4:	3a30      	subs	r2, #48	@ 0x30
 8015ef6:	2a09      	cmp	r2, #9
 8015ef8:	d903      	bls.n	8015f02 <_svfiprintf_r+0x1a6>
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d0c6      	beq.n	8015e8c <_svfiprintf_r+0x130>
 8015efe:	9105      	str	r1, [sp, #20]
 8015f00:	e7c4      	b.n	8015e8c <_svfiprintf_r+0x130>
 8015f02:	fb0c 2101 	mla	r1, ip, r1, r2
 8015f06:	4604      	mov	r4, r0
 8015f08:	2301      	movs	r3, #1
 8015f0a:	e7f0      	b.n	8015eee <_svfiprintf_r+0x192>
 8015f0c:	ab03      	add	r3, sp, #12
 8015f0e:	9300      	str	r3, [sp, #0]
 8015f10:	462a      	mov	r2, r5
 8015f12:	4b0e      	ldr	r3, [pc, #56]	@ (8015f4c <_svfiprintf_r+0x1f0>)
 8015f14:	a904      	add	r1, sp, #16
 8015f16:	4638      	mov	r0, r7
 8015f18:	f7fd fdae 	bl	8013a78 <_printf_float>
 8015f1c:	1c42      	adds	r2, r0, #1
 8015f1e:	4606      	mov	r6, r0
 8015f20:	d1d6      	bne.n	8015ed0 <_svfiprintf_r+0x174>
 8015f22:	89ab      	ldrh	r3, [r5, #12]
 8015f24:	065b      	lsls	r3, r3, #25
 8015f26:	f53f af2d 	bmi.w	8015d84 <_svfiprintf_r+0x28>
 8015f2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015f2c:	e72c      	b.n	8015d88 <_svfiprintf_r+0x2c>
 8015f2e:	ab03      	add	r3, sp, #12
 8015f30:	9300      	str	r3, [sp, #0]
 8015f32:	462a      	mov	r2, r5
 8015f34:	4b05      	ldr	r3, [pc, #20]	@ (8015f4c <_svfiprintf_r+0x1f0>)
 8015f36:	a904      	add	r1, sp, #16
 8015f38:	4638      	mov	r0, r7
 8015f3a:	f7fe f835 	bl	8013fa8 <_printf_i>
 8015f3e:	e7ed      	b.n	8015f1c <_svfiprintf_r+0x1c0>
 8015f40:	08019a3c 	.word	0x08019a3c
 8015f44:	08019a46 	.word	0x08019a46
 8015f48:	08013a79 	.word	0x08013a79
 8015f4c:	08015ca5 	.word	0x08015ca5
 8015f50:	08019a42 	.word	0x08019a42

08015f54 <_sungetc_r>:
 8015f54:	b538      	push	{r3, r4, r5, lr}
 8015f56:	1c4b      	adds	r3, r1, #1
 8015f58:	4614      	mov	r4, r2
 8015f5a:	d103      	bne.n	8015f64 <_sungetc_r+0x10>
 8015f5c:	f04f 35ff 	mov.w	r5, #4294967295
 8015f60:	4628      	mov	r0, r5
 8015f62:	bd38      	pop	{r3, r4, r5, pc}
 8015f64:	8993      	ldrh	r3, [r2, #12]
 8015f66:	f023 0320 	bic.w	r3, r3, #32
 8015f6a:	8193      	strh	r3, [r2, #12]
 8015f6c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8015f6e:	6852      	ldr	r2, [r2, #4]
 8015f70:	b2cd      	uxtb	r5, r1
 8015f72:	b18b      	cbz	r3, 8015f98 <_sungetc_r+0x44>
 8015f74:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8015f76:	4293      	cmp	r3, r2
 8015f78:	dd08      	ble.n	8015f8c <_sungetc_r+0x38>
 8015f7a:	6823      	ldr	r3, [r4, #0]
 8015f7c:	1e5a      	subs	r2, r3, #1
 8015f7e:	6022      	str	r2, [r4, #0]
 8015f80:	f803 5c01 	strb.w	r5, [r3, #-1]
 8015f84:	6863      	ldr	r3, [r4, #4]
 8015f86:	3301      	adds	r3, #1
 8015f88:	6063      	str	r3, [r4, #4]
 8015f8a:	e7e9      	b.n	8015f60 <_sungetc_r+0xc>
 8015f8c:	4621      	mov	r1, r4
 8015f8e:	f000 fd88 	bl	8016aa2 <__submore>
 8015f92:	2800      	cmp	r0, #0
 8015f94:	d0f1      	beq.n	8015f7a <_sungetc_r+0x26>
 8015f96:	e7e1      	b.n	8015f5c <_sungetc_r+0x8>
 8015f98:	6921      	ldr	r1, [r4, #16]
 8015f9a:	6823      	ldr	r3, [r4, #0]
 8015f9c:	b151      	cbz	r1, 8015fb4 <_sungetc_r+0x60>
 8015f9e:	4299      	cmp	r1, r3
 8015fa0:	d208      	bcs.n	8015fb4 <_sungetc_r+0x60>
 8015fa2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8015fa6:	42a9      	cmp	r1, r5
 8015fa8:	d104      	bne.n	8015fb4 <_sungetc_r+0x60>
 8015faa:	3b01      	subs	r3, #1
 8015fac:	3201      	adds	r2, #1
 8015fae:	6023      	str	r3, [r4, #0]
 8015fb0:	6062      	str	r2, [r4, #4]
 8015fb2:	e7d5      	b.n	8015f60 <_sungetc_r+0xc>
 8015fb4:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8015fb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015fbc:	6363      	str	r3, [r4, #52]	@ 0x34
 8015fbe:	2303      	movs	r3, #3
 8015fc0:	63a3      	str	r3, [r4, #56]	@ 0x38
 8015fc2:	4623      	mov	r3, r4
 8015fc4:	f803 5f46 	strb.w	r5, [r3, #70]!
 8015fc8:	6023      	str	r3, [r4, #0]
 8015fca:	2301      	movs	r3, #1
 8015fcc:	e7dc      	b.n	8015f88 <_sungetc_r+0x34>

08015fce <__ssrefill_r>:
 8015fce:	b510      	push	{r4, lr}
 8015fd0:	460c      	mov	r4, r1
 8015fd2:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8015fd4:	b169      	cbz	r1, 8015ff2 <__ssrefill_r+0x24>
 8015fd6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015fda:	4299      	cmp	r1, r3
 8015fdc:	d001      	beq.n	8015fe2 <__ssrefill_r+0x14>
 8015fde:	f7ff f9e7 	bl	80153b0 <_free_r>
 8015fe2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015fe4:	6063      	str	r3, [r4, #4]
 8015fe6:	2000      	movs	r0, #0
 8015fe8:	6360      	str	r0, [r4, #52]	@ 0x34
 8015fea:	b113      	cbz	r3, 8015ff2 <__ssrefill_r+0x24>
 8015fec:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8015fee:	6023      	str	r3, [r4, #0]
 8015ff0:	bd10      	pop	{r4, pc}
 8015ff2:	6923      	ldr	r3, [r4, #16]
 8015ff4:	6023      	str	r3, [r4, #0]
 8015ff6:	2300      	movs	r3, #0
 8015ff8:	6063      	str	r3, [r4, #4]
 8015ffa:	89a3      	ldrh	r3, [r4, #12]
 8015ffc:	f043 0320 	orr.w	r3, r3, #32
 8016000:	81a3      	strh	r3, [r4, #12]
 8016002:	f04f 30ff 	mov.w	r0, #4294967295
 8016006:	e7f3      	b.n	8015ff0 <__ssrefill_r+0x22>

08016008 <__ssvfiscanf_r>:
 8016008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801600c:	460c      	mov	r4, r1
 801600e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8016012:	2100      	movs	r1, #0
 8016014:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8016018:	49a6      	ldr	r1, [pc, #664]	@ (80162b4 <__ssvfiscanf_r+0x2ac>)
 801601a:	91a0      	str	r1, [sp, #640]	@ 0x280
 801601c:	f10d 0804 	add.w	r8, sp, #4
 8016020:	49a5      	ldr	r1, [pc, #660]	@ (80162b8 <__ssvfiscanf_r+0x2b0>)
 8016022:	4fa6      	ldr	r7, [pc, #664]	@ (80162bc <__ssvfiscanf_r+0x2b4>)
 8016024:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8016028:	4606      	mov	r6, r0
 801602a:	91a1      	str	r1, [sp, #644]	@ 0x284
 801602c:	9300      	str	r3, [sp, #0]
 801602e:	f892 9000 	ldrb.w	r9, [r2]
 8016032:	f1b9 0f00 	cmp.w	r9, #0
 8016036:	f000 8158 	beq.w	80162ea <__ssvfiscanf_r+0x2e2>
 801603a:	f817 3009 	ldrb.w	r3, [r7, r9]
 801603e:	f013 0308 	ands.w	r3, r3, #8
 8016042:	f102 0501 	add.w	r5, r2, #1
 8016046:	d019      	beq.n	801607c <__ssvfiscanf_r+0x74>
 8016048:	6863      	ldr	r3, [r4, #4]
 801604a:	2b00      	cmp	r3, #0
 801604c:	dd0f      	ble.n	801606e <__ssvfiscanf_r+0x66>
 801604e:	6823      	ldr	r3, [r4, #0]
 8016050:	781a      	ldrb	r2, [r3, #0]
 8016052:	5cba      	ldrb	r2, [r7, r2]
 8016054:	0712      	lsls	r2, r2, #28
 8016056:	d401      	bmi.n	801605c <__ssvfiscanf_r+0x54>
 8016058:	462a      	mov	r2, r5
 801605a:	e7e8      	b.n	801602e <__ssvfiscanf_r+0x26>
 801605c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801605e:	3201      	adds	r2, #1
 8016060:	9245      	str	r2, [sp, #276]	@ 0x114
 8016062:	6862      	ldr	r2, [r4, #4]
 8016064:	3301      	adds	r3, #1
 8016066:	3a01      	subs	r2, #1
 8016068:	6062      	str	r2, [r4, #4]
 801606a:	6023      	str	r3, [r4, #0]
 801606c:	e7ec      	b.n	8016048 <__ssvfiscanf_r+0x40>
 801606e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8016070:	4621      	mov	r1, r4
 8016072:	4630      	mov	r0, r6
 8016074:	4798      	blx	r3
 8016076:	2800      	cmp	r0, #0
 8016078:	d0e9      	beq.n	801604e <__ssvfiscanf_r+0x46>
 801607a:	e7ed      	b.n	8016058 <__ssvfiscanf_r+0x50>
 801607c:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8016080:	f040 8085 	bne.w	801618e <__ssvfiscanf_r+0x186>
 8016084:	9341      	str	r3, [sp, #260]	@ 0x104
 8016086:	9343      	str	r3, [sp, #268]	@ 0x10c
 8016088:	7853      	ldrb	r3, [r2, #1]
 801608a:	2b2a      	cmp	r3, #42	@ 0x2a
 801608c:	bf02      	ittt	eq
 801608e:	2310      	moveq	r3, #16
 8016090:	1c95      	addeq	r5, r2, #2
 8016092:	9341      	streq	r3, [sp, #260]	@ 0x104
 8016094:	220a      	movs	r2, #10
 8016096:	46aa      	mov	sl, r5
 8016098:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801609c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80160a0:	2b09      	cmp	r3, #9
 80160a2:	d91e      	bls.n	80160e2 <__ssvfiscanf_r+0xda>
 80160a4:	f8df b218 	ldr.w	fp, [pc, #536]	@ 80162c0 <__ssvfiscanf_r+0x2b8>
 80160a8:	2203      	movs	r2, #3
 80160aa:	4658      	mov	r0, fp
 80160ac:	f7ea f890 	bl	80001d0 <memchr>
 80160b0:	b138      	cbz	r0, 80160c2 <__ssvfiscanf_r+0xba>
 80160b2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80160b4:	eba0 000b 	sub.w	r0, r0, fp
 80160b8:	2301      	movs	r3, #1
 80160ba:	4083      	lsls	r3, r0
 80160bc:	4313      	orrs	r3, r2
 80160be:	9341      	str	r3, [sp, #260]	@ 0x104
 80160c0:	4655      	mov	r5, sl
 80160c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80160c6:	2b78      	cmp	r3, #120	@ 0x78
 80160c8:	d806      	bhi.n	80160d8 <__ssvfiscanf_r+0xd0>
 80160ca:	2b57      	cmp	r3, #87	@ 0x57
 80160cc:	d810      	bhi.n	80160f0 <__ssvfiscanf_r+0xe8>
 80160ce:	2b25      	cmp	r3, #37	@ 0x25
 80160d0:	d05d      	beq.n	801618e <__ssvfiscanf_r+0x186>
 80160d2:	d857      	bhi.n	8016184 <__ssvfiscanf_r+0x17c>
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d075      	beq.n	80161c4 <__ssvfiscanf_r+0x1bc>
 80160d8:	2303      	movs	r3, #3
 80160da:	9347      	str	r3, [sp, #284]	@ 0x11c
 80160dc:	230a      	movs	r3, #10
 80160de:	9342      	str	r3, [sp, #264]	@ 0x108
 80160e0:	e088      	b.n	80161f4 <__ssvfiscanf_r+0x1ec>
 80160e2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80160e4:	fb02 1103 	mla	r1, r2, r3, r1
 80160e8:	3930      	subs	r1, #48	@ 0x30
 80160ea:	9143      	str	r1, [sp, #268]	@ 0x10c
 80160ec:	4655      	mov	r5, sl
 80160ee:	e7d2      	b.n	8016096 <__ssvfiscanf_r+0x8e>
 80160f0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80160f4:	2a20      	cmp	r2, #32
 80160f6:	d8ef      	bhi.n	80160d8 <__ssvfiscanf_r+0xd0>
 80160f8:	a101      	add	r1, pc, #4	@ (adr r1, 8016100 <__ssvfiscanf_r+0xf8>)
 80160fa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80160fe:	bf00      	nop
 8016100:	080161d3 	.word	0x080161d3
 8016104:	080160d9 	.word	0x080160d9
 8016108:	080160d9 	.word	0x080160d9
 801610c:	0801622d 	.word	0x0801622d
 8016110:	080160d9 	.word	0x080160d9
 8016114:	080160d9 	.word	0x080160d9
 8016118:	080160d9 	.word	0x080160d9
 801611c:	080160d9 	.word	0x080160d9
 8016120:	080160d9 	.word	0x080160d9
 8016124:	080160d9 	.word	0x080160d9
 8016128:	080160d9 	.word	0x080160d9
 801612c:	08016243 	.word	0x08016243
 8016130:	08016229 	.word	0x08016229
 8016134:	0801618b 	.word	0x0801618b
 8016138:	0801618b 	.word	0x0801618b
 801613c:	0801618b 	.word	0x0801618b
 8016140:	080160d9 	.word	0x080160d9
 8016144:	080161e5 	.word	0x080161e5
 8016148:	080160d9 	.word	0x080160d9
 801614c:	080160d9 	.word	0x080160d9
 8016150:	080160d9 	.word	0x080160d9
 8016154:	080160d9 	.word	0x080160d9
 8016158:	08016253 	.word	0x08016253
 801615c:	080161ed 	.word	0x080161ed
 8016160:	080161cb 	.word	0x080161cb
 8016164:	080160d9 	.word	0x080160d9
 8016168:	080160d9 	.word	0x080160d9
 801616c:	0801624f 	.word	0x0801624f
 8016170:	080160d9 	.word	0x080160d9
 8016174:	08016229 	.word	0x08016229
 8016178:	080160d9 	.word	0x080160d9
 801617c:	080160d9 	.word	0x080160d9
 8016180:	080161d3 	.word	0x080161d3
 8016184:	3b45      	subs	r3, #69	@ 0x45
 8016186:	2b02      	cmp	r3, #2
 8016188:	d8a6      	bhi.n	80160d8 <__ssvfiscanf_r+0xd0>
 801618a:	2305      	movs	r3, #5
 801618c:	e031      	b.n	80161f2 <__ssvfiscanf_r+0x1ea>
 801618e:	6863      	ldr	r3, [r4, #4]
 8016190:	2b00      	cmp	r3, #0
 8016192:	dd0d      	ble.n	80161b0 <__ssvfiscanf_r+0x1a8>
 8016194:	6823      	ldr	r3, [r4, #0]
 8016196:	781a      	ldrb	r2, [r3, #0]
 8016198:	454a      	cmp	r2, r9
 801619a:	f040 80a6 	bne.w	80162ea <__ssvfiscanf_r+0x2e2>
 801619e:	3301      	adds	r3, #1
 80161a0:	6862      	ldr	r2, [r4, #4]
 80161a2:	6023      	str	r3, [r4, #0]
 80161a4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80161a6:	3a01      	subs	r2, #1
 80161a8:	3301      	adds	r3, #1
 80161aa:	6062      	str	r2, [r4, #4]
 80161ac:	9345      	str	r3, [sp, #276]	@ 0x114
 80161ae:	e753      	b.n	8016058 <__ssvfiscanf_r+0x50>
 80161b0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80161b2:	4621      	mov	r1, r4
 80161b4:	4630      	mov	r0, r6
 80161b6:	4798      	blx	r3
 80161b8:	2800      	cmp	r0, #0
 80161ba:	d0eb      	beq.n	8016194 <__ssvfiscanf_r+0x18c>
 80161bc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80161be:	2800      	cmp	r0, #0
 80161c0:	f040 808b 	bne.w	80162da <__ssvfiscanf_r+0x2d2>
 80161c4:	f04f 30ff 	mov.w	r0, #4294967295
 80161c8:	e08b      	b.n	80162e2 <__ssvfiscanf_r+0x2da>
 80161ca:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80161cc:	f042 0220 	orr.w	r2, r2, #32
 80161d0:	9241      	str	r2, [sp, #260]	@ 0x104
 80161d2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80161d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80161d8:	9241      	str	r2, [sp, #260]	@ 0x104
 80161da:	2210      	movs	r2, #16
 80161dc:	2b6e      	cmp	r3, #110	@ 0x6e
 80161de:	9242      	str	r2, [sp, #264]	@ 0x108
 80161e0:	d902      	bls.n	80161e8 <__ssvfiscanf_r+0x1e0>
 80161e2:	e005      	b.n	80161f0 <__ssvfiscanf_r+0x1e8>
 80161e4:	2300      	movs	r3, #0
 80161e6:	9342      	str	r3, [sp, #264]	@ 0x108
 80161e8:	2303      	movs	r3, #3
 80161ea:	e002      	b.n	80161f2 <__ssvfiscanf_r+0x1ea>
 80161ec:	2308      	movs	r3, #8
 80161ee:	9342      	str	r3, [sp, #264]	@ 0x108
 80161f0:	2304      	movs	r3, #4
 80161f2:	9347      	str	r3, [sp, #284]	@ 0x11c
 80161f4:	6863      	ldr	r3, [r4, #4]
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	dd39      	ble.n	801626e <__ssvfiscanf_r+0x266>
 80161fa:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80161fc:	0659      	lsls	r1, r3, #25
 80161fe:	d404      	bmi.n	801620a <__ssvfiscanf_r+0x202>
 8016200:	6823      	ldr	r3, [r4, #0]
 8016202:	781a      	ldrb	r2, [r3, #0]
 8016204:	5cba      	ldrb	r2, [r7, r2]
 8016206:	0712      	lsls	r2, r2, #28
 8016208:	d438      	bmi.n	801627c <__ssvfiscanf_r+0x274>
 801620a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 801620c:	2b02      	cmp	r3, #2
 801620e:	dc47      	bgt.n	80162a0 <__ssvfiscanf_r+0x298>
 8016210:	466b      	mov	r3, sp
 8016212:	4622      	mov	r2, r4
 8016214:	a941      	add	r1, sp, #260	@ 0x104
 8016216:	4630      	mov	r0, r6
 8016218:	f000 f9ae 	bl	8016578 <_scanf_chars>
 801621c:	2801      	cmp	r0, #1
 801621e:	d064      	beq.n	80162ea <__ssvfiscanf_r+0x2e2>
 8016220:	2802      	cmp	r0, #2
 8016222:	f47f af19 	bne.w	8016058 <__ssvfiscanf_r+0x50>
 8016226:	e7c9      	b.n	80161bc <__ssvfiscanf_r+0x1b4>
 8016228:	220a      	movs	r2, #10
 801622a:	e7d7      	b.n	80161dc <__ssvfiscanf_r+0x1d4>
 801622c:	4629      	mov	r1, r5
 801622e:	4640      	mov	r0, r8
 8016230:	f000 fbfe 	bl	8016a30 <__sccl>
 8016234:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8016236:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801623a:	9341      	str	r3, [sp, #260]	@ 0x104
 801623c:	4605      	mov	r5, r0
 801623e:	2301      	movs	r3, #1
 8016240:	e7d7      	b.n	80161f2 <__ssvfiscanf_r+0x1ea>
 8016242:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8016244:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016248:	9341      	str	r3, [sp, #260]	@ 0x104
 801624a:	2300      	movs	r3, #0
 801624c:	e7d1      	b.n	80161f2 <__ssvfiscanf_r+0x1ea>
 801624e:	2302      	movs	r3, #2
 8016250:	e7cf      	b.n	80161f2 <__ssvfiscanf_r+0x1ea>
 8016252:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8016254:	06c3      	lsls	r3, r0, #27
 8016256:	f53f aeff 	bmi.w	8016058 <__ssvfiscanf_r+0x50>
 801625a:	9b00      	ldr	r3, [sp, #0]
 801625c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801625e:	1d19      	adds	r1, r3, #4
 8016260:	9100      	str	r1, [sp, #0]
 8016262:	681b      	ldr	r3, [r3, #0]
 8016264:	07c0      	lsls	r0, r0, #31
 8016266:	bf4c      	ite	mi
 8016268:	801a      	strhmi	r2, [r3, #0]
 801626a:	601a      	strpl	r2, [r3, #0]
 801626c:	e6f4      	b.n	8016058 <__ssvfiscanf_r+0x50>
 801626e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8016270:	4621      	mov	r1, r4
 8016272:	4630      	mov	r0, r6
 8016274:	4798      	blx	r3
 8016276:	2800      	cmp	r0, #0
 8016278:	d0bf      	beq.n	80161fa <__ssvfiscanf_r+0x1f2>
 801627a:	e79f      	b.n	80161bc <__ssvfiscanf_r+0x1b4>
 801627c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801627e:	3201      	adds	r2, #1
 8016280:	9245      	str	r2, [sp, #276]	@ 0x114
 8016282:	6862      	ldr	r2, [r4, #4]
 8016284:	3a01      	subs	r2, #1
 8016286:	2a00      	cmp	r2, #0
 8016288:	6062      	str	r2, [r4, #4]
 801628a:	dd02      	ble.n	8016292 <__ssvfiscanf_r+0x28a>
 801628c:	3301      	adds	r3, #1
 801628e:	6023      	str	r3, [r4, #0]
 8016290:	e7b6      	b.n	8016200 <__ssvfiscanf_r+0x1f8>
 8016292:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8016294:	4621      	mov	r1, r4
 8016296:	4630      	mov	r0, r6
 8016298:	4798      	blx	r3
 801629a:	2800      	cmp	r0, #0
 801629c:	d0b0      	beq.n	8016200 <__ssvfiscanf_r+0x1f8>
 801629e:	e78d      	b.n	80161bc <__ssvfiscanf_r+0x1b4>
 80162a0:	2b04      	cmp	r3, #4
 80162a2:	dc0f      	bgt.n	80162c4 <__ssvfiscanf_r+0x2bc>
 80162a4:	466b      	mov	r3, sp
 80162a6:	4622      	mov	r2, r4
 80162a8:	a941      	add	r1, sp, #260	@ 0x104
 80162aa:	4630      	mov	r0, r6
 80162ac:	f000 f9be 	bl	801662c <_scanf_i>
 80162b0:	e7b4      	b.n	801621c <__ssvfiscanf_r+0x214>
 80162b2:	bf00      	nop
 80162b4:	08015f55 	.word	0x08015f55
 80162b8:	08015fcf 	.word	0x08015fcf
 80162bc:	08019bb1 	.word	0x08019bb1
 80162c0:	08019a42 	.word	0x08019a42
 80162c4:	4b0a      	ldr	r3, [pc, #40]	@ (80162f0 <__ssvfiscanf_r+0x2e8>)
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	f43f aec6 	beq.w	8016058 <__ssvfiscanf_r+0x50>
 80162cc:	466b      	mov	r3, sp
 80162ce:	4622      	mov	r2, r4
 80162d0:	a941      	add	r1, sp, #260	@ 0x104
 80162d2:	4630      	mov	r0, r6
 80162d4:	f3af 8000 	nop.w
 80162d8:	e7a0      	b.n	801621c <__ssvfiscanf_r+0x214>
 80162da:	89a3      	ldrh	r3, [r4, #12]
 80162dc:	065b      	lsls	r3, r3, #25
 80162de:	f53f af71 	bmi.w	80161c4 <__ssvfiscanf_r+0x1bc>
 80162e2:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 80162e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162ea:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80162ec:	e7f9      	b.n	80162e2 <__ssvfiscanf_r+0x2da>
 80162ee:	bf00      	nop
 80162f0:	00000000 	.word	0x00000000

080162f4 <__sfputc_r>:
 80162f4:	6893      	ldr	r3, [r2, #8]
 80162f6:	3b01      	subs	r3, #1
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	b410      	push	{r4}
 80162fc:	6093      	str	r3, [r2, #8]
 80162fe:	da08      	bge.n	8016312 <__sfputc_r+0x1e>
 8016300:	6994      	ldr	r4, [r2, #24]
 8016302:	42a3      	cmp	r3, r4
 8016304:	db01      	blt.n	801630a <__sfputc_r+0x16>
 8016306:	290a      	cmp	r1, #10
 8016308:	d103      	bne.n	8016312 <__sfputc_r+0x1e>
 801630a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801630e:	f7fe b8be 	b.w	801448e <__swbuf_r>
 8016312:	6813      	ldr	r3, [r2, #0]
 8016314:	1c58      	adds	r0, r3, #1
 8016316:	6010      	str	r0, [r2, #0]
 8016318:	7019      	strb	r1, [r3, #0]
 801631a:	4608      	mov	r0, r1
 801631c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016320:	4770      	bx	lr

08016322 <__sfputs_r>:
 8016322:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016324:	4606      	mov	r6, r0
 8016326:	460f      	mov	r7, r1
 8016328:	4614      	mov	r4, r2
 801632a:	18d5      	adds	r5, r2, r3
 801632c:	42ac      	cmp	r4, r5
 801632e:	d101      	bne.n	8016334 <__sfputs_r+0x12>
 8016330:	2000      	movs	r0, #0
 8016332:	e007      	b.n	8016344 <__sfputs_r+0x22>
 8016334:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016338:	463a      	mov	r2, r7
 801633a:	4630      	mov	r0, r6
 801633c:	f7ff ffda 	bl	80162f4 <__sfputc_r>
 8016340:	1c43      	adds	r3, r0, #1
 8016342:	d1f3      	bne.n	801632c <__sfputs_r+0xa>
 8016344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016348 <_vfiprintf_r>:
 8016348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801634c:	460d      	mov	r5, r1
 801634e:	b09d      	sub	sp, #116	@ 0x74
 8016350:	4614      	mov	r4, r2
 8016352:	4698      	mov	r8, r3
 8016354:	4606      	mov	r6, r0
 8016356:	b118      	cbz	r0, 8016360 <_vfiprintf_r+0x18>
 8016358:	6a03      	ldr	r3, [r0, #32]
 801635a:	b90b      	cbnz	r3, 8016360 <_vfiprintf_r+0x18>
 801635c:	f7fd ffce 	bl	80142fc <__sinit>
 8016360:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016362:	07d9      	lsls	r1, r3, #31
 8016364:	d405      	bmi.n	8016372 <_vfiprintf_r+0x2a>
 8016366:	89ab      	ldrh	r3, [r5, #12]
 8016368:	059a      	lsls	r2, r3, #22
 801636a:	d402      	bmi.n	8016372 <_vfiprintf_r+0x2a>
 801636c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801636e:	f7fe f9b4 	bl	80146da <__retarget_lock_acquire_recursive>
 8016372:	89ab      	ldrh	r3, [r5, #12]
 8016374:	071b      	lsls	r3, r3, #28
 8016376:	d501      	bpl.n	801637c <_vfiprintf_r+0x34>
 8016378:	692b      	ldr	r3, [r5, #16]
 801637a:	b99b      	cbnz	r3, 80163a4 <_vfiprintf_r+0x5c>
 801637c:	4629      	mov	r1, r5
 801637e:	4630      	mov	r0, r6
 8016380:	f7fe f8c4 	bl	801450c <__swsetup_r>
 8016384:	b170      	cbz	r0, 80163a4 <_vfiprintf_r+0x5c>
 8016386:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016388:	07dc      	lsls	r4, r3, #31
 801638a:	d504      	bpl.n	8016396 <_vfiprintf_r+0x4e>
 801638c:	f04f 30ff 	mov.w	r0, #4294967295
 8016390:	b01d      	add	sp, #116	@ 0x74
 8016392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016396:	89ab      	ldrh	r3, [r5, #12]
 8016398:	0598      	lsls	r0, r3, #22
 801639a:	d4f7      	bmi.n	801638c <_vfiprintf_r+0x44>
 801639c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801639e:	f7fe f99d 	bl	80146dc <__retarget_lock_release_recursive>
 80163a2:	e7f3      	b.n	801638c <_vfiprintf_r+0x44>
 80163a4:	2300      	movs	r3, #0
 80163a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80163a8:	2320      	movs	r3, #32
 80163aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80163ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80163b2:	2330      	movs	r3, #48	@ 0x30
 80163b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016564 <_vfiprintf_r+0x21c>
 80163b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80163bc:	f04f 0901 	mov.w	r9, #1
 80163c0:	4623      	mov	r3, r4
 80163c2:	469a      	mov	sl, r3
 80163c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80163c8:	b10a      	cbz	r2, 80163ce <_vfiprintf_r+0x86>
 80163ca:	2a25      	cmp	r2, #37	@ 0x25
 80163cc:	d1f9      	bne.n	80163c2 <_vfiprintf_r+0x7a>
 80163ce:	ebba 0b04 	subs.w	fp, sl, r4
 80163d2:	d00b      	beq.n	80163ec <_vfiprintf_r+0xa4>
 80163d4:	465b      	mov	r3, fp
 80163d6:	4622      	mov	r2, r4
 80163d8:	4629      	mov	r1, r5
 80163da:	4630      	mov	r0, r6
 80163dc:	f7ff ffa1 	bl	8016322 <__sfputs_r>
 80163e0:	3001      	adds	r0, #1
 80163e2:	f000 80a7 	beq.w	8016534 <_vfiprintf_r+0x1ec>
 80163e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80163e8:	445a      	add	r2, fp
 80163ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80163ec:	f89a 3000 	ldrb.w	r3, [sl]
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	f000 809f 	beq.w	8016534 <_vfiprintf_r+0x1ec>
 80163f6:	2300      	movs	r3, #0
 80163f8:	f04f 32ff 	mov.w	r2, #4294967295
 80163fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016400:	f10a 0a01 	add.w	sl, sl, #1
 8016404:	9304      	str	r3, [sp, #16]
 8016406:	9307      	str	r3, [sp, #28]
 8016408:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801640c:	931a      	str	r3, [sp, #104]	@ 0x68
 801640e:	4654      	mov	r4, sl
 8016410:	2205      	movs	r2, #5
 8016412:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016416:	4853      	ldr	r0, [pc, #332]	@ (8016564 <_vfiprintf_r+0x21c>)
 8016418:	f7e9 feda 	bl	80001d0 <memchr>
 801641c:	9a04      	ldr	r2, [sp, #16]
 801641e:	b9d8      	cbnz	r0, 8016458 <_vfiprintf_r+0x110>
 8016420:	06d1      	lsls	r1, r2, #27
 8016422:	bf44      	itt	mi
 8016424:	2320      	movmi	r3, #32
 8016426:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801642a:	0713      	lsls	r3, r2, #28
 801642c:	bf44      	itt	mi
 801642e:	232b      	movmi	r3, #43	@ 0x2b
 8016430:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016434:	f89a 3000 	ldrb.w	r3, [sl]
 8016438:	2b2a      	cmp	r3, #42	@ 0x2a
 801643a:	d015      	beq.n	8016468 <_vfiprintf_r+0x120>
 801643c:	9a07      	ldr	r2, [sp, #28]
 801643e:	4654      	mov	r4, sl
 8016440:	2000      	movs	r0, #0
 8016442:	f04f 0c0a 	mov.w	ip, #10
 8016446:	4621      	mov	r1, r4
 8016448:	f811 3b01 	ldrb.w	r3, [r1], #1
 801644c:	3b30      	subs	r3, #48	@ 0x30
 801644e:	2b09      	cmp	r3, #9
 8016450:	d94b      	bls.n	80164ea <_vfiprintf_r+0x1a2>
 8016452:	b1b0      	cbz	r0, 8016482 <_vfiprintf_r+0x13a>
 8016454:	9207      	str	r2, [sp, #28]
 8016456:	e014      	b.n	8016482 <_vfiprintf_r+0x13a>
 8016458:	eba0 0308 	sub.w	r3, r0, r8
 801645c:	fa09 f303 	lsl.w	r3, r9, r3
 8016460:	4313      	orrs	r3, r2
 8016462:	9304      	str	r3, [sp, #16]
 8016464:	46a2      	mov	sl, r4
 8016466:	e7d2      	b.n	801640e <_vfiprintf_r+0xc6>
 8016468:	9b03      	ldr	r3, [sp, #12]
 801646a:	1d19      	adds	r1, r3, #4
 801646c:	681b      	ldr	r3, [r3, #0]
 801646e:	9103      	str	r1, [sp, #12]
 8016470:	2b00      	cmp	r3, #0
 8016472:	bfbb      	ittet	lt
 8016474:	425b      	neglt	r3, r3
 8016476:	f042 0202 	orrlt.w	r2, r2, #2
 801647a:	9307      	strge	r3, [sp, #28]
 801647c:	9307      	strlt	r3, [sp, #28]
 801647e:	bfb8      	it	lt
 8016480:	9204      	strlt	r2, [sp, #16]
 8016482:	7823      	ldrb	r3, [r4, #0]
 8016484:	2b2e      	cmp	r3, #46	@ 0x2e
 8016486:	d10a      	bne.n	801649e <_vfiprintf_r+0x156>
 8016488:	7863      	ldrb	r3, [r4, #1]
 801648a:	2b2a      	cmp	r3, #42	@ 0x2a
 801648c:	d132      	bne.n	80164f4 <_vfiprintf_r+0x1ac>
 801648e:	9b03      	ldr	r3, [sp, #12]
 8016490:	1d1a      	adds	r2, r3, #4
 8016492:	681b      	ldr	r3, [r3, #0]
 8016494:	9203      	str	r2, [sp, #12]
 8016496:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801649a:	3402      	adds	r4, #2
 801649c:	9305      	str	r3, [sp, #20]
 801649e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016574 <_vfiprintf_r+0x22c>
 80164a2:	7821      	ldrb	r1, [r4, #0]
 80164a4:	2203      	movs	r2, #3
 80164a6:	4650      	mov	r0, sl
 80164a8:	f7e9 fe92 	bl	80001d0 <memchr>
 80164ac:	b138      	cbz	r0, 80164be <_vfiprintf_r+0x176>
 80164ae:	9b04      	ldr	r3, [sp, #16]
 80164b0:	eba0 000a 	sub.w	r0, r0, sl
 80164b4:	2240      	movs	r2, #64	@ 0x40
 80164b6:	4082      	lsls	r2, r0
 80164b8:	4313      	orrs	r3, r2
 80164ba:	3401      	adds	r4, #1
 80164bc:	9304      	str	r3, [sp, #16]
 80164be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80164c2:	4829      	ldr	r0, [pc, #164]	@ (8016568 <_vfiprintf_r+0x220>)
 80164c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80164c8:	2206      	movs	r2, #6
 80164ca:	f7e9 fe81 	bl	80001d0 <memchr>
 80164ce:	2800      	cmp	r0, #0
 80164d0:	d03f      	beq.n	8016552 <_vfiprintf_r+0x20a>
 80164d2:	4b26      	ldr	r3, [pc, #152]	@ (801656c <_vfiprintf_r+0x224>)
 80164d4:	bb1b      	cbnz	r3, 801651e <_vfiprintf_r+0x1d6>
 80164d6:	9b03      	ldr	r3, [sp, #12]
 80164d8:	3307      	adds	r3, #7
 80164da:	f023 0307 	bic.w	r3, r3, #7
 80164de:	3308      	adds	r3, #8
 80164e0:	9303      	str	r3, [sp, #12]
 80164e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80164e4:	443b      	add	r3, r7
 80164e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80164e8:	e76a      	b.n	80163c0 <_vfiprintf_r+0x78>
 80164ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80164ee:	460c      	mov	r4, r1
 80164f0:	2001      	movs	r0, #1
 80164f2:	e7a8      	b.n	8016446 <_vfiprintf_r+0xfe>
 80164f4:	2300      	movs	r3, #0
 80164f6:	3401      	adds	r4, #1
 80164f8:	9305      	str	r3, [sp, #20]
 80164fa:	4619      	mov	r1, r3
 80164fc:	f04f 0c0a 	mov.w	ip, #10
 8016500:	4620      	mov	r0, r4
 8016502:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016506:	3a30      	subs	r2, #48	@ 0x30
 8016508:	2a09      	cmp	r2, #9
 801650a:	d903      	bls.n	8016514 <_vfiprintf_r+0x1cc>
 801650c:	2b00      	cmp	r3, #0
 801650e:	d0c6      	beq.n	801649e <_vfiprintf_r+0x156>
 8016510:	9105      	str	r1, [sp, #20]
 8016512:	e7c4      	b.n	801649e <_vfiprintf_r+0x156>
 8016514:	fb0c 2101 	mla	r1, ip, r1, r2
 8016518:	4604      	mov	r4, r0
 801651a:	2301      	movs	r3, #1
 801651c:	e7f0      	b.n	8016500 <_vfiprintf_r+0x1b8>
 801651e:	ab03      	add	r3, sp, #12
 8016520:	9300      	str	r3, [sp, #0]
 8016522:	462a      	mov	r2, r5
 8016524:	4b12      	ldr	r3, [pc, #72]	@ (8016570 <_vfiprintf_r+0x228>)
 8016526:	a904      	add	r1, sp, #16
 8016528:	4630      	mov	r0, r6
 801652a:	f7fd faa5 	bl	8013a78 <_printf_float>
 801652e:	4607      	mov	r7, r0
 8016530:	1c78      	adds	r0, r7, #1
 8016532:	d1d6      	bne.n	80164e2 <_vfiprintf_r+0x19a>
 8016534:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016536:	07d9      	lsls	r1, r3, #31
 8016538:	d405      	bmi.n	8016546 <_vfiprintf_r+0x1fe>
 801653a:	89ab      	ldrh	r3, [r5, #12]
 801653c:	059a      	lsls	r2, r3, #22
 801653e:	d402      	bmi.n	8016546 <_vfiprintf_r+0x1fe>
 8016540:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016542:	f7fe f8cb 	bl	80146dc <__retarget_lock_release_recursive>
 8016546:	89ab      	ldrh	r3, [r5, #12]
 8016548:	065b      	lsls	r3, r3, #25
 801654a:	f53f af1f 	bmi.w	801638c <_vfiprintf_r+0x44>
 801654e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016550:	e71e      	b.n	8016390 <_vfiprintf_r+0x48>
 8016552:	ab03      	add	r3, sp, #12
 8016554:	9300      	str	r3, [sp, #0]
 8016556:	462a      	mov	r2, r5
 8016558:	4b05      	ldr	r3, [pc, #20]	@ (8016570 <_vfiprintf_r+0x228>)
 801655a:	a904      	add	r1, sp, #16
 801655c:	4630      	mov	r0, r6
 801655e:	f7fd fd23 	bl	8013fa8 <_printf_i>
 8016562:	e7e4      	b.n	801652e <_vfiprintf_r+0x1e6>
 8016564:	08019a3c 	.word	0x08019a3c
 8016568:	08019a46 	.word	0x08019a46
 801656c:	08013a79 	.word	0x08013a79
 8016570:	08016323 	.word	0x08016323
 8016574:	08019a42 	.word	0x08019a42

08016578 <_scanf_chars>:
 8016578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801657c:	4615      	mov	r5, r2
 801657e:	688a      	ldr	r2, [r1, #8]
 8016580:	4680      	mov	r8, r0
 8016582:	460c      	mov	r4, r1
 8016584:	b932      	cbnz	r2, 8016594 <_scanf_chars+0x1c>
 8016586:	698a      	ldr	r2, [r1, #24]
 8016588:	2a00      	cmp	r2, #0
 801658a:	bf14      	ite	ne
 801658c:	f04f 32ff 	movne.w	r2, #4294967295
 8016590:	2201      	moveq	r2, #1
 8016592:	608a      	str	r2, [r1, #8]
 8016594:	6822      	ldr	r2, [r4, #0]
 8016596:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8016628 <_scanf_chars+0xb0>
 801659a:	06d1      	lsls	r1, r2, #27
 801659c:	bf5f      	itttt	pl
 801659e:	681a      	ldrpl	r2, [r3, #0]
 80165a0:	1d11      	addpl	r1, r2, #4
 80165a2:	6019      	strpl	r1, [r3, #0]
 80165a4:	6816      	ldrpl	r6, [r2, #0]
 80165a6:	2700      	movs	r7, #0
 80165a8:	69a0      	ldr	r0, [r4, #24]
 80165aa:	b188      	cbz	r0, 80165d0 <_scanf_chars+0x58>
 80165ac:	2801      	cmp	r0, #1
 80165ae:	d107      	bne.n	80165c0 <_scanf_chars+0x48>
 80165b0:	682b      	ldr	r3, [r5, #0]
 80165b2:	781a      	ldrb	r2, [r3, #0]
 80165b4:	6963      	ldr	r3, [r4, #20]
 80165b6:	5c9b      	ldrb	r3, [r3, r2]
 80165b8:	b953      	cbnz	r3, 80165d0 <_scanf_chars+0x58>
 80165ba:	2f00      	cmp	r7, #0
 80165bc:	d031      	beq.n	8016622 <_scanf_chars+0xaa>
 80165be:	e022      	b.n	8016606 <_scanf_chars+0x8e>
 80165c0:	2802      	cmp	r0, #2
 80165c2:	d120      	bne.n	8016606 <_scanf_chars+0x8e>
 80165c4:	682b      	ldr	r3, [r5, #0]
 80165c6:	781b      	ldrb	r3, [r3, #0]
 80165c8:	f819 3003 	ldrb.w	r3, [r9, r3]
 80165cc:	071b      	lsls	r3, r3, #28
 80165ce:	d41a      	bmi.n	8016606 <_scanf_chars+0x8e>
 80165d0:	6823      	ldr	r3, [r4, #0]
 80165d2:	06da      	lsls	r2, r3, #27
 80165d4:	bf5e      	ittt	pl
 80165d6:	682b      	ldrpl	r3, [r5, #0]
 80165d8:	781b      	ldrbpl	r3, [r3, #0]
 80165da:	f806 3b01 	strbpl.w	r3, [r6], #1
 80165de:	682a      	ldr	r2, [r5, #0]
 80165e0:	686b      	ldr	r3, [r5, #4]
 80165e2:	3201      	adds	r2, #1
 80165e4:	602a      	str	r2, [r5, #0]
 80165e6:	68a2      	ldr	r2, [r4, #8]
 80165e8:	3b01      	subs	r3, #1
 80165ea:	3a01      	subs	r2, #1
 80165ec:	606b      	str	r3, [r5, #4]
 80165ee:	3701      	adds	r7, #1
 80165f0:	60a2      	str	r2, [r4, #8]
 80165f2:	b142      	cbz	r2, 8016606 <_scanf_chars+0x8e>
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	dcd7      	bgt.n	80165a8 <_scanf_chars+0x30>
 80165f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80165fc:	4629      	mov	r1, r5
 80165fe:	4640      	mov	r0, r8
 8016600:	4798      	blx	r3
 8016602:	2800      	cmp	r0, #0
 8016604:	d0d0      	beq.n	80165a8 <_scanf_chars+0x30>
 8016606:	6823      	ldr	r3, [r4, #0]
 8016608:	f013 0310 	ands.w	r3, r3, #16
 801660c:	d105      	bne.n	801661a <_scanf_chars+0xa2>
 801660e:	68e2      	ldr	r2, [r4, #12]
 8016610:	3201      	adds	r2, #1
 8016612:	60e2      	str	r2, [r4, #12]
 8016614:	69a2      	ldr	r2, [r4, #24]
 8016616:	b102      	cbz	r2, 801661a <_scanf_chars+0xa2>
 8016618:	7033      	strb	r3, [r6, #0]
 801661a:	6923      	ldr	r3, [r4, #16]
 801661c:	443b      	add	r3, r7
 801661e:	6123      	str	r3, [r4, #16]
 8016620:	2000      	movs	r0, #0
 8016622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016626:	bf00      	nop
 8016628:	08019bb1 	.word	0x08019bb1

0801662c <_scanf_i>:
 801662c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016630:	4698      	mov	r8, r3
 8016632:	4b74      	ldr	r3, [pc, #464]	@ (8016804 <_scanf_i+0x1d8>)
 8016634:	460c      	mov	r4, r1
 8016636:	4682      	mov	sl, r0
 8016638:	4616      	mov	r6, r2
 801663a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801663e:	b087      	sub	sp, #28
 8016640:	ab03      	add	r3, sp, #12
 8016642:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016646:	4b70      	ldr	r3, [pc, #448]	@ (8016808 <_scanf_i+0x1dc>)
 8016648:	69a1      	ldr	r1, [r4, #24]
 801664a:	4a70      	ldr	r2, [pc, #448]	@ (801680c <_scanf_i+0x1e0>)
 801664c:	2903      	cmp	r1, #3
 801664e:	bf08      	it	eq
 8016650:	461a      	moveq	r2, r3
 8016652:	68a3      	ldr	r3, [r4, #8]
 8016654:	9201      	str	r2, [sp, #4]
 8016656:	1e5a      	subs	r2, r3, #1
 8016658:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801665c:	bf88      	it	hi
 801665e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8016662:	4627      	mov	r7, r4
 8016664:	bf82      	ittt	hi
 8016666:	eb03 0905 	addhi.w	r9, r3, r5
 801666a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801666e:	60a3      	strhi	r3, [r4, #8]
 8016670:	f857 3b1c 	ldr.w	r3, [r7], #28
 8016674:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8016678:	bf98      	it	ls
 801667a:	f04f 0900 	movls.w	r9, #0
 801667e:	6023      	str	r3, [r4, #0]
 8016680:	463d      	mov	r5, r7
 8016682:	f04f 0b00 	mov.w	fp, #0
 8016686:	6831      	ldr	r1, [r6, #0]
 8016688:	ab03      	add	r3, sp, #12
 801668a:	7809      	ldrb	r1, [r1, #0]
 801668c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8016690:	2202      	movs	r2, #2
 8016692:	f7e9 fd9d 	bl	80001d0 <memchr>
 8016696:	b328      	cbz	r0, 80166e4 <_scanf_i+0xb8>
 8016698:	f1bb 0f01 	cmp.w	fp, #1
 801669c:	d159      	bne.n	8016752 <_scanf_i+0x126>
 801669e:	6862      	ldr	r2, [r4, #4]
 80166a0:	b92a      	cbnz	r2, 80166ae <_scanf_i+0x82>
 80166a2:	6822      	ldr	r2, [r4, #0]
 80166a4:	2108      	movs	r1, #8
 80166a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80166aa:	6061      	str	r1, [r4, #4]
 80166ac:	6022      	str	r2, [r4, #0]
 80166ae:	6822      	ldr	r2, [r4, #0]
 80166b0:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80166b4:	6022      	str	r2, [r4, #0]
 80166b6:	68a2      	ldr	r2, [r4, #8]
 80166b8:	1e51      	subs	r1, r2, #1
 80166ba:	60a1      	str	r1, [r4, #8]
 80166bc:	b192      	cbz	r2, 80166e4 <_scanf_i+0xb8>
 80166be:	6832      	ldr	r2, [r6, #0]
 80166c0:	1c51      	adds	r1, r2, #1
 80166c2:	6031      	str	r1, [r6, #0]
 80166c4:	7812      	ldrb	r2, [r2, #0]
 80166c6:	f805 2b01 	strb.w	r2, [r5], #1
 80166ca:	6872      	ldr	r2, [r6, #4]
 80166cc:	3a01      	subs	r2, #1
 80166ce:	2a00      	cmp	r2, #0
 80166d0:	6072      	str	r2, [r6, #4]
 80166d2:	dc07      	bgt.n	80166e4 <_scanf_i+0xb8>
 80166d4:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80166d8:	4631      	mov	r1, r6
 80166da:	4650      	mov	r0, sl
 80166dc:	4790      	blx	r2
 80166de:	2800      	cmp	r0, #0
 80166e0:	f040 8085 	bne.w	80167ee <_scanf_i+0x1c2>
 80166e4:	f10b 0b01 	add.w	fp, fp, #1
 80166e8:	f1bb 0f03 	cmp.w	fp, #3
 80166ec:	d1cb      	bne.n	8016686 <_scanf_i+0x5a>
 80166ee:	6863      	ldr	r3, [r4, #4]
 80166f0:	b90b      	cbnz	r3, 80166f6 <_scanf_i+0xca>
 80166f2:	230a      	movs	r3, #10
 80166f4:	6063      	str	r3, [r4, #4]
 80166f6:	6863      	ldr	r3, [r4, #4]
 80166f8:	4945      	ldr	r1, [pc, #276]	@ (8016810 <_scanf_i+0x1e4>)
 80166fa:	6960      	ldr	r0, [r4, #20]
 80166fc:	1ac9      	subs	r1, r1, r3
 80166fe:	f000 f997 	bl	8016a30 <__sccl>
 8016702:	f04f 0b00 	mov.w	fp, #0
 8016706:	68a3      	ldr	r3, [r4, #8]
 8016708:	6822      	ldr	r2, [r4, #0]
 801670a:	2b00      	cmp	r3, #0
 801670c:	d03d      	beq.n	801678a <_scanf_i+0x15e>
 801670e:	6831      	ldr	r1, [r6, #0]
 8016710:	6960      	ldr	r0, [r4, #20]
 8016712:	f891 c000 	ldrb.w	ip, [r1]
 8016716:	f810 000c 	ldrb.w	r0, [r0, ip]
 801671a:	2800      	cmp	r0, #0
 801671c:	d035      	beq.n	801678a <_scanf_i+0x15e>
 801671e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8016722:	d124      	bne.n	801676e <_scanf_i+0x142>
 8016724:	0510      	lsls	r0, r2, #20
 8016726:	d522      	bpl.n	801676e <_scanf_i+0x142>
 8016728:	f10b 0b01 	add.w	fp, fp, #1
 801672c:	f1b9 0f00 	cmp.w	r9, #0
 8016730:	d003      	beq.n	801673a <_scanf_i+0x10e>
 8016732:	3301      	adds	r3, #1
 8016734:	f109 39ff 	add.w	r9, r9, #4294967295
 8016738:	60a3      	str	r3, [r4, #8]
 801673a:	6873      	ldr	r3, [r6, #4]
 801673c:	3b01      	subs	r3, #1
 801673e:	2b00      	cmp	r3, #0
 8016740:	6073      	str	r3, [r6, #4]
 8016742:	dd1b      	ble.n	801677c <_scanf_i+0x150>
 8016744:	6833      	ldr	r3, [r6, #0]
 8016746:	3301      	adds	r3, #1
 8016748:	6033      	str	r3, [r6, #0]
 801674a:	68a3      	ldr	r3, [r4, #8]
 801674c:	3b01      	subs	r3, #1
 801674e:	60a3      	str	r3, [r4, #8]
 8016750:	e7d9      	b.n	8016706 <_scanf_i+0xda>
 8016752:	f1bb 0f02 	cmp.w	fp, #2
 8016756:	d1ae      	bne.n	80166b6 <_scanf_i+0x8a>
 8016758:	6822      	ldr	r2, [r4, #0]
 801675a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 801675e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8016762:	d1c4      	bne.n	80166ee <_scanf_i+0xc2>
 8016764:	2110      	movs	r1, #16
 8016766:	6061      	str	r1, [r4, #4]
 8016768:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801676c:	e7a2      	b.n	80166b4 <_scanf_i+0x88>
 801676e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8016772:	6022      	str	r2, [r4, #0]
 8016774:	780b      	ldrb	r3, [r1, #0]
 8016776:	f805 3b01 	strb.w	r3, [r5], #1
 801677a:	e7de      	b.n	801673a <_scanf_i+0x10e>
 801677c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8016780:	4631      	mov	r1, r6
 8016782:	4650      	mov	r0, sl
 8016784:	4798      	blx	r3
 8016786:	2800      	cmp	r0, #0
 8016788:	d0df      	beq.n	801674a <_scanf_i+0x11e>
 801678a:	6823      	ldr	r3, [r4, #0]
 801678c:	05d9      	lsls	r1, r3, #23
 801678e:	d50d      	bpl.n	80167ac <_scanf_i+0x180>
 8016790:	42bd      	cmp	r5, r7
 8016792:	d909      	bls.n	80167a8 <_scanf_i+0x17c>
 8016794:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016798:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801679c:	4632      	mov	r2, r6
 801679e:	4650      	mov	r0, sl
 80167a0:	4798      	blx	r3
 80167a2:	f105 39ff 	add.w	r9, r5, #4294967295
 80167a6:	464d      	mov	r5, r9
 80167a8:	42bd      	cmp	r5, r7
 80167aa:	d028      	beq.n	80167fe <_scanf_i+0x1d2>
 80167ac:	6822      	ldr	r2, [r4, #0]
 80167ae:	f012 0210 	ands.w	r2, r2, #16
 80167b2:	d113      	bne.n	80167dc <_scanf_i+0x1b0>
 80167b4:	702a      	strb	r2, [r5, #0]
 80167b6:	6863      	ldr	r3, [r4, #4]
 80167b8:	9e01      	ldr	r6, [sp, #4]
 80167ba:	4639      	mov	r1, r7
 80167bc:	4650      	mov	r0, sl
 80167be:	47b0      	blx	r6
 80167c0:	f8d8 3000 	ldr.w	r3, [r8]
 80167c4:	6821      	ldr	r1, [r4, #0]
 80167c6:	1d1a      	adds	r2, r3, #4
 80167c8:	f8c8 2000 	str.w	r2, [r8]
 80167cc:	f011 0f20 	tst.w	r1, #32
 80167d0:	681b      	ldr	r3, [r3, #0]
 80167d2:	d00f      	beq.n	80167f4 <_scanf_i+0x1c8>
 80167d4:	6018      	str	r0, [r3, #0]
 80167d6:	68e3      	ldr	r3, [r4, #12]
 80167d8:	3301      	adds	r3, #1
 80167da:	60e3      	str	r3, [r4, #12]
 80167dc:	6923      	ldr	r3, [r4, #16]
 80167de:	1bed      	subs	r5, r5, r7
 80167e0:	445d      	add	r5, fp
 80167e2:	442b      	add	r3, r5
 80167e4:	6123      	str	r3, [r4, #16]
 80167e6:	2000      	movs	r0, #0
 80167e8:	b007      	add	sp, #28
 80167ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167ee:	f04f 0b00 	mov.w	fp, #0
 80167f2:	e7ca      	b.n	801678a <_scanf_i+0x15e>
 80167f4:	07ca      	lsls	r2, r1, #31
 80167f6:	bf4c      	ite	mi
 80167f8:	8018      	strhmi	r0, [r3, #0]
 80167fa:	6018      	strpl	r0, [r3, #0]
 80167fc:	e7eb      	b.n	80167d6 <_scanf_i+0x1aa>
 80167fe:	2001      	movs	r0, #1
 8016800:	e7f2      	b.n	80167e8 <_scanf_i+0x1bc>
 8016802:	bf00      	nop
 8016804:	08017024 	.word	0x08017024
 8016808:	08016d89 	.word	0x08016d89
 801680c:	08016e69 	.word	0x08016e69
 8016810:	08019a5d 	.word	0x08019a5d

08016814 <__sflush_r>:
 8016814:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801681c:	0716      	lsls	r6, r2, #28
 801681e:	4605      	mov	r5, r0
 8016820:	460c      	mov	r4, r1
 8016822:	d454      	bmi.n	80168ce <__sflush_r+0xba>
 8016824:	684b      	ldr	r3, [r1, #4]
 8016826:	2b00      	cmp	r3, #0
 8016828:	dc02      	bgt.n	8016830 <__sflush_r+0x1c>
 801682a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801682c:	2b00      	cmp	r3, #0
 801682e:	dd48      	ble.n	80168c2 <__sflush_r+0xae>
 8016830:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016832:	2e00      	cmp	r6, #0
 8016834:	d045      	beq.n	80168c2 <__sflush_r+0xae>
 8016836:	2300      	movs	r3, #0
 8016838:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801683c:	682f      	ldr	r7, [r5, #0]
 801683e:	6a21      	ldr	r1, [r4, #32]
 8016840:	602b      	str	r3, [r5, #0]
 8016842:	d030      	beq.n	80168a6 <__sflush_r+0x92>
 8016844:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8016846:	89a3      	ldrh	r3, [r4, #12]
 8016848:	0759      	lsls	r1, r3, #29
 801684a:	d505      	bpl.n	8016858 <__sflush_r+0x44>
 801684c:	6863      	ldr	r3, [r4, #4]
 801684e:	1ad2      	subs	r2, r2, r3
 8016850:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016852:	b10b      	cbz	r3, 8016858 <__sflush_r+0x44>
 8016854:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016856:	1ad2      	subs	r2, r2, r3
 8016858:	2300      	movs	r3, #0
 801685a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801685c:	6a21      	ldr	r1, [r4, #32]
 801685e:	4628      	mov	r0, r5
 8016860:	47b0      	blx	r6
 8016862:	1c43      	adds	r3, r0, #1
 8016864:	89a3      	ldrh	r3, [r4, #12]
 8016866:	d106      	bne.n	8016876 <__sflush_r+0x62>
 8016868:	6829      	ldr	r1, [r5, #0]
 801686a:	291d      	cmp	r1, #29
 801686c:	d82b      	bhi.n	80168c6 <__sflush_r+0xb2>
 801686e:	4a2a      	ldr	r2, [pc, #168]	@ (8016918 <__sflush_r+0x104>)
 8016870:	40ca      	lsrs	r2, r1
 8016872:	07d6      	lsls	r6, r2, #31
 8016874:	d527      	bpl.n	80168c6 <__sflush_r+0xb2>
 8016876:	2200      	movs	r2, #0
 8016878:	6062      	str	r2, [r4, #4]
 801687a:	04d9      	lsls	r1, r3, #19
 801687c:	6922      	ldr	r2, [r4, #16]
 801687e:	6022      	str	r2, [r4, #0]
 8016880:	d504      	bpl.n	801688c <__sflush_r+0x78>
 8016882:	1c42      	adds	r2, r0, #1
 8016884:	d101      	bne.n	801688a <__sflush_r+0x76>
 8016886:	682b      	ldr	r3, [r5, #0]
 8016888:	b903      	cbnz	r3, 801688c <__sflush_r+0x78>
 801688a:	6560      	str	r0, [r4, #84]	@ 0x54
 801688c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801688e:	602f      	str	r7, [r5, #0]
 8016890:	b1b9      	cbz	r1, 80168c2 <__sflush_r+0xae>
 8016892:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016896:	4299      	cmp	r1, r3
 8016898:	d002      	beq.n	80168a0 <__sflush_r+0x8c>
 801689a:	4628      	mov	r0, r5
 801689c:	f7fe fd88 	bl	80153b0 <_free_r>
 80168a0:	2300      	movs	r3, #0
 80168a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80168a4:	e00d      	b.n	80168c2 <__sflush_r+0xae>
 80168a6:	2301      	movs	r3, #1
 80168a8:	4628      	mov	r0, r5
 80168aa:	47b0      	blx	r6
 80168ac:	4602      	mov	r2, r0
 80168ae:	1c50      	adds	r0, r2, #1
 80168b0:	d1c9      	bne.n	8016846 <__sflush_r+0x32>
 80168b2:	682b      	ldr	r3, [r5, #0]
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d0c6      	beq.n	8016846 <__sflush_r+0x32>
 80168b8:	2b1d      	cmp	r3, #29
 80168ba:	d001      	beq.n	80168c0 <__sflush_r+0xac>
 80168bc:	2b16      	cmp	r3, #22
 80168be:	d11e      	bne.n	80168fe <__sflush_r+0xea>
 80168c0:	602f      	str	r7, [r5, #0]
 80168c2:	2000      	movs	r0, #0
 80168c4:	e022      	b.n	801690c <__sflush_r+0xf8>
 80168c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80168ca:	b21b      	sxth	r3, r3
 80168cc:	e01b      	b.n	8016906 <__sflush_r+0xf2>
 80168ce:	690f      	ldr	r7, [r1, #16]
 80168d0:	2f00      	cmp	r7, #0
 80168d2:	d0f6      	beq.n	80168c2 <__sflush_r+0xae>
 80168d4:	0793      	lsls	r3, r2, #30
 80168d6:	680e      	ldr	r6, [r1, #0]
 80168d8:	bf08      	it	eq
 80168da:	694b      	ldreq	r3, [r1, #20]
 80168dc:	600f      	str	r7, [r1, #0]
 80168de:	bf18      	it	ne
 80168e0:	2300      	movne	r3, #0
 80168e2:	eba6 0807 	sub.w	r8, r6, r7
 80168e6:	608b      	str	r3, [r1, #8]
 80168e8:	f1b8 0f00 	cmp.w	r8, #0
 80168ec:	dde9      	ble.n	80168c2 <__sflush_r+0xae>
 80168ee:	6a21      	ldr	r1, [r4, #32]
 80168f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80168f2:	4643      	mov	r3, r8
 80168f4:	463a      	mov	r2, r7
 80168f6:	4628      	mov	r0, r5
 80168f8:	47b0      	blx	r6
 80168fa:	2800      	cmp	r0, #0
 80168fc:	dc08      	bgt.n	8016910 <__sflush_r+0xfc>
 80168fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016902:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016906:	81a3      	strh	r3, [r4, #12]
 8016908:	f04f 30ff 	mov.w	r0, #4294967295
 801690c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016910:	4407      	add	r7, r0
 8016912:	eba8 0800 	sub.w	r8, r8, r0
 8016916:	e7e7      	b.n	80168e8 <__sflush_r+0xd4>
 8016918:	20400001 	.word	0x20400001

0801691c <_fflush_r>:
 801691c:	b538      	push	{r3, r4, r5, lr}
 801691e:	690b      	ldr	r3, [r1, #16]
 8016920:	4605      	mov	r5, r0
 8016922:	460c      	mov	r4, r1
 8016924:	b913      	cbnz	r3, 801692c <_fflush_r+0x10>
 8016926:	2500      	movs	r5, #0
 8016928:	4628      	mov	r0, r5
 801692a:	bd38      	pop	{r3, r4, r5, pc}
 801692c:	b118      	cbz	r0, 8016936 <_fflush_r+0x1a>
 801692e:	6a03      	ldr	r3, [r0, #32]
 8016930:	b90b      	cbnz	r3, 8016936 <_fflush_r+0x1a>
 8016932:	f7fd fce3 	bl	80142fc <__sinit>
 8016936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801693a:	2b00      	cmp	r3, #0
 801693c:	d0f3      	beq.n	8016926 <_fflush_r+0xa>
 801693e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016940:	07d0      	lsls	r0, r2, #31
 8016942:	d404      	bmi.n	801694e <_fflush_r+0x32>
 8016944:	0599      	lsls	r1, r3, #22
 8016946:	d402      	bmi.n	801694e <_fflush_r+0x32>
 8016948:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801694a:	f7fd fec6 	bl	80146da <__retarget_lock_acquire_recursive>
 801694e:	4628      	mov	r0, r5
 8016950:	4621      	mov	r1, r4
 8016952:	f7ff ff5f 	bl	8016814 <__sflush_r>
 8016956:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016958:	07da      	lsls	r2, r3, #31
 801695a:	4605      	mov	r5, r0
 801695c:	d4e4      	bmi.n	8016928 <_fflush_r+0xc>
 801695e:	89a3      	ldrh	r3, [r4, #12]
 8016960:	059b      	lsls	r3, r3, #22
 8016962:	d4e1      	bmi.n	8016928 <_fflush_r+0xc>
 8016964:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016966:	f7fd feb9 	bl	80146dc <__retarget_lock_release_recursive>
 801696a:	e7dd      	b.n	8016928 <_fflush_r+0xc>

0801696c <__swhatbuf_r>:
 801696c:	b570      	push	{r4, r5, r6, lr}
 801696e:	460c      	mov	r4, r1
 8016970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016974:	2900      	cmp	r1, #0
 8016976:	b096      	sub	sp, #88	@ 0x58
 8016978:	4615      	mov	r5, r2
 801697a:	461e      	mov	r6, r3
 801697c:	da0d      	bge.n	801699a <__swhatbuf_r+0x2e>
 801697e:	89a3      	ldrh	r3, [r4, #12]
 8016980:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016984:	f04f 0100 	mov.w	r1, #0
 8016988:	bf14      	ite	ne
 801698a:	2340      	movne	r3, #64	@ 0x40
 801698c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8016990:	2000      	movs	r0, #0
 8016992:	6031      	str	r1, [r6, #0]
 8016994:	602b      	str	r3, [r5, #0]
 8016996:	b016      	add	sp, #88	@ 0x58
 8016998:	bd70      	pop	{r4, r5, r6, pc}
 801699a:	466a      	mov	r2, sp
 801699c:	f000 f8d6 	bl	8016b4c <_fstat_r>
 80169a0:	2800      	cmp	r0, #0
 80169a2:	dbec      	blt.n	801697e <__swhatbuf_r+0x12>
 80169a4:	9901      	ldr	r1, [sp, #4]
 80169a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80169aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80169ae:	4259      	negs	r1, r3
 80169b0:	4159      	adcs	r1, r3
 80169b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80169b6:	e7eb      	b.n	8016990 <__swhatbuf_r+0x24>

080169b8 <__smakebuf_r>:
 80169b8:	898b      	ldrh	r3, [r1, #12]
 80169ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80169bc:	079d      	lsls	r5, r3, #30
 80169be:	4606      	mov	r6, r0
 80169c0:	460c      	mov	r4, r1
 80169c2:	d507      	bpl.n	80169d4 <__smakebuf_r+0x1c>
 80169c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80169c8:	6023      	str	r3, [r4, #0]
 80169ca:	6123      	str	r3, [r4, #16]
 80169cc:	2301      	movs	r3, #1
 80169ce:	6163      	str	r3, [r4, #20]
 80169d0:	b003      	add	sp, #12
 80169d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80169d4:	ab01      	add	r3, sp, #4
 80169d6:	466a      	mov	r2, sp
 80169d8:	f7ff ffc8 	bl	801696c <__swhatbuf_r>
 80169dc:	9f00      	ldr	r7, [sp, #0]
 80169de:	4605      	mov	r5, r0
 80169e0:	4639      	mov	r1, r7
 80169e2:	4630      	mov	r0, r6
 80169e4:	f7fe fd58 	bl	8015498 <_malloc_r>
 80169e8:	b948      	cbnz	r0, 80169fe <__smakebuf_r+0x46>
 80169ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80169ee:	059a      	lsls	r2, r3, #22
 80169f0:	d4ee      	bmi.n	80169d0 <__smakebuf_r+0x18>
 80169f2:	f023 0303 	bic.w	r3, r3, #3
 80169f6:	f043 0302 	orr.w	r3, r3, #2
 80169fa:	81a3      	strh	r3, [r4, #12]
 80169fc:	e7e2      	b.n	80169c4 <__smakebuf_r+0xc>
 80169fe:	89a3      	ldrh	r3, [r4, #12]
 8016a00:	6020      	str	r0, [r4, #0]
 8016a02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016a06:	81a3      	strh	r3, [r4, #12]
 8016a08:	9b01      	ldr	r3, [sp, #4]
 8016a0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8016a0e:	b15b      	cbz	r3, 8016a28 <__smakebuf_r+0x70>
 8016a10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016a14:	4630      	mov	r0, r6
 8016a16:	f000 f8ab 	bl	8016b70 <_isatty_r>
 8016a1a:	b128      	cbz	r0, 8016a28 <__smakebuf_r+0x70>
 8016a1c:	89a3      	ldrh	r3, [r4, #12]
 8016a1e:	f023 0303 	bic.w	r3, r3, #3
 8016a22:	f043 0301 	orr.w	r3, r3, #1
 8016a26:	81a3      	strh	r3, [r4, #12]
 8016a28:	89a3      	ldrh	r3, [r4, #12]
 8016a2a:	431d      	orrs	r5, r3
 8016a2c:	81a5      	strh	r5, [r4, #12]
 8016a2e:	e7cf      	b.n	80169d0 <__smakebuf_r+0x18>

08016a30 <__sccl>:
 8016a30:	b570      	push	{r4, r5, r6, lr}
 8016a32:	780b      	ldrb	r3, [r1, #0]
 8016a34:	4604      	mov	r4, r0
 8016a36:	2b5e      	cmp	r3, #94	@ 0x5e
 8016a38:	bf0b      	itete	eq
 8016a3a:	784b      	ldrbeq	r3, [r1, #1]
 8016a3c:	1c4a      	addne	r2, r1, #1
 8016a3e:	1c8a      	addeq	r2, r1, #2
 8016a40:	2100      	movne	r1, #0
 8016a42:	bf08      	it	eq
 8016a44:	2101      	moveq	r1, #1
 8016a46:	3801      	subs	r0, #1
 8016a48:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8016a4c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8016a50:	42a8      	cmp	r0, r5
 8016a52:	d1fb      	bne.n	8016a4c <__sccl+0x1c>
 8016a54:	b90b      	cbnz	r3, 8016a5a <__sccl+0x2a>
 8016a56:	1e50      	subs	r0, r2, #1
 8016a58:	bd70      	pop	{r4, r5, r6, pc}
 8016a5a:	f081 0101 	eor.w	r1, r1, #1
 8016a5e:	54e1      	strb	r1, [r4, r3]
 8016a60:	4610      	mov	r0, r2
 8016a62:	4602      	mov	r2, r0
 8016a64:	f812 5b01 	ldrb.w	r5, [r2], #1
 8016a68:	2d2d      	cmp	r5, #45	@ 0x2d
 8016a6a:	d005      	beq.n	8016a78 <__sccl+0x48>
 8016a6c:	2d5d      	cmp	r5, #93	@ 0x5d
 8016a6e:	d016      	beq.n	8016a9e <__sccl+0x6e>
 8016a70:	2d00      	cmp	r5, #0
 8016a72:	d0f1      	beq.n	8016a58 <__sccl+0x28>
 8016a74:	462b      	mov	r3, r5
 8016a76:	e7f2      	b.n	8016a5e <__sccl+0x2e>
 8016a78:	7846      	ldrb	r6, [r0, #1]
 8016a7a:	2e5d      	cmp	r6, #93	@ 0x5d
 8016a7c:	d0fa      	beq.n	8016a74 <__sccl+0x44>
 8016a7e:	42b3      	cmp	r3, r6
 8016a80:	dcf8      	bgt.n	8016a74 <__sccl+0x44>
 8016a82:	3002      	adds	r0, #2
 8016a84:	461a      	mov	r2, r3
 8016a86:	3201      	adds	r2, #1
 8016a88:	4296      	cmp	r6, r2
 8016a8a:	54a1      	strb	r1, [r4, r2]
 8016a8c:	dcfb      	bgt.n	8016a86 <__sccl+0x56>
 8016a8e:	1af2      	subs	r2, r6, r3
 8016a90:	3a01      	subs	r2, #1
 8016a92:	1c5d      	adds	r5, r3, #1
 8016a94:	42b3      	cmp	r3, r6
 8016a96:	bfa8      	it	ge
 8016a98:	2200      	movge	r2, #0
 8016a9a:	18ab      	adds	r3, r5, r2
 8016a9c:	e7e1      	b.n	8016a62 <__sccl+0x32>
 8016a9e:	4610      	mov	r0, r2
 8016aa0:	e7da      	b.n	8016a58 <__sccl+0x28>

08016aa2 <__submore>:
 8016aa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016aa6:	460c      	mov	r4, r1
 8016aa8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8016aaa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016aae:	4299      	cmp	r1, r3
 8016ab0:	d11d      	bne.n	8016aee <__submore+0x4c>
 8016ab2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8016ab6:	f7fe fcef 	bl	8015498 <_malloc_r>
 8016aba:	b918      	cbnz	r0, 8016ac4 <__submore+0x22>
 8016abc:	f04f 30ff 	mov.w	r0, #4294967295
 8016ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ac4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016ac8:	63a3      	str	r3, [r4, #56]	@ 0x38
 8016aca:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8016ace:	6360      	str	r0, [r4, #52]	@ 0x34
 8016ad0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8016ad4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8016ad8:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8016adc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8016ae0:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8016ae4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8016ae8:	6020      	str	r0, [r4, #0]
 8016aea:	2000      	movs	r0, #0
 8016aec:	e7e8      	b.n	8016ac0 <__submore+0x1e>
 8016aee:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8016af0:	0077      	lsls	r7, r6, #1
 8016af2:	463a      	mov	r2, r7
 8016af4:	f000 f8a0 	bl	8016c38 <_realloc_r>
 8016af8:	4605      	mov	r5, r0
 8016afa:	2800      	cmp	r0, #0
 8016afc:	d0de      	beq.n	8016abc <__submore+0x1a>
 8016afe:	eb00 0806 	add.w	r8, r0, r6
 8016b02:	4601      	mov	r1, r0
 8016b04:	4632      	mov	r2, r6
 8016b06:	4640      	mov	r0, r8
 8016b08:	f7fd fde9 	bl	80146de <memcpy>
 8016b0c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8016b10:	f8c4 8000 	str.w	r8, [r4]
 8016b14:	e7e9      	b.n	8016aea <__submore+0x48>

08016b16 <memmove>:
 8016b16:	4288      	cmp	r0, r1
 8016b18:	b510      	push	{r4, lr}
 8016b1a:	eb01 0402 	add.w	r4, r1, r2
 8016b1e:	d902      	bls.n	8016b26 <memmove+0x10>
 8016b20:	4284      	cmp	r4, r0
 8016b22:	4623      	mov	r3, r4
 8016b24:	d807      	bhi.n	8016b36 <memmove+0x20>
 8016b26:	1e43      	subs	r3, r0, #1
 8016b28:	42a1      	cmp	r1, r4
 8016b2a:	d008      	beq.n	8016b3e <memmove+0x28>
 8016b2c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016b30:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016b34:	e7f8      	b.n	8016b28 <memmove+0x12>
 8016b36:	4402      	add	r2, r0
 8016b38:	4601      	mov	r1, r0
 8016b3a:	428a      	cmp	r2, r1
 8016b3c:	d100      	bne.n	8016b40 <memmove+0x2a>
 8016b3e:	bd10      	pop	{r4, pc}
 8016b40:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016b44:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016b48:	e7f7      	b.n	8016b3a <memmove+0x24>
	...

08016b4c <_fstat_r>:
 8016b4c:	b538      	push	{r3, r4, r5, lr}
 8016b4e:	4d07      	ldr	r5, [pc, #28]	@ (8016b6c <_fstat_r+0x20>)
 8016b50:	2300      	movs	r3, #0
 8016b52:	4604      	mov	r4, r0
 8016b54:	4608      	mov	r0, r1
 8016b56:	4611      	mov	r1, r2
 8016b58:	602b      	str	r3, [r5, #0]
 8016b5a:	f7ed f849 	bl	8003bf0 <_fstat>
 8016b5e:	1c43      	adds	r3, r0, #1
 8016b60:	d102      	bne.n	8016b68 <_fstat_r+0x1c>
 8016b62:	682b      	ldr	r3, [r5, #0]
 8016b64:	b103      	cbz	r3, 8016b68 <_fstat_r+0x1c>
 8016b66:	6023      	str	r3, [r4, #0]
 8016b68:	bd38      	pop	{r3, r4, r5, pc}
 8016b6a:	bf00      	nop
 8016b6c:	20001420 	.word	0x20001420

08016b70 <_isatty_r>:
 8016b70:	b538      	push	{r3, r4, r5, lr}
 8016b72:	4d06      	ldr	r5, [pc, #24]	@ (8016b8c <_isatty_r+0x1c>)
 8016b74:	2300      	movs	r3, #0
 8016b76:	4604      	mov	r4, r0
 8016b78:	4608      	mov	r0, r1
 8016b7a:	602b      	str	r3, [r5, #0]
 8016b7c:	f7ed f848 	bl	8003c10 <_isatty>
 8016b80:	1c43      	adds	r3, r0, #1
 8016b82:	d102      	bne.n	8016b8a <_isatty_r+0x1a>
 8016b84:	682b      	ldr	r3, [r5, #0]
 8016b86:	b103      	cbz	r3, 8016b8a <_isatty_r+0x1a>
 8016b88:	6023      	str	r3, [r4, #0]
 8016b8a:	bd38      	pop	{r3, r4, r5, pc}
 8016b8c:	20001420 	.word	0x20001420

08016b90 <_sbrk_r>:
 8016b90:	b538      	push	{r3, r4, r5, lr}
 8016b92:	4d06      	ldr	r5, [pc, #24]	@ (8016bac <_sbrk_r+0x1c>)
 8016b94:	2300      	movs	r3, #0
 8016b96:	4604      	mov	r4, r0
 8016b98:	4608      	mov	r0, r1
 8016b9a:	602b      	str	r3, [r5, #0]
 8016b9c:	f7ed f850 	bl	8003c40 <_sbrk>
 8016ba0:	1c43      	adds	r3, r0, #1
 8016ba2:	d102      	bne.n	8016baa <_sbrk_r+0x1a>
 8016ba4:	682b      	ldr	r3, [r5, #0]
 8016ba6:	b103      	cbz	r3, 8016baa <_sbrk_r+0x1a>
 8016ba8:	6023      	str	r3, [r4, #0]
 8016baa:	bd38      	pop	{r3, r4, r5, pc}
 8016bac:	20001420 	.word	0x20001420

08016bb0 <__assert_func>:
 8016bb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016bb2:	4614      	mov	r4, r2
 8016bb4:	461a      	mov	r2, r3
 8016bb6:	4b09      	ldr	r3, [pc, #36]	@ (8016bdc <__assert_func+0x2c>)
 8016bb8:	681b      	ldr	r3, [r3, #0]
 8016bba:	4605      	mov	r5, r0
 8016bbc:	68d8      	ldr	r0, [r3, #12]
 8016bbe:	b14c      	cbz	r4, 8016bd4 <__assert_func+0x24>
 8016bc0:	4b07      	ldr	r3, [pc, #28]	@ (8016be0 <__assert_func+0x30>)
 8016bc2:	9100      	str	r1, [sp, #0]
 8016bc4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016bc8:	4906      	ldr	r1, [pc, #24]	@ (8016be4 <__assert_func+0x34>)
 8016bca:	462b      	mov	r3, r5
 8016bcc:	f000 f95c 	bl	8016e88 <fiprintf>
 8016bd0:	f000 f96c 	bl	8016eac <abort>
 8016bd4:	4b04      	ldr	r3, [pc, #16]	@ (8016be8 <__assert_func+0x38>)
 8016bd6:	461c      	mov	r4, r3
 8016bd8:	e7f3      	b.n	8016bc2 <__assert_func+0x12>
 8016bda:	bf00      	nop
 8016bdc:	20000188 	.word	0x20000188
 8016be0:	08019a72 	.word	0x08019a72
 8016be4:	08019a7f 	.word	0x08019a7f
 8016be8:	08019aad 	.word	0x08019aad

08016bec <_calloc_r>:
 8016bec:	b570      	push	{r4, r5, r6, lr}
 8016bee:	fba1 5402 	umull	r5, r4, r1, r2
 8016bf2:	b934      	cbnz	r4, 8016c02 <_calloc_r+0x16>
 8016bf4:	4629      	mov	r1, r5
 8016bf6:	f7fe fc4f 	bl	8015498 <_malloc_r>
 8016bfa:	4606      	mov	r6, r0
 8016bfc:	b928      	cbnz	r0, 8016c0a <_calloc_r+0x1e>
 8016bfe:	4630      	mov	r0, r6
 8016c00:	bd70      	pop	{r4, r5, r6, pc}
 8016c02:	220c      	movs	r2, #12
 8016c04:	6002      	str	r2, [r0, #0]
 8016c06:	2600      	movs	r6, #0
 8016c08:	e7f9      	b.n	8016bfe <_calloc_r+0x12>
 8016c0a:	462a      	mov	r2, r5
 8016c0c:	4621      	mov	r1, r4
 8016c0e:	f7fd fcd3 	bl	80145b8 <memset>
 8016c12:	e7f4      	b.n	8016bfe <_calloc_r+0x12>

08016c14 <__ascii_mbtowc>:
 8016c14:	b082      	sub	sp, #8
 8016c16:	b901      	cbnz	r1, 8016c1a <__ascii_mbtowc+0x6>
 8016c18:	a901      	add	r1, sp, #4
 8016c1a:	b142      	cbz	r2, 8016c2e <__ascii_mbtowc+0x1a>
 8016c1c:	b14b      	cbz	r3, 8016c32 <__ascii_mbtowc+0x1e>
 8016c1e:	7813      	ldrb	r3, [r2, #0]
 8016c20:	600b      	str	r3, [r1, #0]
 8016c22:	7812      	ldrb	r2, [r2, #0]
 8016c24:	1e10      	subs	r0, r2, #0
 8016c26:	bf18      	it	ne
 8016c28:	2001      	movne	r0, #1
 8016c2a:	b002      	add	sp, #8
 8016c2c:	4770      	bx	lr
 8016c2e:	4610      	mov	r0, r2
 8016c30:	e7fb      	b.n	8016c2a <__ascii_mbtowc+0x16>
 8016c32:	f06f 0001 	mvn.w	r0, #1
 8016c36:	e7f8      	b.n	8016c2a <__ascii_mbtowc+0x16>

08016c38 <_realloc_r>:
 8016c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c3c:	4607      	mov	r7, r0
 8016c3e:	4614      	mov	r4, r2
 8016c40:	460d      	mov	r5, r1
 8016c42:	b921      	cbnz	r1, 8016c4e <_realloc_r+0x16>
 8016c44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016c48:	4611      	mov	r1, r2
 8016c4a:	f7fe bc25 	b.w	8015498 <_malloc_r>
 8016c4e:	b92a      	cbnz	r2, 8016c5c <_realloc_r+0x24>
 8016c50:	f7fe fbae 	bl	80153b0 <_free_r>
 8016c54:	4625      	mov	r5, r4
 8016c56:	4628      	mov	r0, r5
 8016c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c5c:	f000 f92d 	bl	8016eba <_malloc_usable_size_r>
 8016c60:	4284      	cmp	r4, r0
 8016c62:	4606      	mov	r6, r0
 8016c64:	d802      	bhi.n	8016c6c <_realloc_r+0x34>
 8016c66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016c6a:	d8f4      	bhi.n	8016c56 <_realloc_r+0x1e>
 8016c6c:	4621      	mov	r1, r4
 8016c6e:	4638      	mov	r0, r7
 8016c70:	f7fe fc12 	bl	8015498 <_malloc_r>
 8016c74:	4680      	mov	r8, r0
 8016c76:	b908      	cbnz	r0, 8016c7c <_realloc_r+0x44>
 8016c78:	4645      	mov	r5, r8
 8016c7a:	e7ec      	b.n	8016c56 <_realloc_r+0x1e>
 8016c7c:	42b4      	cmp	r4, r6
 8016c7e:	4622      	mov	r2, r4
 8016c80:	4629      	mov	r1, r5
 8016c82:	bf28      	it	cs
 8016c84:	4632      	movcs	r2, r6
 8016c86:	f7fd fd2a 	bl	80146de <memcpy>
 8016c8a:	4629      	mov	r1, r5
 8016c8c:	4638      	mov	r0, r7
 8016c8e:	f7fe fb8f 	bl	80153b0 <_free_r>
 8016c92:	e7f1      	b.n	8016c78 <_realloc_r+0x40>

08016c94 <_strtol_l.isra.0>:
 8016c94:	2b24      	cmp	r3, #36	@ 0x24
 8016c96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016c9a:	4686      	mov	lr, r0
 8016c9c:	4690      	mov	r8, r2
 8016c9e:	d801      	bhi.n	8016ca4 <_strtol_l.isra.0+0x10>
 8016ca0:	2b01      	cmp	r3, #1
 8016ca2:	d106      	bne.n	8016cb2 <_strtol_l.isra.0+0x1e>
 8016ca4:	f7fd fcee 	bl	8014684 <__errno>
 8016ca8:	2316      	movs	r3, #22
 8016caa:	6003      	str	r3, [r0, #0]
 8016cac:	2000      	movs	r0, #0
 8016cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016cb2:	4834      	ldr	r0, [pc, #208]	@ (8016d84 <_strtol_l.isra.0+0xf0>)
 8016cb4:	460d      	mov	r5, r1
 8016cb6:	462a      	mov	r2, r5
 8016cb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016cbc:	5d06      	ldrb	r6, [r0, r4]
 8016cbe:	f016 0608 	ands.w	r6, r6, #8
 8016cc2:	d1f8      	bne.n	8016cb6 <_strtol_l.isra.0+0x22>
 8016cc4:	2c2d      	cmp	r4, #45	@ 0x2d
 8016cc6:	d110      	bne.n	8016cea <_strtol_l.isra.0+0x56>
 8016cc8:	782c      	ldrb	r4, [r5, #0]
 8016cca:	2601      	movs	r6, #1
 8016ccc:	1c95      	adds	r5, r2, #2
 8016cce:	f033 0210 	bics.w	r2, r3, #16
 8016cd2:	d115      	bne.n	8016d00 <_strtol_l.isra.0+0x6c>
 8016cd4:	2c30      	cmp	r4, #48	@ 0x30
 8016cd6:	d10d      	bne.n	8016cf4 <_strtol_l.isra.0+0x60>
 8016cd8:	782a      	ldrb	r2, [r5, #0]
 8016cda:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016cde:	2a58      	cmp	r2, #88	@ 0x58
 8016ce0:	d108      	bne.n	8016cf4 <_strtol_l.isra.0+0x60>
 8016ce2:	786c      	ldrb	r4, [r5, #1]
 8016ce4:	3502      	adds	r5, #2
 8016ce6:	2310      	movs	r3, #16
 8016ce8:	e00a      	b.n	8016d00 <_strtol_l.isra.0+0x6c>
 8016cea:	2c2b      	cmp	r4, #43	@ 0x2b
 8016cec:	bf04      	itt	eq
 8016cee:	782c      	ldrbeq	r4, [r5, #0]
 8016cf0:	1c95      	addeq	r5, r2, #2
 8016cf2:	e7ec      	b.n	8016cce <_strtol_l.isra.0+0x3a>
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	d1f6      	bne.n	8016ce6 <_strtol_l.isra.0+0x52>
 8016cf8:	2c30      	cmp	r4, #48	@ 0x30
 8016cfa:	bf14      	ite	ne
 8016cfc:	230a      	movne	r3, #10
 8016cfe:	2308      	moveq	r3, #8
 8016d00:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8016d04:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016d08:	2200      	movs	r2, #0
 8016d0a:	fbbc f9f3 	udiv	r9, ip, r3
 8016d0e:	4610      	mov	r0, r2
 8016d10:	fb03 ca19 	mls	sl, r3, r9, ip
 8016d14:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8016d18:	2f09      	cmp	r7, #9
 8016d1a:	d80f      	bhi.n	8016d3c <_strtol_l.isra.0+0xa8>
 8016d1c:	463c      	mov	r4, r7
 8016d1e:	42a3      	cmp	r3, r4
 8016d20:	dd1b      	ble.n	8016d5a <_strtol_l.isra.0+0xc6>
 8016d22:	1c57      	adds	r7, r2, #1
 8016d24:	d007      	beq.n	8016d36 <_strtol_l.isra.0+0xa2>
 8016d26:	4581      	cmp	r9, r0
 8016d28:	d314      	bcc.n	8016d54 <_strtol_l.isra.0+0xc0>
 8016d2a:	d101      	bne.n	8016d30 <_strtol_l.isra.0+0x9c>
 8016d2c:	45a2      	cmp	sl, r4
 8016d2e:	db11      	blt.n	8016d54 <_strtol_l.isra.0+0xc0>
 8016d30:	fb00 4003 	mla	r0, r0, r3, r4
 8016d34:	2201      	movs	r2, #1
 8016d36:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016d3a:	e7eb      	b.n	8016d14 <_strtol_l.isra.0+0x80>
 8016d3c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8016d40:	2f19      	cmp	r7, #25
 8016d42:	d801      	bhi.n	8016d48 <_strtol_l.isra.0+0xb4>
 8016d44:	3c37      	subs	r4, #55	@ 0x37
 8016d46:	e7ea      	b.n	8016d1e <_strtol_l.isra.0+0x8a>
 8016d48:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8016d4c:	2f19      	cmp	r7, #25
 8016d4e:	d804      	bhi.n	8016d5a <_strtol_l.isra.0+0xc6>
 8016d50:	3c57      	subs	r4, #87	@ 0x57
 8016d52:	e7e4      	b.n	8016d1e <_strtol_l.isra.0+0x8a>
 8016d54:	f04f 32ff 	mov.w	r2, #4294967295
 8016d58:	e7ed      	b.n	8016d36 <_strtol_l.isra.0+0xa2>
 8016d5a:	1c53      	adds	r3, r2, #1
 8016d5c:	d108      	bne.n	8016d70 <_strtol_l.isra.0+0xdc>
 8016d5e:	2322      	movs	r3, #34	@ 0x22
 8016d60:	f8ce 3000 	str.w	r3, [lr]
 8016d64:	4660      	mov	r0, ip
 8016d66:	f1b8 0f00 	cmp.w	r8, #0
 8016d6a:	d0a0      	beq.n	8016cae <_strtol_l.isra.0+0x1a>
 8016d6c:	1e69      	subs	r1, r5, #1
 8016d6e:	e006      	b.n	8016d7e <_strtol_l.isra.0+0xea>
 8016d70:	b106      	cbz	r6, 8016d74 <_strtol_l.isra.0+0xe0>
 8016d72:	4240      	negs	r0, r0
 8016d74:	f1b8 0f00 	cmp.w	r8, #0
 8016d78:	d099      	beq.n	8016cae <_strtol_l.isra.0+0x1a>
 8016d7a:	2a00      	cmp	r2, #0
 8016d7c:	d1f6      	bne.n	8016d6c <_strtol_l.isra.0+0xd8>
 8016d7e:	f8c8 1000 	str.w	r1, [r8]
 8016d82:	e794      	b.n	8016cae <_strtol_l.isra.0+0x1a>
 8016d84:	08019bb1 	.word	0x08019bb1

08016d88 <_strtol_r>:
 8016d88:	f7ff bf84 	b.w	8016c94 <_strtol_l.isra.0>

08016d8c <_strtoul_l.isra.0>:
 8016d8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016d90:	4e34      	ldr	r6, [pc, #208]	@ (8016e64 <_strtoul_l.isra.0+0xd8>)
 8016d92:	4686      	mov	lr, r0
 8016d94:	460d      	mov	r5, r1
 8016d96:	4628      	mov	r0, r5
 8016d98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016d9c:	5d37      	ldrb	r7, [r6, r4]
 8016d9e:	f017 0708 	ands.w	r7, r7, #8
 8016da2:	d1f8      	bne.n	8016d96 <_strtoul_l.isra.0+0xa>
 8016da4:	2c2d      	cmp	r4, #45	@ 0x2d
 8016da6:	d110      	bne.n	8016dca <_strtoul_l.isra.0+0x3e>
 8016da8:	782c      	ldrb	r4, [r5, #0]
 8016daa:	2701      	movs	r7, #1
 8016dac:	1c85      	adds	r5, r0, #2
 8016dae:	f033 0010 	bics.w	r0, r3, #16
 8016db2:	d115      	bne.n	8016de0 <_strtoul_l.isra.0+0x54>
 8016db4:	2c30      	cmp	r4, #48	@ 0x30
 8016db6:	d10d      	bne.n	8016dd4 <_strtoul_l.isra.0+0x48>
 8016db8:	7828      	ldrb	r0, [r5, #0]
 8016dba:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8016dbe:	2858      	cmp	r0, #88	@ 0x58
 8016dc0:	d108      	bne.n	8016dd4 <_strtoul_l.isra.0+0x48>
 8016dc2:	786c      	ldrb	r4, [r5, #1]
 8016dc4:	3502      	adds	r5, #2
 8016dc6:	2310      	movs	r3, #16
 8016dc8:	e00a      	b.n	8016de0 <_strtoul_l.isra.0+0x54>
 8016dca:	2c2b      	cmp	r4, #43	@ 0x2b
 8016dcc:	bf04      	itt	eq
 8016dce:	782c      	ldrbeq	r4, [r5, #0]
 8016dd0:	1c85      	addeq	r5, r0, #2
 8016dd2:	e7ec      	b.n	8016dae <_strtoul_l.isra.0+0x22>
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d1f6      	bne.n	8016dc6 <_strtoul_l.isra.0+0x3a>
 8016dd8:	2c30      	cmp	r4, #48	@ 0x30
 8016dda:	bf14      	ite	ne
 8016ddc:	230a      	movne	r3, #10
 8016dde:	2308      	moveq	r3, #8
 8016de0:	f04f 38ff 	mov.w	r8, #4294967295
 8016de4:	2600      	movs	r6, #0
 8016de6:	fbb8 f8f3 	udiv	r8, r8, r3
 8016dea:	fb03 f908 	mul.w	r9, r3, r8
 8016dee:	ea6f 0909 	mvn.w	r9, r9
 8016df2:	4630      	mov	r0, r6
 8016df4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8016df8:	f1bc 0f09 	cmp.w	ip, #9
 8016dfc:	d810      	bhi.n	8016e20 <_strtoul_l.isra.0+0x94>
 8016dfe:	4664      	mov	r4, ip
 8016e00:	42a3      	cmp	r3, r4
 8016e02:	dd1e      	ble.n	8016e42 <_strtoul_l.isra.0+0xb6>
 8016e04:	f1b6 3fff 	cmp.w	r6, #4294967295
 8016e08:	d007      	beq.n	8016e1a <_strtoul_l.isra.0+0x8e>
 8016e0a:	4580      	cmp	r8, r0
 8016e0c:	d316      	bcc.n	8016e3c <_strtoul_l.isra.0+0xb0>
 8016e0e:	d101      	bne.n	8016e14 <_strtoul_l.isra.0+0x88>
 8016e10:	45a1      	cmp	r9, r4
 8016e12:	db13      	blt.n	8016e3c <_strtoul_l.isra.0+0xb0>
 8016e14:	fb00 4003 	mla	r0, r0, r3, r4
 8016e18:	2601      	movs	r6, #1
 8016e1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016e1e:	e7e9      	b.n	8016df4 <_strtoul_l.isra.0+0x68>
 8016e20:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8016e24:	f1bc 0f19 	cmp.w	ip, #25
 8016e28:	d801      	bhi.n	8016e2e <_strtoul_l.isra.0+0xa2>
 8016e2a:	3c37      	subs	r4, #55	@ 0x37
 8016e2c:	e7e8      	b.n	8016e00 <_strtoul_l.isra.0+0x74>
 8016e2e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8016e32:	f1bc 0f19 	cmp.w	ip, #25
 8016e36:	d804      	bhi.n	8016e42 <_strtoul_l.isra.0+0xb6>
 8016e38:	3c57      	subs	r4, #87	@ 0x57
 8016e3a:	e7e1      	b.n	8016e00 <_strtoul_l.isra.0+0x74>
 8016e3c:	f04f 36ff 	mov.w	r6, #4294967295
 8016e40:	e7eb      	b.n	8016e1a <_strtoul_l.isra.0+0x8e>
 8016e42:	1c73      	adds	r3, r6, #1
 8016e44:	d106      	bne.n	8016e54 <_strtoul_l.isra.0+0xc8>
 8016e46:	2322      	movs	r3, #34	@ 0x22
 8016e48:	f8ce 3000 	str.w	r3, [lr]
 8016e4c:	4630      	mov	r0, r6
 8016e4e:	b932      	cbnz	r2, 8016e5e <_strtoul_l.isra.0+0xd2>
 8016e50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e54:	b107      	cbz	r7, 8016e58 <_strtoul_l.isra.0+0xcc>
 8016e56:	4240      	negs	r0, r0
 8016e58:	2a00      	cmp	r2, #0
 8016e5a:	d0f9      	beq.n	8016e50 <_strtoul_l.isra.0+0xc4>
 8016e5c:	b106      	cbz	r6, 8016e60 <_strtoul_l.isra.0+0xd4>
 8016e5e:	1e69      	subs	r1, r5, #1
 8016e60:	6011      	str	r1, [r2, #0]
 8016e62:	e7f5      	b.n	8016e50 <_strtoul_l.isra.0+0xc4>
 8016e64:	08019bb1 	.word	0x08019bb1

08016e68 <_strtoul_r>:
 8016e68:	f7ff bf90 	b.w	8016d8c <_strtoul_l.isra.0>

08016e6c <__ascii_wctomb>:
 8016e6c:	4603      	mov	r3, r0
 8016e6e:	4608      	mov	r0, r1
 8016e70:	b141      	cbz	r1, 8016e84 <__ascii_wctomb+0x18>
 8016e72:	2aff      	cmp	r2, #255	@ 0xff
 8016e74:	d904      	bls.n	8016e80 <__ascii_wctomb+0x14>
 8016e76:	228a      	movs	r2, #138	@ 0x8a
 8016e78:	601a      	str	r2, [r3, #0]
 8016e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8016e7e:	4770      	bx	lr
 8016e80:	700a      	strb	r2, [r1, #0]
 8016e82:	2001      	movs	r0, #1
 8016e84:	4770      	bx	lr
	...

08016e88 <fiprintf>:
 8016e88:	b40e      	push	{r1, r2, r3}
 8016e8a:	b503      	push	{r0, r1, lr}
 8016e8c:	4601      	mov	r1, r0
 8016e8e:	ab03      	add	r3, sp, #12
 8016e90:	4805      	ldr	r0, [pc, #20]	@ (8016ea8 <fiprintf+0x20>)
 8016e92:	f853 2b04 	ldr.w	r2, [r3], #4
 8016e96:	6800      	ldr	r0, [r0, #0]
 8016e98:	9301      	str	r3, [sp, #4]
 8016e9a:	f7ff fa55 	bl	8016348 <_vfiprintf_r>
 8016e9e:	b002      	add	sp, #8
 8016ea0:	f85d eb04 	ldr.w	lr, [sp], #4
 8016ea4:	b003      	add	sp, #12
 8016ea6:	4770      	bx	lr
 8016ea8:	20000188 	.word	0x20000188

08016eac <abort>:
 8016eac:	b508      	push	{r3, lr}
 8016eae:	2006      	movs	r0, #6
 8016eb0:	f000 f834 	bl	8016f1c <raise>
 8016eb4:	2001      	movs	r0, #1
 8016eb6:	f7ec fe4b 	bl	8003b50 <_exit>

08016eba <_malloc_usable_size_r>:
 8016eba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016ebe:	1f18      	subs	r0, r3, #4
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	bfbc      	itt	lt
 8016ec4:	580b      	ldrlt	r3, [r1, r0]
 8016ec6:	18c0      	addlt	r0, r0, r3
 8016ec8:	4770      	bx	lr

08016eca <_raise_r>:
 8016eca:	291f      	cmp	r1, #31
 8016ecc:	b538      	push	{r3, r4, r5, lr}
 8016ece:	4605      	mov	r5, r0
 8016ed0:	460c      	mov	r4, r1
 8016ed2:	d904      	bls.n	8016ede <_raise_r+0x14>
 8016ed4:	2316      	movs	r3, #22
 8016ed6:	6003      	str	r3, [r0, #0]
 8016ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8016edc:	bd38      	pop	{r3, r4, r5, pc}
 8016ede:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8016ee0:	b112      	cbz	r2, 8016ee8 <_raise_r+0x1e>
 8016ee2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016ee6:	b94b      	cbnz	r3, 8016efc <_raise_r+0x32>
 8016ee8:	4628      	mov	r0, r5
 8016eea:	f000 f831 	bl	8016f50 <_getpid_r>
 8016eee:	4622      	mov	r2, r4
 8016ef0:	4601      	mov	r1, r0
 8016ef2:	4628      	mov	r0, r5
 8016ef4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016ef8:	f000 b818 	b.w	8016f2c <_kill_r>
 8016efc:	2b01      	cmp	r3, #1
 8016efe:	d00a      	beq.n	8016f16 <_raise_r+0x4c>
 8016f00:	1c59      	adds	r1, r3, #1
 8016f02:	d103      	bne.n	8016f0c <_raise_r+0x42>
 8016f04:	2316      	movs	r3, #22
 8016f06:	6003      	str	r3, [r0, #0]
 8016f08:	2001      	movs	r0, #1
 8016f0a:	e7e7      	b.n	8016edc <_raise_r+0x12>
 8016f0c:	2100      	movs	r1, #0
 8016f0e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8016f12:	4620      	mov	r0, r4
 8016f14:	4798      	blx	r3
 8016f16:	2000      	movs	r0, #0
 8016f18:	e7e0      	b.n	8016edc <_raise_r+0x12>
	...

08016f1c <raise>:
 8016f1c:	4b02      	ldr	r3, [pc, #8]	@ (8016f28 <raise+0xc>)
 8016f1e:	4601      	mov	r1, r0
 8016f20:	6818      	ldr	r0, [r3, #0]
 8016f22:	f7ff bfd2 	b.w	8016eca <_raise_r>
 8016f26:	bf00      	nop
 8016f28:	20000188 	.word	0x20000188

08016f2c <_kill_r>:
 8016f2c:	b538      	push	{r3, r4, r5, lr}
 8016f2e:	4d07      	ldr	r5, [pc, #28]	@ (8016f4c <_kill_r+0x20>)
 8016f30:	2300      	movs	r3, #0
 8016f32:	4604      	mov	r4, r0
 8016f34:	4608      	mov	r0, r1
 8016f36:	4611      	mov	r1, r2
 8016f38:	602b      	str	r3, [r5, #0]
 8016f3a:	f7ec fdf9 	bl	8003b30 <_kill>
 8016f3e:	1c43      	adds	r3, r0, #1
 8016f40:	d102      	bne.n	8016f48 <_kill_r+0x1c>
 8016f42:	682b      	ldr	r3, [r5, #0]
 8016f44:	b103      	cbz	r3, 8016f48 <_kill_r+0x1c>
 8016f46:	6023      	str	r3, [r4, #0]
 8016f48:	bd38      	pop	{r3, r4, r5, pc}
 8016f4a:	bf00      	nop
 8016f4c:	20001420 	.word	0x20001420

08016f50 <_getpid_r>:
 8016f50:	f7ec bde6 	b.w	8003b20 <_getpid>

08016f54 <_init>:
 8016f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f56:	bf00      	nop
 8016f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016f5a:	bc08      	pop	{r3}
 8016f5c:	469e      	mov	lr, r3
 8016f5e:	4770      	bx	lr

08016f60 <_fini>:
 8016f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f62:	bf00      	nop
 8016f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016f66:	bc08      	pop	{r3}
 8016f68:	469e      	mov	lr, r3
 8016f6a:	4770      	bx	lr
