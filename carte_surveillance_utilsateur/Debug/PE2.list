
PE2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aaa0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800ac28  0800ac28  0000bc28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acac  0800acac  0000c03c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800acac  0800acac  0000bcac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800acb4  0800acb4  0000c03c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acb4  0800acb4  0000bcb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800acb8  0800acb8  0000bcb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000003c  20000000  0800acbc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009e0  2000003c  0800acf8  0000c03c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a1c  0800acf8  0000ca1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c03c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c225  00000000  00000000  0000c06c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003837  00000000  00000000  00038291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b70  00000000  00000000  0003bac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001570  00000000  00000000  0003d638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000080ee  00000000  00000000  0003eba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002379c  00000000  00000000  00046c96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00118e37  00000000  00000000  0006a432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00183269  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007724  00000000  00000000  001832ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0018a9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000003c 	.word	0x2000003c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800ac10 	.word	0x0800ac10

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000040 	.word	0x20000040
 80001c4:	0800ac10 	.word	0x0800ac10

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08a      	sub	sp, #40	@ 0x28
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fde1 	bl	80010c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f869 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f997 	bl	8000834 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000506:	f000 f965 	bl	80007d4 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 800050a:	f000 f8b5 	bl	8000678 <MX_CAN1_Init>
  MX_TIM7_Init();
 800050e:	f000 f929 	bl	8000764 <MX_TIM7_Init>
  MX_I2C1_Init();
 8000512:	f000 f8e7 	bl	80006e4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 8000516:	4829      	ldr	r0, [pc, #164]	@ (80005bc <main+0xc8>)
 8000518:	f003 ffec 	bl	80044f4 <HAL_TIM_Base_Start_IT>

  	// Démarrage du bus CAN
  	HAL_CAN_Start(&hcan1);
 800051c:	4828      	ldr	r0, [pc, #160]	@ (80005c0 <main+0xcc>)
 800051e:	f001 f834 	bl	800158a <HAL_CAN_Start>

  	// On choisit les callbacks d'interruptions
  	HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING );
 8000522:	2102      	movs	r1, #2
 8000524:	4826      	ldr	r0, [pc, #152]	@ (80005c0 <main+0xcc>)
 8000526:	f001 f944 	bl	80017b2 <HAL_CAN_ActivateNotification>
  	HAL_CAN_ActivateNotification(&hcan1,CAN_IT_TX_MAILBOX_EMPTY );
 800052a:	2101      	movs	r1, #1
 800052c:	4824      	ldr	r0, [pc, #144]	@ (80005c0 <main+0xcc>)
 800052e:	f001 f940 	bl	80017b2 <HAL_CAN_ActivateNotification>

  	// Configuration des filtres
  	CAN_FilterTypeDef sFilterConfig;
  	sFilterConfig.FilterBank = 0;
 8000532:	2300      	movs	r3, #0
 8000534:	617b      	str	r3, [r7, #20]
  	sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST; // On donne une liste d'identifiants
 8000536:	2301      	movs	r3, #1
 8000538:	61bb      	str	r3, [r7, #24]
  	sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 800053a:	2300      	movs	r3, #0
 800053c:	61fb      	str	r3, [r7, #28]
  	// Valeurs de l'ID à filtrer, codée sur 11 bits, alignée à gauche sur 16 bits
  	// ID = 0x11 = 00000010001 (11 bits)
  	// FILTRE = 0x220 = 00000010 00100000 (11 bits alignés à gauche dans un uint16_t)
  	sFilterConfig.FilterIdHigh = 0x0220; // soit 0x11 << 5
 800053e:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8000542:	603b      	str	r3, [r7, #0]
  	sFilterConfig.FilterIdLow = 0x0220;
 8000544:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8000548:	607b      	str	r3, [r7, #4]
  	sFilterConfig.FilterMaskIdHigh = 0x0220;
 800054a:	f44f 7308 	mov.w	r3, #544	@ 0x220
 800054e:	60bb      	str	r3, [r7, #8]
  	sFilterConfig.FilterMaskIdLow = 0x0220;
 8000550:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8000554:	60fb      	str	r3, [r7, #12]
  	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000556:	2300      	movs	r3, #0
 8000558:	613b      	str	r3, [r7, #16]
  	sFilterConfig.FilterActivation = ENABLE;
 800055a:	2301      	movs	r3, #1
 800055c:	623b      	str	r3, [r7, #32]
  	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig );
 800055e:	463b      	mov	r3, r7
 8000560:	4619      	mov	r1, r3
 8000562:	4817      	ldr	r0, [pc, #92]	@ (80005c0 <main+0xcc>)
 8000564:	f000 ff47 	bl	80013f6 <HAL_CAN_ConfigFilter>

  	// Message à envoyer
  	TxHeader.IDE = CAN_ID_STD; // Identifiant codé sur 11 bits
 8000568:	4b16      	ldr	r3, [pc, #88]	@ (80005c4 <main+0xd0>)
 800056a:	2200      	movs	r2, #0
 800056c:	609a      	str	r2, [r3, #8]
  	TxHeader.RTR = CAN_RTR_DATA; // Trame de données
 800056e:	4b15      	ldr	r3, [pc, #84]	@ (80005c4 <main+0xd0>)
 8000570:	2200      	movs	r2, #0
 8000572:	60da      	str	r2, [r3, #12]
  	TxHeader.StdId = 0x11; // Identifiant
 8000574:	4b13      	ldr	r3, [pc, #76]	@ (80005c4 <main+0xd0>)
 8000576:	2211      	movs	r2, #17
 8000578:	601a      	str	r2, [r3, #0]

  	TxHeader.DLC = 4;
 800057a:	4b12      	ldr	r3, [pc, #72]	@ (80005c4 <main+0xd0>)
 800057c:	2204      	movs	r2, #4
 800057e:	611a      	str	r2, [r3, #16]
  	txData[0] = (value1 >> 8) & 0xFF;  // high byte of tof1
 8000580:	4b11      	ldr	r3, [pc, #68]	@ (80005c8 <main+0xd4>)
 8000582:	881b      	ldrh	r3, [r3, #0]
 8000584:	0a1b      	lsrs	r3, r3, #8
 8000586:	b29b      	uxth	r3, r3
 8000588:	b2da      	uxtb	r2, r3
 800058a:	4b10      	ldr	r3, [pc, #64]	@ (80005cc <main+0xd8>)
 800058c:	701a      	strb	r2, [r3, #0]
  	txData[1] = value1 & 0xFF;         // low byte of tof1
 800058e:	4b0e      	ldr	r3, [pc, #56]	@ (80005c8 <main+0xd4>)
 8000590:	881b      	ldrh	r3, [r3, #0]
 8000592:	b2da      	uxtb	r2, r3
 8000594:	4b0d      	ldr	r3, [pc, #52]	@ (80005cc <main+0xd8>)
 8000596:	705a      	strb	r2, [r3, #1]
  	txData[2] = (value2 >> 8) & 0xFF;  // high byte of tof2
 8000598:	4b0d      	ldr	r3, [pc, #52]	@ (80005d0 <main+0xdc>)
 800059a:	881b      	ldrh	r3, [r3, #0]
 800059c:	0a1b      	lsrs	r3, r3, #8
 800059e:	b29b      	uxth	r3, r3
 80005a0:	b2da      	uxtb	r2, r3
 80005a2:	4b0a      	ldr	r3, [pc, #40]	@ (80005cc <main+0xd8>)
 80005a4:	709a      	strb	r2, [r3, #2]
  	txData[3] = value2 & 0xFF;         // low byte of tof2
 80005a6:	4b0a      	ldr	r3, [pc, #40]	@ (80005d0 <main+0xdc>)
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	4b07      	ldr	r3, [pc, #28]	@ (80005cc <main+0xd8>)
 80005ae:	70da      	strb	r2, [r3, #3]

	 ResetAndInitializeTOF1();
 80005b0:	f000 fa4a 	bl	8000a48 <ResetAndInitializeTOF1>

	 ResetAndInitializeTOF2();
 80005b4:	f000 fae2 	bl	8000b7c <ResetAndInitializeTOF2>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b8:	bf00      	nop
 80005ba:	e7fd      	b.n	80005b8 <main+0xc4>
 80005bc:	20000824 	.word	0x20000824
 80005c0:	200007a8 	.word	0x200007a8
 80005c4:	200008f8 	.word	0x200008f8
 80005c8:	20000910 	.word	0x20000910
 80005cc:	200007a4 	.word	0x200007a4
 80005d0:	20000912 	.word	0x20000912

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b096      	sub	sp, #88	@ 0x58
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 0314 	add.w	r3, r7, #20
 80005de:	2244      	movs	r2, #68	@ 0x44
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f00a fac6 	bl	800ab74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	463b      	mov	r3, r7
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005f6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005fa:	f002 fc11 	bl	8002e20 <HAL_PWREx_ControlVoltageScaling>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000604:	f000 fb40 	bl	8000c88 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000608:	2302      	movs	r3, #2
 800060a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000610:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000612:	2310      	movs	r3, #16
 8000614:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000616:	2302      	movs	r3, #2
 8000618:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800061a:	2302      	movs	r3, #2
 800061c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800061e:	2301      	movs	r3, #1
 8000620:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000622:	230a      	movs	r3, #10
 8000624:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000626:	2307      	movs	r3, #7
 8000628:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800062a:	2302      	movs	r3, #2
 800062c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800062e:	2302      	movs	r3, #2
 8000630:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	4618      	mov	r0, r3
 8000638:	f002 fc48 	bl	8002ecc <HAL_RCC_OscConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000642:	f000 fb21 	bl	8000c88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000646:	230f      	movs	r3, #15
 8000648:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064a:	2303      	movs	r3, #3
 800064c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800065a:	463b      	mov	r3, r7
 800065c:	2104      	movs	r1, #4
 800065e:	4618      	mov	r0, r3
 8000660:	f003 f810 	bl	8003684 <HAL_RCC_ClockConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800066a:	f000 fb0d 	bl	8000c88 <Error_Handler>
  }
}
 800066e:	bf00      	nop
 8000670:	3758      	adds	r7, #88	@ 0x58
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800067c:	4b17      	ldr	r3, [pc, #92]	@ (80006dc <MX_CAN1_Init+0x64>)
 800067e:	4a18      	ldr	r2, [pc, #96]	@ (80006e0 <MX_CAN1_Init+0x68>)
 8000680:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 80;
 8000682:	4b16      	ldr	r3, [pc, #88]	@ (80006dc <MX_CAN1_Init+0x64>)
 8000684:	2250      	movs	r2, #80	@ 0x50
 8000686:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000688:	4b14      	ldr	r3, [pc, #80]	@ (80006dc <MX_CAN1_Init+0x64>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800068e:	4b13      	ldr	r3, [pc, #76]	@ (80006dc <MX_CAN1_Init+0x64>)
 8000690:	2200      	movs	r2, #0
 8000692:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000694:	4b11      	ldr	r3, [pc, #68]	@ (80006dc <MX_CAN1_Init+0x64>)
 8000696:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 800069a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800069c:	4b0f      	ldr	r3, [pc, #60]	@ (80006dc <MX_CAN1_Init+0x64>)
 800069e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80006a2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006a4:	4b0d      	ldr	r3, [pc, #52]	@ (80006dc <MX_CAN1_Init+0x64>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006aa:	4b0c      	ldr	r3, [pc, #48]	@ (80006dc <MX_CAN1_Init+0x64>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006b0:	4b0a      	ldr	r3, [pc, #40]	@ (80006dc <MX_CAN1_Init+0x64>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80006b6:	4b09      	ldr	r3, [pc, #36]	@ (80006dc <MX_CAN1_Init+0x64>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006bc:	4b07      	ldr	r3, [pc, #28]	@ (80006dc <MX_CAN1_Init+0x64>)
 80006be:	2200      	movs	r2, #0
 80006c0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006c2:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <MX_CAN1_Init+0x64>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006c8:	4804      	ldr	r0, [pc, #16]	@ (80006dc <MX_CAN1_Init+0x64>)
 80006ca:	f000 fd99 	bl	8001200 <HAL_CAN_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80006d4:	f000 fad8 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	200007a8 	.word	0x200007a8
 80006e0:	40006400 	.word	0x40006400

080006e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000758 <MX_I2C1_Init+0x74>)
 80006ea:	4a1c      	ldr	r2, [pc, #112]	@ (800075c <MX_I2C1_Init+0x78>)
 80006ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00F12981;
 80006ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000758 <MX_I2C1_Init+0x74>)
 80006f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000760 <MX_I2C1_Init+0x7c>)
 80006f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006f4:	4b18      	ldr	r3, [pc, #96]	@ (8000758 <MX_I2C1_Init+0x74>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006fa:	4b17      	ldr	r3, [pc, #92]	@ (8000758 <MX_I2C1_Init+0x74>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000700:	4b15      	ldr	r3, [pc, #84]	@ (8000758 <MX_I2C1_Init+0x74>)
 8000702:	2200      	movs	r2, #0
 8000704:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000706:	4b14      	ldr	r3, [pc, #80]	@ (8000758 <MX_I2C1_Init+0x74>)
 8000708:	2200      	movs	r2, #0
 800070a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800070c:	4b12      	ldr	r3, [pc, #72]	@ (8000758 <MX_I2C1_Init+0x74>)
 800070e:	2200      	movs	r2, #0
 8000710:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000712:	4b11      	ldr	r3, [pc, #68]	@ (8000758 <MX_I2C1_Init+0x74>)
 8000714:	2200      	movs	r2, #0
 8000716:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000718:	4b0f      	ldr	r3, [pc, #60]	@ (8000758 <MX_I2C1_Init+0x74>)
 800071a:	2200      	movs	r2, #0
 800071c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800071e:	480e      	ldr	r0, [pc, #56]	@ (8000758 <MX_I2C1_Init+0x74>)
 8000720:	f001 fd88 	bl	8002234 <HAL_I2C_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800072a:	f000 faad 	bl	8000c88 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800072e:	2100      	movs	r1, #0
 8000730:	4809      	ldr	r0, [pc, #36]	@ (8000758 <MX_I2C1_Init+0x74>)
 8000732:	f002 facf 	bl	8002cd4 <HAL_I2CEx_ConfigAnalogFilter>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800073c:	f000 faa4 	bl	8000c88 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000740:	2100      	movs	r1, #0
 8000742:	4805      	ldr	r0, [pc, #20]	@ (8000758 <MX_I2C1_Init+0x74>)
 8000744:	f002 fb11 	bl	8002d6a <HAL_I2CEx_ConfigDigitalFilter>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800074e:	f000 fa9b 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	200007d0 	.word	0x200007d0
 800075c:	40005400 	.word	0x40005400
 8000760:	00f12981 	.word	0x00f12981

08000764 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000774:	4b15      	ldr	r3, [pc, #84]	@ (80007cc <MX_TIM7_Init+0x68>)
 8000776:	4a16      	ldr	r2, [pc, #88]	@ (80007d0 <MX_TIM7_Init+0x6c>)
 8000778:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 40000-1;
 800077a:	4b14      	ldr	r3, [pc, #80]	@ (80007cc <MX_TIM7_Init+0x68>)
 800077c:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8000780:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000782:	4b12      	ldr	r3, [pc, #72]	@ (80007cc <MX_TIM7_Init+0x68>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 2000-1;
 8000788:	4b10      	ldr	r3, [pc, #64]	@ (80007cc <MX_TIM7_Init+0x68>)
 800078a:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800078e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000790:	4b0e      	ldr	r3, [pc, #56]	@ (80007cc <MX_TIM7_Init+0x68>)
 8000792:	2200      	movs	r2, #0
 8000794:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000796:	480d      	ldr	r0, [pc, #52]	@ (80007cc <MX_TIM7_Init+0x68>)
 8000798:	f003 fe54 	bl	8004444 <HAL_TIM_Base_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80007a2:	f000 fa71 	bl	8000c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	4619      	mov	r1, r3
 80007b2:	4806      	ldr	r0, [pc, #24]	@ (80007cc <MX_TIM7_Init+0x68>)
 80007b4:	f004 f8e4 	bl	8004980 <HAL_TIMEx_MasterConfigSynchronization>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80007be:	f000 fa63 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	3710      	adds	r7, #16
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000824 	.word	0x20000824
 80007d0:	40001400 	.word	0x40001400

080007d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007d8:	4b14      	ldr	r3, [pc, #80]	@ (800082c <MX_USART2_UART_Init+0x58>)
 80007da:	4a15      	ldr	r2, [pc, #84]	@ (8000830 <MX_USART2_UART_Init+0x5c>)
 80007dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007de:	4b13      	ldr	r3, [pc, #76]	@ (800082c <MX_USART2_UART_Init+0x58>)
 80007e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007e6:	4b11      	ldr	r3, [pc, #68]	@ (800082c <MX_USART2_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	@ (800082c <MX_USART2_UART_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	@ (800082c <MX_USART2_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	@ (800082c <MX_USART2_UART_Init+0x58>)
 80007fa:	220c      	movs	r2, #12
 80007fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	@ (800082c <MX_USART2_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000804:	4b09      	ldr	r3, [pc, #36]	@ (800082c <MX_USART2_UART_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800080a:	4b08      	ldr	r3, [pc, #32]	@ (800082c <MX_USART2_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000810:	4b06      	ldr	r3, [pc, #24]	@ (800082c <MX_USART2_UART_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000816:	4805      	ldr	r0, [pc, #20]	@ (800082c <MX_USART2_UART_Init+0x58>)
 8000818:	f004 f958 	bl	8004acc <HAL_UART_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000822:	f000 fa31 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000870 	.word	0x20000870
 8000830:	40004400 	.word	0x40004400

08000834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	@ 0x28
 8000838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084a:	4b39      	ldr	r3, [pc, #228]	@ (8000930 <MX_GPIO_Init+0xfc>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084e:	4a38      	ldr	r2, [pc, #224]	@ (8000930 <MX_GPIO_Init+0xfc>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000856:	4b36      	ldr	r3, [pc, #216]	@ (8000930 <MX_GPIO_Init+0xfc>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085a:	f003 0304 	and.w	r3, r3, #4
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000862:	4b33      	ldr	r3, [pc, #204]	@ (8000930 <MX_GPIO_Init+0xfc>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000866:	4a32      	ldr	r2, [pc, #200]	@ (8000930 <MX_GPIO_Init+0xfc>)
 8000868:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800086c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800086e:	4b30      	ldr	r3, [pc, #192]	@ (8000930 <MX_GPIO_Init+0xfc>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	4b2d      	ldr	r3, [pc, #180]	@ (8000930 <MX_GPIO_Init+0xfc>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087e:	4a2c      	ldr	r2, [pc, #176]	@ (8000930 <MX_GPIO_Init+0xfc>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000886:	4b2a      	ldr	r3, [pc, #168]	@ (8000930 <MX_GPIO_Init+0xfc>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000892:	4b27      	ldr	r3, [pc, #156]	@ (8000930 <MX_GPIO_Init+0xfc>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000896:	4a26      	ldr	r2, [pc, #152]	@ (8000930 <MX_GPIO_Init+0xfc>)
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800089e:	4b24      	ldr	r3, [pc, #144]	@ (8000930 <MX_GPIO_Init+0xfc>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, SHUT1_Pin|SHUT2_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2103      	movs	r1, #3
 80008ae:	4821      	ldr	r0, [pc, #132]	@ (8000934 <MX_GPIO_Init+0x100>)
 80008b0:	f001 fc90 	bl	80021d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2120      	movs	r1, #32
 80008b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008bc:	f001 fc8a 	bl	80021d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin INTOF2_Pin INTOF1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|INTOF2_Pin|INTOF1_Pin;
 80008c0:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 80008c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008c6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	4619      	mov	r1, r3
 80008d6:	4818      	ldr	r0, [pc, #96]	@ (8000938 <MX_GPIO_Init+0x104>)
 80008d8:	f001 fad2 	bl	8001e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : SHUT1_Pin SHUT2_Pin */
  GPIO_InitStruct.Pin = SHUT1_Pin|SHUT2_Pin;
 80008dc:	2303      	movs	r3, #3
 80008de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	4619      	mov	r1, r3
 80008f2:	4810      	ldr	r0, [pc, #64]	@ (8000934 <MX_GPIO_Init+0x100>)
 80008f4:	f001 fac4 	bl	8001e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008f8:	2320      	movs	r3, #32
 80008fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fc:	2301      	movs	r3, #1
 80008fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	4619      	mov	r1, r3
 800090e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000912:	f001 fab5 	bl	8001e80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	2100      	movs	r1, #0
 800091a:	2028      	movs	r0, #40	@ 0x28
 800091c:	f001 fa79 	bl	8001e12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000920:	2028      	movs	r0, #40	@ 0x28
 8000922:	f001 fa92 	bl	8001e4a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000926:	bf00      	nop
 8000928:	3728      	adds	r7, #40	@ 0x28
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40021000 	.word	0x40021000
 8000934:	48001c00 	.word	0x48001c00
 8000938:	48000800 	.word	0x48000800

0800093c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b090      	sub	sp, #64	@ 0x40
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == INTOF1_Pin)
 8000946:	88fb      	ldrh	r3, [r7, #6]
 8000948:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800094c:	d121      	bne.n	8000992 <HAL_GPIO_EXTI_Callback+0x56>
	    {
	        VL53L1_RangingMeasurementData_t RangingData;
	        Dev = &devLeft; // Use the correct device handle
 800094e:	4b25      	ldr	r3, [pc, #148]	@ (80009e4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000950:	4a25      	ldr	r2, [pc, #148]	@ (80009e8 <HAL_GPIO_EXTI_Callback+0xac>)
 8000952:	601a      	str	r2, [r3, #0]
	        VL53L1_GetRangingMeasurementData(Dev, &RangingData);
 8000954:	4b23      	ldr	r3, [pc, #140]	@ (80009e4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800095c:	4611      	mov	r1, r2
 800095e:	4618      	mov	r0, r3
 8000960:	f005 fc58 	bl	8006214 <VL53L1_GetRangingMeasurementData>
	        value1 = RangingData.RangeMilliMeter;
 8000964:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8000968:	b29a      	uxth	r2, r3
 800096a:	4b20      	ldr	r3, [pc, #128]	@ (80009ec <HAL_GPIO_EXTI_Callback+0xb0>)
 800096c:	801a      	strh	r2, [r3, #0]
	      	txData[0] = (value1 >> 8) & 0xFF;
 800096e:	4b1f      	ldr	r3, [pc, #124]	@ (80009ec <HAL_GPIO_EXTI_Callback+0xb0>)
 8000970:	881b      	ldrh	r3, [r3, #0]
 8000972:	0a1b      	lsrs	r3, r3, #8
 8000974:	b29b      	uxth	r3, r3
 8000976:	b2da      	uxtb	r2, r3
 8000978:	4b1d      	ldr	r3, [pc, #116]	@ (80009f0 <HAL_GPIO_EXTI_Callback+0xb4>)
 800097a:	701a      	strb	r2, [r3, #0]
	      	txData[1] = value1 & 0xFF;
 800097c:	4b1b      	ldr	r3, [pc, #108]	@ (80009ec <HAL_GPIO_EXTI_Callback+0xb0>)
 800097e:	881b      	ldrh	r3, [r3, #0]
 8000980:	b2da      	uxtb	r2, r3
 8000982:	4b1b      	ldr	r3, [pc, #108]	@ (80009f0 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000984:	705a      	strb	r2, [r3, #1]



	        // Clear interrupt and start next measurement
	        VL53L1_ClearInterruptAndStartMeasurement(Dev);
 8000986:	4b17      	ldr	r3, [pc, #92]	@ (80009e4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4618      	mov	r0, r3
 800098c:	f005 fa83 	bl	8005e96 <VL53L1_ClearInterruptAndStartMeasurement>
	      	txData[2] = (value2 >> 8) & 0xFF;
	      	txData[3] = value2 & 0xFF;

	        VL53L1_ClearInterruptAndStartMeasurement(Dev);
	    }
}
 8000990:	e024      	b.n	80009dc <HAL_GPIO_EXTI_Callback+0xa0>
	    else if (GPIO_Pin == INTOF2_Pin)
 8000992:	88fb      	ldrh	r3, [r7, #6]
 8000994:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000998:	d120      	bne.n	80009dc <HAL_GPIO_EXTI_Callback+0xa0>
	        Dev = &devRight;
 800099a:	4b12      	ldr	r3, [pc, #72]	@ (80009e4 <HAL_GPIO_EXTI_Callback+0xa8>)
 800099c:	4a15      	ldr	r2, [pc, #84]	@ (80009f4 <HAL_GPIO_EXTI_Callback+0xb8>)
 800099e:	601a      	str	r2, [r3, #0]
	        VL53L1_GetRangingMeasurementData(Dev, &RangingData);
 80009a0:	4b10      	ldr	r3, [pc, #64]	@ (80009e4 <HAL_GPIO_EXTI_Callback+0xa8>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f107 0208 	add.w	r2, r7, #8
 80009a8:	4611      	mov	r1, r2
 80009aa:	4618      	mov	r0, r3
 80009ac:	f005 fc32 	bl	8006214 <VL53L1_GetRangingMeasurementData>
	        value2 = RangingData.RangeMilliMeter;
 80009b0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80009b4:	b29a      	uxth	r2, r3
 80009b6:	4b10      	ldr	r3, [pc, #64]	@ (80009f8 <HAL_GPIO_EXTI_Callback+0xbc>)
 80009b8:	801a      	strh	r2, [r3, #0]
	      	txData[2] = (value2 >> 8) & 0xFF;
 80009ba:	4b0f      	ldr	r3, [pc, #60]	@ (80009f8 <HAL_GPIO_EXTI_Callback+0xbc>)
 80009bc:	881b      	ldrh	r3, [r3, #0]
 80009be:	0a1b      	lsrs	r3, r3, #8
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	4b0a      	ldr	r3, [pc, #40]	@ (80009f0 <HAL_GPIO_EXTI_Callback+0xb4>)
 80009c6:	709a      	strb	r2, [r3, #2]
	      	txData[3] = value2 & 0xFF;
 80009c8:	4b0b      	ldr	r3, [pc, #44]	@ (80009f8 <HAL_GPIO_EXTI_Callback+0xbc>)
 80009ca:	881b      	ldrh	r3, [r3, #0]
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <HAL_GPIO_EXTI_Callback+0xb4>)
 80009d0:	70da      	strb	r2, [r3, #3]
	        VL53L1_ClearInterruptAndStartMeasurement(Dev);
 80009d2:	4b04      	ldr	r3, [pc, #16]	@ (80009e4 <HAL_GPIO_EXTI_Callback+0xa8>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f005 fa5d 	bl	8005e96 <VL53L1_ClearInterruptAndStartMeasurement>
}
 80009dc:	bf00      	nop
 80009de:	3740      	adds	r7, #64	@ 0x40
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	200007a0 	.word	0x200007a0
 80009e8:	20000058 	.word	0x20000058
 80009ec:	20000910 	.word	0x20000910
 80009f0:	200007a4 	.word	0x200007a4
 80009f4:	200003fc 	.word	0x200003fc
 80009f8:	20000912 	.word	0x20000912

080009fc <HAL_CAN_TxMailbox0CompleteCallback>:

// Callback de fin de transmission d'un message depuis la mailbox 0
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcan);
}
 8000a04:	bf00      	nop
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <HAL_TIM_PeriodElapsedCallback>:


// Interruption périodique du timer 7, envoi d'un message toutes les secondes
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
	if(htim == &htim7)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a06      	ldr	r2, [pc, #24]	@ (8000a34 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d105      	bne.n	8000a2c <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, txData, &TxMailbox);
 8000a20:	4b05      	ldr	r3, [pc, #20]	@ (8000a38 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000a22:	4a06      	ldr	r2, [pc, #24]	@ (8000a3c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000a24:	4906      	ldr	r1, [pc, #24]	@ (8000a40 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000a26:	4807      	ldr	r0, [pc, #28]	@ (8000a44 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000a28:	f000 fdf3 	bl	8001612 <HAL_CAN_AddTxMessage>

	}
}
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20000824 	.word	0x20000824
 8000a38:	20000914 	.word	0x20000914
 8000a3c:	200007a4 	.word	0x200007a4
 8000a40:	200008f8 	.word	0x200008f8
 8000a44:	200007a8 	.word	0x200007a8

08000a48 <ResetAndInitializeTOF1>:

///


void ResetAndInitializeTOF1(void) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b088      	sub	sp, #32
 8000a4c:	af00      	add	r7, sp, #0
    VL53L1_DetectionConfig_t DetectionConfig;
    uint8_t newI2C = 0x54; // New I2C address for first sensor
 8000a4e:	2354      	movs	r3, #84	@ 0x54
 8000a50:	77fb      	strb	r3, [r7, #31]

    // Reset both sensors to avoid I2C conflict
    HAL_GPIO_WritePin(GPIOH, SHUT1_Pin, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2101      	movs	r1, #1
 8000a56:	4845      	ldr	r0, [pc, #276]	@ (8000b6c <ResetAndInitializeTOF1+0x124>)
 8000a58:	f001 fbbc 	bl	80021d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOH, SHUT2_Pin, GPIO_PIN_RESET);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2102      	movs	r1, #2
 8000a60:	4842      	ldr	r0, [pc, #264]	@ (8000b6c <ResetAndInitializeTOF1+0x124>)
 8000a62:	f001 fbb7 	bl	80021d4 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000a66:	200a      	movs	r0, #10
 8000a68:	f000 fba6 	bl	80011b8 <HAL_Delay>

    // Bring up only sensor 1
    HAL_GPIO_WritePin(GPIOH, SHUT1_Pin, GPIO_PIN_SET);
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	2101      	movs	r1, #1
 8000a70:	483e      	ldr	r0, [pc, #248]	@ (8000b6c <ResetAndInitializeTOF1+0x124>)
 8000a72:	f001 fbaf 	bl	80021d4 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000a76:	2005      	movs	r0, #5
 8000a78:	f000 fb9e 	bl	80011b8 <HAL_Delay>

    // Assign device handle
    Dev = &devLeft;
 8000a7c:	4b3c      	ldr	r3, [pc, #240]	@ (8000b70 <ResetAndInitializeTOF1+0x128>)
 8000a7e:	4a3d      	ldr	r2, [pc, #244]	@ (8000b74 <ResetAndInitializeTOF1+0x12c>)
 8000a80:	601a      	str	r2, [r3, #0]
    Dev->comms_speed_khz = 400;
 8000a82:	4b3b      	ldr	r3, [pc, #236]	@ (8000b70 <ResetAndInitializeTOF1+0x128>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000a8a:	f8a3 239a 	strh.w	r2, [r3, #922]	@ 0x39a
    Dev->I2cHandle = &hi2c1;
 8000a8e:	4b38      	ldr	r3, [pc, #224]	@ (8000b70 <ResetAndInitializeTOF1+0x128>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a39      	ldr	r2, [pc, #228]	@ (8000b78 <ResetAndInitializeTOF1+0x130>)
 8000a94:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
    Dev->comms_type = 1;
 8000a98:	4b35      	ldr	r3, [pc, #212]	@ (8000b70 <ResetAndInitializeTOF1+0x128>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	f883 2399 	strb.w	r2, [r3, #921]	@ 0x399
    Dev->I2cDevAddr = 0x52; // Default address
 8000aa2:	4b33      	ldr	r3, [pc, #204]	@ (8000b70 <ResetAndInitializeTOF1+0x128>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2252      	movs	r2, #82	@ 0x52
 8000aa8:	f883 2398 	strb.w	r2, [r3, #920]	@ 0x398

    // Change address to avoid conflict
    VL53L1_SetDeviceAddress(Dev, newI2C);
 8000aac:	4b30      	ldr	r3, [pc, #192]	@ (8000b70 <ResetAndInitializeTOF1+0x128>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	7ffa      	ldrb	r2, [r7, #31]
 8000ab2:	4611      	mov	r1, r2
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f004 fd7d 	bl	80055b4 <VL53L1_SetDeviceAddress>
    Dev->I2cDevAddr = newI2C;
 8000aba:	4b2d      	ldr	r3, [pc, #180]	@ (8000b70 <ResetAndInitializeTOF1+0x128>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	7ffa      	ldrb	r2, [r7, #31]
 8000ac0:	f883 2398 	strb.w	r2, [r3, #920]	@ 0x398

    // Initialize and configure sensor
    VL53L1_WaitDeviceBooted(Dev);
 8000ac4:	4b2a      	ldr	r3, [pc, #168]	@ (8000b70 <ResetAndInitializeTOF1+0x128>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f004 fdf1 	bl	80056b0 <VL53L1_WaitDeviceBooted>
    VL53L1_DataInit(Dev);
 8000ace:	4b28      	ldr	r3, [pc, #160]	@ (8000b70 <ResetAndInitializeTOF1+0x128>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f004 fd94 	bl	8005600 <VL53L1_DataInit>
    VL53L1_StaticInit(Dev);
 8000ad8:	4b25      	ldr	r3, [pc, #148]	@ (8000b70 <ResetAndInitializeTOF1+0x128>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f004 fdc8 	bl	8005672 <VL53L1_StaticInit>
    VL53L1_SetDistanceMode(Dev, VL53L1_DISTANCEMODE_LONG);
 8000ae2:	4b23      	ldr	r3, [pc, #140]	@ (8000b70 <ResetAndInitializeTOF1+0x128>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2103      	movs	r1, #3
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f004 ff11 	bl	8005910 <VL53L1_SetDistanceMode>
    VL53L1_SetMeasurementTimingBudgetMicroSeconds(Dev, 40000);
 8000aee:	4b20      	ldr	r3, [pc, #128]	@ (8000b70 <ResetAndInitializeTOF1+0x128>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f649 4140 	movw	r1, #40000	@ 0x9c40
 8000af6:	4618      	mov	r0, r3
 8000af8:	f004 ff80 	bl	80059fc <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
    VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev, 50);
 8000afc:	4b1c      	ldr	r3, [pc, #112]	@ (8000b70 <ResetAndInitializeTOF1+0x128>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2132      	movs	r1, #50	@ 0x32
 8000b02:	4618      	mov	r0, r3
 8000b04:	f005 f85a 	bl	8005bbc <VL53L1_SetInterMeasurementPeriodMilliSeconds>

    memset(&DetectionConfig, 0, sizeof(DetectionConfig));
 8000b08:	f107 0308 	add.w	r3, r7, #8
 8000b0c:	2214      	movs	r2, #20
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4618      	mov	r0, r3
 8000b12:	f00a f82f 	bl	800ab74 <memset>
    DetectionConfig.DetectionMode = VL53L1_DETECTION_DISTANCE_ONLY;
 8000b16:	2301      	movs	r3, #1
 8000b18:	723b      	strb	r3, [r7, #8]
    DetectionConfig.IntrNoTarget = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	727b      	strb	r3, [r7, #9]
    DetectionConfig.Distance.CrossMode = VL53L1_THRESHOLD_IN_WINDOW;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	72bb      	strb	r3, [r7, #10]
    DetectionConfig.Distance.Low = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	81fb      	strh	r3, [r7, #14]
    DetectionConfig.Distance.High = 300;
 8000b26:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000b2a:	81bb      	strh	r3, [r7, #12]
    VL53L1_SetThresholdConfig(Dev, &DetectionConfig);
 8000b2c:	4b10      	ldr	r3, [pc, #64]	@ (8000b70 <ResetAndInitializeTOF1+0x128>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f107 0208 	add.w	r2, r7, #8
 8000b34:	4611      	mov	r1, r2
 8000b36:	4618      	mov	r0, r3
 8000b38:	f005 fba8 	bl	800628c <VL53L1_SetThresholdConfig>

    VL53L1_UserRoi_t roiConfig;
    roiConfig.TopLeftX = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	713b      	strb	r3, [r7, #4]
    roiConfig.TopLeftY = 15;
 8000b40:	230f      	movs	r3, #15
 8000b42:	717b      	strb	r3, [r7, #5]
    roiConfig.BotRightX = 15;
 8000b44:	230f      	movs	r3, #15
 8000b46:	71bb      	strb	r3, [r7, #6]
    roiConfig.BotRightY = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	71fb      	strb	r3, [r7, #7]
    VL53L1_SetUserROI(Dev, &roiConfig);
 8000b4c:	4b08      	ldr	r3, [pc, #32]	@ (8000b70 <ResetAndInitializeTOF1+0x128>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	1d3a      	adds	r2, r7, #4
 8000b52:	4611      	mov	r1, r2
 8000b54:	4618      	mov	r0, r3
 8000b56:	f005 f934 	bl	8005dc2 <VL53L1_SetUserROI>

    VL53L1_ClearInterruptAndStartMeasurement(Dev);
 8000b5a:	4b05      	ldr	r3, [pc, #20]	@ (8000b70 <ResetAndInitializeTOF1+0x128>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f005 f999 	bl	8005e96 <VL53L1_ClearInterruptAndStartMeasurement>
}
 8000b64:	bf00      	nop
 8000b66:	3720      	adds	r7, #32
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	48001c00 	.word	0x48001c00
 8000b70:	200007a0 	.word	0x200007a0
 8000b74:	20000058 	.word	0x20000058
 8000b78:	200007d0 	.word	0x200007d0

08000b7c <ResetAndInitializeTOF2>:

void ResetAndInitializeTOF2(void) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
    VL53L1_DetectionConfig_t DetectionConfig;

    // Keep sensor 1 on, but reset sensor 2
    HAL_GPIO_WritePin(GPIOH, SHUT2_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2102      	movs	r1, #2
 8000b86:	483c      	ldr	r0, [pc, #240]	@ (8000c78 <ResetAndInitializeTOF2+0xfc>)
 8000b88:	f001 fb24 	bl	80021d4 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000b8c:	200a      	movs	r0, #10
 8000b8e:	f000 fb13 	bl	80011b8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOH, SHUT2_Pin, GPIO_PIN_SET);
 8000b92:	2201      	movs	r2, #1
 8000b94:	2102      	movs	r1, #2
 8000b96:	4838      	ldr	r0, [pc, #224]	@ (8000c78 <ResetAndInitializeTOF2+0xfc>)
 8000b98:	f001 fb1c 	bl	80021d4 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000b9c:	2005      	movs	r0, #5
 8000b9e:	f000 fb0b 	bl	80011b8 <HAL_Delay>

    // Assign device handle
    Dev = &devRight;
 8000ba2:	4b36      	ldr	r3, [pc, #216]	@ (8000c7c <ResetAndInitializeTOF2+0x100>)
 8000ba4:	4a36      	ldr	r2, [pc, #216]	@ (8000c80 <ResetAndInitializeTOF2+0x104>)
 8000ba6:	601a      	str	r2, [r3, #0]
    Dev->comms_speed_khz = 400;
 8000ba8:	4b34      	ldr	r3, [pc, #208]	@ (8000c7c <ResetAndInitializeTOF2+0x100>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000bb0:	f8a3 239a 	strh.w	r2, [r3, #922]	@ 0x39a
    Dev->I2cHandle = &hi2c1;
 8000bb4:	4b31      	ldr	r3, [pc, #196]	@ (8000c7c <ResetAndInitializeTOF2+0x100>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a32      	ldr	r2, [pc, #200]	@ (8000c84 <ResetAndInitializeTOF2+0x108>)
 8000bba:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
    Dev->comms_type = 1;
 8000bbe:	4b2f      	ldr	r3, [pc, #188]	@ (8000c7c <ResetAndInitializeTOF2+0x100>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	f883 2399 	strb.w	r2, [r3, #921]	@ 0x399
    Dev->I2cDevAddr = 0x52; // Keep default address
 8000bc8:	4b2c      	ldr	r3, [pc, #176]	@ (8000c7c <ResetAndInitializeTOF2+0x100>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2252      	movs	r2, #82	@ 0x52
 8000bce:	f883 2398 	strb.w	r2, [r3, #920]	@ 0x398

    // Initialize and configure sensor
    VL53L1_WaitDeviceBooted(Dev);
 8000bd2:	4b2a      	ldr	r3, [pc, #168]	@ (8000c7c <ResetAndInitializeTOF2+0x100>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f004 fd6a 	bl	80056b0 <VL53L1_WaitDeviceBooted>
    VL53L1_DataInit(Dev);
 8000bdc:	4b27      	ldr	r3, [pc, #156]	@ (8000c7c <ResetAndInitializeTOF2+0x100>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f004 fd0d 	bl	8005600 <VL53L1_DataInit>
    VL53L1_StaticInit(Dev);
 8000be6:	4b25      	ldr	r3, [pc, #148]	@ (8000c7c <ResetAndInitializeTOF2+0x100>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f004 fd41 	bl	8005672 <VL53L1_StaticInit>
    VL53L1_SetDistanceMode(Dev, VL53L1_DISTANCEMODE_LONG);
 8000bf0:	4b22      	ldr	r3, [pc, #136]	@ (8000c7c <ResetAndInitializeTOF2+0x100>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2103      	movs	r1, #3
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f004 fe8a 	bl	8005910 <VL53L1_SetDistanceMode>
    VL53L1_SetMeasurementTimingBudgetMicroSeconds(Dev, 40000);
 8000bfc:	4b1f      	ldr	r3, [pc, #124]	@ (8000c7c <ResetAndInitializeTOF2+0x100>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f649 4140 	movw	r1, #40000	@ 0x9c40
 8000c04:	4618      	mov	r0, r3
 8000c06:	f004 fef9 	bl	80059fc <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
    VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev, 50);
 8000c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c7c <ResetAndInitializeTOF2+0x100>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2132      	movs	r1, #50	@ 0x32
 8000c10:	4618      	mov	r0, r3
 8000c12:	f004 ffd3 	bl	8005bbc <VL53L1_SetInterMeasurementPeriodMilliSeconds>

    memset(&DetectionConfig, 0, sizeof(DetectionConfig));
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	2214      	movs	r2, #20
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f009 ffa9 	bl	800ab74 <memset>
    DetectionConfig.DetectionMode = VL53L1_DETECTION_DISTANCE_ONLY;
 8000c22:	2301      	movs	r3, #1
 8000c24:	713b      	strb	r3, [r7, #4]
    DetectionConfig.IntrNoTarget = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	717b      	strb	r3, [r7, #5]
    DetectionConfig.Distance.CrossMode = VL53L1_THRESHOLD_IN_WINDOW;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	71bb      	strb	r3, [r7, #6]
    DetectionConfig.Distance.Low = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	817b      	strh	r3, [r7, #10]
    DetectionConfig.Distance.High = 300;
 8000c32:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000c36:	813b      	strh	r3, [r7, #8]
    VL53L1_SetThresholdConfig(Dev, &DetectionConfig);
 8000c38:	4b10      	ldr	r3, [pc, #64]	@ (8000c7c <ResetAndInitializeTOF2+0x100>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	1d3a      	adds	r2, r7, #4
 8000c3e:	4611      	mov	r1, r2
 8000c40:	4618      	mov	r0, r3
 8000c42:	f005 fb23 	bl	800628c <VL53L1_SetThresholdConfig>

    VL53L1_UserRoi_t roiConfig;
    roiConfig.TopLeftX = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	703b      	strb	r3, [r7, #0]
    roiConfig.TopLeftY = 15;
 8000c4a:	230f      	movs	r3, #15
 8000c4c:	707b      	strb	r3, [r7, #1]
    roiConfig.BotRightX = 15;
 8000c4e:	230f      	movs	r3, #15
 8000c50:	70bb      	strb	r3, [r7, #2]
    roiConfig.BotRightY = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	70fb      	strb	r3, [r7, #3]
    VL53L1_SetUserROI(Dev, &roiConfig);
 8000c56:	4b09      	ldr	r3, [pc, #36]	@ (8000c7c <ResetAndInitializeTOF2+0x100>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	463a      	mov	r2, r7
 8000c5c:	4611      	mov	r1, r2
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f005 f8af 	bl	8005dc2 <VL53L1_SetUserROI>

    VL53L1_ClearInterruptAndStartMeasurement(Dev);
 8000c64:	4b05      	ldr	r3, [pc, #20]	@ (8000c7c <ResetAndInitializeTOF2+0x100>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f005 f914 	bl	8005e96 <VL53L1_ClearInterruptAndStartMeasurement>
}
 8000c6e:	bf00      	nop
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	48001c00 	.word	0x48001c00
 8000c7c:	200007a0 	.word	0x200007a0
 8000c80:	200003fc 	.word	0x200003fc
 8000c84:	200007d0 	.word	0x200007d0

08000c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c8c:	b672      	cpsid	i
}
 8000c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <Error_Handler+0x8>

08000c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd8 <HAL_MspInit+0x44>)
 8000c9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c9e:	4a0e      	ldr	r2, [pc, #56]	@ (8000cd8 <HAL_MspInit+0x44>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd8 <HAL_MspInit+0x44>)
 8000ca8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb2:	4b09      	ldr	r3, [pc, #36]	@ (8000cd8 <HAL_MspInit+0x44>)
 8000cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cb6:	4a08      	ldr	r2, [pc, #32]	@ (8000cd8 <HAL_MspInit+0x44>)
 8000cb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cbe:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <HAL_MspInit+0x44>)
 8000cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	40021000 	.word	0x40021000

08000cdc <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	@ 0x28
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a28      	ldr	r2, [pc, #160]	@ (8000d9c <HAL_CAN_MspInit+0xc0>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d149      	bne.n	8000d92 <HAL_CAN_MspInit+0xb6>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000cfe:	4b28      	ldr	r3, [pc, #160]	@ (8000da0 <HAL_CAN_MspInit+0xc4>)
 8000d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d02:	4a27      	ldr	r2, [pc, #156]	@ (8000da0 <HAL_CAN_MspInit+0xc4>)
 8000d04:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d08:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d0a:	4b25      	ldr	r3, [pc, #148]	@ (8000da0 <HAL_CAN_MspInit+0xc4>)
 8000d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d16:	4b22      	ldr	r3, [pc, #136]	@ (8000da0 <HAL_CAN_MspInit+0xc4>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1a:	4a21      	ldr	r2, [pc, #132]	@ (8000da0 <HAL_CAN_MspInit+0xc4>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d22:	4b1f      	ldr	r3, [pc, #124]	@ (8000da0 <HAL_CAN_MspInit+0xc4>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d2e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000d32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000d40:	2309      	movs	r3, #9
 8000d42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	4619      	mov	r1, r3
 8000d4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d4e:	f001 f897 	bl	8001e80 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2100      	movs	r1, #0
 8000d56:	2013      	movs	r0, #19
 8000d58:	f001 f85b 	bl	8001e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000d5c:	2013      	movs	r0, #19
 8000d5e:	f001 f874 	bl	8001e4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2100      	movs	r1, #0
 8000d66:	2014      	movs	r0, #20
 8000d68:	f001 f853 	bl	8001e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000d6c:	2014      	movs	r0, #20
 8000d6e:	f001 f86c 	bl	8001e4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2100      	movs	r1, #0
 8000d76:	2015      	movs	r0, #21
 8000d78:	f001 f84b 	bl	8001e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000d7c:	2015      	movs	r0, #21
 8000d7e:	f001 f864 	bl	8001e4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2100      	movs	r1, #0
 8000d86:	2016      	movs	r0, #22
 8000d88:	f001 f843 	bl	8001e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000d8c:	2016      	movs	r0, #22
 8000d8e:	f001 f85c 	bl	8001e4a <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000d92:	bf00      	nop
 8000d94:	3728      	adds	r7, #40	@ 0x28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40006400 	.word	0x40006400
 8000da0:	40021000 	.word	0x40021000

08000da4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b0ac      	sub	sp, #176	@ 0xb0
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	2288      	movs	r2, #136	@ 0x88
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f009 fed5 	bl	800ab74 <memset>
  if(hi2c->Instance==I2C1)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a21      	ldr	r2, [pc, #132]	@ (8000e54 <HAL_I2C_MspInit+0xb0>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d13a      	bne.n	8000e4a <HAL_I2C_MspInit+0xa6>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000dd4:	2340      	movs	r3, #64	@ 0x40
 8000dd6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	4618      	mov	r0, r3
 8000de2:	f002 fe73 	bl	8003acc <HAL_RCCEx_PeriphCLKConfig>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000dec:	f7ff ff4c 	bl	8000c88 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df0:	4b19      	ldr	r3, [pc, #100]	@ (8000e58 <HAL_I2C_MspInit+0xb4>)
 8000df2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df4:	4a18      	ldr	r2, [pc, #96]	@ (8000e58 <HAL_I2C_MspInit+0xb4>)
 8000df6:	f043 0302 	orr.w	r3, r3, #2
 8000dfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dfc:	4b16      	ldr	r3, [pc, #88]	@ (8000e58 <HAL_I2C_MspInit+0xb4>)
 8000dfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e00:	f003 0302 	and.w	r3, r3, #2
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e08:	23c0      	movs	r3, #192	@ 0xc0
 8000e0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e0e:	2312      	movs	r3, #18
 8000e10:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e20:	2304      	movs	r3, #4
 8000e22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e26:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	480b      	ldr	r0, [pc, #44]	@ (8000e5c <HAL_I2C_MspInit+0xb8>)
 8000e2e:	f001 f827 	bl	8001e80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e32:	4b09      	ldr	r3, [pc, #36]	@ (8000e58 <HAL_I2C_MspInit+0xb4>)
 8000e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e36:	4a08      	ldr	r2, [pc, #32]	@ (8000e58 <HAL_I2C_MspInit+0xb4>)
 8000e38:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e3e:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <HAL_I2C_MspInit+0xb4>)
 8000e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000e4a:	bf00      	nop
 8000e4c:	37b0      	adds	r7, #176	@ 0xb0
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40005400 	.word	0x40005400
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	48000400 	.word	0x48000400

08000e60 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ea4 <HAL_TIM_Base_MspInit+0x44>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d113      	bne.n	8000e9a <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM7_MspInit 0 */

    /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000e72:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea8 <HAL_TIM_Base_MspInit+0x48>)
 8000e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e76:	4a0c      	ldr	r2, [pc, #48]	@ (8000ea8 <HAL_TIM_Base_MspInit+0x48>)
 8000e78:	f043 0320 	orr.w	r3, r3, #32
 8000e7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea8 <HAL_TIM_Base_MspInit+0x48>)
 8000e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e82:	f003 0320 	and.w	r3, r3, #32
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	2037      	movs	r0, #55	@ 0x37
 8000e90:	f000 ffbf 	bl	8001e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000e94:	2037      	movs	r0, #55	@ 0x37
 8000e96:	f000 ffd8 	bl	8001e4a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM7_MspInit 1 */

  }

}
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40001400 	.word	0x40001400
 8000ea8:	40021000 	.word	0x40021000

08000eac <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b0ac      	sub	sp, #176	@ 0xb0
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	2288      	movs	r2, #136	@ 0x88
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f009 fe51 	bl	800ab74 <memset>
  if(huart->Instance==USART2)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a21      	ldr	r2, [pc, #132]	@ (8000f5c <HAL_UART_MspInit+0xb0>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d13b      	bne.n	8000f54 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000edc:	2302      	movs	r3, #2
 8000ede:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f002 fdef 	bl	8003acc <HAL_RCCEx_PeriphCLKConfig>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ef4:	f7ff fec8 	bl	8000c88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ef8:	4b19      	ldr	r3, [pc, #100]	@ (8000f60 <HAL_UART_MspInit+0xb4>)
 8000efa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000efc:	4a18      	ldr	r2, [pc, #96]	@ (8000f60 <HAL_UART_MspInit+0xb4>)
 8000efe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f02:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f04:	4b16      	ldr	r3, [pc, #88]	@ (8000f60 <HAL_UART_MspInit+0xb4>)
 8000f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f0c:	613b      	str	r3, [r7, #16]
 8000f0e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f10:	4b13      	ldr	r3, [pc, #76]	@ (8000f60 <HAL_UART_MspInit+0xb4>)
 8000f12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f14:	4a12      	ldr	r2, [pc, #72]	@ (8000f60 <HAL_UART_MspInit+0xb4>)
 8000f16:	f043 0301 	orr.w	r3, r3, #1
 8000f1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f1c:	4b10      	ldr	r3, [pc, #64]	@ (8000f60 <HAL_UART_MspInit+0xb4>)
 8000f1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f28:	230c      	movs	r3, #12
 8000f2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f40:	2307      	movs	r3, #7
 8000f42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f46:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f50:	f000 ff96 	bl	8001e80 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f54:	bf00      	nop
 8000f56:	37b0      	adds	r7, #176	@ 0xb0
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40004400 	.word	0x40004400
 8000f60:	40021000 	.word	0x40021000

08000f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <NMI_Handler+0x4>

08000f6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <HardFault_Handler+0x4>

08000f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <MemManage_Handler+0x4>

08000f7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <BusFault_Handler+0x4>

08000f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <UsageFault_Handler+0x4>

08000f8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fba:	f000 f8dd 	bl	8001178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000fc8:	4802      	ldr	r0, [pc, #8]	@ (8000fd4 <CAN1_TX_IRQHandler+0x10>)
 8000fca:	f000 fc18 	bl	80017fe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200007a8 	.word	0x200007a8

08000fd8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000fdc:	4802      	ldr	r0, [pc, #8]	@ (8000fe8 <CAN1_RX0_IRQHandler+0x10>)
 8000fde:	f000 fc0e 	bl	80017fe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	200007a8 	.word	0x200007a8

08000fec <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000ff0:	4802      	ldr	r0, [pc, #8]	@ (8000ffc <CAN1_RX1_IRQHandler+0x10>)
 8000ff2:	f000 fc04 	bl	80017fe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	200007a8 	.word	0x200007a8

08001000 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001004:	4802      	ldr	r0, [pc, #8]	@ (8001010 <CAN1_SCE_IRQHandler+0x10>)
 8001006:	f000 fbfa 	bl	80017fe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200007a8 	.word	0x200007a8

08001014 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INTOF2_Pin);
 8001018:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800101c:	f001 f8f2 	bl	8002204 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INTOF1_Pin);
 8001020:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001024:	f001 f8ee 	bl	8002204 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001028:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800102c:	f001 f8ea 	bl	8002204 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}

08001034 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001038:	4802      	ldr	r0, [pc, #8]	@ (8001044 <TIM7_IRQHandler+0x10>)
 800103a:	f003 facb 	bl	80045d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000824 	.word	0x20000824

08001048 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800104c:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <SystemInit+0x20>)
 800104e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001052:	4a05      	ldr	r2, [pc, #20]	@ (8001068 <SystemInit+0x20>)
 8001054:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001058:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800106c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001070:	f7ff ffea 	bl	8001048 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001074:	480c      	ldr	r0, [pc, #48]	@ (80010a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001076:	490d      	ldr	r1, [pc, #52]	@ (80010ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001078:	4a0d      	ldr	r2, [pc, #52]	@ (80010b0 <LoopForever+0xe>)
  movs r3, #0
 800107a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800107c:	e002      	b.n	8001084 <LoopCopyDataInit>

0800107e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001080:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001082:	3304      	adds	r3, #4

08001084 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001084:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001086:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001088:	d3f9      	bcc.n	800107e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108a:	4a0a      	ldr	r2, [pc, #40]	@ (80010b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800108c:	4c0a      	ldr	r4, [pc, #40]	@ (80010b8 <LoopForever+0x16>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001090:	e001      	b.n	8001096 <LoopFillZerobss>

08001092 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001092:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001094:	3204      	adds	r2, #4

08001096 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001096:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001098:	d3fb      	bcc.n	8001092 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800109a:	f009 fd87 	bl	800abac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800109e:	f7ff fa29 	bl	80004f4 <main>

080010a2 <LoopForever>:

LoopForever:
    b LoopForever
 80010a2:	e7fe      	b.n	80010a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010a4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80010a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010ac:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 80010b0:	0800acbc 	.word	0x0800acbc
  ldr r2, =_sbss
 80010b4:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 80010b8:	20000a1c 	.word	0x20000a1c

080010bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010bc:	e7fe      	b.n	80010bc <ADC1_2_IRQHandler>
	...

080010c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010c6:	2300      	movs	r3, #0
 80010c8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ca:	4b0c      	ldr	r3, [pc, #48]	@ (80010fc <HAL_Init+0x3c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a0b      	ldr	r2, [pc, #44]	@ (80010fc <HAL_Init+0x3c>)
 80010d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010d4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d6:	2003      	movs	r0, #3
 80010d8:	f000 fe90 	bl	8001dfc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010dc:	2000      	movs	r0, #0
 80010de:	f000 f80f 	bl	8001100 <HAL_InitTick>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d002      	beq.n	80010ee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	71fb      	strb	r3, [r7, #7]
 80010ec:	e001      	b.n	80010f2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010ee:	f7ff fdd1 	bl	8000c94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010f2:	79fb      	ldrb	r3, [r7, #7]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40022000 	.word	0x40022000

08001100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001108:	2300      	movs	r3, #0
 800110a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800110c:	4b17      	ldr	r3, [pc, #92]	@ (800116c <HAL_InitTick+0x6c>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d023      	beq.n	800115c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001114:	4b16      	ldr	r3, [pc, #88]	@ (8001170 <HAL_InitTick+0x70>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b14      	ldr	r3, [pc, #80]	@ (800116c <HAL_InitTick+0x6c>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	4619      	mov	r1, r3
 800111e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001122:	fbb3 f3f1 	udiv	r3, r3, r1
 8001126:	fbb2 f3f3 	udiv	r3, r2, r3
 800112a:	4618      	mov	r0, r3
 800112c:	f000 fe9b 	bl	8001e66 <HAL_SYSTICK_Config>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d10f      	bne.n	8001156 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2b0f      	cmp	r3, #15
 800113a:	d809      	bhi.n	8001150 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800113c:	2200      	movs	r2, #0
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	f04f 30ff 	mov.w	r0, #4294967295
 8001144:	f000 fe65 	bl	8001e12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001148:	4a0a      	ldr	r2, [pc, #40]	@ (8001174 <HAL_InitTick+0x74>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6013      	str	r3, [r2, #0]
 800114e:	e007      	b.n	8001160 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	73fb      	strb	r3, [r7, #15]
 8001154:	e004      	b.n	8001160 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	73fb      	strb	r3, [r7, #15]
 800115a:	e001      	b.n	8001160 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001160:	7bfb      	ldrb	r3, [r7, #15]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000008 	.word	0x20000008
 8001170:	20000000 	.word	0x20000000
 8001174:	20000004 	.word	0x20000004

08001178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800117c:	4b06      	ldr	r3, [pc, #24]	@ (8001198 <HAL_IncTick+0x20>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	4b06      	ldr	r3, [pc, #24]	@ (800119c <HAL_IncTick+0x24>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4413      	add	r3, r2
 8001188:	4a04      	ldr	r2, [pc, #16]	@ (800119c <HAL_IncTick+0x24>)
 800118a:	6013      	str	r3, [r2, #0]
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	20000008 	.word	0x20000008
 800119c:	20000918 	.word	0x20000918

080011a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return uwTick;
 80011a4:	4b03      	ldr	r3, [pc, #12]	@ (80011b4 <HAL_GetTick+0x14>)
 80011a6:	681b      	ldr	r3, [r3, #0]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	20000918 	.word	0x20000918

080011b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c0:	f7ff ffee 	bl	80011a0 <HAL_GetTick>
 80011c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d0:	d005      	beq.n	80011de <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80011d2:	4b0a      	ldr	r3, [pc, #40]	@ (80011fc <HAL_Delay+0x44>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	461a      	mov	r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4413      	add	r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011de:	bf00      	nop
 80011e0:	f7ff ffde 	bl	80011a0 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d8f7      	bhi.n	80011e0 <HAL_Delay+0x28>
  {
  }
}
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000008 	.word	0x20000008

08001200 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d101      	bne.n	8001212 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e0ed      	b.n	80013ee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b00      	cmp	r3, #0
 800121c:	d102      	bne.n	8001224 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff fd5c 	bl	8000cdc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f042 0201 	orr.w	r2, r2, #1
 8001232:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001234:	f7ff ffb4 	bl	80011a0 <HAL_GetTick>
 8001238:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800123a:	e012      	b.n	8001262 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800123c:	f7ff ffb0 	bl	80011a0 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b0a      	cmp	r3, #10
 8001248:	d90b      	bls.n	8001262 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800124e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2205      	movs	r2, #5
 800125a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e0c5      	b.n	80013ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	2b00      	cmp	r3, #0
 800126e:	d0e5      	beq.n	800123c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f022 0202 	bic.w	r2, r2, #2
 800127e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001280:	f7ff ff8e 	bl	80011a0 <HAL_GetTick>
 8001284:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001286:	e012      	b.n	80012ae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001288:	f7ff ff8a 	bl	80011a0 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b0a      	cmp	r3, #10
 8001294:	d90b      	bls.n	80012ae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800129a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2205      	movs	r2, #5
 80012a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e09f      	b.n	80013ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d1e5      	bne.n	8001288 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	7e1b      	ldrb	r3, [r3, #24]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d108      	bne.n	80012d6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	e007      	b.n	80012e6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80012e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	7e5b      	ldrb	r3, [r3, #25]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d108      	bne.n	8001300 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	e007      	b.n	8001310 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800130e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	7e9b      	ldrb	r3, [r3, #26]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d108      	bne.n	800132a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f042 0220 	orr.w	r2, r2, #32
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	e007      	b.n	800133a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f022 0220 	bic.w	r2, r2, #32
 8001338:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	7edb      	ldrb	r3, [r3, #27]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d108      	bne.n	8001354 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f022 0210 	bic.w	r2, r2, #16
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	e007      	b.n	8001364 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f042 0210 	orr.w	r2, r2, #16
 8001362:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	7f1b      	ldrb	r3, [r3, #28]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d108      	bne.n	800137e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f042 0208 	orr.w	r2, r2, #8
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	e007      	b.n	800138e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f022 0208 	bic.w	r2, r2, #8
 800138c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	7f5b      	ldrb	r3, [r3, #29]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d108      	bne.n	80013a8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f042 0204 	orr.w	r2, r2, #4
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	e007      	b.n	80013b8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0204 	bic.w	r2, r2, #4
 80013b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689a      	ldr	r2, [r3, #8]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	431a      	orrs	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	691b      	ldr	r3, [r3, #16]
 80013c6:	431a      	orrs	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	695b      	ldr	r3, [r3, #20]
 80013cc:	ea42 0103 	orr.w	r1, r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	1e5a      	subs	r2, r3, #1
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	430a      	orrs	r2, r1
 80013dc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2201      	movs	r2, #1
 80013e8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b087      	sub	sp, #28
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
 80013fe:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f893 3020 	ldrb.w	r3, [r3, #32]
 800140c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800140e:	7cfb      	ldrb	r3, [r7, #19]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d003      	beq.n	800141c <HAL_CAN_ConfigFilter+0x26>
 8001414:	7cfb      	ldrb	r3, [r7, #19]
 8001416:	2b02      	cmp	r3, #2
 8001418:	f040 80aa 	bne.w	8001570 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001422:	f043 0201 	orr.w	r2, r3, #1
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	695b      	ldr	r3, [r3, #20]
 8001430:	f003 031f 	and.w	r3, r3, #31
 8001434:	2201      	movs	r2, #1
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	43db      	mvns	r3, r3
 8001446:	401a      	ands	r2, r3
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d123      	bne.n	800149e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	43db      	mvns	r3, r3
 8001460:	401a      	ands	r2, r3
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001474:	683a      	ldr	r2, [r7, #0]
 8001476:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001478:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	3248      	adds	r2, #72	@ 0x48
 800147e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001492:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001494:	6979      	ldr	r1, [r7, #20]
 8001496:	3348      	adds	r3, #72	@ 0x48
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	440b      	add	r3, r1
 800149c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d122      	bne.n	80014ec <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	431a      	orrs	r2, r3
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80014c6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	3248      	adds	r2, #72	@ 0x48
 80014cc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014e0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014e2:	6979      	ldr	r1, [r7, #20]
 80014e4:	3348      	adds	r3, #72	@ 0x48
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	440b      	add	r3, r1
 80014ea:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d109      	bne.n	8001508 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	43db      	mvns	r3, r3
 80014fe:	401a      	ands	r2, r3
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001506:	e007      	b.n	8001518 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	431a      	orrs	r2, r3
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d109      	bne.n	8001534 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	43db      	mvns	r3, r3
 800152a:	401a      	ands	r2, r3
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001532:	e007      	b.n	8001544 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	431a      	orrs	r2, r3
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	6a1b      	ldr	r3, [r3, #32]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d107      	bne.n	800155c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	431a      	orrs	r2, r3
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001562:	f023 0201 	bic.w	r2, r3, #1
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800156c:	2300      	movs	r3, #0
 800156e:	e006      	b.n	800157e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001574:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
  }
}
 800157e:	4618      	mov	r0, r3
 8001580:	371c      	adds	r7, #28
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b084      	sub	sp, #16
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b01      	cmp	r3, #1
 800159c:	d12e      	bne.n	80015fc <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2202      	movs	r2, #2
 80015a2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f022 0201 	bic.w	r2, r2, #1
 80015b4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80015b6:	f7ff fdf3 	bl	80011a0 <HAL_GetTick>
 80015ba:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015bc:	e012      	b.n	80015e4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015be:	f7ff fdef 	bl	80011a0 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b0a      	cmp	r3, #10
 80015ca:	d90b      	bls.n	80015e4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2205      	movs	r2, #5
 80015dc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e012      	b.n	800160a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1e5      	bne.n	80015be <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80015f8:	2300      	movs	r3, #0
 80015fa:	e006      	b.n	800160a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001600:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
  }
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001612:	b480      	push	{r7}
 8001614:	b089      	sub	sp, #36	@ 0x24
 8001616:	af00      	add	r7, sp, #0
 8001618:	60f8      	str	r0, [r7, #12]
 800161a:	60b9      	str	r1, [r7, #8]
 800161c:	607a      	str	r2, [r7, #4]
 800161e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001626:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001630:	7ffb      	ldrb	r3, [r7, #31]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d003      	beq.n	800163e <HAL_CAN_AddTxMessage+0x2c>
 8001636:	7ffb      	ldrb	r3, [r7, #31]
 8001638:	2b02      	cmp	r3, #2
 800163a:	f040 80ad 	bne.w	8001798 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d10a      	bne.n	800165e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800164e:	2b00      	cmp	r3, #0
 8001650:	d105      	bne.n	800165e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001658:	2b00      	cmp	r3, #0
 800165a:	f000 8095 	beq.w	8001788 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	0e1b      	lsrs	r3, r3, #24
 8001662:	f003 0303 	and.w	r3, r3, #3
 8001666:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001668:	2201      	movs	r2, #1
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	409a      	lsls	r2, r3
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d10d      	bne.n	8001696 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001684:	68f9      	ldr	r1, [r7, #12]
 8001686:	6809      	ldr	r1, [r1, #0]
 8001688:	431a      	orrs	r2, r3
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	3318      	adds	r3, #24
 800168e:	011b      	lsls	r3, r3, #4
 8001690:	440b      	add	r3, r1
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	e00f      	b.n	80016b6 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016a0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016a6:	68f9      	ldr	r1, [r7, #12]
 80016a8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80016aa:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	3318      	adds	r3, #24
 80016b0:	011b      	lsls	r3, r3, #4
 80016b2:	440b      	add	r3, r1
 80016b4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6819      	ldr	r1, [r3, #0]
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	691a      	ldr	r2, [r3, #16]
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	3318      	adds	r3, #24
 80016c2:	011b      	lsls	r3, r3, #4
 80016c4:	440b      	add	r3, r1
 80016c6:	3304      	adds	r3, #4
 80016c8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	7d1b      	ldrb	r3, [r3, #20]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d111      	bne.n	80016f6 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	3318      	adds	r3, #24
 80016da:	011b      	lsls	r3, r3, #4
 80016dc:	4413      	add	r3, r2
 80016de:	3304      	adds	r3, #4
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	6811      	ldr	r1, [r2, #0]
 80016e6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	3318      	adds	r3, #24
 80016ee:	011b      	lsls	r3, r3, #4
 80016f0:	440b      	add	r3, r1
 80016f2:	3304      	adds	r3, #4
 80016f4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	3307      	adds	r3, #7
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	061a      	lsls	r2, r3, #24
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	3306      	adds	r3, #6
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	041b      	lsls	r3, r3, #16
 8001706:	431a      	orrs	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3305      	adds	r3, #5
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	021b      	lsls	r3, r3, #8
 8001710:	4313      	orrs	r3, r2
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	3204      	adds	r2, #4
 8001716:	7812      	ldrb	r2, [r2, #0]
 8001718:	4610      	mov	r0, r2
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	6811      	ldr	r1, [r2, #0]
 800171e:	ea43 0200 	orr.w	r2, r3, r0
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	011b      	lsls	r3, r3, #4
 8001726:	440b      	add	r3, r1
 8001728:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800172c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	3303      	adds	r3, #3
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	061a      	lsls	r2, r3, #24
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	3302      	adds	r3, #2
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	041b      	lsls	r3, r3, #16
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3301      	adds	r3, #1
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	021b      	lsls	r3, r3, #8
 8001748:	4313      	orrs	r3, r2
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	7812      	ldrb	r2, [r2, #0]
 800174e:	4610      	mov	r0, r2
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	6811      	ldr	r1, [r2, #0]
 8001754:	ea43 0200 	orr.w	r2, r3, r0
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	011b      	lsls	r3, r3, #4
 800175c:	440b      	add	r3, r1
 800175e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001762:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	3318      	adds	r3, #24
 800176c:	011b      	lsls	r3, r3, #4
 800176e:	4413      	add	r3, r2
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	6811      	ldr	r1, [r2, #0]
 8001776:	f043 0201 	orr.w	r2, r3, #1
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	3318      	adds	r3, #24
 800177e:	011b      	lsls	r3, r3, #4
 8001780:	440b      	add	r3, r1
 8001782:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001784:	2300      	movs	r3, #0
 8001786:	e00e      	b.n	80017a6 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800178c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e006      	b.n	80017a6 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800179c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
  }
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3724      	adds	r7, #36	@ 0x24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b085      	sub	sp, #20
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
 80017ba:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017c2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80017c4:	7bfb      	ldrb	r3, [r7, #15]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d002      	beq.n	80017d0 <HAL_CAN_ActivateNotification+0x1e>
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d109      	bne.n	80017e4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6959      	ldr	r1, [r3, #20]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	430a      	orrs	r2, r1
 80017de:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80017e0:	2300      	movs	r3, #0
 80017e2:	e006      	b.n	80017f2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
  }
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b08a      	sub	sp, #40	@ 0x28
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001806:	2300      	movs	r3, #0
 8001808:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800183a:	6a3b      	ldr	r3, [r7, #32]
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	2b00      	cmp	r3, #0
 8001842:	d07c      	beq.n	800193e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	2b00      	cmp	r3, #0
 800184c:	d023      	beq.n	8001896 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2201      	movs	r2, #1
 8001854:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d003      	beq.n	8001868 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff f8cb 	bl	80009fc <HAL_CAN_TxMailbox0CompleteCallback>
 8001866:	e016      	b.n	8001896 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	f003 0304 	and.w	r3, r3, #4
 800186e:	2b00      	cmp	r3, #0
 8001870:	d004      	beq.n	800187c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001874:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001878:	627b      	str	r3, [r7, #36]	@ 0x24
 800187a:	e00c      	b.n	8001896 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	f003 0308 	and.w	r3, r3, #8
 8001882:	2b00      	cmp	r3, #0
 8001884:	d004      	beq.n	8001890 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001888:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800188c:	627b      	str	r3, [r7, #36]	@ 0x24
 800188e:	e002      	b.n	8001896 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f000 f97f 	bl	8001b94 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800189c:	2b00      	cmp	r3, #0
 800189e:	d024      	beq.n	80018ea <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018a8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d003      	beq.n	80018bc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f000 f959 	bl	8001b6c <HAL_CAN_TxMailbox1CompleteCallback>
 80018ba:	e016      	b.n	80018ea <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d004      	beq.n	80018d0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80018c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80018cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80018ce:	e00c      	b.n	80018ea <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d004      	beq.n	80018e4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80018da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80018e2:	e002      	b.n	80018ea <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f000 f95f 	bl	8001ba8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d024      	beq.n	800193e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80018fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d003      	beq.n	8001910 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f000 f939 	bl	8001b80 <HAL_CAN_TxMailbox2CompleteCallback>
 800190e:	e016      	b.n	800193e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d004      	beq.n	8001924 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800191a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001920:	627b      	str	r3, [r7, #36]	@ 0x24
 8001922:	e00c      	b.n	800193e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d004      	beq.n	8001938 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800192e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001930:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001934:	627b      	str	r3, [r7, #36]	@ 0x24
 8001936:	e002      	b.n	800193e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f000 f93f 	bl	8001bbc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800193e:	6a3b      	ldr	r3, [r7, #32]
 8001940:	f003 0308 	and.w	r3, r3, #8
 8001944:	2b00      	cmp	r3, #0
 8001946:	d00c      	beq.n	8001962 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	f003 0310 	and.w	r3, r3, #16
 800194e:	2b00      	cmp	r3, #0
 8001950:	d007      	beq.n	8001962 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001954:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001958:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2210      	movs	r2, #16
 8001960:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001962:	6a3b      	ldr	r3, [r7, #32]
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	2b00      	cmp	r3, #0
 800196a:	d00b      	beq.n	8001984 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	2b00      	cmp	r3, #0
 8001974:	d006      	beq.n	8001984 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2208      	movs	r2, #8
 800197c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 f930 	bl	8001be4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001984:	6a3b      	ldr	r3, [r7, #32]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d009      	beq.n	80019a2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	f003 0303 	and.w	r3, r3, #3
 8001998:	2b00      	cmp	r3, #0
 800199a:	d002      	beq.n	80019a2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 f917 	bl	8001bd0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80019a2:	6a3b      	ldr	r3, [r7, #32]
 80019a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d00c      	beq.n	80019c6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	f003 0310 	and.w	r3, r3, #16
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d007      	beq.n	80019c6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80019b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019bc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2210      	movs	r2, #16
 80019c4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80019c6:	6a3b      	ldr	r3, [r7, #32]
 80019c8:	f003 0320 	and.w	r3, r3, #32
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d00b      	beq.n	80019e8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	f003 0308 	and.w	r3, r3, #8
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d006      	beq.n	80019e8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2208      	movs	r2, #8
 80019e0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 f912 	bl	8001c0c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80019e8:	6a3b      	ldr	r3, [r7, #32]
 80019ea:	f003 0310 	and.w	r3, r3, #16
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d009      	beq.n	8001a06 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d002      	beq.n	8001a06 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f000 f8f9 	bl	8001bf8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001a06:	6a3b      	ldr	r3, [r7, #32]
 8001a08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d00b      	beq.n	8001a28 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	f003 0310 	and.w	r3, r3, #16
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d006      	beq.n	8001a28 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2210      	movs	r2, #16
 8001a20:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f8fc 	bl	8001c20 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001a28:	6a3b      	ldr	r3, [r7, #32]
 8001a2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00b      	beq.n	8001a4a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	f003 0308 	and.w	r3, r3, #8
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d006      	beq.n	8001a4a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2208      	movs	r2, #8
 8001a42:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f000 f8f5 	bl	8001c34 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001a4a:	6a3b      	ldr	r3, [r7, #32]
 8001a4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d07b      	beq.n	8001b4c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f003 0304 	and.w	r3, r3, #4
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d072      	beq.n	8001b44 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a5e:	6a3b      	ldr	r3, [r7, #32]
 8001a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d008      	beq.n	8001a7a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a7a:	6a3b      	ldr	r3, [r7, #32]
 8001a7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d008      	beq.n	8001a96 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a90:	f043 0302 	orr.w	r3, r3, #2
 8001a94:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a96:	6a3b      	ldr	r3, [r7, #32]
 8001a98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d008      	beq.n	8001ab2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d003      	beq.n	8001ab2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aac:	f043 0304 	orr.w	r3, r3, #4
 8001ab0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ab2:	6a3b      	ldr	r3, [r7, #32]
 8001ab4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d043      	beq.n	8001b44 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d03e      	beq.n	8001b44 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001acc:	2b60      	cmp	r3, #96	@ 0x60
 8001ace:	d02b      	beq.n	8001b28 <HAL_CAN_IRQHandler+0x32a>
 8001ad0:	2b60      	cmp	r3, #96	@ 0x60
 8001ad2:	d82e      	bhi.n	8001b32 <HAL_CAN_IRQHandler+0x334>
 8001ad4:	2b50      	cmp	r3, #80	@ 0x50
 8001ad6:	d022      	beq.n	8001b1e <HAL_CAN_IRQHandler+0x320>
 8001ad8:	2b50      	cmp	r3, #80	@ 0x50
 8001ada:	d82a      	bhi.n	8001b32 <HAL_CAN_IRQHandler+0x334>
 8001adc:	2b40      	cmp	r3, #64	@ 0x40
 8001ade:	d019      	beq.n	8001b14 <HAL_CAN_IRQHandler+0x316>
 8001ae0:	2b40      	cmp	r3, #64	@ 0x40
 8001ae2:	d826      	bhi.n	8001b32 <HAL_CAN_IRQHandler+0x334>
 8001ae4:	2b30      	cmp	r3, #48	@ 0x30
 8001ae6:	d010      	beq.n	8001b0a <HAL_CAN_IRQHandler+0x30c>
 8001ae8:	2b30      	cmp	r3, #48	@ 0x30
 8001aea:	d822      	bhi.n	8001b32 <HAL_CAN_IRQHandler+0x334>
 8001aec:	2b10      	cmp	r3, #16
 8001aee:	d002      	beq.n	8001af6 <HAL_CAN_IRQHandler+0x2f8>
 8001af0:	2b20      	cmp	r3, #32
 8001af2:	d005      	beq.n	8001b00 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001af4:	e01d      	b.n	8001b32 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af8:	f043 0308 	orr.w	r3, r3, #8
 8001afc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001afe:	e019      	b.n	8001b34 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b02:	f043 0310 	orr.w	r3, r3, #16
 8001b06:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b08:	e014      	b.n	8001b34 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0c:	f043 0320 	orr.w	r3, r3, #32
 8001b10:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b12:	e00f      	b.n	8001b34 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b1a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b1c:	e00a      	b.n	8001b34 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b24:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b26:	e005      	b.n	8001b34 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b2e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b30:	e000      	b.n	8001b34 <HAL_CAN_IRQHandler+0x336>
            break;
 8001b32:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	699a      	ldr	r2, [r3, #24]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001b42:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2204      	movs	r2, #4
 8001b4a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d008      	beq.n	8001b64 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 f872 	bl	8001c48 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001b64:	bf00      	nop
 8001b66:	3728      	adds	r7, #40	@ 0x28
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c72:	68ba      	ldr	r2, [r7, #8]
 8001c74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c78:	4013      	ands	r3, r2
 8001c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c8e:	4a04      	ldr	r2, [pc, #16]	@ (8001ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	60d3      	str	r3, [r2, #12]
}
 8001c94:	bf00      	nop
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca8:	4b04      	ldr	r3, [pc, #16]	@ (8001cbc <__NVIC_GetPriorityGrouping+0x18>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	0a1b      	lsrs	r3, r3, #8
 8001cae:	f003 0307 	and.w	r3, r3, #7
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	db0b      	blt.n	8001cea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	f003 021f 	and.w	r2, r3, #31
 8001cd8:	4907      	ldr	r1, [pc, #28]	@ (8001cf8 <__NVIC_EnableIRQ+0x38>)
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	095b      	lsrs	r3, r3, #5
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	e000e100 	.word	0xe000e100

08001cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	6039      	str	r1, [r7, #0]
 8001d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	db0a      	blt.n	8001d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	490c      	ldr	r1, [pc, #48]	@ (8001d48 <__NVIC_SetPriority+0x4c>)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	0112      	lsls	r2, r2, #4
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	440b      	add	r3, r1
 8001d20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d24:	e00a      	b.n	8001d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	4908      	ldr	r1, [pc, #32]	@ (8001d4c <__NVIC_SetPriority+0x50>)
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	3b04      	subs	r3, #4
 8001d34:	0112      	lsls	r2, r2, #4
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	440b      	add	r3, r1
 8001d3a:	761a      	strb	r2, [r3, #24]
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	e000e100 	.word	0xe000e100
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b089      	sub	sp, #36	@ 0x24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f1c3 0307 	rsb	r3, r3, #7
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	bf28      	it	cs
 8001d6e:	2304      	movcs	r3, #4
 8001d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	3304      	adds	r3, #4
 8001d76:	2b06      	cmp	r3, #6
 8001d78:	d902      	bls.n	8001d80 <NVIC_EncodePriority+0x30>
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3b03      	subs	r3, #3
 8001d7e:	e000      	b.n	8001d82 <NVIC_EncodePriority+0x32>
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d84:	f04f 32ff 	mov.w	r2, #4294967295
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43da      	mvns	r2, r3
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	401a      	ands	r2, r3
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d98:	f04f 31ff 	mov.w	r1, #4294967295
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001da2:	43d9      	mvns	r1, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da8:	4313      	orrs	r3, r2
         );
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3724      	adds	r7, #36	@ 0x24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
	...

08001db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dc8:	d301      	bcc.n	8001dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e00f      	b.n	8001dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dce:	4a0a      	ldr	r2, [pc, #40]	@ (8001df8 <SysTick_Config+0x40>)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dd6:	210f      	movs	r1, #15
 8001dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ddc:	f7ff ff8e 	bl	8001cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de0:	4b05      	ldr	r3, [pc, #20]	@ (8001df8 <SysTick_Config+0x40>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001de6:	4b04      	ldr	r3, [pc, #16]	@ (8001df8 <SysTick_Config+0x40>)
 8001de8:	2207      	movs	r2, #7
 8001dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	e000e010 	.word	0xe000e010

08001dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff ff29 	bl	8001c5c <__NVIC_SetPriorityGrouping>
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b086      	sub	sp, #24
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	4603      	mov	r3, r0
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	607a      	str	r2, [r7, #4]
 8001e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e24:	f7ff ff3e 	bl	8001ca4 <__NVIC_GetPriorityGrouping>
 8001e28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	68b9      	ldr	r1, [r7, #8]
 8001e2e:	6978      	ldr	r0, [r7, #20]
 8001e30:	f7ff ff8e 	bl	8001d50 <NVIC_EncodePriority>
 8001e34:	4602      	mov	r2, r0
 8001e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ff5d 	bl	8001cfc <__NVIC_SetPriority>
}
 8001e42:	bf00      	nop
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	4603      	mov	r3, r0
 8001e52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff ff31 	bl	8001cc0 <__NVIC_EnableIRQ>
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff ffa2 	bl	8001db8 <SysTick_Config>
 8001e74:	4603      	mov	r3, r0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b087      	sub	sp, #28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e8e:	e17f      	b.n	8002190 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	2101      	movs	r1, #1
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f000 8171 	beq.w	800218a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d005      	beq.n	8001ec0 <HAL_GPIO_Init+0x40>
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 0303 	and.w	r3, r3, #3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d130      	bne.n	8001f22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	2203      	movs	r2, #3
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	68da      	ldr	r2, [r3, #12]
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43db      	mvns	r3, r3
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4013      	ands	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	091b      	lsrs	r3, r3, #4
 8001f0c:	f003 0201 	and.w	r2, r3, #1
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f003 0303 	and.w	r3, r3, #3
 8001f2a:	2b03      	cmp	r3, #3
 8001f2c:	d118      	bne.n	8001f60 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001f34:	2201      	movs	r2, #1
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	4013      	ands	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	08db      	lsrs	r3, r3, #3
 8001f4a:	f003 0201 	and.w	r2, r3, #1
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f003 0303 	and.w	r3, r3, #3
 8001f68:	2b03      	cmp	r3, #3
 8001f6a:	d017      	beq.n	8001f9c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	2203      	movs	r2, #3
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4013      	ands	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 0303 	and.w	r3, r3, #3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d123      	bne.n	8001ff0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	08da      	lsrs	r2, r3, #3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3208      	adds	r2, #8
 8001fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f003 0307 	and.w	r3, r3, #7
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	220f      	movs	r2, #15
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	691a      	ldr	r2, [r3, #16]
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	08da      	lsrs	r2, r3, #3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	3208      	adds	r2, #8
 8001fea:	6939      	ldr	r1, [r7, #16]
 8001fec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4013      	ands	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 0203 	and.w	r2, r3, #3
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	4313      	orrs	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 80ac 	beq.w	800218a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002032:	4b5f      	ldr	r3, [pc, #380]	@ (80021b0 <HAL_GPIO_Init+0x330>)
 8002034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002036:	4a5e      	ldr	r2, [pc, #376]	@ (80021b0 <HAL_GPIO_Init+0x330>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	6613      	str	r3, [r2, #96]	@ 0x60
 800203e:	4b5c      	ldr	r3, [pc, #368]	@ (80021b0 <HAL_GPIO_Init+0x330>)
 8002040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800204a:	4a5a      	ldr	r2, [pc, #360]	@ (80021b4 <HAL_GPIO_Init+0x334>)
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	089b      	lsrs	r3, r3, #2
 8002050:	3302      	adds	r3, #2
 8002052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002056:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	220f      	movs	r2, #15
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43db      	mvns	r3, r3
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	4013      	ands	r3, r2
 800206c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002074:	d025      	beq.n	80020c2 <HAL_GPIO_Init+0x242>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a4f      	ldr	r2, [pc, #316]	@ (80021b8 <HAL_GPIO_Init+0x338>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d01f      	beq.n	80020be <HAL_GPIO_Init+0x23e>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a4e      	ldr	r2, [pc, #312]	@ (80021bc <HAL_GPIO_Init+0x33c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d019      	beq.n	80020ba <HAL_GPIO_Init+0x23a>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a4d      	ldr	r2, [pc, #308]	@ (80021c0 <HAL_GPIO_Init+0x340>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d013      	beq.n	80020b6 <HAL_GPIO_Init+0x236>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a4c      	ldr	r2, [pc, #304]	@ (80021c4 <HAL_GPIO_Init+0x344>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d00d      	beq.n	80020b2 <HAL_GPIO_Init+0x232>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a4b      	ldr	r2, [pc, #300]	@ (80021c8 <HAL_GPIO_Init+0x348>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d007      	beq.n	80020ae <HAL_GPIO_Init+0x22e>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a4a      	ldr	r2, [pc, #296]	@ (80021cc <HAL_GPIO_Init+0x34c>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d101      	bne.n	80020aa <HAL_GPIO_Init+0x22a>
 80020a6:	2306      	movs	r3, #6
 80020a8:	e00c      	b.n	80020c4 <HAL_GPIO_Init+0x244>
 80020aa:	2307      	movs	r3, #7
 80020ac:	e00a      	b.n	80020c4 <HAL_GPIO_Init+0x244>
 80020ae:	2305      	movs	r3, #5
 80020b0:	e008      	b.n	80020c4 <HAL_GPIO_Init+0x244>
 80020b2:	2304      	movs	r3, #4
 80020b4:	e006      	b.n	80020c4 <HAL_GPIO_Init+0x244>
 80020b6:	2303      	movs	r3, #3
 80020b8:	e004      	b.n	80020c4 <HAL_GPIO_Init+0x244>
 80020ba:	2302      	movs	r3, #2
 80020bc:	e002      	b.n	80020c4 <HAL_GPIO_Init+0x244>
 80020be:	2301      	movs	r3, #1
 80020c0:	e000      	b.n	80020c4 <HAL_GPIO_Init+0x244>
 80020c2:	2300      	movs	r3, #0
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	f002 0203 	and.w	r2, r2, #3
 80020ca:	0092      	lsls	r2, r2, #2
 80020cc:	4093      	lsls	r3, r2
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020d4:	4937      	ldr	r1, [pc, #220]	@ (80021b4 <HAL_GPIO_Init+0x334>)
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	089b      	lsrs	r3, r3, #2
 80020da:	3302      	adds	r3, #2
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020e2:	4b3b      	ldr	r3, [pc, #236]	@ (80021d0 <HAL_GPIO_Init+0x350>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	43db      	mvns	r3, r3
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	4013      	ands	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4313      	orrs	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002106:	4a32      	ldr	r2, [pc, #200]	@ (80021d0 <HAL_GPIO_Init+0x350>)
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800210c:	4b30      	ldr	r3, [pc, #192]	@ (80021d0 <HAL_GPIO_Init+0x350>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	43db      	mvns	r3, r3
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	4013      	ands	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	4313      	orrs	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002130:	4a27      	ldr	r2, [pc, #156]	@ (80021d0 <HAL_GPIO_Init+0x350>)
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002136:	4b26      	ldr	r3, [pc, #152]	@ (80021d0 <HAL_GPIO_Init+0x350>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	43db      	mvns	r3, r3
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	4013      	ands	r3, r2
 8002144:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4313      	orrs	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800215a:	4a1d      	ldr	r2, [pc, #116]	@ (80021d0 <HAL_GPIO_Init+0x350>)
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002160:	4b1b      	ldr	r3, [pc, #108]	@ (80021d0 <HAL_GPIO_Init+0x350>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	43db      	mvns	r3, r3
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	4013      	ands	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	4313      	orrs	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002184:	4a12      	ldr	r2, [pc, #72]	@ (80021d0 <HAL_GPIO_Init+0x350>)
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	3301      	adds	r3, #1
 800218e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	fa22 f303 	lsr.w	r3, r2, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	f47f ae78 	bne.w	8001e90 <HAL_GPIO_Init+0x10>
  }
}
 80021a0:	bf00      	nop
 80021a2:	bf00      	nop
 80021a4:	371c      	adds	r7, #28
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40010000 	.word	0x40010000
 80021b8:	48000400 	.word	0x48000400
 80021bc:	48000800 	.word	0x48000800
 80021c0:	48000c00 	.word	0x48000c00
 80021c4:	48001000 	.word	0x48001000
 80021c8:	48001400 	.word	0x48001400
 80021cc:	48001800 	.word	0x48001800
 80021d0:	40010400 	.word	0x40010400

080021d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	807b      	strh	r3, [r7, #2]
 80021e0:	4613      	mov	r3, r2
 80021e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021e4:	787b      	ldrb	r3, [r7, #1]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021ea:	887a      	ldrh	r2, [r7, #2]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021f0:	e002      	b.n	80021f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021f2:	887a      	ldrh	r2, [r7, #2]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800220e:	4b08      	ldr	r3, [pc, #32]	@ (8002230 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002210:	695a      	ldr	r2, [r3, #20]
 8002212:	88fb      	ldrh	r3, [r7, #6]
 8002214:	4013      	ands	r3, r2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d006      	beq.n	8002228 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800221a:	4a05      	ldr	r2, [pc, #20]	@ (8002230 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800221c:	88fb      	ldrh	r3, [r7, #6]
 800221e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002220:	88fb      	ldrh	r3, [r7, #6]
 8002222:	4618      	mov	r0, r3
 8002224:	f7fe fb8a 	bl	800093c <HAL_GPIO_EXTI_Callback>
  }
}
 8002228:	bf00      	nop
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40010400 	.word	0x40010400

08002234 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e08d      	b.n	8002362 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d106      	bne.n	8002260 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7fe fda2 	bl	8000da4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2224      	movs	r2, #36	@ 0x24
 8002264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0201 	bic.w	r2, r2, #1
 8002276:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002284:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002294:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d107      	bne.n	80022ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689a      	ldr	r2, [r3, #8]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	e006      	b.n	80022bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689a      	ldr	r2, [r3, #8]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80022ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d108      	bne.n	80022d6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80022d2:	605a      	str	r2, [r3, #4]
 80022d4:	e007      	b.n	80022e6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6812      	ldr	r2, [r2, #0]
 80022f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80022f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68da      	ldr	r2, [r3, #12]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002308:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	691a      	ldr	r2, [r3, #16]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	430a      	orrs	r2, r1
 8002322:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	69d9      	ldr	r1, [r3, #28]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a1a      	ldr	r2, [r3, #32]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f042 0201 	orr.w	r2, r2, #1
 8002342:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2220      	movs	r2, #32
 800234e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
	...

0800236c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b088      	sub	sp, #32
 8002370:	af02      	add	r7, sp, #8
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	607a      	str	r2, [r7, #4]
 8002376:	461a      	mov	r2, r3
 8002378:	460b      	mov	r3, r1
 800237a:	817b      	strh	r3, [r7, #10]
 800237c:	4613      	mov	r3, r2
 800237e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b20      	cmp	r3, #32
 800238a:	f040 80fd 	bne.w	8002588 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002394:	2b01      	cmp	r3, #1
 8002396:	d101      	bne.n	800239c <HAL_I2C_Master_Transmit+0x30>
 8002398:	2302      	movs	r3, #2
 800239a:	e0f6      	b.n	800258a <HAL_I2C_Master_Transmit+0x21e>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023a4:	f7fe fefc 	bl	80011a0 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	2319      	movs	r3, #25
 80023b0:	2201      	movs	r2, #1
 80023b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 fa0a 	bl	80027d0 <I2C_WaitOnFlagUntilTimeout>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e0e1      	b.n	800258a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2221      	movs	r2, #33	@ 0x21
 80023ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2210      	movs	r2, #16
 80023d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	893a      	ldrh	r2, [r7, #8]
 80023e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	2bff      	cmp	r3, #255	@ 0xff
 80023f6:	d906      	bls.n	8002406 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	22ff      	movs	r2, #255	@ 0xff
 80023fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80023fe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002402:	617b      	str	r3, [r7, #20]
 8002404:	e007      	b.n	8002416 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800240a:	b29a      	uxth	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002410:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002414:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800241a:	2b00      	cmp	r3, #0
 800241c:	d024      	beq.n	8002468 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002422:	781a      	ldrb	r2, [r3, #0]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242e:	1c5a      	adds	r2, r3, #1
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002438:	b29b      	uxth	r3, r3
 800243a:	3b01      	subs	r3, #1
 800243c:	b29a      	uxth	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002446:	3b01      	subs	r3, #1
 8002448:	b29a      	uxth	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002452:	b2db      	uxtb	r3, r3
 8002454:	3301      	adds	r3, #1
 8002456:	b2da      	uxtb	r2, r3
 8002458:	8979      	ldrh	r1, [r7, #10]
 800245a:	4b4e      	ldr	r3, [pc, #312]	@ (8002594 <HAL_I2C_Master_Transmit+0x228>)
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f000 fc05 	bl	8002c70 <I2C_TransferConfig>
 8002466:	e066      	b.n	8002536 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800246c:	b2da      	uxtb	r2, r3
 800246e:	8979      	ldrh	r1, [r7, #10]
 8002470:	4b48      	ldr	r3, [pc, #288]	@ (8002594 <HAL_I2C_Master_Transmit+0x228>)
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 fbfa 	bl	8002c70 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800247c:	e05b      	b.n	8002536 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	6a39      	ldr	r1, [r7, #32]
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f000 f9fd 	bl	8002882 <I2C_WaitOnTXISFlagUntilTimeout>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e07b      	b.n	800258a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002496:	781a      	ldrb	r2, [r3, #0]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	3b01      	subs	r3, #1
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ba:	3b01      	subs	r3, #1
 80024bc:	b29a      	uxth	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d034      	beq.n	8002536 <HAL_I2C_Master_Transmit+0x1ca>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d130      	bne.n	8002536 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	6a3b      	ldr	r3, [r7, #32]
 80024da:	2200      	movs	r2, #0
 80024dc:	2180      	movs	r1, #128	@ 0x80
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 f976 	bl	80027d0 <I2C_WaitOnFlagUntilTimeout>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e04d      	b.n	800258a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	2bff      	cmp	r3, #255	@ 0xff
 80024f6:	d90e      	bls.n	8002516 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	22ff      	movs	r2, #255	@ 0xff
 80024fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002502:	b2da      	uxtb	r2, r3
 8002504:	8979      	ldrh	r1, [r7, #10]
 8002506:	2300      	movs	r3, #0
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 fbae 	bl	8002c70 <I2C_TransferConfig>
 8002514:	e00f      	b.n	8002536 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800251a:	b29a      	uxth	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002524:	b2da      	uxtb	r2, r3
 8002526:	8979      	ldrh	r1, [r7, #10]
 8002528:	2300      	movs	r3, #0
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f000 fb9d 	bl	8002c70 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800253a:	b29b      	uxth	r3, r3
 800253c:	2b00      	cmp	r3, #0
 800253e:	d19e      	bne.n	800247e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	6a39      	ldr	r1, [r7, #32]
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 f9e3 	bl	8002910 <I2C_WaitOnSTOPFlagUntilTimeout>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e01a      	b.n	800258a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2220      	movs	r2, #32
 800255a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6859      	ldr	r1, [r3, #4]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	4b0c      	ldr	r3, [pc, #48]	@ (8002598 <HAL_I2C_Master_Transmit+0x22c>)
 8002568:	400b      	ands	r3, r1
 800256a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2220      	movs	r2, #32
 8002570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002584:	2300      	movs	r3, #0
 8002586:	e000      	b.n	800258a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002588:	2302      	movs	r3, #2
  }
}
 800258a:	4618      	mov	r0, r3
 800258c:	3718      	adds	r7, #24
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	80002000 	.word	0x80002000
 8002598:	fe00e800 	.word	0xfe00e800

0800259c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b088      	sub	sp, #32
 80025a0:	af02      	add	r7, sp, #8
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	607a      	str	r2, [r7, #4]
 80025a6:	461a      	mov	r2, r3
 80025a8:	460b      	mov	r3, r1
 80025aa:	817b      	strh	r3, [r7, #10]
 80025ac:	4613      	mov	r3, r2
 80025ae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b20      	cmp	r3, #32
 80025ba:	f040 80db 	bne.w	8002774 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d101      	bne.n	80025cc <HAL_I2C_Master_Receive+0x30>
 80025c8:	2302      	movs	r3, #2
 80025ca:	e0d4      	b.n	8002776 <HAL_I2C_Master_Receive+0x1da>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025d4:	f7fe fde4 	bl	80011a0 <HAL_GetTick>
 80025d8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	2319      	movs	r3, #25
 80025e0:	2201      	movs	r2, #1
 80025e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f000 f8f2 	bl	80027d0 <I2C_WaitOnFlagUntilTimeout>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e0bf      	b.n	8002776 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2222      	movs	r2, #34	@ 0x22
 80025fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2210      	movs	r2, #16
 8002602:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2200      	movs	r2, #0
 800260a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	893a      	ldrh	r2, [r7, #8]
 8002616:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002622:	b29b      	uxth	r3, r3
 8002624:	2bff      	cmp	r3, #255	@ 0xff
 8002626:	d90e      	bls.n	8002646 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2201      	movs	r2, #1
 800262c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002632:	b2da      	uxtb	r2, r3
 8002634:	8979      	ldrh	r1, [r7, #10]
 8002636:	4b52      	ldr	r3, [pc, #328]	@ (8002780 <HAL_I2C_Master_Receive+0x1e4>)
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f000 fb16 	bl	8002c70 <I2C_TransferConfig>
 8002644:	e06d      	b.n	8002722 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800264a:	b29a      	uxth	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002654:	b2da      	uxtb	r2, r3
 8002656:	8979      	ldrh	r1, [r7, #10]
 8002658:	4b49      	ldr	r3, [pc, #292]	@ (8002780 <HAL_I2C_Master_Receive+0x1e4>)
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	f000 fb05 	bl	8002c70 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002666:	e05c      	b.n	8002722 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	6a39      	ldr	r1, [r7, #32]
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f000 f993 	bl	8002998 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e07c      	b.n	8002776 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800268e:	1c5a      	adds	r2, r3, #1
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002698:	3b01      	subs	r3, #1
 800269a:	b29a      	uxth	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	3b01      	subs	r3, #1
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d034      	beq.n	8002722 <HAL_I2C_Master_Receive+0x186>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d130      	bne.n	8002722 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	9300      	str	r3, [sp, #0]
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	2200      	movs	r2, #0
 80026c8:	2180      	movs	r1, #128	@ 0x80
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 f880 	bl	80027d0 <I2C_WaitOnFlagUntilTimeout>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e04d      	b.n	8002776 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026de:	b29b      	uxth	r3, r3
 80026e0:	2bff      	cmp	r3, #255	@ 0xff
 80026e2:	d90e      	bls.n	8002702 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	22ff      	movs	r2, #255	@ 0xff
 80026e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ee:	b2da      	uxtb	r2, r3
 80026f0:	8979      	ldrh	r1, [r7, #10]
 80026f2:	2300      	movs	r3, #0
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f000 fab8 	bl	8002c70 <I2C_TransferConfig>
 8002700:	e00f      	b.n	8002722 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002706:	b29a      	uxth	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002710:	b2da      	uxtb	r2, r3
 8002712:	8979      	ldrh	r1, [r7, #10]
 8002714:	2300      	movs	r3, #0
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f000 faa7 	bl	8002c70 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002726:	b29b      	uxth	r3, r3
 8002728:	2b00      	cmp	r3, #0
 800272a:	d19d      	bne.n	8002668 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	6a39      	ldr	r1, [r7, #32]
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f000 f8ed 	bl	8002910 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e01a      	b.n	8002776 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2220      	movs	r2, #32
 8002746:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6859      	ldr	r1, [r3, #4]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	4b0c      	ldr	r3, [pc, #48]	@ (8002784 <HAL_I2C_Master_Receive+0x1e8>)
 8002754:	400b      	ands	r3, r1
 8002756:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2220      	movs	r2, #32
 800275c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002770:	2300      	movs	r3, #0
 8002772:	e000      	b.n	8002776 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002774:	2302      	movs	r3, #2
  }
}
 8002776:	4618      	mov	r0, r3
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	80002400 	.word	0x80002400
 8002784:	fe00e800 	.word	0xfe00e800

08002788 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b02      	cmp	r3, #2
 800279c:	d103      	bne.n	80027a6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2200      	movs	r2, #0
 80027a4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d007      	beq.n	80027c4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	699a      	ldr	r2, [r3, #24]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0201 	orr.w	r2, r2, #1
 80027c2:	619a      	str	r2, [r3, #24]
  }
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	603b      	str	r3, [r7, #0]
 80027dc:	4613      	mov	r3, r2
 80027de:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027e0:	e03b      	b.n	800285a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	6839      	ldr	r1, [r7, #0]
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f000 f962 	bl	8002ab0 <I2C_IsErrorOccurred>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e041      	b.n	800287a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027fc:	d02d      	beq.n	800285a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027fe:	f7fe fccf 	bl	80011a0 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	429a      	cmp	r2, r3
 800280c:	d302      	bcc.n	8002814 <I2C_WaitOnFlagUntilTimeout+0x44>
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d122      	bne.n	800285a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	699a      	ldr	r2, [r3, #24]
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	4013      	ands	r3, r2
 800281e:	68ba      	ldr	r2, [r7, #8]
 8002820:	429a      	cmp	r2, r3
 8002822:	bf0c      	ite	eq
 8002824:	2301      	moveq	r3, #1
 8002826:	2300      	movne	r3, #0
 8002828:	b2db      	uxtb	r3, r3
 800282a:	461a      	mov	r2, r3
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	429a      	cmp	r2, r3
 8002830:	d113      	bne.n	800285a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002836:	f043 0220 	orr.w	r2, r3, #32
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2220      	movs	r2, #32
 8002842:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e00f      	b.n	800287a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	699a      	ldr	r2, [r3, #24]
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	4013      	ands	r3, r2
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	429a      	cmp	r2, r3
 8002868:	bf0c      	ite	eq
 800286a:	2301      	moveq	r3, #1
 800286c:	2300      	movne	r3, #0
 800286e:	b2db      	uxtb	r3, r3
 8002870:	461a      	mov	r2, r3
 8002872:	79fb      	ldrb	r3, [r7, #7]
 8002874:	429a      	cmp	r2, r3
 8002876:	d0b4      	beq.n	80027e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b084      	sub	sp, #16
 8002886:	af00      	add	r7, sp, #0
 8002888:	60f8      	str	r0, [r7, #12]
 800288a:	60b9      	str	r1, [r7, #8]
 800288c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800288e:	e033      	b.n	80028f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	68b9      	ldr	r1, [r7, #8]
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 f90b 	bl	8002ab0 <I2C_IsErrorOccurred>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e031      	b.n	8002908 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028aa:	d025      	beq.n	80028f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ac:	f7fe fc78 	bl	80011a0 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d302      	bcc.n	80028c2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d11a      	bne.n	80028f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d013      	beq.n	80028f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d4:	f043 0220 	orr.w	r2, r3, #32
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2220      	movs	r2, #32
 80028e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e007      	b.n	8002908 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b02      	cmp	r3, #2
 8002904:	d1c4      	bne.n	8002890 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800291c:	e02f      	b.n	800297e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	68b9      	ldr	r1, [r7, #8]
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 f8c4 	bl	8002ab0 <I2C_IsErrorOccurred>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e02d      	b.n	800298e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002932:	f7fe fc35 	bl	80011a0 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	68ba      	ldr	r2, [r7, #8]
 800293e:	429a      	cmp	r2, r3
 8002940:	d302      	bcc.n	8002948 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d11a      	bne.n	800297e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	f003 0320 	and.w	r3, r3, #32
 8002952:	2b20      	cmp	r3, #32
 8002954:	d013      	beq.n	800297e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800295a:	f043 0220 	orr.w	r2, r3, #32
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2220      	movs	r2, #32
 8002966:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e007      	b.n	800298e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	f003 0320 	and.w	r3, r3, #32
 8002988:	2b20      	cmp	r3, #32
 800298a:	d1c8      	bne.n	800291e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
	...

08002998 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029a4:	2300      	movs	r3, #0
 80029a6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80029a8:	e071      	b.n	8002a8e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	68b9      	ldr	r1, [r7, #8]
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 f87e 	bl	8002ab0 <I2C_IsErrorOccurred>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	f003 0320 	and.w	r3, r3, #32
 80029c8:	2b20      	cmp	r3, #32
 80029ca:	d13b      	bne.n	8002a44 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80029cc:	7dfb      	ldrb	r3, [r7, #23]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d138      	bne.n	8002a44 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b04      	cmp	r3, #4
 80029de:	d105      	bne.n	80029ec <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80029e8:	2300      	movs	r3, #0
 80029ea:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	f003 0310 	and.w	r3, r3, #16
 80029f6:	2b10      	cmp	r3, #16
 80029f8:	d121      	bne.n	8002a3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2210      	movs	r2, #16
 8002a00:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2204      	movs	r2, #4
 8002a06:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6859      	ldr	r1, [r3, #4]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	4b24      	ldr	r3, [pc, #144]	@ (8002aac <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8002a1c:	400b      	ands	r3, r1
 8002a1e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	75fb      	strb	r3, [r7, #23]
 8002a3c:	e002      	b.n	8002a44 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002a44:	f7fe fbac 	bl	80011a0 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d302      	bcc.n	8002a5a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d119      	bne.n	8002a8e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8002a5a:	7dfb      	ldrb	r3, [r7, #23]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d116      	bne.n	8002a8e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d00f      	beq.n	8002a8e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a72:	f043 0220 	orr.w	r2, r3, #32
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2220      	movs	r2, #32
 8002a7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	2b04      	cmp	r3, #4
 8002a9a:	d002      	beq.n	8002aa2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8002a9c:	7dfb      	ldrb	r3, [r7, #23]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d083      	beq.n	80029aa <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8002aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	fe00e800 	.word	0xfe00e800

08002ab0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b08a      	sub	sp, #40	@ 0x28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002abc:	2300      	movs	r3, #0
 8002abe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002aca:	2300      	movs	r3, #0
 8002acc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	f003 0310 	and.w	r3, r3, #16
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d068      	beq.n	8002bae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2210      	movs	r2, #16
 8002ae2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ae4:	e049      	b.n	8002b7a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aec:	d045      	beq.n	8002b7a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002aee:	f7fe fb57 	bl	80011a0 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d302      	bcc.n	8002b04 <I2C_IsErrorOccurred+0x54>
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d13a      	bne.n	8002b7a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b0e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002b16:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b26:	d121      	bne.n	8002b6c <I2C_IsErrorOccurred+0xbc>
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b2e:	d01d      	beq.n	8002b6c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002b30:	7cfb      	ldrb	r3, [r7, #19]
 8002b32:	2b20      	cmp	r3, #32
 8002b34:	d01a      	beq.n	8002b6c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b44:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002b46:	f7fe fb2b 	bl	80011a0 <HAL_GetTick>
 8002b4a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b4c:	e00e      	b.n	8002b6c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002b4e:	f7fe fb27 	bl	80011a0 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b19      	cmp	r3, #25
 8002b5a:	d907      	bls.n	8002b6c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002b5c:	6a3b      	ldr	r3, [r7, #32]
 8002b5e:	f043 0320 	orr.w	r3, r3, #32
 8002b62:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002b6a:	e006      	b.n	8002b7a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	f003 0320 	and.w	r3, r3, #32
 8002b76:	2b20      	cmp	r3, #32
 8002b78:	d1e9      	bne.n	8002b4e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	f003 0320 	and.w	r3, r3, #32
 8002b84:	2b20      	cmp	r3, #32
 8002b86:	d003      	beq.n	8002b90 <I2C_IsErrorOccurred+0xe0>
 8002b88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0aa      	beq.n	8002ae6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002b90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d103      	bne.n	8002ba0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002ba0:	6a3b      	ldr	r3, [r7, #32]
 8002ba2:	f043 0304 	orr.w	r3, r3, #4
 8002ba6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00b      	beq.n	8002bd8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002bc0:	6a3b      	ldr	r3, [r7, #32]
 8002bc2:	f043 0301 	orr.w	r3, r3, #1
 8002bc6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002bd0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00b      	beq.n	8002bfa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002be2:	6a3b      	ldr	r3, [r7, #32]
 8002be4:	f043 0308 	orr.w	r3, r3, #8
 8002be8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002bf2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00b      	beq.n	8002c1c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002c04:	6a3b      	ldr	r3, [r7, #32]
 8002c06:	f043 0302 	orr.w	r3, r3, #2
 8002c0a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002c1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d01c      	beq.n	8002c5e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f7ff fdaf 	bl	8002788 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6859      	ldr	r1, [r3, #4]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	4b0d      	ldr	r3, [pc, #52]	@ (8002c6c <I2C_IsErrorOccurred+0x1bc>)
 8002c36:	400b      	ands	r3, r1
 8002c38:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	431a      	orrs	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2220      	movs	r2, #32
 8002c4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002c5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3728      	adds	r7, #40	@ 0x28
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	fe00e800 	.word	0xfe00e800

08002c70 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b087      	sub	sp, #28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	607b      	str	r3, [r7, #4]
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	817b      	strh	r3, [r7, #10]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c82:	897b      	ldrh	r3, [r7, #10]
 8002c84:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c88:	7a7b      	ldrb	r3, [r7, #9]
 8002c8a:	041b      	lsls	r3, r3, #16
 8002c8c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c90:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c9e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	0d5b      	lsrs	r3, r3, #21
 8002caa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002cae:	4b08      	ldr	r3, [pc, #32]	@ (8002cd0 <I2C_TransferConfig+0x60>)
 8002cb0:	430b      	orrs	r3, r1
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	ea02 0103 	and.w	r1, r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002cc2:	bf00      	nop
 8002cc4:	371c      	adds	r7, #28
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	03ff63ff 	.word	0x03ff63ff

08002cd4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b20      	cmp	r3, #32
 8002ce8:	d138      	bne.n	8002d5c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d101      	bne.n	8002cf8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	e032      	b.n	8002d5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2224      	movs	r2, #36	@ 0x24
 8002d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0201 	bic.w	r2, r2, #1
 8002d16:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002d26:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6819      	ldr	r1, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	430a      	orrs	r2, r1
 8002d36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f042 0201 	orr.w	r2, r2, #1
 8002d46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	e000      	b.n	8002d5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d5c:	2302      	movs	r3, #2
  }
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b085      	sub	sp, #20
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
 8002d72:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b20      	cmp	r3, #32
 8002d7e:	d139      	bne.n	8002df4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d101      	bne.n	8002d8e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	e033      	b.n	8002df6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2224      	movs	r2, #36	@ 0x24
 8002d9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 0201 	bic.w	r2, r2, #1
 8002dac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002dbc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	021b      	lsls	r3, r3, #8
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0201 	orr.w	r2, r2, #1
 8002dde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2220      	movs	r2, #32
 8002de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	e000      	b.n	8002df6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002df4:	2302      	movs	r3, #2
  }
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3714      	adds	r7, #20
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
	...

08002e04 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002e08:	4b04      	ldr	r3, [pc, #16]	@ (8002e1c <HAL_PWREx_GetVoltageRange+0x18>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	40007000 	.word	0x40007000

08002e20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e2e:	d130      	bne.n	8002e92 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e30:	4b23      	ldr	r3, [pc, #140]	@ (8002ec0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002e38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e3c:	d038      	beq.n	8002eb0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e3e:	4b20      	ldr	r3, [pc, #128]	@ (8002ec0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e46:	4a1e      	ldr	r2, [pc, #120]	@ (8002ec0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e48:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e4c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e4e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ec4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2232      	movs	r2, #50	@ 0x32
 8002e54:	fb02 f303 	mul.w	r3, r2, r3
 8002e58:	4a1b      	ldr	r2, [pc, #108]	@ (8002ec8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5e:	0c9b      	lsrs	r3, r3, #18
 8002e60:	3301      	adds	r3, #1
 8002e62:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e64:	e002      	b.n	8002e6c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e6c:	4b14      	ldr	r3, [pc, #80]	@ (8002ec0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e78:	d102      	bne.n	8002e80 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1f2      	bne.n	8002e66 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e80:	4b0f      	ldr	r3, [pc, #60]	@ (8002ec0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e8c:	d110      	bne.n	8002eb0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e00f      	b.n	8002eb2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e92:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002e9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e9e:	d007      	beq.n	8002eb0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ea0:	4b07      	ldr	r3, [pc, #28]	@ (8002ec0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ea8:	4a05      	ldr	r2, [pc, #20]	@ (8002ec0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eaa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002eae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	40007000 	.word	0x40007000
 8002ec4:	20000000 	.word	0x20000000
 8002ec8:	431bde83 	.word	0x431bde83

08002ecc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b088      	sub	sp, #32
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e3ca      	b.n	8003674 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ede:	4b97      	ldr	r3, [pc, #604]	@ (800313c <HAL_RCC_OscConfig+0x270>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 030c 	and.w	r3, r3, #12
 8002ee6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ee8:	4b94      	ldr	r3, [pc, #592]	@ (800313c <HAL_RCC_OscConfig+0x270>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	f003 0303 	and.w	r3, r3, #3
 8002ef0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0310 	and.w	r3, r3, #16
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 80e4 	beq.w	80030c8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d007      	beq.n	8002f16 <HAL_RCC_OscConfig+0x4a>
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	2b0c      	cmp	r3, #12
 8002f0a:	f040 808b 	bne.w	8003024 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	f040 8087 	bne.w	8003024 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f16:	4b89      	ldr	r3, [pc, #548]	@ (800313c <HAL_RCC_OscConfig+0x270>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d005      	beq.n	8002f2e <HAL_RCC_OscConfig+0x62>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e3a2      	b.n	8003674 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a1a      	ldr	r2, [r3, #32]
 8002f32:	4b82      	ldr	r3, [pc, #520]	@ (800313c <HAL_RCC_OscConfig+0x270>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d004      	beq.n	8002f48 <HAL_RCC_OscConfig+0x7c>
 8002f3e:	4b7f      	ldr	r3, [pc, #508]	@ (800313c <HAL_RCC_OscConfig+0x270>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f46:	e005      	b.n	8002f54 <HAL_RCC_OscConfig+0x88>
 8002f48:	4b7c      	ldr	r3, [pc, #496]	@ (800313c <HAL_RCC_OscConfig+0x270>)
 8002f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f4e:	091b      	lsrs	r3, r3, #4
 8002f50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d223      	bcs.n	8002fa0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 fd55 	bl	8003a0c <RCC_SetFlashLatencyFromMSIRange>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e383      	b.n	8003674 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f6c:	4b73      	ldr	r3, [pc, #460]	@ (800313c <HAL_RCC_OscConfig+0x270>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a72      	ldr	r2, [pc, #456]	@ (800313c <HAL_RCC_OscConfig+0x270>)
 8002f72:	f043 0308 	orr.w	r3, r3, #8
 8002f76:	6013      	str	r3, [r2, #0]
 8002f78:	4b70      	ldr	r3, [pc, #448]	@ (800313c <HAL_RCC_OscConfig+0x270>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	496d      	ldr	r1, [pc, #436]	@ (800313c <HAL_RCC_OscConfig+0x270>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f8a:	4b6c      	ldr	r3, [pc, #432]	@ (800313c <HAL_RCC_OscConfig+0x270>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	021b      	lsls	r3, r3, #8
 8002f98:	4968      	ldr	r1, [pc, #416]	@ (800313c <HAL_RCC_OscConfig+0x270>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	604b      	str	r3, [r1, #4]
 8002f9e:	e025      	b.n	8002fec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fa0:	4b66      	ldr	r3, [pc, #408]	@ (800313c <HAL_RCC_OscConfig+0x270>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a65      	ldr	r2, [pc, #404]	@ (800313c <HAL_RCC_OscConfig+0x270>)
 8002fa6:	f043 0308 	orr.w	r3, r3, #8
 8002faa:	6013      	str	r3, [r2, #0]
 8002fac:	4b63      	ldr	r3, [pc, #396]	@ (800313c <HAL_RCC_OscConfig+0x270>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	4960      	ldr	r1, [pc, #384]	@ (800313c <HAL_RCC_OscConfig+0x270>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fbe:	4b5f      	ldr	r3, [pc, #380]	@ (800313c <HAL_RCC_OscConfig+0x270>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	021b      	lsls	r3, r3, #8
 8002fcc:	495b      	ldr	r1, [pc, #364]	@ (800313c <HAL_RCC_OscConfig+0x270>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d109      	bne.n	8002fec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f000 fd15 	bl	8003a0c <RCC_SetFlashLatencyFromMSIRange>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e343      	b.n	8003674 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fec:	f000 fc4a 	bl	8003884 <HAL_RCC_GetSysClockFreq>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	4b52      	ldr	r3, [pc, #328]	@ (800313c <HAL_RCC_OscConfig+0x270>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	091b      	lsrs	r3, r3, #4
 8002ff8:	f003 030f 	and.w	r3, r3, #15
 8002ffc:	4950      	ldr	r1, [pc, #320]	@ (8003140 <HAL_RCC_OscConfig+0x274>)
 8002ffe:	5ccb      	ldrb	r3, [r1, r3]
 8003000:	f003 031f 	and.w	r3, r3, #31
 8003004:	fa22 f303 	lsr.w	r3, r2, r3
 8003008:	4a4e      	ldr	r2, [pc, #312]	@ (8003144 <HAL_RCC_OscConfig+0x278>)
 800300a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800300c:	4b4e      	ldr	r3, [pc, #312]	@ (8003148 <HAL_RCC_OscConfig+0x27c>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4618      	mov	r0, r3
 8003012:	f7fe f875 	bl	8001100 <HAL_InitTick>
 8003016:	4603      	mov	r3, r0
 8003018:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800301a:	7bfb      	ldrb	r3, [r7, #15]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d052      	beq.n	80030c6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003020:	7bfb      	ldrb	r3, [r7, #15]
 8003022:	e327      	b.n	8003674 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d032      	beq.n	8003092 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800302c:	4b43      	ldr	r3, [pc, #268]	@ (800313c <HAL_RCC_OscConfig+0x270>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a42      	ldr	r2, [pc, #264]	@ (800313c <HAL_RCC_OscConfig+0x270>)
 8003032:	f043 0301 	orr.w	r3, r3, #1
 8003036:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003038:	f7fe f8b2 	bl	80011a0 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003040:	f7fe f8ae 	bl	80011a0 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e310      	b.n	8003674 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003052:	4b3a      	ldr	r3, [pc, #232]	@ (800313c <HAL_RCC_OscConfig+0x270>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0f0      	beq.n	8003040 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800305e:	4b37      	ldr	r3, [pc, #220]	@ (800313c <HAL_RCC_OscConfig+0x270>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a36      	ldr	r2, [pc, #216]	@ (800313c <HAL_RCC_OscConfig+0x270>)
 8003064:	f043 0308 	orr.w	r3, r3, #8
 8003068:	6013      	str	r3, [r2, #0]
 800306a:	4b34      	ldr	r3, [pc, #208]	@ (800313c <HAL_RCC_OscConfig+0x270>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	4931      	ldr	r1, [pc, #196]	@ (800313c <HAL_RCC_OscConfig+0x270>)
 8003078:	4313      	orrs	r3, r2
 800307a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800307c:	4b2f      	ldr	r3, [pc, #188]	@ (800313c <HAL_RCC_OscConfig+0x270>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	69db      	ldr	r3, [r3, #28]
 8003088:	021b      	lsls	r3, r3, #8
 800308a:	492c      	ldr	r1, [pc, #176]	@ (800313c <HAL_RCC_OscConfig+0x270>)
 800308c:	4313      	orrs	r3, r2
 800308e:	604b      	str	r3, [r1, #4]
 8003090:	e01a      	b.n	80030c8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003092:	4b2a      	ldr	r3, [pc, #168]	@ (800313c <HAL_RCC_OscConfig+0x270>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a29      	ldr	r2, [pc, #164]	@ (800313c <HAL_RCC_OscConfig+0x270>)
 8003098:	f023 0301 	bic.w	r3, r3, #1
 800309c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800309e:	f7fe f87f 	bl	80011a0 <HAL_GetTick>
 80030a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030a4:	e008      	b.n	80030b8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030a6:	f7fe f87b 	bl	80011a0 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e2dd      	b.n	8003674 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030b8:	4b20      	ldr	r3, [pc, #128]	@ (800313c <HAL_RCC_OscConfig+0x270>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1f0      	bne.n	80030a6 <HAL_RCC_OscConfig+0x1da>
 80030c4:	e000      	b.n	80030c8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030c6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d074      	beq.n	80031be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	2b08      	cmp	r3, #8
 80030d8:	d005      	beq.n	80030e6 <HAL_RCC_OscConfig+0x21a>
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	2b0c      	cmp	r3, #12
 80030de:	d10e      	bne.n	80030fe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	2b03      	cmp	r3, #3
 80030e4:	d10b      	bne.n	80030fe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e6:	4b15      	ldr	r3, [pc, #84]	@ (800313c <HAL_RCC_OscConfig+0x270>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d064      	beq.n	80031bc <HAL_RCC_OscConfig+0x2f0>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d160      	bne.n	80031bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e2ba      	b.n	8003674 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003106:	d106      	bne.n	8003116 <HAL_RCC_OscConfig+0x24a>
 8003108:	4b0c      	ldr	r3, [pc, #48]	@ (800313c <HAL_RCC_OscConfig+0x270>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a0b      	ldr	r2, [pc, #44]	@ (800313c <HAL_RCC_OscConfig+0x270>)
 800310e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003112:	6013      	str	r3, [r2, #0]
 8003114:	e026      	b.n	8003164 <HAL_RCC_OscConfig+0x298>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800311e:	d115      	bne.n	800314c <HAL_RCC_OscConfig+0x280>
 8003120:	4b06      	ldr	r3, [pc, #24]	@ (800313c <HAL_RCC_OscConfig+0x270>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a05      	ldr	r2, [pc, #20]	@ (800313c <HAL_RCC_OscConfig+0x270>)
 8003126:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800312a:	6013      	str	r3, [r2, #0]
 800312c:	4b03      	ldr	r3, [pc, #12]	@ (800313c <HAL_RCC_OscConfig+0x270>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a02      	ldr	r2, [pc, #8]	@ (800313c <HAL_RCC_OscConfig+0x270>)
 8003132:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003136:	6013      	str	r3, [r2, #0]
 8003138:	e014      	b.n	8003164 <HAL_RCC_OscConfig+0x298>
 800313a:	bf00      	nop
 800313c:	40021000 	.word	0x40021000
 8003140:	0800ac64 	.word	0x0800ac64
 8003144:	20000000 	.word	0x20000000
 8003148:	20000004 	.word	0x20000004
 800314c:	4ba0      	ldr	r3, [pc, #640]	@ (80033d0 <HAL_RCC_OscConfig+0x504>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a9f      	ldr	r2, [pc, #636]	@ (80033d0 <HAL_RCC_OscConfig+0x504>)
 8003152:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003156:	6013      	str	r3, [r2, #0]
 8003158:	4b9d      	ldr	r3, [pc, #628]	@ (80033d0 <HAL_RCC_OscConfig+0x504>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a9c      	ldr	r2, [pc, #624]	@ (80033d0 <HAL_RCC_OscConfig+0x504>)
 800315e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003162:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d013      	beq.n	8003194 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316c:	f7fe f818 	bl	80011a0 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003174:	f7fe f814 	bl	80011a0 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b64      	cmp	r3, #100	@ 0x64
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e276      	b.n	8003674 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003186:	4b92      	ldr	r3, [pc, #584]	@ (80033d0 <HAL_RCC_OscConfig+0x504>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0f0      	beq.n	8003174 <HAL_RCC_OscConfig+0x2a8>
 8003192:	e014      	b.n	80031be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003194:	f7fe f804 	bl	80011a0 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800319c:	f7fe f800 	bl	80011a0 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b64      	cmp	r3, #100	@ 0x64
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e262      	b.n	8003674 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031ae:	4b88      	ldr	r3, [pc, #544]	@ (80033d0 <HAL_RCC_OscConfig+0x504>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f0      	bne.n	800319c <HAL_RCC_OscConfig+0x2d0>
 80031ba:	e000      	b.n	80031be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d060      	beq.n	800328c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	2b04      	cmp	r3, #4
 80031ce:	d005      	beq.n	80031dc <HAL_RCC_OscConfig+0x310>
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	2b0c      	cmp	r3, #12
 80031d4:	d119      	bne.n	800320a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d116      	bne.n	800320a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031dc:	4b7c      	ldr	r3, [pc, #496]	@ (80033d0 <HAL_RCC_OscConfig+0x504>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d005      	beq.n	80031f4 <HAL_RCC_OscConfig+0x328>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e23f      	b.n	8003674 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f4:	4b76      	ldr	r3, [pc, #472]	@ (80033d0 <HAL_RCC_OscConfig+0x504>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	061b      	lsls	r3, r3, #24
 8003202:	4973      	ldr	r1, [pc, #460]	@ (80033d0 <HAL_RCC_OscConfig+0x504>)
 8003204:	4313      	orrs	r3, r2
 8003206:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003208:	e040      	b.n	800328c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d023      	beq.n	800325a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003212:	4b6f      	ldr	r3, [pc, #444]	@ (80033d0 <HAL_RCC_OscConfig+0x504>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a6e      	ldr	r2, [pc, #440]	@ (80033d0 <HAL_RCC_OscConfig+0x504>)
 8003218:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800321c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321e:	f7fd ffbf 	bl	80011a0 <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003224:	e008      	b.n	8003238 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003226:	f7fd ffbb 	bl	80011a0 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e21d      	b.n	8003674 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003238:	4b65      	ldr	r3, [pc, #404]	@ (80033d0 <HAL_RCC_OscConfig+0x504>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003240:	2b00      	cmp	r3, #0
 8003242:	d0f0      	beq.n	8003226 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003244:	4b62      	ldr	r3, [pc, #392]	@ (80033d0 <HAL_RCC_OscConfig+0x504>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	061b      	lsls	r3, r3, #24
 8003252:	495f      	ldr	r1, [pc, #380]	@ (80033d0 <HAL_RCC_OscConfig+0x504>)
 8003254:	4313      	orrs	r3, r2
 8003256:	604b      	str	r3, [r1, #4]
 8003258:	e018      	b.n	800328c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800325a:	4b5d      	ldr	r3, [pc, #372]	@ (80033d0 <HAL_RCC_OscConfig+0x504>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a5c      	ldr	r2, [pc, #368]	@ (80033d0 <HAL_RCC_OscConfig+0x504>)
 8003260:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003264:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003266:	f7fd ff9b 	bl	80011a0 <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800326c:	e008      	b.n	8003280 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800326e:	f7fd ff97 	bl	80011a0 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e1f9      	b.n	8003674 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003280:	4b53      	ldr	r3, [pc, #332]	@ (80033d0 <HAL_RCC_OscConfig+0x504>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1f0      	bne.n	800326e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0308 	and.w	r3, r3, #8
 8003294:	2b00      	cmp	r3, #0
 8003296:	d03c      	beq.n	8003312 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d01c      	beq.n	80032da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032a0:	4b4b      	ldr	r3, [pc, #300]	@ (80033d0 <HAL_RCC_OscConfig+0x504>)
 80032a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032a6:	4a4a      	ldr	r2, [pc, #296]	@ (80033d0 <HAL_RCC_OscConfig+0x504>)
 80032a8:	f043 0301 	orr.w	r3, r3, #1
 80032ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b0:	f7fd ff76 	bl	80011a0 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032b8:	f7fd ff72 	bl	80011a0 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e1d4      	b.n	8003674 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032ca:	4b41      	ldr	r3, [pc, #260]	@ (80033d0 <HAL_RCC_OscConfig+0x504>)
 80032cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0ef      	beq.n	80032b8 <HAL_RCC_OscConfig+0x3ec>
 80032d8:	e01b      	b.n	8003312 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032da:	4b3d      	ldr	r3, [pc, #244]	@ (80033d0 <HAL_RCC_OscConfig+0x504>)
 80032dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032e0:	4a3b      	ldr	r2, [pc, #236]	@ (80033d0 <HAL_RCC_OscConfig+0x504>)
 80032e2:	f023 0301 	bic.w	r3, r3, #1
 80032e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ea:	f7fd ff59 	bl	80011a0 <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032f2:	f7fd ff55 	bl	80011a0 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e1b7      	b.n	8003674 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003304:	4b32      	ldr	r3, [pc, #200]	@ (80033d0 <HAL_RCC_OscConfig+0x504>)
 8003306:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1ef      	bne.n	80032f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0304 	and.w	r3, r3, #4
 800331a:	2b00      	cmp	r3, #0
 800331c:	f000 80a6 	beq.w	800346c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003320:	2300      	movs	r3, #0
 8003322:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003324:	4b2a      	ldr	r3, [pc, #168]	@ (80033d0 <HAL_RCC_OscConfig+0x504>)
 8003326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003328:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d10d      	bne.n	800334c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003330:	4b27      	ldr	r3, [pc, #156]	@ (80033d0 <HAL_RCC_OscConfig+0x504>)
 8003332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003334:	4a26      	ldr	r2, [pc, #152]	@ (80033d0 <HAL_RCC_OscConfig+0x504>)
 8003336:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800333a:	6593      	str	r3, [r2, #88]	@ 0x58
 800333c:	4b24      	ldr	r3, [pc, #144]	@ (80033d0 <HAL_RCC_OscConfig+0x504>)
 800333e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003340:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003344:	60bb      	str	r3, [r7, #8]
 8003346:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003348:	2301      	movs	r3, #1
 800334a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800334c:	4b21      	ldr	r3, [pc, #132]	@ (80033d4 <HAL_RCC_OscConfig+0x508>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003354:	2b00      	cmp	r3, #0
 8003356:	d118      	bne.n	800338a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003358:	4b1e      	ldr	r3, [pc, #120]	@ (80033d4 <HAL_RCC_OscConfig+0x508>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a1d      	ldr	r2, [pc, #116]	@ (80033d4 <HAL_RCC_OscConfig+0x508>)
 800335e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003362:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003364:	f7fd ff1c 	bl	80011a0 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800336c:	f7fd ff18 	bl	80011a0 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e17a      	b.n	8003674 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800337e:	4b15      	ldr	r3, [pc, #84]	@ (80033d4 <HAL_RCC_OscConfig+0x508>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0f0      	beq.n	800336c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d108      	bne.n	80033a4 <HAL_RCC_OscConfig+0x4d8>
 8003392:	4b0f      	ldr	r3, [pc, #60]	@ (80033d0 <HAL_RCC_OscConfig+0x504>)
 8003394:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003398:	4a0d      	ldr	r2, [pc, #52]	@ (80033d0 <HAL_RCC_OscConfig+0x504>)
 800339a:	f043 0301 	orr.w	r3, r3, #1
 800339e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033a2:	e029      	b.n	80033f8 <HAL_RCC_OscConfig+0x52c>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	2b05      	cmp	r3, #5
 80033aa:	d115      	bne.n	80033d8 <HAL_RCC_OscConfig+0x50c>
 80033ac:	4b08      	ldr	r3, [pc, #32]	@ (80033d0 <HAL_RCC_OscConfig+0x504>)
 80033ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033b2:	4a07      	ldr	r2, [pc, #28]	@ (80033d0 <HAL_RCC_OscConfig+0x504>)
 80033b4:	f043 0304 	orr.w	r3, r3, #4
 80033b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033bc:	4b04      	ldr	r3, [pc, #16]	@ (80033d0 <HAL_RCC_OscConfig+0x504>)
 80033be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033c2:	4a03      	ldr	r2, [pc, #12]	@ (80033d0 <HAL_RCC_OscConfig+0x504>)
 80033c4:	f043 0301 	orr.w	r3, r3, #1
 80033c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033cc:	e014      	b.n	80033f8 <HAL_RCC_OscConfig+0x52c>
 80033ce:	bf00      	nop
 80033d0:	40021000 	.word	0x40021000
 80033d4:	40007000 	.word	0x40007000
 80033d8:	4b9c      	ldr	r3, [pc, #624]	@ (800364c <HAL_RCC_OscConfig+0x780>)
 80033da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033de:	4a9b      	ldr	r2, [pc, #620]	@ (800364c <HAL_RCC_OscConfig+0x780>)
 80033e0:	f023 0301 	bic.w	r3, r3, #1
 80033e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033e8:	4b98      	ldr	r3, [pc, #608]	@ (800364c <HAL_RCC_OscConfig+0x780>)
 80033ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ee:	4a97      	ldr	r2, [pc, #604]	@ (800364c <HAL_RCC_OscConfig+0x780>)
 80033f0:	f023 0304 	bic.w	r3, r3, #4
 80033f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d016      	beq.n	800342e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003400:	f7fd fece 	bl	80011a0 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003406:	e00a      	b.n	800341e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003408:	f7fd feca 	bl	80011a0 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003416:	4293      	cmp	r3, r2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e12a      	b.n	8003674 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800341e:	4b8b      	ldr	r3, [pc, #556]	@ (800364c <HAL_RCC_OscConfig+0x780>)
 8003420:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0ed      	beq.n	8003408 <HAL_RCC_OscConfig+0x53c>
 800342c:	e015      	b.n	800345a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342e:	f7fd feb7 	bl	80011a0 <HAL_GetTick>
 8003432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003434:	e00a      	b.n	800344c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003436:	f7fd feb3 	bl	80011a0 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003444:	4293      	cmp	r3, r2
 8003446:	d901      	bls.n	800344c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e113      	b.n	8003674 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800344c:	4b7f      	ldr	r3, [pc, #508]	@ (800364c <HAL_RCC_OscConfig+0x780>)
 800344e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1ed      	bne.n	8003436 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800345a:	7ffb      	ldrb	r3, [r7, #31]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d105      	bne.n	800346c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003460:	4b7a      	ldr	r3, [pc, #488]	@ (800364c <HAL_RCC_OscConfig+0x780>)
 8003462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003464:	4a79      	ldr	r2, [pc, #484]	@ (800364c <HAL_RCC_OscConfig+0x780>)
 8003466:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800346a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 80fe 	beq.w	8003672 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800347a:	2b02      	cmp	r3, #2
 800347c:	f040 80d0 	bne.w	8003620 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003480:	4b72      	ldr	r3, [pc, #456]	@ (800364c <HAL_RCC_OscConfig+0x780>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f003 0203 	and.w	r2, r3, #3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003490:	429a      	cmp	r2, r3
 8003492:	d130      	bne.n	80034f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800349e:	3b01      	subs	r3, #1
 80034a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d127      	bne.n	80034f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d11f      	bne.n	80034f6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80034c0:	2a07      	cmp	r2, #7
 80034c2:	bf14      	ite	ne
 80034c4:	2201      	movne	r2, #1
 80034c6:	2200      	moveq	r2, #0
 80034c8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d113      	bne.n	80034f6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034d8:	085b      	lsrs	r3, r3, #1
 80034da:	3b01      	subs	r3, #1
 80034dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80034de:	429a      	cmp	r2, r3
 80034e0:	d109      	bne.n	80034f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ec:	085b      	lsrs	r3, r3, #1
 80034ee:	3b01      	subs	r3, #1
 80034f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d06e      	beq.n	80035d4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	2b0c      	cmp	r3, #12
 80034fa:	d069      	beq.n	80035d0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80034fc:	4b53      	ldr	r3, [pc, #332]	@ (800364c <HAL_RCC_OscConfig+0x780>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d105      	bne.n	8003514 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003508:	4b50      	ldr	r3, [pc, #320]	@ (800364c <HAL_RCC_OscConfig+0x780>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e0ad      	b.n	8003674 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003518:	4b4c      	ldr	r3, [pc, #304]	@ (800364c <HAL_RCC_OscConfig+0x780>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a4b      	ldr	r2, [pc, #300]	@ (800364c <HAL_RCC_OscConfig+0x780>)
 800351e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003522:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003524:	f7fd fe3c 	bl	80011a0 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800352c:	f7fd fe38 	bl	80011a0 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e09a      	b.n	8003674 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800353e:	4b43      	ldr	r3, [pc, #268]	@ (800364c <HAL_RCC_OscConfig+0x780>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1f0      	bne.n	800352c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800354a:	4b40      	ldr	r3, [pc, #256]	@ (800364c <HAL_RCC_OscConfig+0x780>)
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	4b40      	ldr	r3, [pc, #256]	@ (8003650 <HAL_RCC_OscConfig+0x784>)
 8003550:	4013      	ands	r3, r2
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800355a:	3a01      	subs	r2, #1
 800355c:	0112      	lsls	r2, r2, #4
 800355e:	4311      	orrs	r1, r2
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003564:	0212      	lsls	r2, r2, #8
 8003566:	4311      	orrs	r1, r2
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800356c:	0852      	lsrs	r2, r2, #1
 800356e:	3a01      	subs	r2, #1
 8003570:	0552      	lsls	r2, r2, #21
 8003572:	4311      	orrs	r1, r2
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003578:	0852      	lsrs	r2, r2, #1
 800357a:	3a01      	subs	r2, #1
 800357c:	0652      	lsls	r2, r2, #25
 800357e:	4311      	orrs	r1, r2
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003584:	0912      	lsrs	r2, r2, #4
 8003586:	0452      	lsls	r2, r2, #17
 8003588:	430a      	orrs	r2, r1
 800358a:	4930      	ldr	r1, [pc, #192]	@ (800364c <HAL_RCC_OscConfig+0x780>)
 800358c:	4313      	orrs	r3, r2
 800358e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003590:	4b2e      	ldr	r3, [pc, #184]	@ (800364c <HAL_RCC_OscConfig+0x780>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a2d      	ldr	r2, [pc, #180]	@ (800364c <HAL_RCC_OscConfig+0x780>)
 8003596:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800359a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800359c:	4b2b      	ldr	r3, [pc, #172]	@ (800364c <HAL_RCC_OscConfig+0x780>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	4a2a      	ldr	r2, [pc, #168]	@ (800364c <HAL_RCC_OscConfig+0x780>)
 80035a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035a8:	f7fd fdfa 	bl	80011a0 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b0:	f7fd fdf6 	bl	80011a0 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e058      	b.n	8003674 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035c2:	4b22      	ldr	r3, [pc, #136]	@ (800364c <HAL_RCC_OscConfig+0x780>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0f0      	beq.n	80035b0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035ce:	e050      	b.n	8003672 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e04f      	b.n	8003674 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035d4:	4b1d      	ldr	r3, [pc, #116]	@ (800364c <HAL_RCC_OscConfig+0x780>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d148      	bne.n	8003672 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80035e0:	4b1a      	ldr	r3, [pc, #104]	@ (800364c <HAL_RCC_OscConfig+0x780>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a19      	ldr	r2, [pc, #100]	@ (800364c <HAL_RCC_OscConfig+0x780>)
 80035e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035ec:	4b17      	ldr	r3, [pc, #92]	@ (800364c <HAL_RCC_OscConfig+0x780>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	4a16      	ldr	r2, [pc, #88]	@ (800364c <HAL_RCC_OscConfig+0x780>)
 80035f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035f8:	f7fd fdd2 	bl	80011a0 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003600:	f7fd fdce 	bl	80011a0 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e030      	b.n	8003674 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003612:	4b0e      	ldr	r3, [pc, #56]	@ (800364c <HAL_RCC_OscConfig+0x780>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0f0      	beq.n	8003600 <HAL_RCC_OscConfig+0x734>
 800361e:	e028      	b.n	8003672 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	2b0c      	cmp	r3, #12
 8003624:	d023      	beq.n	800366e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003626:	4b09      	ldr	r3, [pc, #36]	@ (800364c <HAL_RCC_OscConfig+0x780>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a08      	ldr	r2, [pc, #32]	@ (800364c <HAL_RCC_OscConfig+0x780>)
 800362c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003630:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003632:	f7fd fdb5 	bl	80011a0 <HAL_GetTick>
 8003636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003638:	e00c      	b.n	8003654 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800363a:	f7fd fdb1 	bl	80011a0 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d905      	bls.n	8003654 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e013      	b.n	8003674 <HAL_RCC_OscConfig+0x7a8>
 800364c:	40021000 	.word	0x40021000
 8003650:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003654:	4b09      	ldr	r3, [pc, #36]	@ (800367c <HAL_RCC_OscConfig+0x7b0>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1ec      	bne.n	800363a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003660:	4b06      	ldr	r3, [pc, #24]	@ (800367c <HAL_RCC_OscConfig+0x7b0>)
 8003662:	68da      	ldr	r2, [r3, #12]
 8003664:	4905      	ldr	r1, [pc, #20]	@ (800367c <HAL_RCC_OscConfig+0x7b0>)
 8003666:	4b06      	ldr	r3, [pc, #24]	@ (8003680 <HAL_RCC_OscConfig+0x7b4>)
 8003668:	4013      	ands	r3, r2
 800366a:	60cb      	str	r3, [r1, #12]
 800366c:	e001      	b.n	8003672 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e000      	b.n	8003674 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3720      	adds	r7, #32
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40021000 	.word	0x40021000
 8003680:	feeefffc 	.word	0xfeeefffc

08003684 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e0e7      	b.n	8003868 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003698:	4b75      	ldr	r3, [pc, #468]	@ (8003870 <HAL_RCC_ClockConfig+0x1ec>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d910      	bls.n	80036c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036a6:	4b72      	ldr	r3, [pc, #456]	@ (8003870 <HAL_RCC_ClockConfig+0x1ec>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f023 0207 	bic.w	r2, r3, #7
 80036ae:	4970      	ldr	r1, [pc, #448]	@ (8003870 <HAL_RCC_ClockConfig+0x1ec>)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036b6:	4b6e      	ldr	r3, [pc, #440]	@ (8003870 <HAL_RCC_ClockConfig+0x1ec>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0307 	and.w	r3, r3, #7
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d001      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e0cf      	b.n	8003868 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d010      	beq.n	80036f6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	4b66      	ldr	r3, [pc, #408]	@ (8003874 <HAL_RCC_ClockConfig+0x1f0>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d908      	bls.n	80036f6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036e4:	4b63      	ldr	r3, [pc, #396]	@ (8003874 <HAL_RCC_ClockConfig+0x1f0>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	4960      	ldr	r1, [pc, #384]	@ (8003874 <HAL_RCC_ClockConfig+0x1f0>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d04c      	beq.n	800379c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	2b03      	cmp	r3, #3
 8003708:	d107      	bne.n	800371a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800370a:	4b5a      	ldr	r3, [pc, #360]	@ (8003874 <HAL_RCC_ClockConfig+0x1f0>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d121      	bne.n	800375a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e0a6      	b.n	8003868 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b02      	cmp	r3, #2
 8003720:	d107      	bne.n	8003732 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003722:	4b54      	ldr	r3, [pc, #336]	@ (8003874 <HAL_RCC_ClockConfig+0x1f0>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d115      	bne.n	800375a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e09a      	b.n	8003868 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d107      	bne.n	800374a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800373a:	4b4e      	ldr	r3, [pc, #312]	@ (8003874 <HAL_RCC_ClockConfig+0x1f0>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d109      	bne.n	800375a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e08e      	b.n	8003868 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800374a:	4b4a      	ldr	r3, [pc, #296]	@ (8003874 <HAL_RCC_ClockConfig+0x1f0>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e086      	b.n	8003868 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800375a:	4b46      	ldr	r3, [pc, #280]	@ (8003874 <HAL_RCC_ClockConfig+0x1f0>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f023 0203 	bic.w	r2, r3, #3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	4943      	ldr	r1, [pc, #268]	@ (8003874 <HAL_RCC_ClockConfig+0x1f0>)
 8003768:	4313      	orrs	r3, r2
 800376a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800376c:	f7fd fd18 	bl	80011a0 <HAL_GetTick>
 8003770:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003772:	e00a      	b.n	800378a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003774:	f7fd fd14 	bl	80011a0 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003782:	4293      	cmp	r3, r2
 8003784:	d901      	bls.n	800378a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e06e      	b.n	8003868 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800378a:	4b3a      	ldr	r3, [pc, #232]	@ (8003874 <HAL_RCC_ClockConfig+0x1f0>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 020c 	and.w	r2, r3, #12
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	429a      	cmp	r2, r3
 800379a:	d1eb      	bne.n	8003774 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d010      	beq.n	80037ca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	4b31      	ldr	r3, [pc, #196]	@ (8003874 <HAL_RCC_ClockConfig+0x1f0>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d208      	bcs.n	80037ca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037b8:	4b2e      	ldr	r3, [pc, #184]	@ (8003874 <HAL_RCC_ClockConfig+0x1f0>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	492b      	ldr	r1, [pc, #172]	@ (8003874 <HAL_RCC_ClockConfig+0x1f0>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037ca:	4b29      	ldr	r3, [pc, #164]	@ (8003870 <HAL_RCC_ClockConfig+0x1ec>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d210      	bcs.n	80037fa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d8:	4b25      	ldr	r3, [pc, #148]	@ (8003870 <HAL_RCC_ClockConfig+0x1ec>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f023 0207 	bic.w	r2, r3, #7
 80037e0:	4923      	ldr	r1, [pc, #140]	@ (8003870 <HAL_RCC_ClockConfig+0x1ec>)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e8:	4b21      	ldr	r3, [pc, #132]	@ (8003870 <HAL_RCC_ClockConfig+0x1ec>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d001      	beq.n	80037fa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e036      	b.n	8003868 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0304 	and.w	r3, r3, #4
 8003802:	2b00      	cmp	r3, #0
 8003804:	d008      	beq.n	8003818 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003806:	4b1b      	ldr	r3, [pc, #108]	@ (8003874 <HAL_RCC_ClockConfig+0x1f0>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	4918      	ldr	r1, [pc, #96]	@ (8003874 <HAL_RCC_ClockConfig+0x1f0>)
 8003814:	4313      	orrs	r3, r2
 8003816:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0308 	and.w	r3, r3, #8
 8003820:	2b00      	cmp	r3, #0
 8003822:	d009      	beq.n	8003838 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003824:	4b13      	ldr	r3, [pc, #76]	@ (8003874 <HAL_RCC_ClockConfig+0x1f0>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	4910      	ldr	r1, [pc, #64]	@ (8003874 <HAL_RCC_ClockConfig+0x1f0>)
 8003834:	4313      	orrs	r3, r2
 8003836:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003838:	f000 f824 	bl	8003884 <HAL_RCC_GetSysClockFreq>
 800383c:	4602      	mov	r2, r0
 800383e:	4b0d      	ldr	r3, [pc, #52]	@ (8003874 <HAL_RCC_ClockConfig+0x1f0>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	091b      	lsrs	r3, r3, #4
 8003844:	f003 030f 	and.w	r3, r3, #15
 8003848:	490b      	ldr	r1, [pc, #44]	@ (8003878 <HAL_RCC_ClockConfig+0x1f4>)
 800384a:	5ccb      	ldrb	r3, [r1, r3]
 800384c:	f003 031f 	and.w	r3, r3, #31
 8003850:	fa22 f303 	lsr.w	r3, r2, r3
 8003854:	4a09      	ldr	r2, [pc, #36]	@ (800387c <HAL_RCC_ClockConfig+0x1f8>)
 8003856:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003858:	4b09      	ldr	r3, [pc, #36]	@ (8003880 <HAL_RCC_ClockConfig+0x1fc>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f7fd fc4f 	bl	8001100 <HAL_InitTick>
 8003862:	4603      	mov	r3, r0
 8003864:	72fb      	strb	r3, [r7, #11]

  return status;
 8003866:	7afb      	ldrb	r3, [r7, #11]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40022000 	.word	0x40022000
 8003874:	40021000 	.word	0x40021000
 8003878:	0800ac64 	.word	0x0800ac64
 800387c:	20000000 	.word	0x20000000
 8003880:	20000004 	.word	0x20000004

08003884 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003884:	b480      	push	{r7}
 8003886:	b089      	sub	sp, #36	@ 0x24
 8003888:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800388a:	2300      	movs	r3, #0
 800388c:	61fb      	str	r3, [r7, #28]
 800388e:	2300      	movs	r3, #0
 8003890:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003892:	4b3e      	ldr	r3, [pc, #248]	@ (800398c <HAL_RCC_GetSysClockFreq+0x108>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 030c 	and.w	r3, r3, #12
 800389a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800389c:	4b3b      	ldr	r3, [pc, #236]	@ (800398c <HAL_RCC_GetSysClockFreq+0x108>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f003 0303 	and.w	r3, r3, #3
 80038a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d005      	beq.n	80038b8 <HAL_RCC_GetSysClockFreq+0x34>
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	2b0c      	cmp	r3, #12
 80038b0:	d121      	bne.n	80038f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d11e      	bne.n	80038f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80038b8:	4b34      	ldr	r3, [pc, #208]	@ (800398c <HAL_RCC_GetSysClockFreq+0x108>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0308 	and.w	r3, r3, #8
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d107      	bne.n	80038d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80038c4:	4b31      	ldr	r3, [pc, #196]	@ (800398c <HAL_RCC_GetSysClockFreq+0x108>)
 80038c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038ca:	0a1b      	lsrs	r3, r3, #8
 80038cc:	f003 030f 	and.w	r3, r3, #15
 80038d0:	61fb      	str	r3, [r7, #28]
 80038d2:	e005      	b.n	80038e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80038d4:	4b2d      	ldr	r3, [pc, #180]	@ (800398c <HAL_RCC_GetSysClockFreq+0x108>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	091b      	lsrs	r3, r3, #4
 80038da:	f003 030f 	and.w	r3, r3, #15
 80038de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80038e0:	4a2b      	ldr	r2, [pc, #172]	@ (8003990 <HAL_RCC_GetSysClockFreq+0x10c>)
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10d      	bne.n	800390c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038f4:	e00a      	b.n	800390c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d102      	bne.n	8003902 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038fc:	4b25      	ldr	r3, [pc, #148]	@ (8003994 <HAL_RCC_GetSysClockFreq+0x110>)
 80038fe:	61bb      	str	r3, [r7, #24]
 8003900:	e004      	b.n	800390c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	2b08      	cmp	r3, #8
 8003906:	d101      	bne.n	800390c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003908:	4b23      	ldr	r3, [pc, #140]	@ (8003998 <HAL_RCC_GetSysClockFreq+0x114>)
 800390a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	2b0c      	cmp	r3, #12
 8003910:	d134      	bne.n	800397c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003912:	4b1e      	ldr	r3, [pc, #120]	@ (800398c <HAL_RCC_GetSysClockFreq+0x108>)
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	f003 0303 	and.w	r3, r3, #3
 800391a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b02      	cmp	r3, #2
 8003920:	d003      	beq.n	800392a <HAL_RCC_GetSysClockFreq+0xa6>
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	2b03      	cmp	r3, #3
 8003926:	d003      	beq.n	8003930 <HAL_RCC_GetSysClockFreq+0xac>
 8003928:	e005      	b.n	8003936 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800392a:	4b1a      	ldr	r3, [pc, #104]	@ (8003994 <HAL_RCC_GetSysClockFreq+0x110>)
 800392c:	617b      	str	r3, [r7, #20]
      break;
 800392e:	e005      	b.n	800393c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003930:	4b19      	ldr	r3, [pc, #100]	@ (8003998 <HAL_RCC_GetSysClockFreq+0x114>)
 8003932:	617b      	str	r3, [r7, #20]
      break;
 8003934:	e002      	b.n	800393c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	617b      	str	r3, [r7, #20]
      break;
 800393a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800393c:	4b13      	ldr	r3, [pc, #76]	@ (800398c <HAL_RCC_GetSysClockFreq+0x108>)
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	091b      	lsrs	r3, r3, #4
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	3301      	adds	r3, #1
 8003948:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800394a:	4b10      	ldr	r3, [pc, #64]	@ (800398c <HAL_RCC_GetSysClockFreq+0x108>)
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	0a1b      	lsrs	r3, r3, #8
 8003950:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	fb03 f202 	mul.w	r2, r3, r2
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003960:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003962:	4b0a      	ldr	r3, [pc, #40]	@ (800398c <HAL_RCC_GetSysClockFreq+0x108>)
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	0e5b      	lsrs	r3, r3, #25
 8003968:	f003 0303 	and.w	r3, r3, #3
 800396c:	3301      	adds	r3, #1
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	fbb2 f3f3 	udiv	r3, r2, r3
 800397a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800397c:	69bb      	ldr	r3, [r7, #24]
}
 800397e:	4618      	mov	r0, r3
 8003980:	3724      	adds	r7, #36	@ 0x24
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	40021000 	.word	0x40021000
 8003990:	0800ac7c 	.word	0x0800ac7c
 8003994:	00f42400 	.word	0x00f42400
 8003998:	007a1200 	.word	0x007a1200

0800399c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039a0:	4b03      	ldr	r3, [pc, #12]	@ (80039b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80039a2:	681b      	ldr	r3, [r3, #0]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	20000000 	.word	0x20000000

080039b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80039b8:	f7ff fff0 	bl	800399c <HAL_RCC_GetHCLKFreq>
 80039bc:	4602      	mov	r2, r0
 80039be:	4b06      	ldr	r3, [pc, #24]	@ (80039d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	0a1b      	lsrs	r3, r3, #8
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	4904      	ldr	r1, [pc, #16]	@ (80039dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80039ca:	5ccb      	ldrb	r3, [r1, r3]
 80039cc:	f003 031f 	and.w	r3, r3, #31
 80039d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	40021000 	.word	0x40021000
 80039dc:	0800ac74 	.word	0x0800ac74

080039e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80039e4:	f7ff ffda 	bl	800399c <HAL_RCC_GetHCLKFreq>
 80039e8:	4602      	mov	r2, r0
 80039ea:	4b06      	ldr	r3, [pc, #24]	@ (8003a04 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	0adb      	lsrs	r3, r3, #11
 80039f0:	f003 0307 	and.w	r3, r3, #7
 80039f4:	4904      	ldr	r1, [pc, #16]	@ (8003a08 <HAL_RCC_GetPCLK2Freq+0x28>)
 80039f6:	5ccb      	ldrb	r3, [r1, r3]
 80039f8:	f003 031f 	and.w	r3, r3, #31
 80039fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	40021000 	.word	0x40021000
 8003a08:	0800ac74 	.word	0x0800ac74

08003a0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a14:	2300      	movs	r3, #0
 8003a16:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a18:	4b2a      	ldr	r3, [pc, #168]	@ (8003ac4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d003      	beq.n	8003a2c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a24:	f7ff f9ee 	bl	8002e04 <HAL_PWREx_GetVoltageRange>
 8003a28:	6178      	str	r0, [r7, #20]
 8003a2a:	e014      	b.n	8003a56 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a2c:	4b25      	ldr	r3, [pc, #148]	@ (8003ac4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a30:	4a24      	ldr	r2, [pc, #144]	@ (8003ac4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a36:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a38:	4b22      	ldr	r3, [pc, #136]	@ (8003ac4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a40:	60fb      	str	r3, [r7, #12]
 8003a42:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003a44:	f7ff f9de 	bl	8002e04 <HAL_PWREx_GetVoltageRange>
 8003a48:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a4a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ac4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a4e:	4a1d      	ldr	r2, [pc, #116]	@ (8003ac4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a54:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a5c:	d10b      	bne.n	8003a76 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b80      	cmp	r3, #128	@ 0x80
 8003a62:	d919      	bls.n	8003a98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2ba0      	cmp	r3, #160	@ 0xa0
 8003a68:	d902      	bls.n	8003a70 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	613b      	str	r3, [r7, #16]
 8003a6e:	e013      	b.n	8003a98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a70:	2301      	movs	r3, #1
 8003a72:	613b      	str	r3, [r7, #16]
 8003a74:	e010      	b.n	8003a98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b80      	cmp	r3, #128	@ 0x80
 8003a7a:	d902      	bls.n	8003a82 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	613b      	str	r3, [r7, #16]
 8003a80:	e00a      	b.n	8003a98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b80      	cmp	r3, #128	@ 0x80
 8003a86:	d102      	bne.n	8003a8e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a88:	2302      	movs	r3, #2
 8003a8a:	613b      	str	r3, [r7, #16]
 8003a8c:	e004      	b.n	8003a98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b70      	cmp	r3, #112	@ 0x70
 8003a92:	d101      	bne.n	8003a98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a94:	2301      	movs	r3, #1
 8003a96:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a98:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f023 0207 	bic.w	r2, r3, #7
 8003aa0:	4909      	ldr	r1, [pc, #36]	@ (8003ac8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003aa8:	4b07      	ldr	r3, [pc, #28]	@ (8003ac8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0307 	and.w	r3, r3, #7
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d001      	beq.n	8003aba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e000      	b.n	8003abc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3718      	adds	r7, #24
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	40022000 	.word	0x40022000

08003acc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ad8:	2300      	movs	r3, #0
 8003ada:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d041      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003aec:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003af0:	d02a      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003af2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003af6:	d824      	bhi.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003af8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003afc:	d008      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003afe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b02:	d81e      	bhi.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00a      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003b08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b0c:	d010      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b0e:	e018      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b10:	4b86      	ldr	r3, [pc, #536]	@ (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	4a85      	ldr	r2, [pc, #532]	@ (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b1a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b1c:	e015      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	3304      	adds	r3, #4
 8003b22:	2100      	movs	r1, #0
 8003b24:	4618      	mov	r0, r3
 8003b26:	f000 fabb 	bl	80040a0 <RCCEx_PLLSAI1_Config>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b2e:	e00c      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3320      	adds	r3, #32
 8003b34:	2100      	movs	r1, #0
 8003b36:	4618      	mov	r0, r3
 8003b38:	f000 fba6 	bl	8004288 <RCCEx_PLLSAI2_Config>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b40:	e003      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	74fb      	strb	r3, [r7, #19]
      break;
 8003b46:	e000      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003b48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b4a:	7cfb      	ldrb	r3, [r7, #19]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10b      	bne.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b50:	4b76      	ldr	r3, [pc, #472]	@ (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b56:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b5e:	4973      	ldr	r1, [pc, #460]	@ (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003b66:	e001      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b68:	7cfb      	ldrb	r3, [r7, #19]
 8003b6a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d041      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b7c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003b80:	d02a      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003b82:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003b86:	d824      	bhi.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b8c:	d008      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b92:	d81e      	bhi.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00a      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003b98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b9c:	d010      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b9e:	e018      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ba0:	4b62      	ldr	r3, [pc, #392]	@ (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	4a61      	ldr	r2, [pc, #388]	@ (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ba6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003baa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003bac:	e015      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f000 fa73 	bl	80040a0 <RCCEx_PLLSAI1_Config>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003bbe:	e00c      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	3320      	adds	r3, #32
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 fb5e 	bl	8004288 <RCCEx_PLLSAI2_Config>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003bd0:	e003      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	74fb      	strb	r3, [r7, #19]
      break;
 8003bd6:	e000      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003bd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bda:	7cfb      	ldrb	r3, [r7, #19]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d10b      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003be0:	4b52      	ldr	r3, [pc, #328]	@ (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003be6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bee:	494f      	ldr	r1, [pc, #316]	@ (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003bf6:	e001      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf8:	7cfb      	ldrb	r3, [r7, #19]
 8003bfa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 80a0 	beq.w	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c0e:	4b47      	ldr	r3, [pc, #284]	@ (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e000      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003c1e:	2300      	movs	r3, #0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00d      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c24:	4b41      	ldr	r3, [pc, #260]	@ (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c28:	4a40      	ldr	r2, [pc, #256]	@ (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c30:	4b3e      	ldr	r3, [pc, #248]	@ (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c38:	60bb      	str	r3, [r7, #8]
 8003c3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c40:	4b3b      	ldr	r3, [pc, #236]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a3a      	ldr	r2, [pc, #232]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c4c:	f7fd faa8 	bl	80011a0 <HAL_GetTick>
 8003c50:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c52:	e009      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c54:	f7fd faa4 	bl	80011a0 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d902      	bls.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	74fb      	strb	r3, [r7, #19]
        break;
 8003c66:	e005      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c68:	4b31      	ldr	r3, [pc, #196]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0ef      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003c74:	7cfb      	ldrb	r3, [r7, #19]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d15c      	bne.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c7a:	4b2c      	ldr	r3, [pc, #176]	@ (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c84:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d01f      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d019      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c98:	4b24      	ldr	r3, [pc, #144]	@ (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ca2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ca4:	4b21      	ldr	r3, [pc, #132]	@ (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003caa:	4a20      	ldr	r2, [pc, #128]	@ (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003cb4:	4b1d      	ldr	r3, [pc, #116]	@ (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cba:	4a1c      	ldr	r2, [pc, #112]	@ (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003cc4:	4a19      	ldr	r2, [pc, #100]	@ (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d016      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd6:	f7fd fa63 	bl	80011a0 <HAL_GetTick>
 8003cda:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cdc:	e00b      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cde:	f7fd fa5f 	bl	80011a0 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d902      	bls.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	74fb      	strb	r3, [r7, #19]
            break;
 8003cf4:	e006      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d0ec      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003d04:	7cfb      	ldrb	r3, [r7, #19]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10c      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d0a:	4b08      	ldr	r3, [pc, #32]	@ (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d1a:	4904      	ldr	r1, [pc, #16]	@ (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003d22:	e009      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d24:	7cfb      	ldrb	r3, [r7, #19]
 8003d26:	74bb      	strb	r3, [r7, #18]
 8003d28:	e006      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003d2a:	bf00      	nop
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d34:	7cfb      	ldrb	r3, [r7, #19]
 8003d36:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d38:	7c7b      	ldrb	r3, [r7, #17]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d105      	bne.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d3e:	4b9e      	ldr	r3, [pc, #632]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d42:	4a9d      	ldr	r2, [pc, #628]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d48:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00a      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d56:	4b98      	ldr	r3, [pc, #608]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d5c:	f023 0203 	bic.w	r2, r3, #3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d64:	4994      	ldr	r1, [pc, #592]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00a      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d78:	4b8f      	ldr	r3, [pc, #572]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d7e:	f023 020c 	bic.w	r2, r3, #12
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d86:	498c      	ldr	r1, [pc, #560]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0304 	and.w	r3, r3, #4
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00a      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d9a:	4b87      	ldr	r3, [pc, #540]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003da0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da8:	4983      	ldr	r1, [pc, #524]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0308 	and.w	r3, r3, #8
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00a      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003dbc:	4b7e      	ldr	r3, [pc, #504]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dc2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dca:	497b      	ldr	r1, [pc, #492]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0310 	and.w	r3, r3, #16
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00a      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003dde:	4b76      	ldr	r3, [pc, #472]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dec:	4972      	ldr	r1, [pc, #456]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0320 	and.w	r3, r3, #32
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00a      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e00:	4b6d      	ldr	r3, [pc, #436]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e06:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e0e:	496a      	ldr	r1, [pc, #424]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00a      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e22:	4b65      	ldr	r3, [pc, #404]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e28:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e30:	4961      	ldr	r1, [pc, #388]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00a      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e44:	4b5c      	ldr	r3, [pc, #368]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e4a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e52:	4959      	ldr	r1, [pc, #356]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00a      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e66:	4b54      	ldr	r3, [pc, #336]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e6c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e74:	4950      	ldr	r1, [pc, #320]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00a      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e88:	4b4b      	ldr	r3, [pc, #300]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e8e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e96:	4948      	ldr	r1, [pc, #288]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00a      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003eaa:	4b43      	ldr	r3, [pc, #268]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eb0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eb8:	493f      	ldr	r1, [pc, #252]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d028      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ecc:	4b3a      	ldr	r3, [pc, #232]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003eda:	4937      	ldr	r1, [pc, #220]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ee6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003eea:	d106      	bne.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003eec:	4b32      	ldr	r3, [pc, #200]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	4a31      	ldr	r2, [pc, #196]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ef6:	60d3      	str	r3, [r2, #12]
 8003ef8:	e011      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003efe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f02:	d10c      	bne.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	3304      	adds	r3, #4
 8003f08:	2101      	movs	r1, #1
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 f8c8 	bl	80040a0 <RCCEx_PLLSAI1_Config>
 8003f10:	4603      	mov	r3, r0
 8003f12:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f14:	7cfb      	ldrb	r3, [r7, #19]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003f1a:	7cfb      	ldrb	r3, [r7, #19]
 8003f1c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d028      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f2a:	4b23      	ldr	r3, [pc, #140]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f30:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f38:	491f      	ldr	r1, [pc, #124]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f48:	d106      	bne.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f4a:	4b1b      	ldr	r3, [pc, #108]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	4a1a      	ldr	r2, [pc, #104]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f50:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f54:	60d3      	str	r3, [r2, #12]
 8003f56:	e011      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f60:	d10c      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	3304      	adds	r3, #4
 8003f66:	2101      	movs	r1, #1
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f000 f899 	bl	80040a0 <RCCEx_PLLSAI1_Config>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f72:	7cfb      	ldrb	r3, [r7, #19]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003f78:	7cfb      	ldrb	r3, [r7, #19]
 8003f7a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d02b      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f88:	4b0b      	ldr	r3, [pc, #44]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f8e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f96:	4908      	ldr	r1, [pc, #32]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fa2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fa6:	d109      	bne.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fa8:	4b03      	ldr	r3, [pc, #12]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	4a02      	ldr	r2, [pc, #8]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fb2:	60d3      	str	r3, [r2, #12]
 8003fb4:	e014      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003fb6:	bf00      	nop
 8003fb8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fc0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fc4:	d10c      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	3304      	adds	r3, #4
 8003fca:	2101      	movs	r1, #1
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 f867 	bl	80040a0 <RCCEx_PLLSAI1_Config>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fd6:	7cfb      	ldrb	r3, [r7, #19]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003fdc:	7cfb      	ldrb	r3, [r7, #19]
 8003fde:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d02f      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fec:	4b2b      	ldr	r3, [pc, #172]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ffa:	4928      	ldr	r1, [pc, #160]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004006:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800400a:	d10d      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	3304      	adds	r3, #4
 8004010:	2102      	movs	r1, #2
 8004012:	4618      	mov	r0, r3
 8004014:	f000 f844 	bl	80040a0 <RCCEx_PLLSAI1_Config>
 8004018:	4603      	mov	r3, r0
 800401a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800401c:	7cfb      	ldrb	r3, [r7, #19]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d014      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004022:	7cfb      	ldrb	r3, [r7, #19]
 8004024:	74bb      	strb	r3, [r7, #18]
 8004026:	e011      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800402c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004030:	d10c      	bne.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	3320      	adds	r3, #32
 8004036:	2102      	movs	r1, #2
 8004038:	4618      	mov	r0, r3
 800403a:	f000 f925 	bl	8004288 <RCCEx_PLLSAI2_Config>
 800403e:	4603      	mov	r3, r0
 8004040:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004042:	7cfb      	ldrb	r3, [r7, #19]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d001      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004048:	7cfb      	ldrb	r3, [r7, #19]
 800404a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00a      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004058:	4b10      	ldr	r3, [pc, #64]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800405a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800405e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004066:	490d      	ldr	r1, [pc, #52]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004068:	4313      	orrs	r3, r2
 800406a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00b      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800407a:	4b08      	ldr	r3, [pc, #32]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800407c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004080:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800408a:	4904      	ldr	r1, [pc, #16]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800408c:	4313      	orrs	r3, r2
 800408e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004092:	7cbb      	ldrb	r3, [r7, #18]
}
 8004094:	4618      	mov	r0, r3
 8004096:	3718      	adds	r7, #24
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40021000 	.word	0x40021000

080040a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040aa:	2300      	movs	r3, #0
 80040ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040ae:	4b75      	ldr	r3, [pc, #468]	@ (8004284 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f003 0303 	and.w	r3, r3, #3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d018      	beq.n	80040ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80040ba:	4b72      	ldr	r3, [pc, #456]	@ (8004284 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	f003 0203 	and.w	r2, r3, #3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d10d      	bne.n	80040e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
       ||
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d009      	beq.n	80040e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80040d2:	4b6c      	ldr	r3, [pc, #432]	@ (8004284 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	091b      	lsrs	r3, r3, #4
 80040d8:	f003 0307 	and.w	r3, r3, #7
 80040dc:	1c5a      	adds	r2, r3, #1
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
       ||
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d047      	beq.n	8004176 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	73fb      	strb	r3, [r7, #15]
 80040ea:	e044      	b.n	8004176 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b03      	cmp	r3, #3
 80040f2:	d018      	beq.n	8004126 <RCCEx_PLLSAI1_Config+0x86>
 80040f4:	2b03      	cmp	r3, #3
 80040f6:	d825      	bhi.n	8004144 <RCCEx_PLLSAI1_Config+0xa4>
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d002      	beq.n	8004102 <RCCEx_PLLSAI1_Config+0x62>
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d009      	beq.n	8004114 <RCCEx_PLLSAI1_Config+0x74>
 8004100:	e020      	b.n	8004144 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004102:	4b60      	ldr	r3, [pc, #384]	@ (8004284 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d11d      	bne.n	800414a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004112:	e01a      	b.n	800414a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004114:	4b5b      	ldr	r3, [pc, #364]	@ (8004284 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800411c:	2b00      	cmp	r3, #0
 800411e:	d116      	bne.n	800414e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004124:	e013      	b.n	800414e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004126:	4b57      	ldr	r3, [pc, #348]	@ (8004284 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10f      	bne.n	8004152 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004132:	4b54      	ldr	r3, [pc, #336]	@ (8004284 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d109      	bne.n	8004152 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004142:	e006      	b.n	8004152 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	73fb      	strb	r3, [r7, #15]
      break;
 8004148:	e004      	b.n	8004154 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800414a:	bf00      	nop
 800414c:	e002      	b.n	8004154 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800414e:	bf00      	nop
 8004150:	e000      	b.n	8004154 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004152:	bf00      	nop
    }

    if(status == HAL_OK)
 8004154:	7bfb      	ldrb	r3, [r7, #15]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10d      	bne.n	8004176 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800415a:	4b4a      	ldr	r3, [pc, #296]	@ (8004284 <RCCEx_PLLSAI1_Config+0x1e4>)
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6819      	ldr	r1, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	3b01      	subs	r3, #1
 800416c:	011b      	lsls	r3, r3, #4
 800416e:	430b      	orrs	r3, r1
 8004170:	4944      	ldr	r1, [pc, #272]	@ (8004284 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004172:	4313      	orrs	r3, r2
 8004174:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004176:	7bfb      	ldrb	r3, [r7, #15]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d17d      	bne.n	8004278 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800417c:	4b41      	ldr	r3, [pc, #260]	@ (8004284 <RCCEx_PLLSAI1_Config+0x1e4>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a40      	ldr	r2, [pc, #256]	@ (8004284 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004182:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004186:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004188:	f7fd f80a 	bl	80011a0 <HAL_GetTick>
 800418c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800418e:	e009      	b.n	80041a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004190:	f7fd f806 	bl	80011a0 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b02      	cmp	r3, #2
 800419c:	d902      	bls.n	80041a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	73fb      	strb	r3, [r7, #15]
        break;
 80041a2:	e005      	b.n	80041b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041a4:	4b37      	ldr	r3, [pc, #220]	@ (8004284 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1ef      	bne.n	8004190 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80041b0:	7bfb      	ldrb	r3, [r7, #15]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d160      	bne.n	8004278 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d111      	bne.n	80041e0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041bc:	4b31      	ldr	r3, [pc, #196]	@ (8004284 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80041c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6892      	ldr	r2, [r2, #8]
 80041cc:	0211      	lsls	r1, r2, #8
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	68d2      	ldr	r2, [r2, #12]
 80041d2:	0912      	lsrs	r2, r2, #4
 80041d4:	0452      	lsls	r2, r2, #17
 80041d6:	430a      	orrs	r2, r1
 80041d8:	492a      	ldr	r1, [pc, #168]	@ (8004284 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	610b      	str	r3, [r1, #16]
 80041de:	e027      	b.n	8004230 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d112      	bne.n	800420c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041e6:	4b27      	ldr	r3, [pc, #156]	@ (8004284 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80041ee:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6892      	ldr	r2, [r2, #8]
 80041f6:	0211      	lsls	r1, r2, #8
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	6912      	ldr	r2, [r2, #16]
 80041fc:	0852      	lsrs	r2, r2, #1
 80041fe:	3a01      	subs	r2, #1
 8004200:	0552      	lsls	r2, r2, #21
 8004202:	430a      	orrs	r2, r1
 8004204:	491f      	ldr	r1, [pc, #124]	@ (8004284 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004206:	4313      	orrs	r3, r2
 8004208:	610b      	str	r3, [r1, #16]
 800420a:	e011      	b.n	8004230 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800420c:	4b1d      	ldr	r3, [pc, #116]	@ (8004284 <RCCEx_PLLSAI1_Config+0x1e4>)
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004214:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	6892      	ldr	r2, [r2, #8]
 800421c:	0211      	lsls	r1, r2, #8
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	6952      	ldr	r2, [r2, #20]
 8004222:	0852      	lsrs	r2, r2, #1
 8004224:	3a01      	subs	r2, #1
 8004226:	0652      	lsls	r2, r2, #25
 8004228:	430a      	orrs	r2, r1
 800422a:	4916      	ldr	r1, [pc, #88]	@ (8004284 <RCCEx_PLLSAI1_Config+0x1e4>)
 800422c:	4313      	orrs	r3, r2
 800422e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004230:	4b14      	ldr	r3, [pc, #80]	@ (8004284 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a13      	ldr	r2, [pc, #76]	@ (8004284 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004236:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800423a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800423c:	f7fc ffb0 	bl	80011a0 <HAL_GetTick>
 8004240:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004242:	e009      	b.n	8004258 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004244:	f7fc ffac 	bl	80011a0 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d902      	bls.n	8004258 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	73fb      	strb	r3, [r7, #15]
          break;
 8004256:	e005      	b.n	8004264 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004258:	4b0a      	ldr	r3, [pc, #40]	@ (8004284 <RCCEx_PLLSAI1_Config+0x1e4>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d0ef      	beq.n	8004244 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004264:	7bfb      	ldrb	r3, [r7, #15]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d106      	bne.n	8004278 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800426a:	4b06      	ldr	r3, [pc, #24]	@ (8004284 <RCCEx_PLLSAI1_Config+0x1e4>)
 800426c:	691a      	ldr	r2, [r3, #16]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	4904      	ldr	r1, [pc, #16]	@ (8004284 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004274:	4313      	orrs	r3, r2
 8004276:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004278:	7bfb      	ldrb	r3, [r7, #15]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	40021000 	.word	0x40021000

08004288 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004292:	2300      	movs	r3, #0
 8004294:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004296:	4b6a      	ldr	r3, [pc, #424]	@ (8004440 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	f003 0303 	and.w	r3, r3, #3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d018      	beq.n	80042d4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80042a2:	4b67      	ldr	r3, [pc, #412]	@ (8004440 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	f003 0203 	and.w	r2, r3, #3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d10d      	bne.n	80042ce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
       ||
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d009      	beq.n	80042ce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80042ba:	4b61      	ldr	r3, [pc, #388]	@ (8004440 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	091b      	lsrs	r3, r3, #4
 80042c0:	f003 0307 	and.w	r3, r3, #7
 80042c4:	1c5a      	adds	r2, r3, #1
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
       ||
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d047      	beq.n	800435e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	73fb      	strb	r3, [r7, #15]
 80042d2:	e044      	b.n	800435e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2b03      	cmp	r3, #3
 80042da:	d018      	beq.n	800430e <RCCEx_PLLSAI2_Config+0x86>
 80042dc:	2b03      	cmp	r3, #3
 80042de:	d825      	bhi.n	800432c <RCCEx_PLLSAI2_Config+0xa4>
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d002      	beq.n	80042ea <RCCEx_PLLSAI2_Config+0x62>
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d009      	beq.n	80042fc <RCCEx_PLLSAI2_Config+0x74>
 80042e8:	e020      	b.n	800432c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80042ea:	4b55      	ldr	r3, [pc, #340]	@ (8004440 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d11d      	bne.n	8004332 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042fa:	e01a      	b.n	8004332 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80042fc:	4b50      	ldr	r3, [pc, #320]	@ (8004440 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004304:	2b00      	cmp	r3, #0
 8004306:	d116      	bne.n	8004336 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800430c:	e013      	b.n	8004336 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800430e:	4b4c      	ldr	r3, [pc, #304]	@ (8004440 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10f      	bne.n	800433a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800431a:	4b49      	ldr	r3, [pc, #292]	@ (8004440 <RCCEx_PLLSAI2_Config+0x1b8>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d109      	bne.n	800433a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800432a:	e006      	b.n	800433a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	73fb      	strb	r3, [r7, #15]
      break;
 8004330:	e004      	b.n	800433c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004332:	bf00      	nop
 8004334:	e002      	b.n	800433c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004336:	bf00      	nop
 8004338:	e000      	b.n	800433c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800433a:	bf00      	nop
    }

    if(status == HAL_OK)
 800433c:	7bfb      	ldrb	r3, [r7, #15]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d10d      	bne.n	800435e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004342:	4b3f      	ldr	r3, [pc, #252]	@ (8004440 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6819      	ldr	r1, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	3b01      	subs	r3, #1
 8004354:	011b      	lsls	r3, r3, #4
 8004356:	430b      	orrs	r3, r1
 8004358:	4939      	ldr	r1, [pc, #228]	@ (8004440 <RCCEx_PLLSAI2_Config+0x1b8>)
 800435a:	4313      	orrs	r3, r2
 800435c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800435e:	7bfb      	ldrb	r3, [r7, #15]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d167      	bne.n	8004434 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004364:	4b36      	ldr	r3, [pc, #216]	@ (8004440 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a35      	ldr	r2, [pc, #212]	@ (8004440 <RCCEx_PLLSAI2_Config+0x1b8>)
 800436a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800436e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004370:	f7fc ff16 	bl	80011a0 <HAL_GetTick>
 8004374:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004376:	e009      	b.n	800438c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004378:	f7fc ff12 	bl	80011a0 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b02      	cmp	r3, #2
 8004384:	d902      	bls.n	800438c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	73fb      	strb	r3, [r7, #15]
        break;
 800438a:	e005      	b.n	8004398 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800438c:	4b2c      	ldr	r3, [pc, #176]	@ (8004440 <RCCEx_PLLSAI2_Config+0x1b8>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1ef      	bne.n	8004378 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004398:	7bfb      	ldrb	r3, [r7, #15]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d14a      	bne.n	8004434 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d111      	bne.n	80043c8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80043a4:	4b26      	ldr	r3, [pc, #152]	@ (8004440 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80043ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	6892      	ldr	r2, [r2, #8]
 80043b4:	0211      	lsls	r1, r2, #8
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	68d2      	ldr	r2, [r2, #12]
 80043ba:	0912      	lsrs	r2, r2, #4
 80043bc:	0452      	lsls	r2, r2, #17
 80043be:	430a      	orrs	r2, r1
 80043c0:	491f      	ldr	r1, [pc, #124]	@ (8004440 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	614b      	str	r3, [r1, #20]
 80043c6:	e011      	b.n	80043ec <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80043c8:	4b1d      	ldr	r3, [pc, #116]	@ (8004440 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80043d0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	6892      	ldr	r2, [r2, #8]
 80043d8:	0211      	lsls	r1, r2, #8
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6912      	ldr	r2, [r2, #16]
 80043de:	0852      	lsrs	r2, r2, #1
 80043e0:	3a01      	subs	r2, #1
 80043e2:	0652      	lsls	r2, r2, #25
 80043e4:	430a      	orrs	r2, r1
 80043e6:	4916      	ldr	r1, [pc, #88]	@ (8004440 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80043ec:	4b14      	ldr	r3, [pc, #80]	@ (8004440 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a13      	ldr	r2, [pc, #76]	@ (8004440 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f8:	f7fc fed2 	bl	80011a0 <HAL_GetTick>
 80043fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80043fe:	e009      	b.n	8004414 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004400:	f7fc fece 	bl	80011a0 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d902      	bls.n	8004414 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	73fb      	strb	r3, [r7, #15]
          break;
 8004412:	e005      	b.n	8004420 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004414:	4b0a      	ldr	r3, [pc, #40]	@ (8004440 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d0ef      	beq.n	8004400 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004420:	7bfb      	ldrb	r3, [r7, #15]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d106      	bne.n	8004434 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004426:	4b06      	ldr	r3, [pc, #24]	@ (8004440 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004428:	695a      	ldr	r2, [r3, #20]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	4904      	ldr	r1, [pc, #16]	@ (8004440 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004430:	4313      	orrs	r3, r2
 8004432:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004434:	7bfb      	ldrb	r3, [r7, #15]
}
 8004436:	4618      	mov	r0, r3
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	40021000 	.word	0x40021000

08004444 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e049      	b.n	80044ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d106      	bne.n	8004470 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f7fc fcf8 	bl	8000e60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2202      	movs	r2, #2
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	3304      	adds	r3, #4
 8004480:	4619      	mov	r1, r3
 8004482:	4610      	mov	r0, r2
 8004484:	f000 f9d6 	bl	8004834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
	...

080044f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b01      	cmp	r3, #1
 8004506:	d001      	beq.n	800450c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e04f      	b.n	80045ac <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2202      	movs	r2, #2
 8004510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68da      	ldr	r2, [r3, #12]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f042 0201 	orr.w	r2, r2, #1
 8004522:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a23      	ldr	r2, [pc, #140]	@ (80045b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d01d      	beq.n	800456a <HAL_TIM_Base_Start_IT+0x76>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004536:	d018      	beq.n	800456a <HAL_TIM_Base_Start_IT+0x76>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a1f      	ldr	r2, [pc, #124]	@ (80045bc <HAL_TIM_Base_Start_IT+0xc8>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d013      	beq.n	800456a <HAL_TIM_Base_Start_IT+0x76>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a1e      	ldr	r2, [pc, #120]	@ (80045c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d00e      	beq.n	800456a <HAL_TIM_Base_Start_IT+0x76>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a1c      	ldr	r2, [pc, #112]	@ (80045c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d009      	beq.n	800456a <HAL_TIM_Base_Start_IT+0x76>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a1b      	ldr	r2, [pc, #108]	@ (80045c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d004      	beq.n	800456a <HAL_TIM_Base_Start_IT+0x76>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a19      	ldr	r2, [pc, #100]	@ (80045cc <HAL_TIM_Base_Start_IT+0xd8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d115      	bne.n	8004596 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	689a      	ldr	r2, [r3, #8]
 8004570:	4b17      	ldr	r3, [pc, #92]	@ (80045d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004572:	4013      	ands	r3, r2
 8004574:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2b06      	cmp	r3, #6
 800457a:	d015      	beq.n	80045a8 <HAL_TIM_Base_Start_IT+0xb4>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004582:	d011      	beq.n	80045a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f042 0201 	orr.w	r2, r2, #1
 8004592:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004594:	e008      	b.n	80045a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f042 0201 	orr.w	r2, r2, #1
 80045a4:	601a      	str	r2, [r3, #0]
 80045a6:	e000      	b.n	80045aa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3714      	adds	r7, #20
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr
 80045b8:	40012c00 	.word	0x40012c00
 80045bc:	40000400 	.word	0x40000400
 80045c0:	40000800 	.word	0x40000800
 80045c4:	40000c00 	.word	0x40000c00
 80045c8:	40013400 	.word	0x40013400
 80045cc:	40014000 	.word	0x40014000
 80045d0:	00010007 	.word	0x00010007

080045d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d020      	beq.n	8004638 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d01b      	beq.n	8004638 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f06f 0202 	mvn.w	r2, #2
 8004608:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	f003 0303 	and.w	r3, r3, #3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f8e9 	bl	80047f6 <HAL_TIM_IC_CaptureCallback>
 8004624:	e005      	b.n	8004632 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f8db 	bl	80047e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f8ec 	bl	800480a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	f003 0304 	and.w	r3, r3, #4
 800463e:	2b00      	cmp	r3, #0
 8004640:	d020      	beq.n	8004684 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f003 0304 	and.w	r3, r3, #4
 8004648:	2b00      	cmp	r3, #0
 800464a:	d01b      	beq.n	8004684 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f06f 0204 	mvn.w	r2, #4
 8004654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2202      	movs	r2, #2
 800465a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f8c3 	bl	80047f6 <HAL_TIM_IC_CaptureCallback>
 8004670:	e005      	b.n	800467e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f8b5 	bl	80047e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 f8c6 	bl	800480a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f003 0308 	and.w	r3, r3, #8
 800468a:	2b00      	cmp	r3, #0
 800468c:	d020      	beq.n	80046d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f003 0308 	and.w	r3, r3, #8
 8004694:	2b00      	cmp	r3, #0
 8004696:	d01b      	beq.n	80046d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f06f 0208 	mvn.w	r2, #8
 80046a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2204      	movs	r2, #4
 80046a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	f003 0303 	and.w	r3, r3, #3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f89d 	bl	80047f6 <HAL_TIM_IC_CaptureCallback>
 80046bc:	e005      	b.n	80046ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f88f 	bl	80047e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 f8a0 	bl	800480a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f003 0310 	and.w	r3, r3, #16
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d020      	beq.n	800471c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f003 0310 	and.w	r3, r3, #16
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d01b      	beq.n	800471c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f06f 0210 	mvn.w	r2, #16
 80046ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2208      	movs	r2, #8
 80046f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	69db      	ldr	r3, [r3, #28]
 80046fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f877 	bl	80047f6 <HAL_TIM_IC_CaptureCallback>
 8004708:	e005      	b.n	8004716 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f869 	bl	80047e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 f87a 	bl	800480a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00c      	beq.n	8004740 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	2b00      	cmp	r3, #0
 800472e:	d007      	beq.n	8004740 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f06f 0201 	mvn.w	r2, #1
 8004738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7fc f968 	bl	8000a10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004746:	2b00      	cmp	r3, #0
 8004748:	d104      	bne.n	8004754 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00c      	beq.n	800476e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800475a:	2b00      	cmp	r3, #0
 800475c:	d007      	beq.n	800476e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 f99b 	bl	8004aa4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00c      	beq.n	8004792 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800477e:	2b00      	cmp	r3, #0
 8004780:	d007      	beq.n	8004792 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800478a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 f993 	bl	8004ab8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00c      	beq.n	80047b6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d007      	beq.n	80047b6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80047ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 f834 	bl	800481e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	f003 0320 	and.w	r3, r3, #32
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00c      	beq.n	80047da <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f003 0320 	and.w	r3, r3, #32
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d007      	beq.n	80047da <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f06f 0220 	mvn.w	r2, #32
 80047d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 f95b 	bl	8004a90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047da:	bf00      	nop
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047e2:	b480      	push	{r7}
 80047e4:	b083      	sub	sp, #12
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047ea:	bf00      	nop
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047f6:	b480      	push	{r7}
 80047f8:	b083      	sub	sp, #12
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047fe:	bf00      	nop
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800480a:	b480      	push	{r7}
 800480c:	b083      	sub	sp, #12
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004812:	bf00      	nop
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800481e:	b480      	push	{r7}
 8004820:	b083      	sub	sp, #12
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
	...

08004834 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a46      	ldr	r2, [pc, #280]	@ (8004960 <TIM_Base_SetConfig+0x12c>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d013      	beq.n	8004874 <TIM_Base_SetConfig+0x40>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004852:	d00f      	beq.n	8004874 <TIM_Base_SetConfig+0x40>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a43      	ldr	r2, [pc, #268]	@ (8004964 <TIM_Base_SetConfig+0x130>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d00b      	beq.n	8004874 <TIM_Base_SetConfig+0x40>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a42      	ldr	r2, [pc, #264]	@ (8004968 <TIM_Base_SetConfig+0x134>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d007      	beq.n	8004874 <TIM_Base_SetConfig+0x40>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a41      	ldr	r2, [pc, #260]	@ (800496c <TIM_Base_SetConfig+0x138>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d003      	beq.n	8004874 <TIM_Base_SetConfig+0x40>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a40      	ldr	r2, [pc, #256]	@ (8004970 <TIM_Base_SetConfig+0x13c>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d108      	bne.n	8004886 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800487a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	4313      	orrs	r3, r2
 8004884:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a35      	ldr	r2, [pc, #212]	@ (8004960 <TIM_Base_SetConfig+0x12c>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d01f      	beq.n	80048ce <TIM_Base_SetConfig+0x9a>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004894:	d01b      	beq.n	80048ce <TIM_Base_SetConfig+0x9a>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a32      	ldr	r2, [pc, #200]	@ (8004964 <TIM_Base_SetConfig+0x130>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d017      	beq.n	80048ce <TIM_Base_SetConfig+0x9a>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a31      	ldr	r2, [pc, #196]	@ (8004968 <TIM_Base_SetConfig+0x134>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d013      	beq.n	80048ce <TIM_Base_SetConfig+0x9a>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a30      	ldr	r2, [pc, #192]	@ (800496c <TIM_Base_SetConfig+0x138>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d00f      	beq.n	80048ce <TIM_Base_SetConfig+0x9a>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a2f      	ldr	r2, [pc, #188]	@ (8004970 <TIM_Base_SetConfig+0x13c>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d00b      	beq.n	80048ce <TIM_Base_SetConfig+0x9a>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a2e      	ldr	r2, [pc, #184]	@ (8004974 <TIM_Base_SetConfig+0x140>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d007      	beq.n	80048ce <TIM_Base_SetConfig+0x9a>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a2d      	ldr	r2, [pc, #180]	@ (8004978 <TIM_Base_SetConfig+0x144>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d003      	beq.n	80048ce <TIM_Base_SetConfig+0x9a>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a2c      	ldr	r2, [pc, #176]	@ (800497c <TIM_Base_SetConfig+0x148>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d108      	bne.n	80048e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	4313      	orrs	r3, r2
 80048de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	689a      	ldr	r2, [r3, #8]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a16      	ldr	r2, [pc, #88]	@ (8004960 <TIM_Base_SetConfig+0x12c>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d00f      	beq.n	800492c <TIM_Base_SetConfig+0xf8>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a18      	ldr	r2, [pc, #96]	@ (8004970 <TIM_Base_SetConfig+0x13c>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d00b      	beq.n	800492c <TIM_Base_SetConfig+0xf8>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a17      	ldr	r2, [pc, #92]	@ (8004974 <TIM_Base_SetConfig+0x140>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d007      	beq.n	800492c <TIM_Base_SetConfig+0xf8>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a16      	ldr	r2, [pc, #88]	@ (8004978 <TIM_Base_SetConfig+0x144>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d003      	beq.n	800492c <TIM_Base_SetConfig+0xf8>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a15      	ldr	r2, [pc, #84]	@ (800497c <TIM_Base_SetConfig+0x148>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d103      	bne.n	8004934 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	691a      	ldr	r2, [r3, #16]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b01      	cmp	r3, #1
 8004944:	d105      	bne.n	8004952 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	f023 0201 	bic.w	r2, r3, #1
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	611a      	str	r2, [r3, #16]
  }
}
 8004952:	bf00      	nop
 8004954:	3714      	adds	r7, #20
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	40012c00 	.word	0x40012c00
 8004964:	40000400 	.word	0x40000400
 8004968:	40000800 	.word	0x40000800
 800496c:	40000c00 	.word	0x40000c00
 8004970:	40013400 	.word	0x40013400
 8004974:	40014000 	.word	0x40014000
 8004978:	40014400 	.word	0x40014400
 800497c:	40014800 	.word	0x40014800

08004980 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004990:	2b01      	cmp	r3, #1
 8004992:	d101      	bne.n	8004998 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004994:	2302      	movs	r3, #2
 8004996:	e068      	b.n	8004a6a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2202      	movs	r2, #2
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a2e      	ldr	r2, [pc, #184]	@ (8004a78 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d004      	beq.n	80049cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a2d      	ldr	r2, [pc, #180]	@ (8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d108      	bne.n	80049de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80049d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	4313      	orrs	r3, r2
 80049dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a1e      	ldr	r2, [pc, #120]	@ (8004a78 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d01d      	beq.n	8004a3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a0a:	d018      	beq.n	8004a3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a1b      	ldr	r2, [pc, #108]	@ (8004a80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d013      	beq.n	8004a3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a1a      	ldr	r2, [pc, #104]	@ (8004a84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d00e      	beq.n	8004a3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a18      	ldr	r2, [pc, #96]	@ (8004a88 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d009      	beq.n	8004a3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a13      	ldr	r2, [pc, #76]	@ (8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d004      	beq.n	8004a3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a14      	ldr	r2, [pc, #80]	@ (8004a8c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d10c      	bne.n	8004a58 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3714      	adds	r7, #20
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	40012c00 	.word	0x40012c00
 8004a7c:	40013400 	.word	0x40013400
 8004a80:	40000400 	.word	0x40000400
 8004a84:	40000800 	.word	0x40000800
 8004a88:	40000c00 	.word	0x40000c00
 8004a8c:	40014000 	.word	0x40014000

08004a90 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e040      	b.n	8004b60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d106      	bne.n	8004af4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f7fc f9dc 	bl	8000eac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2224      	movs	r2, #36	@ 0x24
 8004af8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 0201 	bic.w	r2, r2, #1
 8004b08:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d002      	beq.n	8004b18 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 fae0 	bl	80050d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 f825 	bl	8004b68 <UART_SetConfig>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d101      	bne.n	8004b28 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e01b      	b.n	8004b60 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685a      	ldr	r2, [r3, #4]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	689a      	ldr	r2, [r3, #8]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f042 0201 	orr.w	r2, r2, #1
 8004b56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 fb5f 	bl	800521c <UART_CheckIdleState>
 8004b5e:	4603      	mov	r3, r0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3708      	adds	r7, #8
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b6c:	b08a      	sub	sp, #40	@ 0x28
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b72:	2300      	movs	r3, #0
 8004b74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	431a      	orrs	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	431a      	orrs	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	69db      	ldr	r3, [r3, #28]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	4ba4      	ldr	r3, [pc, #656]	@ (8004e28 <UART_SetConfig+0x2c0>)
 8004b98:	4013      	ands	r3, r2
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	6812      	ldr	r2, [r2, #0]
 8004b9e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ba0:	430b      	orrs	r3, r1
 8004ba2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	68da      	ldr	r2, [r3, #12]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a99      	ldr	r2, [pc, #612]	@ (8004e2c <UART_SetConfig+0x2c4>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d004      	beq.n	8004bd4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004be4:	430a      	orrs	r2, r1
 8004be6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a90      	ldr	r2, [pc, #576]	@ (8004e30 <UART_SetConfig+0x2c8>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d126      	bne.n	8004c40 <UART_SetConfig+0xd8>
 8004bf2:	4b90      	ldr	r3, [pc, #576]	@ (8004e34 <UART_SetConfig+0x2cc>)
 8004bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bf8:	f003 0303 	and.w	r3, r3, #3
 8004bfc:	2b03      	cmp	r3, #3
 8004bfe:	d81b      	bhi.n	8004c38 <UART_SetConfig+0xd0>
 8004c00:	a201      	add	r2, pc, #4	@ (adr r2, 8004c08 <UART_SetConfig+0xa0>)
 8004c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c06:	bf00      	nop
 8004c08:	08004c19 	.word	0x08004c19
 8004c0c:	08004c29 	.word	0x08004c29
 8004c10:	08004c21 	.word	0x08004c21
 8004c14:	08004c31 	.word	0x08004c31
 8004c18:	2301      	movs	r3, #1
 8004c1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c1e:	e116      	b.n	8004e4e <UART_SetConfig+0x2e6>
 8004c20:	2302      	movs	r3, #2
 8004c22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c26:	e112      	b.n	8004e4e <UART_SetConfig+0x2e6>
 8004c28:	2304      	movs	r3, #4
 8004c2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c2e:	e10e      	b.n	8004e4e <UART_SetConfig+0x2e6>
 8004c30:	2308      	movs	r3, #8
 8004c32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c36:	e10a      	b.n	8004e4e <UART_SetConfig+0x2e6>
 8004c38:	2310      	movs	r3, #16
 8004c3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c3e:	e106      	b.n	8004e4e <UART_SetConfig+0x2e6>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a7c      	ldr	r2, [pc, #496]	@ (8004e38 <UART_SetConfig+0x2d0>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d138      	bne.n	8004cbc <UART_SetConfig+0x154>
 8004c4a:	4b7a      	ldr	r3, [pc, #488]	@ (8004e34 <UART_SetConfig+0x2cc>)
 8004c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c50:	f003 030c 	and.w	r3, r3, #12
 8004c54:	2b0c      	cmp	r3, #12
 8004c56:	d82d      	bhi.n	8004cb4 <UART_SetConfig+0x14c>
 8004c58:	a201      	add	r2, pc, #4	@ (adr r2, 8004c60 <UART_SetConfig+0xf8>)
 8004c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5e:	bf00      	nop
 8004c60:	08004c95 	.word	0x08004c95
 8004c64:	08004cb5 	.word	0x08004cb5
 8004c68:	08004cb5 	.word	0x08004cb5
 8004c6c:	08004cb5 	.word	0x08004cb5
 8004c70:	08004ca5 	.word	0x08004ca5
 8004c74:	08004cb5 	.word	0x08004cb5
 8004c78:	08004cb5 	.word	0x08004cb5
 8004c7c:	08004cb5 	.word	0x08004cb5
 8004c80:	08004c9d 	.word	0x08004c9d
 8004c84:	08004cb5 	.word	0x08004cb5
 8004c88:	08004cb5 	.word	0x08004cb5
 8004c8c:	08004cb5 	.word	0x08004cb5
 8004c90:	08004cad 	.word	0x08004cad
 8004c94:	2300      	movs	r3, #0
 8004c96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c9a:	e0d8      	b.n	8004e4e <UART_SetConfig+0x2e6>
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ca2:	e0d4      	b.n	8004e4e <UART_SetConfig+0x2e6>
 8004ca4:	2304      	movs	r3, #4
 8004ca6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004caa:	e0d0      	b.n	8004e4e <UART_SetConfig+0x2e6>
 8004cac:	2308      	movs	r3, #8
 8004cae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cb2:	e0cc      	b.n	8004e4e <UART_SetConfig+0x2e6>
 8004cb4:	2310      	movs	r3, #16
 8004cb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cba:	e0c8      	b.n	8004e4e <UART_SetConfig+0x2e6>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a5e      	ldr	r2, [pc, #376]	@ (8004e3c <UART_SetConfig+0x2d4>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d125      	bne.n	8004d12 <UART_SetConfig+0x1aa>
 8004cc6:	4b5b      	ldr	r3, [pc, #364]	@ (8004e34 <UART_SetConfig+0x2cc>)
 8004cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ccc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004cd0:	2b30      	cmp	r3, #48	@ 0x30
 8004cd2:	d016      	beq.n	8004d02 <UART_SetConfig+0x19a>
 8004cd4:	2b30      	cmp	r3, #48	@ 0x30
 8004cd6:	d818      	bhi.n	8004d0a <UART_SetConfig+0x1a2>
 8004cd8:	2b20      	cmp	r3, #32
 8004cda:	d00a      	beq.n	8004cf2 <UART_SetConfig+0x18a>
 8004cdc:	2b20      	cmp	r3, #32
 8004cde:	d814      	bhi.n	8004d0a <UART_SetConfig+0x1a2>
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d002      	beq.n	8004cea <UART_SetConfig+0x182>
 8004ce4:	2b10      	cmp	r3, #16
 8004ce6:	d008      	beq.n	8004cfa <UART_SetConfig+0x192>
 8004ce8:	e00f      	b.n	8004d0a <UART_SetConfig+0x1a2>
 8004cea:	2300      	movs	r3, #0
 8004cec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cf0:	e0ad      	b.n	8004e4e <UART_SetConfig+0x2e6>
 8004cf2:	2302      	movs	r3, #2
 8004cf4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cf8:	e0a9      	b.n	8004e4e <UART_SetConfig+0x2e6>
 8004cfa:	2304      	movs	r3, #4
 8004cfc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d00:	e0a5      	b.n	8004e4e <UART_SetConfig+0x2e6>
 8004d02:	2308      	movs	r3, #8
 8004d04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d08:	e0a1      	b.n	8004e4e <UART_SetConfig+0x2e6>
 8004d0a:	2310      	movs	r3, #16
 8004d0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d10:	e09d      	b.n	8004e4e <UART_SetConfig+0x2e6>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a4a      	ldr	r2, [pc, #296]	@ (8004e40 <UART_SetConfig+0x2d8>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d125      	bne.n	8004d68 <UART_SetConfig+0x200>
 8004d1c:	4b45      	ldr	r3, [pc, #276]	@ (8004e34 <UART_SetConfig+0x2cc>)
 8004d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d22:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004d26:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d28:	d016      	beq.n	8004d58 <UART_SetConfig+0x1f0>
 8004d2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d2c:	d818      	bhi.n	8004d60 <UART_SetConfig+0x1f8>
 8004d2e:	2b80      	cmp	r3, #128	@ 0x80
 8004d30:	d00a      	beq.n	8004d48 <UART_SetConfig+0x1e0>
 8004d32:	2b80      	cmp	r3, #128	@ 0x80
 8004d34:	d814      	bhi.n	8004d60 <UART_SetConfig+0x1f8>
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d002      	beq.n	8004d40 <UART_SetConfig+0x1d8>
 8004d3a:	2b40      	cmp	r3, #64	@ 0x40
 8004d3c:	d008      	beq.n	8004d50 <UART_SetConfig+0x1e8>
 8004d3e:	e00f      	b.n	8004d60 <UART_SetConfig+0x1f8>
 8004d40:	2300      	movs	r3, #0
 8004d42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d46:	e082      	b.n	8004e4e <UART_SetConfig+0x2e6>
 8004d48:	2302      	movs	r3, #2
 8004d4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d4e:	e07e      	b.n	8004e4e <UART_SetConfig+0x2e6>
 8004d50:	2304      	movs	r3, #4
 8004d52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d56:	e07a      	b.n	8004e4e <UART_SetConfig+0x2e6>
 8004d58:	2308      	movs	r3, #8
 8004d5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d5e:	e076      	b.n	8004e4e <UART_SetConfig+0x2e6>
 8004d60:	2310      	movs	r3, #16
 8004d62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d66:	e072      	b.n	8004e4e <UART_SetConfig+0x2e6>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a35      	ldr	r2, [pc, #212]	@ (8004e44 <UART_SetConfig+0x2dc>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d12a      	bne.n	8004dc8 <UART_SetConfig+0x260>
 8004d72:	4b30      	ldr	r3, [pc, #192]	@ (8004e34 <UART_SetConfig+0x2cc>)
 8004d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d80:	d01a      	beq.n	8004db8 <UART_SetConfig+0x250>
 8004d82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d86:	d81b      	bhi.n	8004dc0 <UART_SetConfig+0x258>
 8004d88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d8c:	d00c      	beq.n	8004da8 <UART_SetConfig+0x240>
 8004d8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d92:	d815      	bhi.n	8004dc0 <UART_SetConfig+0x258>
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d003      	beq.n	8004da0 <UART_SetConfig+0x238>
 8004d98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d9c:	d008      	beq.n	8004db0 <UART_SetConfig+0x248>
 8004d9e:	e00f      	b.n	8004dc0 <UART_SetConfig+0x258>
 8004da0:	2300      	movs	r3, #0
 8004da2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004da6:	e052      	b.n	8004e4e <UART_SetConfig+0x2e6>
 8004da8:	2302      	movs	r3, #2
 8004daa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dae:	e04e      	b.n	8004e4e <UART_SetConfig+0x2e6>
 8004db0:	2304      	movs	r3, #4
 8004db2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004db6:	e04a      	b.n	8004e4e <UART_SetConfig+0x2e6>
 8004db8:	2308      	movs	r3, #8
 8004dba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dbe:	e046      	b.n	8004e4e <UART_SetConfig+0x2e6>
 8004dc0:	2310      	movs	r3, #16
 8004dc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dc6:	e042      	b.n	8004e4e <UART_SetConfig+0x2e6>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a17      	ldr	r2, [pc, #92]	@ (8004e2c <UART_SetConfig+0x2c4>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d13a      	bne.n	8004e48 <UART_SetConfig+0x2e0>
 8004dd2:	4b18      	ldr	r3, [pc, #96]	@ (8004e34 <UART_SetConfig+0x2cc>)
 8004dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dd8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004ddc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004de0:	d01a      	beq.n	8004e18 <UART_SetConfig+0x2b0>
 8004de2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004de6:	d81b      	bhi.n	8004e20 <UART_SetConfig+0x2b8>
 8004de8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004dec:	d00c      	beq.n	8004e08 <UART_SetConfig+0x2a0>
 8004dee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004df2:	d815      	bhi.n	8004e20 <UART_SetConfig+0x2b8>
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d003      	beq.n	8004e00 <UART_SetConfig+0x298>
 8004df8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dfc:	d008      	beq.n	8004e10 <UART_SetConfig+0x2a8>
 8004dfe:	e00f      	b.n	8004e20 <UART_SetConfig+0x2b8>
 8004e00:	2300      	movs	r3, #0
 8004e02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e06:	e022      	b.n	8004e4e <UART_SetConfig+0x2e6>
 8004e08:	2302      	movs	r3, #2
 8004e0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e0e:	e01e      	b.n	8004e4e <UART_SetConfig+0x2e6>
 8004e10:	2304      	movs	r3, #4
 8004e12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e16:	e01a      	b.n	8004e4e <UART_SetConfig+0x2e6>
 8004e18:	2308      	movs	r3, #8
 8004e1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e1e:	e016      	b.n	8004e4e <UART_SetConfig+0x2e6>
 8004e20:	2310      	movs	r3, #16
 8004e22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e26:	e012      	b.n	8004e4e <UART_SetConfig+0x2e6>
 8004e28:	efff69f3 	.word	0xefff69f3
 8004e2c:	40008000 	.word	0x40008000
 8004e30:	40013800 	.word	0x40013800
 8004e34:	40021000 	.word	0x40021000
 8004e38:	40004400 	.word	0x40004400
 8004e3c:	40004800 	.word	0x40004800
 8004e40:	40004c00 	.word	0x40004c00
 8004e44:	40005000 	.word	0x40005000
 8004e48:	2310      	movs	r3, #16
 8004e4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a9f      	ldr	r2, [pc, #636]	@ (80050d0 <UART_SetConfig+0x568>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d17a      	bne.n	8004f4e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e58:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004e5c:	2b08      	cmp	r3, #8
 8004e5e:	d824      	bhi.n	8004eaa <UART_SetConfig+0x342>
 8004e60:	a201      	add	r2, pc, #4	@ (adr r2, 8004e68 <UART_SetConfig+0x300>)
 8004e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e66:	bf00      	nop
 8004e68:	08004e8d 	.word	0x08004e8d
 8004e6c:	08004eab 	.word	0x08004eab
 8004e70:	08004e95 	.word	0x08004e95
 8004e74:	08004eab 	.word	0x08004eab
 8004e78:	08004e9b 	.word	0x08004e9b
 8004e7c:	08004eab 	.word	0x08004eab
 8004e80:	08004eab 	.word	0x08004eab
 8004e84:	08004eab 	.word	0x08004eab
 8004e88:	08004ea3 	.word	0x08004ea3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e8c:	f7fe fd92 	bl	80039b4 <HAL_RCC_GetPCLK1Freq>
 8004e90:	61f8      	str	r0, [r7, #28]
        break;
 8004e92:	e010      	b.n	8004eb6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e94:	4b8f      	ldr	r3, [pc, #572]	@ (80050d4 <UART_SetConfig+0x56c>)
 8004e96:	61fb      	str	r3, [r7, #28]
        break;
 8004e98:	e00d      	b.n	8004eb6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e9a:	f7fe fcf3 	bl	8003884 <HAL_RCC_GetSysClockFreq>
 8004e9e:	61f8      	str	r0, [r7, #28]
        break;
 8004ea0:	e009      	b.n	8004eb6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ea2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ea6:	61fb      	str	r3, [r7, #28]
        break;
 8004ea8:	e005      	b.n	8004eb6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004eb4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f000 80fb 	beq.w	80050b4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	685a      	ldr	r2, [r3, #4]
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	005b      	lsls	r3, r3, #1
 8004ec6:	4413      	add	r3, r2
 8004ec8:	69fa      	ldr	r2, [r7, #28]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d305      	bcc.n	8004eda <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ed4:	69fa      	ldr	r2, [r7, #28]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d903      	bls.n	8004ee2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004ee0:	e0e8      	b.n	80050b4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	461c      	mov	r4, r3
 8004ee8:	4615      	mov	r5, r2
 8004eea:	f04f 0200 	mov.w	r2, #0
 8004eee:	f04f 0300 	mov.w	r3, #0
 8004ef2:	022b      	lsls	r3, r5, #8
 8004ef4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004ef8:	0222      	lsls	r2, r4, #8
 8004efa:	68f9      	ldr	r1, [r7, #12]
 8004efc:	6849      	ldr	r1, [r1, #4]
 8004efe:	0849      	lsrs	r1, r1, #1
 8004f00:	2000      	movs	r0, #0
 8004f02:	4688      	mov	r8, r1
 8004f04:	4681      	mov	r9, r0
 8004f06:	eb12 0a08 	adds.w	sl, r2, r8
 8004f0a:	eb43 0b09 	adc.w	fp, r3, r9
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	603b      	str	r3, [r7, #0]
 8004f16:	607a      	str	r2, [r7, #4]
 8004f18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f1c:	4650      	mov	r0, sl
 8004f1e:	4659      	mov	r1, fp
 8004f20:	f7fb f952 	bl	80001c8 <__aeabi_uldivmod>
 8004f24:	4602      	mov	r2, r0
 8004f26:	460b      	mov	r3, r1
 8004f28:	4613      	mov	r3, r2
 8004f2a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f32:	d308      	bcc.n	8004f46 <UART_SetConfig+0x3de>
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f3a:	d204      	bcs.n	8004f46 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	60da      	str	r2, [r3, #12]
 8004f44:	e0b6      	b.n	80050b4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004f4c:	e0b2      	b.n	80050b4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	69db      	ldr	r3, [r3, #28]
 8004f52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f56:	d15e      	bne.n	8005016 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004f58:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004f5c:	2b08      	cmp	r3, #8
 8004f5e:	d828      	bhi.n	8004fb2 <UART_SetConfig+0x44a>
 8004f60:	a201      	add	r2, pc, #4	@ (adr r2, 8004f68 <UART_SetConfig+0x400>)
 8004f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f66:	bf00      	nop
 8004f68:	08004f8d 	.word	0x08004f8d
 8004f6c:	08004f95 	.word	0x08004f95
 8004f70:	08004f9d 	.word	0x08004f9d
 8004f74:	08004fb3 	.word	0x08004fb3
 8004f78:	08004fa3 	.word	0x08004fa3
 8004f7c:	08004fb3 	.word	0x08004fb3
 8004f80:	08004fb3 	.word	0x08004fb3
 8004f84:	08004fb3 	.word	0x08004fb3
 8004f88:	08004fab 	.word	0x08004fab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f8c:	f7fe fd12 	bl	80039b4 <HAL_RCC_GetPCLK1Freq>
 8004f90:	61f8      	str	r0, [r7, #28]
        break;
 8004f92:	e014      	b.n	8004fbe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f94:	f7fe fd24 	bl	80039e0 <HAL_RCC_GetPCLK2Freq>
 8004f98:	61f8      	str	r0, [r7, #28]
        break;
 8004f9a:	e010      	b.n	8004fbe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f9c:	4b4d      	ldr	r3, [pc, #308]	@ (80050d4 <UART_SetConfig+0x56c>)
 8004f9e:	61fb      	str	r3, [r7, #28]
        break;
 8004fa0:	e00d      	b.n	8004fbe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fa2:	f7fe fc6f 	bl	8003884 <HAL_RCC_GetSysClockFreq>
 8004fa6:	61f8      	str	r0, [r7, #28]
        break;
 8004fa8:	e009      	b.n	8004fbe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004faa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fae:	61fb      	str	r3, [r7, #28]
        break;
 8004fb0:	e005      	b.n	8004fbe <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004fbc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d077      	beq.n	80050b4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	005a      	lsls	r2, r3, #1
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	085b      	lsrs	r3, r3, #1
 8004fce:	441a      	add	r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	2b0f      	cmp	r3, #15
 8004fde:	d916      	bls.n	800500e <UART_SetConfig+0x4a6>
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fe6:	d212      	bcs.n	800500e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	f023 030f 	bic.w	r3, r3, #15
 8004ff0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	085b      	lsrs	r3, r3, #1
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	f003 0307 	and.w	r3, r3, #7
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	8afb      	ldrh	r3, [r7, #22]
 8005000:	4313      	orrs	r3, r2
 8005002:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	8afa      	ldrh	r2, [r7, #22]
 800500a:	60da      	str	r2, [r3, #12]
 800500c:	e052      	b.n	80050b4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005014:	e04e      	b.n	80050b4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005016:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800501a:	2b08      	cmp	r3, #8
 800501c:	d827      	bhi.n	800506e <UART_SetConfig+0x506>
 800501e:	a201      	add	r2, pc, #4	@ (adr r2, 8005024 <UART_SetConfig+0x4bc>)
 8005020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005024:	08005049 	.word	0x08005049
 8005028:	08005051 	.word	0x08005051
 800502c:	08005059 	.word	0x08005059
 8005030:	0800506f 	.word	0x0800506f
 8005034:	0800505f 	.word	0x0800505f
 8005038:	0800506f 	.word	0x0800506f
 800503c:	0800506f 	.word	0x0800506f
 8005040:	0800506f 	.word	0x0800506f
 8005044:	08005067 	.word	0x08005067
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005048:	f7fe fcb4 	bl	80039b4 <HAL_RCC_GetPCLK1Freq>
 800504c:	61f8      	str	r0, [r7, #28]
        break;
 800504e:	e014      	b.n	800507a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005050:	f7fe fcc6 	bl	80039e0 <HAL_RCC_GetPCLK2Freq>
 8005054:	61f8      	str	r0, [r7, #28]
        break;
 8005056:	e010      	b.n	800507a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005058:	4b1e      	ldr	r3, [pc, #120]	@ (80050d4 <UART_SetConfig+0x56c>)
 800505a:	61fb      	str	r3, [r7, #28]
        break;
 800505c:	e00d      	b.n	800507a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800505e:	f7fe fc11 	bl	8003884 <HAL_RCC_GetSysClockFreq>
 8005062:	61f8      	str	r0, [r7, #28]
        break;
 8005064:	e009      	b.n	800507a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005066:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800506a:	61fb      	str	r3, [r7, #28]
        break;
 800506c:	e005      	b.n	800507a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800506e:	2300      	movs	r3, #0
 8005070:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005078:	bf00      	nop
    }

    if (pclk != 0U)
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d019      	beq.n	80050b4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	085a      	lsrs	r2, r3, #1
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	441a      	add	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005092:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	2b0f      	cmp	r3, #15
 8005098:	d909      	bls.n	80050ae <UART_SetConfig+0x546>
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050a0:	d205      	bcs.n	80050ae <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	60da      	str	r2, [r3, #12]
 80050ac:	e002      	b.n	80050b4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80050c0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3728      	adds	r7, #40	@ 0x28
 80050c8:	46bd      	mov	sp, r7
 80050ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050ce:	bf00      	nop
 80050d0:	40008000 	.word	0x40008000
 80050d4:	00f42400 	.word	0x00f42400

080050d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e4:	f003 0308 	and.w	r3, r3, #8
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00a      	beq.n	8005102 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	430a      	orrs	r2, r1
 8005100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00a      	beq.n	8005124 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	430a      	orrs	r2, r1
 8005122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005128:	f003 0302 	and.w	r3, r3, #2
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00a      	beq.n	8005146 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	430a      	orrs	r2, r1
 8005144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800514a:	f003 0304 	and.w	r3, r3, #4
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00a      	beq.n	8005168 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	430a      	orrs	r2, r1
 8005166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800516c:	f003 0310 	and.w	r3, r3, #16
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00a      	beq.n	800518a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	430a      	orrs	r2, r1
 8005188:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800518e:	f003 0320 	and.w	r3, r3, #32
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00a      	beq.n	80051ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	430a      	orrs	r2, r1
 80051aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d01a      	beq.n	80051ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	430a      	orrs	r2, r1
 80051cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051d6:	d10a      	bne.n	80051ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00a      	beq.n	8005210 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	430a      	orrs	r2, r1
 800520e:	605a      	str	r2, [r3, #4]
  }
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b098      	sub	sp, #96	@ 0x60
 8005220:	af02      	add	r7, sp, #8
 8005222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800522c:	f7fb ffb8 	bl	80011a0 <HAL_GetTick>
 8005230:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0308 	and.w	r3, r3, #8
 800523c:	2b08      	cmp	r3, #8
 800523e:	d12e      	bne.n	800529e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005240:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005244:	9300      	str	r3, [sp, #0]
 8005246:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005248:	2200      	movs	r2, #0
 800524a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f88c 	bl	800536c <UART_WaitOnFlagUntilTimeout>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d021      	beq.n	800529e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005262:	e853 3f00 	ldrex	r3, [r3]
 8005266:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800526a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800526e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	461a      	mov	r2, r3
 8005276:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005278:	647b      	str	r3, [r7, #68]	@ 0x44
 800527a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800527e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005280:	e841 2300 	strex	r3, r2, [r1]
 8005284:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005286:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1e6      	bne.n	800525a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2220      	movs	r2, #32
 8005290:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e062      	b.n	8005364 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0304 	and.w	r3, r3, #4
 80052a8:	2b04      	cmp	r3, #4
 80052aa:	d149      	bne.n	8005340 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80052b0:	9300      	str	r3, [sp, #0]
 80052b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052b4:	2200      	movs	r2, #0
 80052b6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f856 	bl	800536c <UART_WaitOnFlagUntilTimeout>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d03c      	beq.n	8005340 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ce:	e853 3f00 	ldrex	r3, [r3]
 80052d2:	623b      	str	r3, [r7, #32]
   return(result);
 80052d4:	6a3b      	ldr	r3, [r7, #32]
 80052d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	461a      	mov	r2, r3
 80052e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80052e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052ec:	e841 2300 	strex	r3, r2, [r1]
 80052f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1e6      	bne.n	80052c6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	3308      	adds	r3, #8
 80052fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	e853 3f00 	ldrex	r3, [r3]
 8005306:	60fb      	str	r3, [r7, #12]
   return(result);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f023 0301 	bic.w	r3, r3, #1
 800530e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	3308      	adds	r3, #8
 8005316:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005318:	61fa      	str	r2, [r7, #28]
 800531a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531c:	69b9      	ldr	r1, [r7, #24]
 800531e:	69fa      	ldr	r2, [r7, #28]
 8005320:	e841 2300 	strex	r3, r2, [r1]
 8005324:	617b      	str	r3, [r7, #20]
   return(result);
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1e5      	bne.n	80052f8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2220      	movs	r2, #32
 8005330:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e011      	b.n	8005364 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2220      	movs	r2, #32
 8005344:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2220      	movs	r2, #32
 800534a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3758      	adds	r7, #88	@ 0x58
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	603b      	str	r3, [r7, #0]
 8005378:	4613      	mov	r3, r2
 800537a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800537c:	e04f      	b.n	800541e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005384:	d04b      	beq.n	800541e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005386:	f7fb ff0b 	bl	80011a0 <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	429a      	cmp	r2, r3
 8005394:	d302      	bcc.n	800539c <UART_WaitOnFlagUntilTimeout+0x30>
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d101      	bne.n	80053a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e04e      	b.n	800543e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0304 	and.w	r3, r3, #4
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d037      	beq.n	800541e <UART_WaitOnFlagUntilTimeout+0xb2>
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	2b80      	cmp	r3, #128	@ 0x80
 80053b2:	d034      	beq.n	800541e <UART_WaitOnFlagUntilTimeout+0xb2>
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	2b40      	cmp	r3, #64	@ 0x40
 80053b8:	d031      	beq.n	800541e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	69db      	ldr	r3, [r3, #28]
 80053c0:	f003 0308 	and.w	r3, r3, #8
 80053c4:	2b08      	cmp	r3, #8
 80053c6:	d110      	bne.n	80053ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2208      	movs	r2, #8
 80053ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f000 f838 	bl	8005446 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2208      	movs	r2, #8
 80053da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e029      	b.n	800543e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	69db      	ldr	r3, [r3, #28]
 80053f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053f8:	d111      	bne.n	800541e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005402:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f000 f81e 	bl	8005446 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2220      	movs	r2, #32
 800540e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e00f      	b.n	800543e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	69da      	ldr	r2, [r3, #28]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	4013      	ands	r3, r2
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	429a      	cmp	r2, r3
 800542c:	bf0c      	ite	eq
 800542e:	2301      	moveq	r3, #1
 8005430:	2300      	movne	r3, #0
 8005432:	b2db      	uxtb	r3, r3
 8005434:	461a      	mov	r2, r3
 8005436:	79fb      	ldrb	r3, [r7, #7]
 8005438:	429a      	cmp	r2, r3
 800543a:	d0a0      	beq.n	800537e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005446:	b480      	push	{r7}
 8005448:	b095      	sub	sp, #84	@ 0x54
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005456:	e853 3f00 	ldrex	r3, [r3]
 800545a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800545c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800545e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005462:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	461a      	mov	r2, r3
 800546a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800546c:	643b      	str	r3, [r7, #64]	@ 0x40
 800546e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005470:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005472:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005474:	e841 2300 	strex	r3, r2, [r1]
 8005478:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800547a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1e6      	bne.n	800544e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	3308      	adds	r3, #8
 8005486:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005488:	6a3b      	ldr	r3, [r7, #32]
 800548a:	e853 3f00 	ldrex	r3, [r3]
 800548e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	f023 0301 	bic.w	r3, r3, #1
 8005496:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	3308      	adds	r3, #8
 800549e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054a8:	e841 2300 	strex	r3, r2, [r1]
 80054ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1e5      	bne.n	8005480 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d118      	bne.n	80054ee <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	e853 3f00 	ldrex	r3, [r3]
 80054c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	f023 0310 	bic.w	r3, r3, #16
 80054d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	461a      	mov	r2, r3
 80054d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054da:	61bb      	str	r3, [r7, #24]
 80054dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054de:	6979      	ldr	r1, [r7, #20]
 80054e0:	69ba      	ldr	r2, [r7, #24]
 80054e2:	e841 2300 	strex	r3, r2, [r1]
 80054e6:	613b      	str	r3, [r7, #16]
   return(result);
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1e6      	bne.n	80054bc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2220      	movs	r2, #32
 80054f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005502:	bf00      	nop
 8005504:	3754      	adds	r7, #84	@ 0x54
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <CheckValidRectRoi>:
 *   0------------------------- >15
 *   check Rectangle definition conforms to the (0,15,15) coordinate system
 *   with a minimum of 4x4 size
 */
static VL53L1_Error CheckValidRectRoi(VL53L1_UserRoi_t ROI)
{
 800550e:	b480      	push	{r7}
 8005510:	b085      	sub	sp, #20
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005516:	2300      	movs	r3, #0
 8005518:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* Negative check are not necessary because value is unsigned */
	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 800551a:	793b      	ldrb	r3, [r7, #4]
 800551c:	2b0f      	cmp	r3, #15
 800551e:	d808      	bhi.n	8005532 <CheckValidRectRoi+0x24>
 8005520:	797b      	ldrb	r3, [r7, #5]
 8005522:	2b0f      	cmp	r3, #15
 8005524:	d805      	bhi.n	8005532 <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8005526:	79bb      	ldrb	r3, [r7, #6]
	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8005528:	2b0f      	cmp	r3, #15
 800552a:	d802      	bhi.n	8005532 <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 800552c:	79fb      	ldrb	r3, [r7, #7]
 800552e:	2b0f      	cmp	r3, #15
 8005530:	d901      	bls.n	8005536 <CheckValidRectRoi+0x28>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8005532:	23fc      	movs	r3, #252	@ 0xfc
 8005534:	73fb      	strb	r3, [r7, #15]

	if ((ROI.TopLeftX > ROI.BotRightX) || (ROI.TopLeftY < ROI.BotRightY))
 8005536:	793a      	ldrb	r2, [r7, #4]
 8005538:	79bb      	ldrb	r3, [r7, #6]
 800553a:	429a      	cmp	r2, r3
 800553c:	d803      	bhi.n	8005546 <CheckValidRectRoi+0x38>
 800553e:	797a      	ldrb	r2, [r7, #5]
 8005540:	79fb      	ldrb	r3, [r7, #7]
 8005542:	429a      	cmp	r2, r3
 8005544:	d201      	bcs.n	800554a <CheckValidRectRoi+0x3c>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8005546:	23fc      	movs	r3, #252	@ 0xfc
 8005548:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800554a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800554e:	4618      	mov	r0, r3
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
	...

0800555c <ConvertModeToLLD>:

static VL53L1_GPIO_Interrupt_Mode ConvertModeToLLD(VL53L1_Error *pStatus,
		VL53L1_ThresholdMode CrossMode)
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	460b      	mov	r3, r1
 8005566:	70fb      	strb	r3, [r7, #3]
	VL53L1_GPIO_Interrupt_Mode Mode;

	switch (CrossMode) {
 8005568:	78fb      	ldrb	r3, [r7, #3]
 800556a:	2b03      	cmp	r3, #3
 800556c:	d816      	bhi.n	800559c <ConvertModeToLLD+0x40>
 800556e:	a201      	add	r2, pc, #4	@ (adr r2, 8005574 <ConvertModeToLLD+0x18>)
 8005570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005574:	08005585 	.word	0x08005585
 8005578:	0800558b 	.word	0x0800558b
 800557c:	08005591 	.word	0x08005591
 8005580:	08005597 	.word	0x08005597
	case VL53L1_THRESHOLD_CROSSED_LOW:
		Mode = VL53L1_GPIOINTMODE_LEVEL_LOW;
 8005584:	2300      	movs	r3, #0
 8005586:	73fb      	strb	r3, [r7, #15]
		break;
 8005588:	e00d      	b.n	80055a6 <ConvertModeToLLD+0x4a>
	case VL53L1_THRESHOLD_CROSSED_HIGH:
		Mode = VL53L1_GPIOINTMODE_LEVEL_HIGH;
 800558a:	2301      	movs	r3, #1
 800558c:	73fb      	strb	r3, [r7, #15]
		break;
 800558e:	e00a      	b.n	80055a6 <ConvertModeToLLD+0x4a>
	case VL53L1_THRESHOLD_OUT_OF_WINDOW:
		Mode = VL53L1_GPIOINTMODE_OUT_OF_WINDOW;
 8005590:	2302      	movs	r3, #2
 8005592:	73fb      	strb	r3, [r7, #15]
		break;
 8005594:	e007      	b.n	80055a6 <ConvertModeToLLD+0x4a>
	case VL53L1_THRESHOLD_IN_WINDOW:
		Mode = VL53L1_GPIOINTMODE_IN_WINDOW;
 8005596:	2303      	movs	r3, #3
 8005598:	73fb      	strb	r3, [r7, #15]
		break;
 800559a:	e004      	b.n	80055a6 <ConvertModeToLLD+0x4a>
	default:
		/* define Mode to avoid warning but actual value doesn't mind */
		Mode = VL53L1_GPIOINTMODE_LEVEL_HIGH;
 800559c:	2301      	movs	r3, #1
 800559e:	73fb      	strb	r3, [r7, #15]
		*pStatus = VL53L1_ERROR_INVALID_PARAMS;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	22fc      	movs	r2, #252	@ 0xfc
 80055a4:	701a      	strb	r2, [r3, #0]
	}
	return Mode;
 80055a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3714      	adds	r7, #20
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <VL53L1_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L1_Error VL53L1_SetDeviceAddress(VL53L1_DEV Dev, uint8_t DeviceAddress)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	460b      	mov	r3, r1
 80055be:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80055c0:	2300      	movs	r3, #0
 80055c2:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	613b      	str	r3, [r7, #16]
	VL53L1_static_nvm_managed_t  *pdata = &(pdev->stat_nvm);
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80055ce:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	Status = VL53L1_WrByte(Dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
 80055d0:	78fb      	ldrb	r3, [r7, #3]
 80055d2:	085b      	lsrs	r3, r3, #1
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	461a      	mov	r2, r3
 80055d8:	2101      	movs	r1, #1
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f005 f94e 	bl	800a87c <VL53L1_WrByte>
 80055e0:	4603      	mov	r3, r0
 80055e2:	75fb      	strb	r3, [r7, #23]
			DeviceAddress / 2);

	pdata->i2c_slave__device_address = (DeviceAddress / 2) & 0x7F;
 80055e4:	78fb      	ldrb	r3, [r7, #3]
 80055e6:	085b      	lsrs	r3, r3, #1
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055ee:	b2da      	uxtb	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80055f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3718      	adds	r7, #24
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <VL53L1_DataInit>:

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005608:	2300      	movs	r3, #0
 800560a:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 800560c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d105      	bne.n	8005620 <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 8005614:	2101      	movs	r1, #1
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 ff14 	bl	8006444 <VL53L1_data_init>
 800561c:	4603      	mov	r3, r0
 800561e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L1_ERROR_NONE)
 8005620:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d103      	bne.n	8005630 <VL53L1_DataInit+0x30>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2378 	strb.w	r2, [r3, #888]	@ 0x378

	/* Enable all check */
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005630:	2300      	movs	r3, #0
 8005632:	73bb      	strb	r3, [r7, #14]
 8005634:	e012      	b.n	800565c <VL53L1_DataInit+0x5c>
		if (Status == VL53L1_ERROR_NONE)
 8005636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d112      	bne.n	8005664 <VL53L1_DataInit+0x64>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 800563e:	7bbb      	ldrb	r3, [r7, #14]
 8005640:	b29b      	uxth	r3, r3
 8005642:	2201      	movs	r2, #1
 8005644:	4619      	mov	r1, r3
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 fb01 	bl	8005c4e <VL53L1_SetLimitCheckEnable>
 800564c:	4603      	mov	r3, r0
 800564e:	461a      	mov	r2, r3
 8005650:	7bfb      	ldrb	r3, [r7, #15]
 8005652:	4313      	orrs	r3, r2
 8005654:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005656:	7bbb      	ldrb	r3, [r7, #14]
 8005658:	3301      	adds	r3, #1
 800565a:	73bb      	strb	r3, [r7, #14]
 800565c:	7bbb      	ldrb	r3, [r7, #14]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d9e9      	bls.n	8005636 <VL53L1_DataInit+0x36>
 8005662:	e000      	b.n	8005666 <VL53L1_DataInit+0x66>
		else
			break;
 8005664:	bf00      	nop

	}


	LOG_FUNCTION_END(Status);
	return Status;
 8005666:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800566a:	4618      	mov	r0, r3
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b084      	sub	sp, #16
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800567a:	2300      	movs	r3, #0
 800567c:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2203      	movs	r2, #3
 8005682:	f883 2378 	strb.w	r2, [r3, #888]	@ 0x378

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8005686:	2320      	movs	r3, #32
 8005688:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	7bba      	ldrb	r2, [r7, #14]
 800568e:	709a      	strb	r2, [r3, #2]

	/* ticket 472728 fix */
	Status = VL53L1_SetPresetMode(Dev,
 8005690:	2108      	movs	r1, #8
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 f8f7 	bl	8005886 <VL53L1_SetPresetMode>
 8005698:	4603      	mov	r3, r0
 800569a:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2208      	movs	r2, #8
 80056a0:	f883 237c 	strb.w	r2, [r3, #892]	@ 0x37c
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	/* end of ticket 472728 fix */

	LOG_FUNCTION_END(Status);
	return Status;
 80056a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80056b8:	2300      	movs	r3, #0
 80056ba:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 80056bc:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f005 f802 	bl	800a6ca <VL53L1_poll_for_boot_completion>
 80056c6:	4603      	mov	r3, r0
 80056c8:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 80056ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3710      	adds	r7, #16
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
	...

080056d8 <ComputeDevicePresetMode>:
/* Group PAL Parameters Functions */
static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 80056d8:	b480      	push	{r7}
 80056da:	b087      	sub	sp, #28
 80056dc:	af00      	add	r7, sp, #0
 80056de:	4603      	mov	r3, r0
 80056e0:	603a      	str	r2, [r7, #0]
 80056e2:	71fb      	strb	r3, [r7, #7]
 80056e4:	460b      	mov	r3, r1
 80056e6:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80056e8:	2300      	movs	r3, #0
 80056ea:	75fb      	strb	r3, [r7, #23]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 80056ec:	4a2b      	ldr	r2, [pc, #172]	@ (800579c <ComputeDevicePresetMode+0xc4>)
 80056ee:	f107 0310 	add.w	r3, r7, #16
 80056f2:	6812      	ldr	r2, [r2, #0]
 80056f4:	4611      	mov	r1, r2
 80056f6:	8019      	strh	r1, [r3, #0]
 80056f8:	3302      	adds	r3, #2
 80056fa:	0c12      	lsrs	r2, r2, #16
 80056fc:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};


	VL53L1_DevicePresetModes TimedModes[3] = {
 80056fe:	4a28      	ldr	r2, [pc, #160]	@ (80057a0 <ComputeDevicePresetMode+0xc8>)
 8005700:	f107 030c 	add.w	r3, r7, #12
 8005704:	6812      	ldr	r2, [r2, #0]
 8005706:	4611      	mov	r1, r2
 8005708:	8019      	strh	r1, [r3, #0]
 800570a:	3302      	adds	r3, #2
 800570c:	0c12      	lsrs	r2, r2, #16
 800570e:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8005710:	4a24      	ldr	r2, [pc, #144]	@ (80057a4 <ComputeDevicePresetMode+0xcc>)
 8005712:	f107 0308 	add.w	r3, r7, #8
 8005716:	6812      	ldr	r2, [r2, #0]
 8005718:	4611      	mov	r1, r2
 800571a:	8019      	strh	r1, [r3, #0]
 800571c:	3302      	adds	r3, #2
 800571e:	0c12      	lsrs	r2, r2, #16
 8005720:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	2201      	movs	r2, #1
 8005726:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 8005728:	79bb      	ldrb	r3, [r7, #6]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d002      	beq.n	8005734 <ComputeDevicePresetMode+0x5c>
 800572e:	2b02      	cmp	r3, #2
 8005730:	d003      	beq.n	800573a <ComputeDevicePresetMode+0x62>
 8005732:	e005      	b.n	8005740 <ComputeDevicePresetMode+0x68>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 8005734:	2300      	movs	r3, #0
 8005736:	75bb      	strb	r3, [r7, #22]
		break;
 8005738:	e004      	b.n	8005744 <ComputeDevicePresetMode+0x6c>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 800573a:	2301      	movs	r3, #1
 800573c:	75bb      	strb	r3, [r7, #22]
		break;
 800573e:	e001      	b.n	8005744 <ComputeDevicePresetMode+0x6c>
	default:
		DistIdx = 2;
 8005740:	2302      	movs	r3, #2
 8005742:	75bb      	strb	r3, [r7, #22]
	}

	switch (PresetMode) {
 8005744:	79fb      	ldrb	r3, [r7, #7]
 8005746:	2b08      	cmp	r3, #8
 8005748:	d015      	beq.n	8005776 <ComputeDevicePresetMode+0x9e>
 800574a:	2b08      	cmp	r3, #8
 800574c:	dc1b      	bgt.n	8005786 <ComputeDevicePresetMode+0xae>
 800574e:	2b03      	cmp	r3, #3
 8005750:	d009      	beq.n	8005766 <ComputeDevicePresetMode+0x8e>
 8005752:	2b04      	cmp	r3, #4
 8005754:	d117      	bne.n	8005786 <ComputeDevicePresetMode+0xae>
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 8005756:	7dbb      	ldrb	r3, [r7, #22]
 8005758:	3318      	adds	r3, #24
 800575a:	443b      	add	r3, r7
 800575c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	701a      	strb	r2, [r3, #0]
		break;
 8005764:	e011      	b.n	800578a <ComputeDevicePresetMode+0xb2>


	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 8005766:	7dbb      	ldrb	r3, [r7, #22]
 8005768:	3318      	adds	r3, #24
 800576a:	443b      	add	r3, r7
 800576c:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	701a      	strb	r2, [r3, #0]
		break;
 8005774:	e009      	b.n	800578a <ComputeDevicePresetMode+0xb2>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 8005776:	7dbb      	ldrb	r3, [r7, #22]
 8005778:	3318      	adds	r3, #24
 800577a:	443b      	add	r3, r7
 800577c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	701a      	strb	r2, [r3, #0]
		break;
 8005784:	e001      	b.n	800578a <ComputeDevicePresetMode+0xb2>

	default:
		/* Unsupported mode */
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8005786:	23f8      	movs	r3, #248	@ 0xf8
 8005788:	75fb      	strb	r3, [r7, #23]
	}

	return Status;
 800578a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800578e:	4618      	mov	r0, r3
 8005790:	371c      	adds	r7, #28
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	0800ac54 	.word	0x0800ac54
 80057a0:	0800ac58 	.word	0x0800ac58
 80057a4:	0800ac5c 	.word	0x0800ac5c

080057a8 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 80057a8:	b5b0      	push	{r4, r5, r7, lr}
 80057aa:	b08e      	sub	sp, #56	@ 0x38
 80057ac:	af04      	add	r7, sp, #16
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	607b      	str	r3, [r7, #4]
 80057b2:	460b      	mov	r3, r1
 80057b4:	72fb      	strb	r3, [r7, #11]
 80057b6:	4613      	mov	r3, r2
 80057b8:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80057ba:	2300      	movs	r3, #0
 80057bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53L1_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 80057c0:	2300      	movs	r3, #0
 80057c2:	847b      	strh	r3, [r7, #34]	@ 0x22
	uint32_t phasecal_config_timeout_us = 0;
 80057c4:	2300      	movs	r3, #0
 80057c6:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 80057c8:	2300      	movs	r3, #0
 80057ca:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 80057cc:	2300      	movs	r3, #0
 80057ce:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 80057d0:	7afb      	ldrb	r3, [r7, #11]
 80057d2:	2b03      	cmp	r3, #3
 80057d4:	d002      	beq.n	80057dc <SetPresetMode+0x34>
 80057d6:	7afb      	ldrb	r3, [r7, #11]
 80057d8:	2b08      	cmp	r3, #8
 80057da:	d103      	bne.n	80057e4 <SetPresetMode+0x3c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 80057dc:	2340      	movs	r3, #64	@ 0x40
 80057de:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80057e2:	e002      	b.n	80057ea <SetPresetMode+0x42>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 80057e4:	2320      	movs	r3, #32
 80057e6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 80057ea:	f107 0225 	add.w	r2, r7, #37	@ 0x25
 80057ee:	7ab9      	ldrb	r1, [r7, #10]
 80057f0:	7afb      	ldrb	r3, [r7, #11]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7ff ff70 	bl	80056d8 <ComputeDevicePresetMode>
 80057f8:	4603      	mov	r3, r0
 80057fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 80057fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005802:	2b00      	cmp	r3, #0
 8005804:	d112      	bne.n	800582c <SetPresetMode+0x84>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 8005806:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 800580a:	f107 001c 	add.w	r0, r7, #28
 800580e:	f107 0222 	add.w	r2, r7, #34	@ 0x22
 8005812:	f107 0314 	add.w	r3, r7, #20
 8005816:	9301      	str	r3, [sp, #4]
 8005818:	f107 0318 	add.w	r3, r7, #24
 800581c:	9300      	str	r3, [sp, #0]
 800581e:	4603      	mov	r3, r0
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f001 f8a7 	bl	8006974 <VL53L1_get_preset_mode_timing_cfg>
 8005826:	4603      	mov	r3, r0
 8005828:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 800582c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005830:	2b00      	cmp	r3, #0
 8005832:	d112      	bne.n	800585a <SetPresetMode+0xb2>
		Status = VL53L1_set_preset_mode(
 8005834:	f897 0025 	ldrb.w	r0, [r7, #37]	@ 0x25
 8005838:	8c7c      	ldrh	r4, [r7, #34]	@ 0x22
 800583a:	69fd      	ldr	r5, [r7, #28]
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	6879      	ldr	r1, [r7, #4]
 8005842:	9102      	str	r1, [sp, #8]
 8005844:	9201      	str	r2, [sp, #4]
 8005846:	9300      	str	r3, [sp, #0]
 8005848:	462b      	mov	r3, r5
 800584a:	4622      	mov	r2, r4
 800584c:	4601      	mov	r1, r0
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f001 f93a 	bl	8006ac8 <VL53L1_set_preset_mode>
 8005854:	4603      	mov	r3, r0
 8005856:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 800585a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800585e:	2b00      	cmp	r3, #0
 8005860:	d103      	bne.n	800586a <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode,
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8005868:	709a      	strb	r2, [r3, #2]
				measurement_mode);

	if (Status == VL53L1_ERROR_NONE)
 800586a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800586e:	2b00      	cmp	r3, #0
 8005870:	d103      	bne.n	800587a <SetPresetMode+0xd2>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	7afa      	ldrb	r2, [r7, #11]
 8005876:	f883 237c 	strb.w	r2, [r3, #892]	@ 0x37c

	LOG_FUNCTION_END(Status);
	return Status;
 800587a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800587e:	4618      	mov	r0, r3
 8005880:	3728      	adds	r7, #40	@ 0x28
 8005882:	46bd      	mov	sp, r7
 8005884:	bdb0      	pop	{r4, r5, r7, pc}

08005886 <VL53L1_SetPresetMode>:
	return Status;
}


VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 8005886:	b580      	push	{r7, lr}
 8005888:	b084      	sub	sp, #16
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
 800588e:	460b      	mov	r3, r1
 8005890:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005892:	2300      	movs	r3, #0
 8005894:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 8005896:	2303      	movs	r3, #3
 8005898:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	/* fix for bug 495690 */
	Status = VL53L1_low_power_auto_data_init(Dev);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f003 fd50 	bl	8009340 <VL53L1_low_power_auto_data_init>
 80058a0:	4603      	mov	r3, r0
 80058a2:	73fb      	strb	r3, [r7, #15]

	Status = SetPresetMode(Dev,
 80058a4:	7bba      	ldrb	r2, [r7, #14]
 80058a6:	78f9      	ldrb	r1, [r7, #3]
 80058a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f7ff ff7b 	bl	80057a8 <SetPresetMode>
 80058b2:	4603      	mov	r3, r0
 80058b4:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 80058b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d117      	bne.n	80058ee <VL53L1_SetPresetMode+0x68>
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 80058be:	78fb      	ldrb	r3, [r7, #3]
 80058c0:	2b04      	cmp	r3, #4
 80058c2:	d005      	beq.n	80058d0 <VL53L1_SetPresetMode+0x4a>
 80058c4:	78fb      	ldrb	r3, [r7, #3]
 80058c6:	2b03      	cmp	r3, #3
 80058c8:	d002      	beq.n	80058d0 <VL53L1_SetPresetMode+0x4a>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 80058ca:	78fb      	ldrb	r3, [r7, #3]
 80058cc:	2b08      	cmp	r3, #8
 80058ce:	d107      	bne.n	80058e0 <VL53L1_SetPresetMode+0x5a>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 80058d0:	f24a 0128 	movw	r1, #41000	@ 0xa028
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 f891 	bl	80059fc <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 80058da:	4603      	mov	r3, r0
 80058dc:	73fb      	strb	r3, [r7, #15]
 80058de:	e006      	b.n	80058ee <VL53L1_SetPresetMode+0x68>
				Dev, 41000);
		else
			/* Set default timing budget to 30Hz (33.33 ms)*/
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 80058e0:	f248 2135 	movw	r1, #33333	@ 0x8235
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 f889 	bl	80059fc <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 80058ea:	4603      	mov	r3, r0
 80058ec:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 80058ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d106      	bne.n	8005904 <VL53L1_SetPresetMode+0x7e>
		/* Set default intermeasurement period to 1000 ms */
		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 80058f6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f95e 	bl	8005bbc <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 8005900:	4603      	mov	r3, r0
 8005902:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005904:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005908:	4618      	mov	r0, r3
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b088      	sub	sp, #32
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	460b      	mov	r3, r1
 800591a:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800591c:	2300      	movs	r3, #0
 800591e:	77fb      	strb	r3, [r7, #31]
	VL53L1_PresetModes PresetMode;
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 8005920:	2300      	movs	r3, #0
 8005922:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8005924:	2300      	movs	r3, #0
 8005926:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 8005928:	2300      	movs	r3, #0
 800592a:	60fb      	str	r3, [r7, #12]
	VL53L1_user_zone_t user_zone;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f893 337c 	ldrb.w	r3, [r3, #892]	@ 0x37c
 8005932:	77bb      	strb	r3, [r7, #30]
	/* when the distance mode is valid:
	 * Manual Mode: all modes
	 * AUTO AUTO_LITE : LITE_RANGING, RANGING
	 */

	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 8005934:	78fb      	ldrb	r3, [r7, #3]
 8005936:	2b01      	cmp	r3, #1
 8005938:	d008      	beq.n	800594c <VL53L1_SetDistanceMode+0x3c>
 800593a:	78fb      	ldrb	r3, [r7, #3]
 800593c:	2b02      	cmp	r3, #2
 800593e:	d005      	beq.n	800594c <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 8005940:	78fb      	ldrb	r3, [r7, #3]
 8005942:	2b03      	cmp	r3, #3
 8005944:	d002      	beq.n	800594c <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 8005946:	f06f 0303 	mvn.w	r3, #3
 800594a:	e052      	b.n	80059f2 <VL53L1_SetDistanceMode+0xe2>

	if (Status == VL53L1_ERROR_NONE)
 800594c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d107      	bne.n	8005964 <VL53L1_SetDistanceMode+0x54>
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 8005954:	f107 0308 	add.w	r3, r7, #8
 8005958:	4619      	mov	r1, r3
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 ffb3 	bl	80068c6 <VL53L1_get_user_zone>
 8005960:	4603      	mov	r3, r0
 8005962:	77fb      	strb	r3, [r7, #31]

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 800596a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d10a      	bne.n	8005988 <VL53L1_SetDistanceMode+0x78>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8005972:	f107 0314 	add.w	r3, r7, #20
 8005976:	f107 0210 	add.w	r2, r7, #16
 800597a:	f107 010c 	add.w	r1, r7, #12
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 fede 	bl	8006740 <VL53L1_get_timeouts_us>
 8005984:	4603      	mov	r3, r0
 8005986:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 8005988:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d107      	bne.n	80059a0 <VL53L1_SetDistanceMode+0x90>
		Status = SetPresetMode(Dev,
 8005990:	78fa      	ldrb	r2, [r7, #3]
 8005992:	7fb9      	ldrb	r1, [r7, #30]
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7ff ff06 	bl	80057a8 <SetPresetMode>
 800599c:	4603      	mov	r3, r0
 800599e:	77fb      	strb	r3, [r7, #31]
				PresetMode,
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 80059a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d103      	bne.n	80059b0 <VL53L1_SetDistanceMode+0xa0>
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	78fa      	ldrb	r2, [r7, #3]
 80059ac:	f883 237d 	strb.w	r2, [r3, #893]	@ 0x37d
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 80059b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10e      	bne.n	80059d6 <VL53L1_SetDistanceMode+0xc6>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 80059b8:	68f9      	ldr	r1, [r7, #12]
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 fe86 	bl	80066d0 <VL53L1_set_timeouts_us>
 80059c4:	4603      	mov	r3, r0
 80059c6:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 80059c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d102      	bne.n	80059d6 <VL53L1_SetDistanceMode+0xc6>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 80059d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d107      	bne.n	80059ee <VL53L1_SetDistanceMode+0xde>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 80059de:	f107 0308 	add.w	r3, r7, #8
 80059e2:	4619      	mov	r1, r3
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 ff4b 	bl	8006880 <VL53L1_set_user_zone>
 80059ea:	4603      	mov	r3, r0
 80059ec:	77fb      	strb	r3, [r7, #31]

	LOG_FUNCTION_END(Status);
	return Status;
 80059ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3720      	adds	r7, #32
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
	...

080059fc <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b08c      	sub	sp, #48	@ 0x30
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005a06:	2300      	movs	r3, #0
 8005a08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t Mm1Enabled = 0;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	76bb      	strb	r3, [r7, #26]
	uint8_t Mm2Enabled = 0;
 8005a10:	2300      	movs	r3, #0
 8005a12:	767b      	strb	r3, [r7, #25]
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 8005a14:	2300      	movs	r3, #0
 8005a16:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	613b      	str	r3, [r7, #16]
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs = 0;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8005a20:	4b64      	ldr	r3, [pc, #400]	@ (8005bb4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1b8>)
 8005a22:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	/* Timing budget is limited to 10 seconds */
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	4a64      	ldr	r2, [pc, #400]	@ (8005bb8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1bc>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d902      	bls.n	8005a32 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x36>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8005a2c:	23fc      	movs	r3, #252	@ 0xfc
 8005a2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 8005a32:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d109      	bne.n	8005a4e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8005a3a:	f107 031a 	add.w	r3, r7, #26
 8005a3e:	461a      	mov	r2, r3
 8005a40:	2105      	movs	r1, #5
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 fa10 	bl	8005e68 <VL53L1_GetSequenceStepEnable>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8005a4e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d109      	bne.n	8005a6a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x6e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8005a56:	f107 0319 	add.w	r3, r7, #25
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	2106      	movs	r1, #6
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 fa02 	bl	8005e68 <VL53L1_GetSequenceStepEnable>
 8005a64:	4603      	mov	r3, r0
 8005a66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 8005a6a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10b      	bne.n	8005a8a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x8e>
		Status = VL53L1_get_timeouts_us(Dev,
 8005a72:	f107 0314 	add.w	r3, r7, #20
 8005a76:	f107 0210 	add.w	r2, r7, #16
 8005a7a:	f107 010c 	add.w	r1, r7, #12
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 fe5e 	bl	8006740 <VL53L1_get_timeouts_us>
 8005a84:	4603      	mov	r3, r0
 8005a86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 8005a8a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f040 8081 	bne.w	8005b96 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
		PresetMode = VL53L1DevDataGet(Dev,
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f893 337c 	ldrb.w	r3, [r3, #892]	@ 0x37c
 8005a9a:	76fb      	strb	r3, [r7, #27]
				CurrentParameters.PresetMode);

		TimingGuard = 0;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
		divisor = 1;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	627b      	str	r3, [r7, #36]	@ 0x24
		switch (PresetMode) {
 8005aa4:	7efb      	ldrb	r3, [r7, #27]
 8005aa6:	2b08      	cmp	r3, #8
 8005aa8:	d026      	beq.n	8005af8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xfc>
 8005aaa:	2b08      	cmp	r3, #8
 8005aac:	dc43      	bgt.n	8005b36 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
 8005aae:	2b03      	cmp	r3, #3
 8005ab0:	d00f      	beq.n	8005ad2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd6>
 8005ab2:	2b04      	cmp	r3, #4
 8005ab4:	d13f      	bne.n	8005b36 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8005ab6:	7ebb      	ldrb	r3, [r7, #26]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d002      	beq.n	8005ac2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xc6>
 8005abc:	7e7b      	ldrb	r3, [r7, #25]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d103      	bne.n	8005aca <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xce>
				TimingGuard = 5000;
 8005ac2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
			else
				TimingGuard = 1000;
		break;
 8005ac8:	e038      	b.n	8005b3c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>
				TimingGuard = 1000;
 8005aca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005ace:	62bb      	str	r3, [r7, #40]	@ 0x28
		break;
 8005ad0:	e034      	b.n	8005b3c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	005b      	lsls	r3, r3, #1
 8005ad6:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8005ad8:	7ebb      	ldrb	r3, [r7, #26]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d002      	beq.n	8005ae4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe8>
 8005ade:	7e7b      	ldrb	r3, [r7, #25]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d103      	bne.n	8005aec <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf0>
				TimingGuard = 26600;
 8005ae4:	f246 73e8 	movw	r3, #26600	@ 0x67e8
 8005ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005aea:	e002      	b.n	8005af2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf6>
			else
				TimingGuard = 21600;
 8005aec:	f245 4360 	movw	r3, #21600	@ 0x5460
 8005af0:	62bb      	str	r3, [r7, #40]	@ 0x28
			divisor = 2;
 8005af2:	2302      	movs	r3, #2
 8005af4:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 8005af6:	e021      	b.n	8005b3c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	005b      	lsls	r3, r3, #1
 8005afc:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8005afe:	23f5      	movs	r3, #245	@ 0xf5
 8005b00:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 8005b02:	f107 0308 	add.w	r3, r7, #8
 8005b06:	461a      	mov	r2, r3
 8005b08:	f248 0136 	movw	r1, #32822	@ 0x8036
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f001 fefb 	bl	8007908 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	dd07      	ble.n	8005b28 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>
				vhv += vhv_loops *
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	22f5      	movs	r2, #245	@ 0xf5
 8005b1c:	fb02 f303 	mul.w	r3, r2, r3
 8005b20:	461a      	mov	r2, r3
 8005b22:	6a3b      	ldr	r3, [r7, #32]
 8005b24:	4413      	add	r3, r2
 8005b26:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8005b28:	6a3b      	ldr	r3, [r7, #32]
 8005b2a:	f603 53dc 	addw	r3, r3, #3548	@ 0xddc
 8005b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 8005b30:	2302      	movs	r3, #2
 8005b32:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 8005b34:	e002      	b.n	8005b3c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8005b36:	23f8      	movs	r3, #248	@ 0xf8
 8005b38:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8005b3c:	683a      	ldr	r2, [r7, #0]
 8005b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d803      	bhi.n	8005b4c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x150>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8005b44:	23fc      	movs	r3, #252	@ 0xfc
 8005b46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005b4a:	e003      	b.n	8005b54 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x158>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 8005b4c:	683a      	ldr	r2, [r7, #0]
 8005b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b50:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 8005b52:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 8005b54:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d11c      	bne.n	8005b96 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	69fa      	ldr	r2, [r7, #28]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d203      	bcs.n	8005b6c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x170>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 8005b64:	23fc      	movs	r3, #252	@ 0xfc
 8005b66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005b6a:	e00d      	b.n	8005b88 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x18c>
			else {
				TimingBudget /= divisor;
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b74:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 8005b76:	68f9      	ldr	r1, [r7, #12]
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 fda7 	bl	80066d0 <VL53L1_set_timeouts_us>
 8005b82:	4603      	mov	r3, r0
 8005b84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 8005b88:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d102      	bne.n	8005b96 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
				VL53L1DevDataSet(Dev,
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	611a      	str	r2, [r3, #16]
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 8005b96:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d103      	bne.n	8005ba6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1aa>
		VL53L1DevDataSet(Dev,
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	683a      	ldr	r2, [r7, #0]
 8005ba2:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005ba6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3730      	adds	r7, #48	@ 0x30
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	00086470 	.word	0x00086470
 8005bb8:	00989680 	.word	0x00989680

08005bbc <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	019b      	lsls	r3, r3, #6
 8005bd2:	4a09      	ldr	r2, [pc, #36]	@ (8005bf8 <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 8005bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd8:	099b      	lsrs	r3, r3, #6
 8005bda:	68ba      	ldr	r2, [r7, #8]
 8005bdc:	4413      	add	r3, r2
 8005bde:	60bb      	str	r3, [r7, #8]
	/* End of fix for Ticket 468205 */
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 8005be0:	68b9      	ldr	r1, [r7, #8]
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 fd4b 	bl	800667e <VL53L1_set_inter_measurement_period_ms>
 8005be8:	4603      	mov	r3, r0
 8005bea:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 8005bec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3710      	adds	r7, #16
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	10624dd3 	.word	0x10624dd3

08005bfc <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b086      	sub	sp, #24
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	460b      	mov	r3, r1
 8005c06:	607a      	str	r2, [r7, #4]
 8005c08:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8005c0e:	897b      	ldrh	r3, [r7, #10]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d002      	beq.n	8005c1a <SetLimitValue+0x1e>
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d009      	beq.n	8005c2c <SetLimitValue+0x30>
 8005c18:	e011      	b.n	8005c3e <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	0b9b      	lsrs	r3, r3, #14
 8005c1e:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 8005c20:	8abb      	ldrh	r3, [r7, #20]
 8005c22:	4619      	mov	r1, r3
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f001 f8db 	bl	8006de0 <VL53L1_set_lite_sigma_threshold>
		break;
 8005c2a:	e00a      	b.n	8005c42 <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	0a5b      	lsrs	r3, r3, #9
 8005c30:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 8005c32:	8abb      	ldrh	r3, [r7, #20]
 8005c34:	4619      	mov	r1, r3
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f001 f8fe 	bl	8006e38 <VL53L1_set_lite_min_count_rate>
		break;
 8005c3c:	e001      	b.n	8005c42 <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8005c3e:	23fc      	movs	r3, #252	@ 0xfc
 8005c40:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005c42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3718      	adds	r7, #24
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b084      	sub	sp, #16
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
 8005c56:	460b      	mov	r3, r1
 8005c58:	807b      	strh	r3, [r7, #2]
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 8005c62:	2300      	movs	r3, #0
 8005c64:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8005c66:	887b      	ldrh	r3, [r7, #2]
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d902      	bls.n	8005c72 <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8005c6c:	23fc      	movs	r3, #252	@ 0xfc
 8005c6e:	73fb      	strb	r3, [r7, #15]
 8005c70:	e014      	b.n	8005c9c <VL53L1_SetLimitCheckEnable+0x4e>
	} else {
		/* TempFix1616 contains either 0 or the limit value */
		if (LimitCheckEnable == 0)
 8005c72:	787b      	ldrb	r3, [r7, #1]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d102      	bne.n	8005c7e <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	60bb      	str	r3, [r7, #8]
 8005c7c:	e006      	b.n	8005c8c <VL53L1_SetLimitCheckEnable+0x3e>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005c7e:	887b      	ldrh	r3, [r7, #2]
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	33e0      	adds	r3, #224	@ 0xe0
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4413      	add	r3, r2
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 8005c8c:	887b      	ldrh	r3, [r7, #2]
 8005c8e:	68ba      	ldr	r2, [r7, #8]
 8005c90:	4619      	mov	r1, r3
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f7ff ffb2 	bl	8005bfc <SetLimitValue>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 8005c9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10c      	bne.n	8005cbe <VL53L1_SetLimitCheckEnable+0x70>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8005ca4:	787b      	ldrb	r3, [r7, #1]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	bf14      	ite	ne
 8005caa:	2301      	movne	r3, #1
 8005cac:	2300      	moveq	r3, #0
 8005cae:	b2da      	uxtb	r2, r3
 8005cb0:	887b      	ldrh	r3, [r7, #2]
 8005cb2:	4611      	mov	r1, r2
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	460a      	mov	r2, r1
 8005cba:	f883 2384 	strb.w	r2, [r3, #900]	@ 0x384
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 8005cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8005cca:	b480      	push	{r7}
 8005ccc:	b087      	sub	sp, #28
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	60f8      	str	r0, [r7, #12]
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	607a      	str	r2, [r7, #4]
 8005cd6:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8005cdc:	897b      	ldrh	r3, [r7, #10]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d905      	bls.n	8005cee <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8005ce2:	23fc      	movs	r3, #252	@ 0xfc
 8005ce4:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	701a      	strb	r2, [r3, #0]
 8005cec:	e008      	b.n	8005d00 <VL53L1_GetLimitCheckEnable+0x36>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005cee:	897b      	ldrh	r3, [r7, #10]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	f893 3384 	ldrb.w	r3, [r3, #900]	@ 0x384
 8005cf8:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	7dba      	ldrb	r2, [r7, #22]
 8005cfe:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8005d00:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	371c      	adds	r7, #28
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <VL53L1_GetLimitCheckValue>:
	return Status;
}

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b088      	sub	sp, #32
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	460b      	mov	r3, r1
 8005d1a:	607a      	str	r2, [r7, #4]
 8005d1c:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	77fb      	strb	r3, [r7, #31]
	uint16_t MinCountRate;
	FixPoint1616_t TempFix1616 = 0;
 8005d22:	2300      	movs	r3, #0
 8005d24:	61bb      	str	r3, [r7, #24]
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8005d26:	897b      	ldrh	r3, [r7, #10]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d002      	beq.n	8005d32 <VL53L1_GetLimitCheckValue+0x22>
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d00c      	beq.n	8005d4a <VL53L1_GetLimitCheckValue+0x3a>
 8005d30:	e017      	b.n	8005d62 <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 8005d32:	f107 0314 	add.w	r3, r7, #20
 8005d36:	4619      	mov	r1, r3
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f001 f83b 	bl	8006db4 <VL53L1_get_lite_sigma_threshold>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 8005d42:	8abb      	ldrh	r3, [r7, #20]
 8005d44:	039b      	lsls	r3, r3, #14
 8005d46:	61bb      	str	r3, [r7, #24]
		break;
 8005d48:	e00d      	b.n	8005d66 <VL53L1_GetLimitCheckValue+0x56>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 8005d4a:	f107 0316 	add.w	r3, r7, #22
 8005d4e:	4619      	mov	r1, r3
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	f001 f85b 	bl	8006e0c <VL53L1_get_lite_min_count_rate>
 8005d56:	4603      	mov	r3, r0
 8005d58:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 8005d5a:	8afb      	ldrh	r3, [r7, #22]
 8005d5c:	025b      	lsls	r3, r3, #9
 8005d5e:	61bb      	str	r3, [r7, #24]
		break;
 8005d60:	e001      	b.n	8005d66 <VL53L1_GetLimitCheckValue+0x56>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8005d62:	23fc      	movs	r3, #252	@ 0xfc
 8005d64:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 8005d66:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d123      	bne.n	8005db6 <VL53L1_GetLimitCheckValue+0xa6>

		if (TempFix1616 == 0) {
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d110      	bne.n	8005d96 <VL53L1_GetLimitCheckValue+0x86>
			/* disabled: return value from memory */
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 8005d74:	897b      	ldrh	r3, [r7, #10]
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	33e0      	adds	r3, #224	@ 0xe0
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4413      	add	r3, r2
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8005d88:	897b      	ldrh	r3, [r7, #10]
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 2384 	strb.w	r2, [r3, #900]	@ 0x384
 8005d94:	e00f      	b.n	8005db6 <VL53L1_GetLimitCheckValue+0xa6>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	69ba      	ldr	r2, [r7, #24]
 8005d9a:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8005d9c:	897b      	ldrh	r3, [r7, #10]
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	33e0      	adds	r3, #224	@ 0xe0
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	4413      	add	r3, r2
 8005da6:	69ba      	ldr	r2, [r7, #24]
 8005da8:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8005daa:	897b      	ldrh	r3, [r7, #10]
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	4413      	add	r3, r2
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 2384 	strb.w	r2, [r3, #900]	@ 0x384
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 8005db6:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3720      	adds	r7, #32
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <VL53L1_SetUserROI>:

/* Group ROI Functions */

VL53L1_Error VL53L1_SetUserROI(VL53L1_DEV Dev,
		VL53L1_UserRoi_t *pRoi)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b084      	sub	sp, #16
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
 8005dca:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	73fb      	strb	r3, [r7, #15]
	VL53L1_user_zone_t user_zone;

	Status = CheckValidRectRoi(*pRoi);
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7ff fb99 	bl	800550e <CheckValidRectRoi>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	73fb      	strb	r3, [r7, #15]
	if (Status != VL53L1_ERROR_NONE)
 8005de0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d002      	beq.n	8005dee <VL53L1_SetUserROI+0x2c>
		return VL53L1_ERROR_INVALID_PARAMS;
 8005de8:	f06f 0303 	mvn.w	r3, #3
 8005dec:	e038      	b.n	8005e60 <VL53L1_SetUserROI+0x9e>

	user_zone.x_centre = (pRoi->BotRightX + pRoi->TopLeftX  + 1) / 2;
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	789b      	ldrb	r3, [r3, #2]
 8005df2:	461a      	mov	r2, r3
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	4413      	add	r3, r2
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	0fda      	lsrs	r2, r3, #31
 8005dfe:	4413      	add	r3, r2
 8005e00:	105b      	asrs	r3, r3, #1
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	723b      	strb	r3, [r7, #8]
	user_zone.y_centre = (pRoi->TopLeftY  + pRoi->BotRightY + 1) / 2;
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	785b      	ldrb	r3, [r3, #1]
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	78db      	ldrb	r3, [r3, #3]
 8005e10:	4413      	add	r3, r2
 8005e12:	3301      	adds	r3, #1
 8005e14:	0fda      	lsrs	r2, r3, #31
 8005e16:	4413      	add	r3, r2
 8005e18:	105b      	asrs	r3, r3, #1
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	727b      	strb	r3, [r7, #9]
	user_zone.width =    (pRoi->BotRightX - pRoi->TopLeftX);
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	789a      	ldrb	r2, [r3, #2]
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	72bb      	strb	r3, [r7, #10]
	user_zone.height =   (pRoi->TopLeftY  - pRoi->BotRightY);
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	785a      	ldrb	r2, [r3, #1]
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	78db      	ldrb	r3, [r3, #3]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	72fb      	strb	r3, [r7, #11]
	if ((user_zone.width < 3) || (user_zone.height < 3))
 8005e3a:	7abb      	ldrb	r3, [r7, #10]
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d902      	bls.n	8005e46 <VL53L1_SetUserROI+0x84>
 8005e40:	7afb      	ldrb	r3, [r7, #11]
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d802      	bhi.n	8005e4c <VL53L1_SetUserROI+0x8a>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8005e46:	23fc      	movs	r3, #252	@ 0xfc
 8005e48:	73fb      	strb	r3, [r7, #15]
 8005e4a:	e007      	b.n	8005e5c <VL53L1_SetUserROI+0x9a>
	else
		Status =  VL53L1_set_user_zone(Dev, &user_zone);
 8005e4c:	f107 0308 	add.w	r3, r7, #8
 8005e50:	4619      	mov	r1, r3
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 fd14 	bl	8006880 <VL53L1_set_user_zone>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8005e5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3710      	adds	r7, #16
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b086      	sub	sp, #24
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	460b      	mov	r3, r1
 8005e72:	607a      	str	r2, [r7, #4]
 8005e74:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005e76:	2300      	movs	r3, #0
 8005e78:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 8005e7a:	7afb      	ldrb	r3, [r7, #11]
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	4619      	mov	r1, r3
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f000 fcc6 	bl	8006812 <VL53L1_get_sequence_config_bit>
 8005e86:	4603      	mov	r3, r0
 8005e88:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 8005e8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3718      	adds	r7, #24
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <VL53L1_ClearInterruptAndStartMeasurement>:
	return Status;
}


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b084      	sub	sp, #16
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	789b      	ldrb	r3, [r3, #2]
 8005ea6:	73bb      	strb	r3, [r7, #14]

	Status = VL53L1_clear_interrupt_and_enable_next_range(Dev,
 8005ea8:	7bbb      	ldrb	r3, [r7, #14]
 8005eaa:	4619      	mov	r1, r3
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f001 fb87 	bl	80075c0 <VL53L1_clear_interrupt_and_enable_next_range>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 8005eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
	...

08005ec4 <ComputeRQL>:


static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b08d      	sub	sp, #52	@ 0x34
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	4603      	mov	r3, r0
 8005ecc:	603a      	str	r2, [r7, #0]
 8005ece:	71fb      	strb	r3, [r7, #7]
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	71bb      	strb	r3, [r7, #6]
	int16_t SRL = 300;
 8005ed4:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8005ed8:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint16_t SRAS = 30;
 8005eda:	231e      	movs	r3, #30
 8005edc:	847b      	strh	r3, [r7, #34]	@ 0x22
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587; /* 117.7 * 65536 */
 8005ede:	4b33      	ldr	r3, [pc, #204]	@ (8005fac <ComputeRQL+0xe8>)
 8005ee0:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157; /* 48.8 * 65536 */
 8005ee2:	4b33      	ldr	r3, [pc, #204]	@ (8005fb0 <ComputeRQL+0xec>)
 8005ee4:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;    /* 0.1 * 65536 */
 8005ee6:	f641 139a 	movw	r3, #6554	@ 0x199a
 8005eea:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 8005eec:	79fb      	ldrb	r3, [r7, #7]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d103      	bne.n	8005efa <ComputeRQL+0x36>
		returnvalue = 0;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005ef8:	e04f      	b.n	8005f9a <ComputeRQL+0xd6>
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 8005efa:	79bb      	ldrb	r3, [r7, #6]
 8005efc:	2b07      	cmp	r3, #7
 8005efe:	d103      	bne.n	8005f08 <ComputeRQL+0x44>
		returnvalue = 50;
 8005f00:	2332      	movs	r3, #50	@ 0x32
 8005f02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005f06:	e048      	b.n	8005f9a <ComputeRQL+0xd6>
	else {
		if (presults_data->median_range_mm < SRL)
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8005f0e:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8005f12:	429a      	cmp	r2, r3
 8005f14:	dd03      	ble.n	8005f1e <ComputeRQL+0x5a>
			RAS = SRAS * 65536;
 8005f16:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005f18:	041b      	lsls	r3, r3, #16
 8005f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f1c:	e007      	b.n	8005f2e <ComputeRQL+0x6a>
		else
			RAS = LRAP * presults_data->median_range_mm;
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8005f24:	461a      	mov	r2, r3
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	fb02 f303 	mul.w	r3, r2, r3
 8005f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Fix1616 + (fix1616 * uint16_t / fix1616) * 65536 = fix1616 */
		if (RAS != 0) {
 8005f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d020      	beq.n	8005f76 <ComputeRQL+0xb2>
			partial = (GGm * presults_data->sigma_mm);
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8005f38:	461a      	mov	r2, r3
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	fb02 f303 	mul.w	r3, r2, r3
 8005f40:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 8005f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f44:	085b      	lsrs	r3, r3, #1
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	4413      	add	r3, r2
 8005f4a:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f54:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	041b      	lsls	r3, r3, #16
 8005f5a:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d804      	bhi.n	8005f6e <ComputeRQL+0xaa>
				SRQL = GI - partial;
 8005f64:	69fa      	ldr	r2, [r7, #28]
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f6c:	e006      	b.n	8005f7c <ComputeRQL+0xb8>
			else
				SRQL = 50 * 65536;
 8005f6e:	f44f 1348 	mov.w	r3, #3276800	@ 0x320000
 8005f72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f74:	e002      	b.n	8005f7c <ComputeRQL+0xb8>
		} else
			SRQL = 100 * 65536;
 8005f76:	f44f 03c8 	mov.w	r3, #6553600	@ 0x640000
 8005f7a:	62bb      	str	r3, [r7, #40]	@ 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 8005f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f7e:	0c1b      	lsrs	r3, r3, #16
 8005f80:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 8005f82:	7bfb      	ldrb	r3, [r7, #15]
 8005f84:	2b32      	cmp	r3, #50	@ 0x32
 8005f86:	d905      	bls.n	8005f94 <ComputeRQL+0xd0>
 8005f88:	7bfb      	ldrb	r3, [r7, #15]
 8005f8a:	2b64      	cmp	r3, #100	@ 0x64
 8005f8c:	bf28      	it	cs
 8005f8e:	2364      	movcs	r3, #100	@ 0x64
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	e000      	b.n	8005f96 <ComputeRQL+0xd2>
 8005f94:	2332      	movs	r3, #50	@ 0x32
 8005f96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	return returnvalue;
 8005f9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3734      	adds	r7, #52	@ 0x34
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	0075b333 	.word	0x0075b333
 8005fb0:	0030cccd 	.word	0x0030cccd

08005fb4 <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	4603      	mov	r3, r0
 8005fbc:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8005fbe:	79fb      	ldrb	r3, [r7, #7]
 8005fc0:	3b04      	subs	r3, #4
 8005fc2:	2b0f      	cmp	r3, #15
 8005fc4:	d83d      	bhi.n	8006042 <ConvertStatusLite+0x8e>
 8005fc6:	a201      	add	r2, pc, #4	@ (adr r2, 8005fcc <ConvertStatusLite+0x18>)
 8005fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fcc:	0800601f 	.word	0x0800601f
 8005fd0:	08006019 	.word	0x08006019
 8005fd4:	08006025 	.word	0x08006025
 8005fd8:	0800602b 	.word	0x0800602b
 8005fdc:	08006037 	.word	0x08006037
 8005fe0:	0800603d 	.word	0x0800603d
 8005fe4:	08006043 	.word	0x08006043
 8005fe8:	08006043 	.word	0x08006043
 8005fec:	08006031 	.word	0x08006031
 8005ff0:	08006043 	.word	0x08006043
 8005ff4:	08006043 	.word	0x08006043
 8005ff8:	08006043 	.word	0x08006043
 8005ffc:	08006043 	.word	0x08006043
 8006000:	08006043 	.word	0x08006043
 8006004:	0800600d 	.word	0x0800600d
 8006008:	08006013 	.word	0x08006013
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 800600c:	230a      	movs	r3, #10
 800600e:	73fb      	strb	r3, [r7, #15]
		break;
 8006010:	e019      	b.n	8006046 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 8006012:	2306      	movs	r3, #6
 8006014:	73fb      	strb	r3, [r7, #15]
		break;
 8006016:	e016      	b.n	8006046 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8006018:	2304      	movs	r3, #4
 800601a:	73fb      	strb	r3, [r7, #15]
		break;
 800601c:	e013      	b.n	8006046 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 800601e:	2302      	movs	r3, #2
 8006020:	73fb      	strb	r3, [r7, #15]
		break;
 8006022:	e010      	b.n	8006046 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 8006024:	2301      	movs	r3, #1
 8006026:	73fb      	strb	r3, [r7, #15]
		break;
 8006028:	e00d      	b.n	8006046 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 800602a:	2307      	movs	r3, #7
 800602c:	73fb      	strb	r3, [r7, #15]
		break;
 800602e:	e00a      	b.n	8006046 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 8006030:	2309      	movs	r3, #9
 8006032:	73fb      	strb	r3, [r7, #15]
		break;
 8006034:	e007      	b.n	8006046 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 8006036:	2303      	movs	r3, #3
 8006038:	73fb      	strb	r3, [r7, #15]
		break;
 800603a:	e004      	b.n	8006046 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 800603c:	2300      	movs	r3, #0
 800603e:	73fb      	strb	r3, [r7, #15]
		break;
 8006040:	e001      	b.n	8006046 <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 8006042:	23ff      	movs	r3, #255	@ 0xff
 8006044:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8006046:	7bfb      	ldrb	r3, [r7, #15]
}
 8006048:	4618      	mov	r0, r3
 800604a:	3714      	adds	r7, #20
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <SetSimpleData>:

static VL53L1_Error SetSimpleData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t device_status,
	VL53L1_range_data_t *presults_data,
	VL53L1_RangingMeasurementData_t *pRangeData)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b08c      	sub	sp, #48	@ 0x30
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	607b      	str	r3, [r7, #4]
 800605e:	460b      	mov	r3, r1
 8006060:	72fb      	strb	r3, [r7, #11]
 8006062:	4613      	mov	r3, r2
 8006064:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8006066:	2300      	movs	r3, #0
 8006068:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	int16_t Range;

	pRangeData->TimeStamp = presults_data->time_stamp;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685a      	ldr	r2, [r3, #4]
 8006070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006072:	601a      	str	r2, [r3, #0]

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800607a:	f003 031f 	and.w	r3, r3, #31
 800607e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 8006082:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8006086:	7afb      	ldrb	r3, [r7, #11]
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	4618      	mov	r0, r3
 800608c:	f7ff ff1a 	bl	8005ec4 <ComputeRQL>
 8006090:	4603      	mov	r3, r0
 8006092:	461a      	mov	r2, r3
 8006094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006096:	715a      	strb	r2, [r3, #5]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800609c:	025b      	lsls	r3, r3, #9
 800609e:	62bb      	str	r3, [r7, #40]	@ 0x28
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 80060a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060a4:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80060aa:	025b      	lsls	r3, r3, #9
 80060ac:	627b      	str	r3, [r7, #36]	@ 0x24
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 80060ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060b2:	60da      	str	r2, [r3, #12]

	pRangeData->EffectiveSpadRtnCount =
		presults_data->actual_effective_spads;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	8a1a      	ldrh	r2, [r3, #16]
	pRangeData->EffectiveSpadRtnCount =
 80060b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ba:	821a      	strh	r2, [r3, #16]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80060c0:	025b      	lsls	r3, r3, #9
 80060c2:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);

	pRangeData->SigmaMilliMeter = TempFix1616;
 80060c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060c6:	6a3a      	ldr	r2, [r7, #32]
 80060c8:	615a      	str	r2, [r3, #20]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	@ 0x3c
 80060d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060d2:	831a      	strh	r2, [r3, #24]

	pRangeData->RangeFractionalPart = 0;
 80060d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060d6:	2200      	movs	r2, #0
 80060d8:	769a      	strb	r2, [r3, #26]

	/* Treat device error status first */
	switch (device_status) {
 80060da:	7abb      	ldrb	r3, [r7, #10]
 80060dc:	2b11      	cmp	r3, #17
 80060de:	d009      	beq.n	80060f4 <SetSimpleData+0xa0>
 80060e0:	2b11      	cmp	r3, #17
 80060e2:	dc0f      	bgt.n	8006104 <SetSimpleData+0xb0>
 80060e4:	2b03      	cmp	r3, #3
 80060e6:	dc02      	bgt.n	80060ee <SetSimpleData+0x9a>
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	dc03      	bgt.n	80060f4 <SetSimpleData+0xa0>
 80060ec:	e00a      	b.n	8006104 <SetSimpleData+0xb0>
 80060ee:	2b0d      	cmp	r3, #13
 80060f0:	d004      	beq.n	80060fc <SetSimpleData+0xa8>
 80060f2:	e007      	b.n	8006104 <SetSimpleData+0xb0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 80060f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060f6:	2205      	movs	r2, #5
 80060f8:	76da      	strb	r2, [r3, #27]
		break;
 80060fa:	e006      	b.n	800610a <SetSimpleData+0xb6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 80060fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060fe:	220d      	movs	r2, #13
 8006100:	76da      	strb	r2, [r3, #27]
		break;
 8006102:	e002      	b.n	800610a <SetSimpleData+0xb6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8006104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006106:	2200      	movs	r2, #0
 8006108:	76da      	strb	r2, [r3, #27]
	}

	/* Now deal with range status according to the ranging preset */
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 800610a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800610c:	7edb      	ldrb	r3, [r3, #27]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d108      	bne.n	8006124 <SetSimpleData+0xd0>
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 8006112:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006116:	4618      	mov	r0, r3
 8006118:	f7ff ff4c 	bl	8005fb4 <ConvertStatusLite>
 800611c:	4603      	mov	r3, r0
 800611e:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 8006120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006122:	76da      	strb	r2, [r3, #27]
	}

	/* Update current Limit Check */
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8006128:	025b      	lsls	r3, r3, #9
 800612a:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6a3a      	ldr	r2, [r7, #32]
 8006130:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006138:	025b      	lsls	r3, r3, #9
 800613a:	623b      	str	r3, [r7, #32]
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6a3a      	ldr	r2, [r7, #32]
 8006140:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);

	/* Update Limit Check Status */
	/* Sigma */
	VL53L1_GetLimitCheckValue(Dev,
 8006144:	f107 0314 	add.w	r3, r7, #20
 8006148:	461a      	mov	r2, r3
 800614a:	2100      	movs	r1, #0
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f7ff fddf 	bl	8005d10 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 8006152:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006156:	2b06      	cmp	r3, #6
 8006158:	bf0c      	ite	eq
 800615a:	2301      	moveq	r3, #1
 800615c:	2300      	movne	r3, #0
 800615e:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 8006160:	77fb      	strb	r3, [r7, #31]

	VL53L1_GetLimitCheckEnable(Dev,
 8006162:	f107 0319 	add.w	r3, r7, #25
 8006166:	461a      	mov	r2, r3
 8006168:	2100      	movs	r1, #0
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f7ff fdad 	bl	8005cca <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 8006170:	7e7b      	ldrb	r3, [r7, #25]
 8006172:	2b01      	cmp	r3, #1
 8006174:	d104      	bne.n	8006180 <SetSimpleData+0x12c>
 8006176:	7ffb      	ldrb	r3, [r7, #31]
 8006178:	2b01      	cmp	r3, #1
 800617a:	d101      	bne.n	8006180 <SetSimpleData+0x12c>
 800617c:	2301      	movs	r3, #1
 800617e:	e000      	b.n	8006182 <SetSimpleData+0x12e>
 8006180:	2300      	movs	r3, #0
 8006182:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	7fba      	ldrb	r2, [r7, #30]
 8006188:	f883 2386 	strb.w	r2, [r3, #902]	@ 0x386
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

	/* Signal Rate */
	VL53L1_GetLimitCheckValue(Dev,
 800618c:	f107 0314 	add.w	r3, r7, #20
 8006190:	461a      	mov	r2, r3
 8006192:	2101      	movs	r1, #1
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f7ff fdbb 	bl	8005d10 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 800619a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800619e:	2b04      	cmp	r3, #4
 80061a0:	bf0c      	ite	eq
 80061a2:	2301      	moveq	r3, #1
 80061a4:	2300      	movne	r3, #0
 80061a6:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 80061a8:	777b      	strb	r3, [r7, #29]

	VL53L1_GetLimitCheckEnable(Dev,
 80061aa:	f107 0319 	add.w	r3, r7, #25
 80061ae:	461a      	mov	r2, r3
 80061b0:	2101      	movs	r1, #1
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f7ff fd89 	bl	8005cca <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 80061b8:	7e7b      	ldrb	r3, [r7, #25]
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d104      	bne.n	80061c8 <SetSimpleData+0x174>
 80061be:	7f7b      	ldrb	r3, [r7, #29]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d101      	bne.n	80061c8 <SetSimpleData+0x174>
 80061c4:	2301      	movs	r3, #1
 80061c6:	e000      	b.n	80061ca <SetSimpleData+0x176>
 80061c8:	2300      	movs	r3, #0
 80061ca:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	7fba      	ldrb	r2, [r7, #30]
 80061d0:	f883 2387 	strb.w	r2, [r3, #903]	@ 0x387
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 80061d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d6:	8b1b      	ldrh	r3, [r3, #24]
 80061d8:	837b      	strh	r3, [r7, #26]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 80061da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061dc:	7edb      	ldrb	r3, [r3, #27]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d110      	bne.n	8006204 <SetSimpleData+0x1b0>
 80061e2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	da0c      	bge.n	8006204 <SetSimpleData+0x1b0>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 80061ea:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80061ee:	4b08      	ldr	r3, [pc, #32]	@ (8006210 <SetSimpleData+0x1bc>)
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	da03      	bge.n	80061fe <SetSimpleData+0x1aa>
			pRangeData->RangeStatus =
 80061f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061f8:	220e      	movs	r2, #14
 80061fa:	76da      	strb	r2, [r3, #27]
 80061fc:	e002      	b.n	8006204 <SetSimpleData+0x1b0>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 80061fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006200:	2200      	movs	r2, #0
 8006202:	831a      	strh	r2, [r3, #24]
	}

	return Status;
 8006204:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8006208:	4618      	mov	r0, r3
 800620a:	3730      	adds	r7, #48	@ 0x30
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}
 8006210:	2000000c 	.word	0x2000000c

08006214 <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
	VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b0a8      	sub	sp, #160	@ 0xa0
 8006218:	af02      	add	r7, sp, #8
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800621e:	2300      	movs	r3, #0
 8006220:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	VL53L1_range_results_t results;
	VL53L1_range_results_t *presults = &results;
 8006224:	f107 0308 	add.w	r3, r7, #8
 8006228:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

	LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 800622c:	221c      	movs	r2, #28
 800622e:	21ff      	movs	r1, #255	@ 0xff
 8006230:	6838      	ldr	r0, [r7, #0]
 8006232:	f004 fc9f 	bl	800ab74 <memset>
		sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 8006236:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800623a:	2102      	movs	r1, #2
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f001 f94f 	bl	80074e0 <VL53L1_get_device_results>
 8006242:	4603      	mov	r3, r0
 8006244:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
			Dev,
			VL53L1_DEVICERESULTSLEVEL_FULL,
			presults);

	if (Status == VL53L1_ERROR_NONE) {
 8006248:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 800624c:	2b00      	cmp	r3, #0
 800624e:	d117      	bne.n	8006280 <VL53L1_GetRangingMeasurementData+0x6c>
		pRangingMeasurementData->StreamCount = presults->stream_count;
 8006250:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006254:	789a      	ldrb	r2, [r3, #2]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	711a      	strb	r2, [r3, #4]

		/* in case of lite ranging or autonomous the following function
		 * returns index = 0
		 */
		presults_data = &(presults->data[0]);
 800625a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800625e:	3304      	adds	r3, #4
 8006260:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		Status = SetSimpleData(Dev, 1,
 8006264:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006268:	78da      	ldrb	r2, [r3, #3]
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	9300      	str	r3, [sp, #0]
 800626e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006272:	2101      	movs	r1, #1
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f7ff feed 	bl	8006054 <SetSimpleData>
 800627a:	4603      	mov	r3, r0
 800627c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				presults_data,
				pRangingMeasurementData);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006280:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
}
 8006284:	4618      	mov	r0, r3
 8006286:	3798      	adds	r7, #152	@ 0x98
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <VL53L1_SetThresholdConfig>:

/* Group PAL detection triggered events Functions */

VL53L1_Error VL53L1_SetThresholdConfig(VL53L1_DEV Dev,
		VL53L1_DetectionConfig_t *pConfig)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b08e      	sub	sp, #56	@ 0x38
 8006290:	af02      	add	r7, sp, #8
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
#define BADTHRESBOUNDS(T) \
	(((T.CrossMode == VL53L1_THRESHOLD_OUT_OF_WINDOW) || \
	(T.CrossMode == VL53L1_THRESHOLD_IN_WINDOW)) && (T.Low > T.High))

	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8006296:	2300      	movs	r3, #0
 8006298:	76fb      	strb	r3, [r7, #27]
	FixPoint1616_t gain, high1616, low1616;
	VL53L1_LLDriverData_t *pdev;

	LOG_FUNCTION_START("");

	pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	Status = VL53L1_get_GPIO_interrupt_config(Dev, &Cfg);
 800629e:	f107 030c 	add.w	r3, r7, #12
 80062a2:	4619      	mov	r1, r3
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f001 faed 	bl	8007884 <VL53L1_get_GPIO_interrupt_config>
 80062aa:	4603      	mov	r3, r0
 80062ac:	76fb      	strb	r3, [r7, #27]
	if (Status != VL53L1_ERROR_NONE)
 80062ae:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d002      	beq.n	80062bc <VL53L1_SetThresholdConfig+0x30>
		return Status;
 80062b6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80062ba:	e0bf      	b.n	800643c <VL53L1_SetThresholdConfig+0x1b0>

	if (pConfig->DetectionMode == VL53L1_DETECTION_NORMAL_RUN) {
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d10d      	bne.n	80062e0 <VL53L1_SetThresholdConfig+0x54>
		Cfg.intr_new_measure_ready = 1;
 80062c4:	2301      	movs	r3, #1
 80062c6:	73bb      	strb	r3, [r7, #14]
		Status = VL53L1_set_GPIO_interrupt_config_struct(Dev,
 80062c8:	8b3b      	ldrh	r3, [r7, #24]
 80062ca:	f8ad 3000 	strh.w	r3, [sp]
 80062ce:	f107 030c 	add.w	r3, r7, #12
 80062d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f001 faa7 	bl	8007828 <VL53L1_set_GPIO_interrupt_config_struct>
 80062da:	4603      	mov	r3, r0
 80062dc:	76fb      	strb	r3, [r7, #27]
 80062de:	e0ab      	b.n	8006438 <VL53L1_SetThresholdConfig+0x1ac>
				Cfg);
	} else {
		if (BADTHRESBOUNDS(pConfig->Distance))
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	789b      	ldrb	r3, [r3, #2]
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	d003      	beq.n	80062f0 <VL53L1_SetThresholdConfig+0x64>
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	789b      	ldrb	r3, [r3, #2]
 80062ec:	2b03      	cmp	r3, #3
 80062ee:	d107      	bne.n	8006300 <VL53L1_SetThresholdConfig+0x74>
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	88da      	ldrh	r2, [r3, #6]
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	889b      	ldrh	r3, [r3, #4]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d901      	bls.n	8006300 <VL53L1_SetThresholdConfig+0x74>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 80062fc:	23fc      	movs	r3, #252	@ 0xfc
 80062fe:	76fb      	strb	r3, [r7, #27]
		if ((Status == VL53L1_ERROR_NONE) &&
 8006300:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d10f      	bne.n	8006328 <VL53L1_SetThresholdConfig+0x9c>
				(BADTHRESBOUNDS(pConfig->Rate)))
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	7a1b      	ldrb	r3, [r3, #8]
		if ((Status == VL53L1_ERROR_NONE) &&
 800630c:	2b02      	cmp	r3, #2
 800630e:	d003      	beq.n	8006318 <VL53L1_SetThresholdConfig+0x8c>
				(BADTHRESBOUNDS(pConfig->Rate)))
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	7a1b      	ldrb	r3, [r3, #8]
 8006314:	2b03      	cmp	r3, #3
 8006316:	d107      	bne.n	8006328 <VL53L1_SetThresholdConfig+0x9c>
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	691a      	ldr	r2, [r3, #16]
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	429a      	cmp	r2, r3
 8006322:	d901      	bls.n	8006328 <VL53L1_SetThresholdConfig+0x9c>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8006324:	23fc      	movs	r3, #252	@ 0xfc
 8006326:	76fb      	strb	r3, [r7, #27]
		if (Status == VL53L1_ERROR_NONE) {
 8006328:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d14c      	bne.n	80063ca <VL53L1_SetThresholdConfig+0x13e>
			Cfg.intr_new_measure_ready = 0;
 8006330:	2300      	movs	r3, #0
 8006332:	73bb      	strb	r3, [r7, #14]
			Cfg.intr_no_target = pConfig->IntrNoTarget;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	785b      	ldrb	r3, [r3, #1]
 8006338:	73fb      	strb	r3, [r7, #15]
			/* fix ticket 466238 Apply invert distance gain to thresholds */
			g = pdev->gain_cal.standard_ranging_gain_factor;
 800633a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800633c:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8006340:	857b      	strh	r3, [r7, #42]	@ 0x2a
			if (g != 0) {
 8006342:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006344:	2b00      	cmp	r3, #0
 8006346:	d01e      	beq.n	8006386 <VL53L1_SetThresholdConfig+0xfa>
				/* gain is ufix 5.11, convert to 16.16 */
				gain = (FixPoint1616_t) ((uint32_t)g << 5);
 8006348:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800634a:	015b      	lsls	r3, r3, #5
 800634c:	627b      	str	r3, [r7, #36]	@ 0x24
				high1616 = (FixPoint1616_t) ((uint32_t)
						pConfig->Distance.High << 16);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	889b      	ldrh	r3, [r3, #4]
				high1616 = (FixPoint1616_t) ((uint32_t)
 8006352:	041b      	lsls	r3, r3, #16
 8006354:	623b      	str	r3, [r7, #32]
				low1616 = (FixPoint1616_t) ((uint32_t)
						pConfig->Distance.Low << 16);
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	88db      	ldrh	r3, [r3, #6]
				low1616 = (FixPoint1616_t) ((uint32_t)
 800635a:	041b      	lsls	r3, r3, #16
 800635c:	61fb      	str	r3, [r7, #28]
				/* +32768 to round the results*/
				high1616 = (high1616 + 32768) / gain;
 800635e:	6a3b      	ldr	r3, [r7, #32]
 8006360:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
 8006364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006366:	fbb2 f3f3 	udiv	r3, r2, r3
 800636a:	623b      	str	r3, [r7, #32]
				low1616 = (low1616 + 32768) / gain;
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
 8006372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006374:	fbb2 f3f3 	udiv	r3, r2, r3
 8006378:	61fb      	str	r3, [r7, #28]
				Cfg.threshold_distance_high = (uint16_t)
 800637a:	6a3b      	ldr	r3, [r7, #32]
 800637c:	b29b      	uxth	r3, r3
 800637e:	827b      	strh	r3, [r7, #18]
						(high1616 & 0xFFFF);
				Cfg.threshold_distance_low = (uint16_t)
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	b29b      	uxth	r3, r3
 8006384:	82bb      	strh	r3, [r7, #20]
						(low1616 & 0xFFFF);
			} /* end fix ticket 466238 */
			Cfg.threshold_rate_high =
				VL53L1_FIXPOINT1616TOFIXPOINT97(
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	0a5b      	lsrs	r3, r3, #9
 800638c:	b29b      	uxth	r3, r3
			Cfg.threshold_rate_high =
 800638e:	82fb      	strh	r3, [r7, #22]
						pConfig->Rate.High);
			Cfg.threshold_rate_low =
				VL53L1_FIXPOINT1616TOFIXPOINT97(
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	0a5b      	lsrs	r3, r3, #9
 8006396:	b29b      	uxth	r3, r3
			Cfg.threshold_rate_low =
 8006398:	833b      	strh	r3, [r7, #24]
						pConfig->Rate.Low);

			Cfg.intr_mode_distance = ConvertModeToLLD(
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	789a      	ldrb	r2, [r3, #2]
 800639e:	f107 031b 	add.w	r3, r7, #27
 80063a2:	4611      	mov	r1, r2
 80063a4:	4618      	mov	r0, r3
 80063a6:	f7ff f8d9 	bl	800555c <ConvertModeToLLD>
 80063aa:	4603      	mov	r3, r0
 80063ac:	733b      	strb	r3, [r7, #12]
					&Status,
					pConfig->Distance.CrossMode);
			if (Status == VL53L1_ERROR_NONE)
 80063ae:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d109      	bne.n	80063ca <VL53L1_SetThresholdConfig+0x13e>
				Cfg.intr_mode_rate = ConvertModeToLLD(
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	7a1a      	ldrb	r2, [r3, #8]
 80063ba:	f107 031b 	add.w	r3, r7, #27
 80063be:	4611      	mov	r1, r2
 80063c0:	4618      	mov	r0, r3
 80063c2:	f7ff f8cb 	bl	800555c <ConvertModeToLLD>
 80063c6:	4603      	mov	r3, r0
 80063c8:	737b      	strb	r3, [r7, #13]
					&Status,
					pConfig->Rate.CrossMode);
		}

		/* Refine thresholds combination now */
		if (Status == VL53L1_ERROR_NONE) {
 80063ca:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d123      	bne.n	800641a <VL53L1_SetThresholdConfig+0x18e>
			Cfg.intr_combined_mode = 1;
 80063d2:	2301      	movs	r3, #1
 80063d4:	743b      	strb	r3, [r7, #16]
			switch (pConfig->DetectionMode) {
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	3b01      	subs	r3, #1
 80063dc:	2b03      	cmp	r3, #3
 80063de:	d818      	bhi.n	8006412 <VL53L1_SetThresholdConfig+0x186>
 80063e0:	a201      	add	r2, pc, #4	@ (adr r2, 80063e8 <VL53L1_SetThresholdConfig+0x15c>)
 80063e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e6:	bf00      	nop
 80063e8:	080063f9 	.word	0x080063f9
 80063ec:	08006403 	.word	0x08006403
 80063f0:	0800640d 	.word	0x0800640d
 80063f4:	08006419 	.word	0x08006419
			case VL53L1_DETECTION_DISTANCE_ONLY:
				Cfg.threshold_rate_high = 0;
 80063f8:	2300      	movs	r3, #0
 80063fa:	82fb      	strh	r3, [r7, #22]
				Cfg.threshold_rate_low = 0;
 80063fc:	2300      	movs	r3, #0
 80063fe:	833b      	strh	r3, [r7, #24]
				break;
 8006400:	e00b      	b.n	800641a <VL53L1_SetThresholdConfig+0x18e>
			case VL53L1_DETECTION_RATE_ONLY:
				Cfg.threshold_distance_high = 0;
 8006402:	2300      	movs	r3, #0
 8006404:	827b      	strh	r3, [r7, #18]
				Cfg.threshold_distance_low = 0;
 8006406:	2300      	movs	r3, #0
 8006408:	82bb      	strh	r3, [r7, #20]
				break;
 800640a:	e006      	b.n	800641a <VL53L1_SetThresholdConfig+0x18e>
			case VL53L1_DETECTION_DISTANCE_OR_RATE:
				/* Nothing to do all is already in place */
				break;
			case VL53L1_DETECTION_DISTANCE_AND_RATE:
				Cfg.intr_combined_mode = 0;
 800640c:	2300      	movs	r3, #0
 800640e:	743b      	strb	r3, [r7, #16]
				break;
 8006410:	e003      	b.n	800641a <VL53L1_SetThresholdConfig+0x18e>
			default:
				Status = VL53L1_ERROR_INVALID_PARAMS;
 8006412:	23fc      	movs	r3, #252	@ 0xfc
 8006414:	76fb      	strb	r3, [r7, #27]
 8006416:	e000      	b.n	800641a <VL53L1_SetThresholdConfig+0x18e>
				break;
 8006418:	bf00      	nop
			}
		}

		if (Status == VL53L1_ERROR_NONE)
 800641a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d10a      	bne.n	8006438 <VL53L1_SetThresholdConfig+0x1ac>
			Status =
			VL53L1_set_GPIO_interrupt_config_struct(Dev, Cfg);
 8006422:	8b3b      	ldrh	r3, [r7, #24]
 8006424:	f8ad 3000 	strh.w	r3, [sp]
 8006428:	f107 030c 	add.w	r3, r7, #12
 800642c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f001 f9fa 	bl	8007828 <VL53L1_set_GPIO_interrupt_config_struct>
 8006434:	4603      	mov	r3, r0
			Status =
 8006436:	76fb      	strb	r3, [r7, #27]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006438:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800643c:	4618      	mov	r0, r3
 800643e:	3730      	adds	r7, #48	@ 0x30
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 8006444:	b5b0      	push	{r4, r5, r7, lr}
 8006446:	b088      	sub	sp, #32
 8006448:	af04      	add	r7, sp, #16
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	460b      	mov	r3, r1
 800644e:	70fb      	strb	r3, [r7, #3]
	/*
	 * Initialise pdev data structure
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8006450:	2300      	movs	r3, #0
 8006452:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t    *pdev =
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_init_ll_driver_state(
 8006458:	2162      	movs	r1, #98	@ 0x62
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f002 f953 	bl	8008706 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	2200      	movs	r2, #0
 8006464:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	2201      	movs	r2, #1
 800646a:	705a      	strb	r2, [r3, #1]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	2200      	movs	r2, #0
 8006470:	709a      	strb	r2, [r3, #2]

	pdev->offset_calibration_mode =
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	2201      	movs	r2, #1
 8006476:	70da      	strb	r2, [r3, #3]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	2201      	movs	r2, #1
 800647c:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;

	pdev->phasecal_config_timeout_us  =  1000;
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006484:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800648c:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8006494:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	2264      	movs	r2, #100	@ 0x64
 800649a:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 80064a2:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	/* initialise gain calibration values to tuning parameter values */

	pdev->gain_cal.standard_ranging_gain_factor =
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	f240 72db 	movw	r2, #2011	@ 0x7db
 80064b2:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;

	/*
	 * Initialise version structure
	 */
	VL53L1_init_version(Dev);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f002 f909 	bl	80086ce <VL53L1_init_version>
	 *
	 *  Contains the key NVM data e.g identification info fast oscillator
	 *  freq, max trim and laser safety info
	 */

	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80064bc:	78fb      	ldrb	r3, [r7, #3]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d008      	beq.n	80064d4 <VL53L1_data_init+0x90>
 80064c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d104      	bne.n	80064d4 <VL53L1_data_init+0x90>
			status = VL53L1_read_p2p_data(Dev);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 f857 	bl	800657e <VL53L1_read_p2p_data>
 80064d0:	4603      	mov	r3, r0
 80064d2:	73fb      	strb	r3, [r7, #15]

	/* Initialise Ref SPAD Char configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_refspadchar_config_struct(
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80064da:	4618      	mov	r0, r3
 80064dc:	f001 fc38 	bl	8007d50 <VL53L1_init_refspadchar_config_struct>
 80064e0:	4603      	mov	r3, r0
 80064e2:	73fb      	strb	r3, [r7, #15]
#endif

	/* Initialise SPAD Self Check (SSC) configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_ssc_config_struct(
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80064ea:	4618      	mov	r0, r3
 80064ec:	f001 fc54 	bl	8007d98 <VL53L1_init_ssc_config_struct>
 80064f0:	4603      	mov	r3, r0
 80064f2:	73fb      	strb	r3, [r7, #15]

	/* Initialise Private Xtalk configuration structure
	 * - Fill with customer NVM data to begin
	 */
	status =
		VL53L1_init_xtalk_config_struct(
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	f103 0242 	add.w	r2, r3, #66	@ 0x42
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8006500:	4619      	mov	r1, r3
 8006502:	4610      	mov	r0, r2
 8006504:	f001 fc69 	bl	8007dda <VL53L1_init_xtalk_config_struct>
 8006508:	4603      	mov	r3, r0
 800650a:	73fb      	strb	r3, [r7, #15]

	/* Initialise Offset Calibration configuration structure
	 */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_offset_cal_config_struct(
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8006512:	4618      	mov	r0, r3
 8006514:	f001 fcc3 	bl	8007e9e <VL53L1_init_offset_cal_config_struct>
 8006518:	4603      	mov	r3, r0
 800651a:	73fb      	strb	r3, [r7, #15]

	/* Initialise Tuning Parameter structure
	 * - Added as part of Patch_AddingTuningParmStorage_11821
	 */
	status =
		VL53L1_init_tuning_parm_storage_struct(
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	33a4      	adds	r3, #164	@ 0xa4
 8006520:	4618      	mov	r0, r3
 8006522:	f001 fce3 	bl	8007eec <VL53L1_init_tuning_parm_storage_struct>
 8006526:	4603      	mov	r3, r0
 8006528:	73fb      	strb	r3, [r7, #15]
			&(pdev->tuning_parms));

	status = VL53L1_set_vhv_loopbound(Dev,
 800652a:	2120      	movs	r1, #32
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 fc99 	bl	8006e64 <VL53L1_set_vhv_loopbound>
 8006532:	4603      	mov	r3, r0
 8006534:	73fb      	strb	r3, [r7, #15]
	/*
	 * Initialise default settings - much happen *after*
	 * reading /setting  of static_nvm_managed
	 */

	if (status == VL53L1_ERROR_NONE)
 8006536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d116      	bne.n	800656c <VL53L1_data_init+0x128>
		status = VL53L1_set_preset_mode(
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	7858      	ldrb	r0, [r3, #1]
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	8b1c      	ldrh	r4, [r3, #24]
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	689d      	ldr	r5, [r3, #8]
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	6912      	ldr	r2, [r2, #16]
 8006552:	68b9      	ldr	r1, [r7, #8]
 8006554:	6949      	ldr	r1, [r1, #20]
 8006556:	9102      	str	r1, [sp, #8]
 8006558:	9201      	str	r2, [sp, #4]
 800655a:	9300      	str	r3, [sp, #0]
 800655c:	462b      	mov	r3, r5
 800655e:	4622      	mov	r2, r4
 8006560:	4601      	mov	r1, r0
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 fab0 	bl	8006ac8 <VL53L1_set_preset_mode>
 8006568:	4603      	mov	r3, r0
 800656a:	73fb      	strb	r3, [r7, #15]
						pdev->range_config_timeout_us,
						pdev->inter_measurement_period_ms);

	/* Initial Low Power Auto Mode data structures */
	/* Added for Patch_LowPowerAutoMode */
	VL53L1_low_power_auto_data_init(
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f002 fee7 	bl	8009340 <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 8006572:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006576:	4618      	mov	r0, r3
 8006578:	3710      	adds	r7, #16
 800657a:	46bd      	mov	sp, r7
 800657c:	bdb0      	pop	{r4, r5, r7, pc}

0800657e <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 800657e:	b580      	push	{r7, lr}
 8006580:	b084      	sub	sp, #16
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
	 *
	 *  Contains the key NVM data e.g identification info
	 *  fast oscillator freq, max trim and laser safety info
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8006586:	2300      	movs	r3, #0
 8006588:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 800658e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d108      	bne.n	80065a8 <VL53L1_read_p2p_data+0x2a>
		status = VL53L1_get_static_nvm_managed(
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800659c:	4619      	mov	r1, r3
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f003 f86b 	bl	800967a <VL53L1_get_static_nvm_managed>
 80065a4:	4603      	mov	r3, r0
 80065a6:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 80065a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d107      	bne.n	80065c0 <VL53L1_read_p2p_data+0x42>
		status = VL53L1_get_customer_nvm_managed(
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	3342      	adds	r3, #66	@ 0x42
 80065b4:	4619      	mov	r1, r3
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f003 f99d 	bl	80098f6 <VL53L1_get_customer_nvm_managed>
 80065bc:	4603      	mov	r3, r0
 80065be:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 80065c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d115      	bne.n	80065f4 <VL53L1_read_p2p_data+0x76>

		status = VL53L1_get_nvm_copy_data(
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	f503 73fd 	add.w	r3, r3, #506	@ 0x1fa
 80065ce:	4619      	mov	r1, r3
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f004 f84f 	bl	800a674 <VL53L1_get_nvm_copy_data>
 80065d6:	4603      	mov	r3, r0
 80065d8:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->nvm_copy_data));

		/* copy Return Good SPADs to buffer */
		if (status == VL53L1_ERROR_NONE)
 80065da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d108      	bne.n	80065f4 <VL53L1_read_p2p_data+0x76>
			VL53L1_copy_rtn_good_spads_to_buffer(
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	f503 72fd 	add.w	r2, r3, #506	@ 0x1fa
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	33f0      	adds	r3, #240	@ 0xf0
 80065ec:	4619      	mov	r1, r3
 80065ee:	4610      	mov	r0, r2
 80065f0:	f002 f9eb 	bl	80089ca <VL53L1_copy_rtn_good_spads_to_buffer>

	/*
	 * read slow osc calibration value
	 * counts per ms
	 */
	if (status == VL53L1_ERROR_NONE)
 80065f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d109      	bne.n	8006610 <VL53L1_read_p2p_data+0x92>
		status =
			VL53L1_RdWord(
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 8006602:	461a      	mov	r2, r3
 8006604:	21de      	movs	r1, #222	@ 0xde
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f004 f996 	bl	800a938 <VL53L1_RdWord>
 800660c:	4603      	mov	r3, r0
 800660e:	73fb      	strb	r3, [r7, #15]

	/*
	 * Check if there a sensible value for osc_measured__fast_osc__frequency
	 */

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	f8b3 315e 	ldrh.w	r3, [r3, #350]	@ 0x15e
 8006616:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800661a:	d204      	bcs.n	8006626 <VL53L1_read_p2p_data+0xa8>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	f64b 42cc 	movw	r2, #48332	@ 0xbccc
 8006622:	f8a3 215e 	strh.w	r2, [r3, #350]	@ 0x15e

	/*
	 * Get MM ROI - contains optical centre as SPAD number
	 */

	if (status == VL53L1_ERROR_NONE)
 8006626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d107      	bne.n	800663e <VL53L1_read_p2p_data+0xc0>
		status =
			VL53L1_get_mode_mitigation_roi(
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	339e      	adds	r3, #158	@ 0x9e
 8006632:	4619      	mov	r1, r3
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 f968 	bl	800690a <VL53L1_get_mode_mitigation_roi>
 800663a:	4603      	mov	r3, r0
 800663c:	73fb      	strb	r3, [r7, #15]

	/* catch parts where the optical centre is
	 * no programmed in to the NVM
	 */

	if (pdev->optical_centre.x_centre == 0 &&
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8006644:	2b00      	cmp	r3, #0
 8006646:	d114      	bne.n	8006672 <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.y_centre == 0) {
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
	if (pdev->optical_centre.x_centre == 0 &&
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10f      	bne.n	8006672 <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
 8006658:	011b      	lsls	r3, r3, #4
 800665a:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	f893 309f 	ldrb.w	r3, [r3, #159]	@ 0x9f
 8006668:	011b      	lsls	r3, r3, #4
 800666a:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
	}

	LOG_FUNCTION_END(status);

	return status;
 8006672:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006676:	4618      	mov	r0, r3
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 800667e:	b480      	push	{r7}
 8006680:	b085      	sub	sp, #20
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
 8006686:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006688:	2300      	movs	r3, #0
 800668a:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	@ 0x2b4
 8006696:	2b00      	cmp	r3, #0
 8006698:	d101      	bne.n	800669e <VL53L1_set_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800669a:	23f1      	movs	r3, #241	@ 0xf1
 800669c:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 800669e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d10c      	bne.n	80066c0 <VL53L1_set_inter_measurement_period_ms+0x42>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	683a      	ldr	r2, [r7, #0]
 80066aa:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	@ 0x2b4
 80066b2:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period = \
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
	}

	LOG_FUNCTION_END(status);

	return status;
 80066c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3714      	adds	r7, #20
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b088      	sub	sp, #32
 80066d4:	af02      	add	r7, sp, #8
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	607a      	str	r2, [r7, #4]
 80066dc:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for setting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80066de:	2300      	movs	r3, #0
 80066e0:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	f8b3 315e 	ldrh.w	r3, [r3, #350]	@ 0x15e
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d101      	bne.n	80066f4 <VL53L1_set_timeouts_us+0x24>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80066f0:	23f1      	movs	r3, #241	@ 0xf1
 80066f2:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 80066f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d11b      	bne.n	8006734 <VL53L1_set_timeouts_us+0x64>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	611a      	str	r2, [r3, #16]

		status =
			VL53L1_calc_timeout_register_values(
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	f8b3 115e 	ldrh.w	r1, [r3, #350]	@ 0x15e
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800671a:	693a      	ldr	r2, [r7, #16]
 800671c:	f502 72ce 	add.w	r2, r2, #412	@ 0x19c
 8006720:	9201      	str	r2, [sp, #4]
 8006722:	9300      	str	r3, [sp, #0]
 8006724:	460b      	mov	r3, r1
 8006726:	683a      	ldr	r2, [r7, #0]
 8006728:	6879      	ldr	r1, [r7, #4]
 800672a:	68b8      	ldr	r0, [r7, #8]
 800672c:	f002 fc6c 	bl	8009008 <VL53L1_calc_timeout_register_values>
 8006730:	4603      	mov	r3, r0
 8006732:	75fb      	strb	r3, [r7, #23]
				&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8006734:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006738:	4618      	mov	r0, r3
 800673a:	3718      	adds	r7, #24
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b088      	sub	sp, #32
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
 800674c:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for getting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800674e:	2300      	movs	r3, #0
 8006750:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 8006756:	2300      	movs	r3, #0
 8006758:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 800675a:	2300      	movs	r3, #0
 800675c:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	f8b3 315e 	ldrh.w	r3, [r3, #350]	@ 0x15e
 8006764:	2b00      	cmp	r3, #0
 8006766:	d101      	bne.n	800676c <VL53L1_get_timeouts_us+0x2c>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8006768:	23f1      	movs	r3, #241	@ 0xf1
 800676a:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 800676c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d148      	bne.n	8006806 <VL53L1_get_timeouts_us+0xc6>

		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
			VL53L1_calc_macro_period_us(
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	f8b3 215e 	ldrh.w	r2, [r3, #350]	@ 0x15e
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	f893 31a2 	ldrb.w	r3, [r3, #418]	@ 0x1a2
 8006780:	4619      	mov	r1, r3
 8006782:	4610      	mov	r0, r2
 8006784:	f002 fae7 	bl	8008d56 <VL53L1_calc_macro_period_us>
 8006788:	6178      	str	r0, [r7, #20]

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	f893 318b 	ldrb.w	r3, [r3, #395]	@ 0x18b
			VL53L1_calc_timeout_us(
 8006790:	6979      	ldr	r1, [r7, #20]
 8006792:	4618      	mov	r0, r3
 8006794:	f002 fb9f 	bl	8008ed6 <VL53L1_calc_timeout_us>
 8006798:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	f893 319c 	ldrb.w	r3, [r3, #412]	@ 0x19c
		timeout_encoded =
 80067a4:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 80067a6:	8a7b      	ldrh	r3, [r7, #18]
 80067a8:	021b      	lsls	r3, r3, #8
 80067aa:	b29b      	uxth	r3, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 80067ac:	69ba      	ldr	r2, [r7, #24]
 80067ae:	f892 219d 	ldrb.w	r2, [r2, #413]	@ 0x19d
		timeout_encoded = (timeout_encoded << 8) +
 80067b2:	4413      	add	r3, r2
 80067b4:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 80067b6:	8a7b      	ldrh	r3, [r7, #18]
 80067b8:	6979      	ldr	r1, [r7, #20]
 80067ba:	4618      	mov	r0, r3
 80067bc:	f002 fbcb 	bl	8008f56 <VL53L1_calc_decoded_timeout_us>
 80067c0:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	f893 31a0 	ldrb.w	r3, [r3, #416]	@ 0x1a0
		timeout_encoded =
 80067cc:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 80067ce:	8a7b      	ldrh	r3, [r7, #18]
 80067d0:	021b      	lsls	r3, r3, #8
 80067d2:	b29b      	uxth	r3, r3
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 80067d4:	69ba      	ldr	r2, [r7, #24]
 80067d6:	f892 21a1 	ldrb.w	r2, [r2, #417]	@ 0x1a1
		timeout_encoded = (timeout_encoded << 8) +
 80067da:	4413      	add	r3, r2
 80067dc:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 80067de:	8a7b      	ldrh	r3, [r7, #18]
 80067e0:	6979      	ldr	r1, [r7, #20]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f002 fbb7 	bl	8008f56 <VL53L1_calc_decoded_timeout_us>
 80067e8:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 8006806:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3720      	adds	r7, #32
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 8006812:	b480      	push	{r7}
 8006814:	b087      	sub	sp, #28
 8006816:	af00      	add	r7, sp, #0
 8006818:	60f8      	str	r0, [r7, #12]
 800681a:	460b      	mov	r3, r1
 800681c:	607a      	str	r2, [r7, #4]
 800681e:	72fb      	strb	r3, [r7, #11]
	/**
	 * Convenience function for getting sequence
	 * config enable bits
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006820:	2300      	movs	r3, #0
 8006822:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 8006828:	2301      	movs	r3, #1
 800682a:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 800682c:	7afb      	ldrb	r3, [r7, #11]
 800682e:	2b07      	cmp	r3, #7
 8006830:	d81c      	bhi.n	800686c <VL53L1_get_sequence_config_bit+0x5a>

		if (bit_id > 0) {
 8006832:	7afb      	ldrb	r3, [r7, #11]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d004      	beq.n	8006842 <VL53L1_get_sequence_config_bit+0x30>
			bit_mask  = 0x01 << bit_id;
 8006838:	7afb      	ldrb	r3, [r7, #11]
 800683a:	2201      	movs	r2, #1
 800683c:	fa02 f303 	lsl.w	r3, r2, r3
 8006840:	75bb      	strb	r3, [r7, #22]
		}

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	f893 21c5 	ldrb.w	r2, [r3, #453]	@ 0x1c5
		*pvalue =
 8006848:	7dbb      	ldrb	r3, [r7, #22]
 800684a:	4013      	ands	r3, r2
 800684c:	b2da      	uxtb	r2, r3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0) {
 8006852:	7afb      	ldrb	r3, [r7, #11]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00b      	beq.n	8006870 <VL53L1_get_sequence_config_bit+0x5e>
			*pvalue  = *pvalue >> bit_id;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	461a      	mov	r2, r3
 800685e:	7afb      	ldrb	r3, [r7, #11]
 8006860:	fa42 f303 	asr.w	r3, r2, r3
 8006864:	b2da      	uxtb	r2, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	701a      	strb	r2, [r3, #0]
 800686a:	e001      	b.n	8006870 <VL53L1_get_sequence_config_bit+0x5e>
		}

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 800686c:	23fc      	movs	r3, #252	@ 0xfc
 800686e:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 8006870:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006874:	4618      	mov	r0, r3
 8006876:	371c      	adds	r7, #28
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800688a:	2300      	movs	r3, #0
 800688c:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	7858      	ldrb	r0, [r3, #1]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	7819      	ldrb	r1, [r3, #0]
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	f203 13c3 	addw	r3, r3, #451	@ 0x1c3
 80068a0:	461a      	mov	r2, r3
 80068a2:	f002 fc2a 	bl	80090fa <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	7898      	ldrb	r0, [r3, #2]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	78d9      	ldrb	r1, [r3, #3]
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 80068b4:	461a      	mov	r2, r3
 80068b6:	f002 fc5f 	bl	8009178 <VL53L1_encode_zone_size>

	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
 80068ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b084      	sub	sp, #16
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
 80068ce:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80068d0:	2300      	movs	r3, #0
 80068d2:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	f893 01c3 	ldrb.w	r0, [r3, #451]	@ 0x1c3
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	3301      	adds	r3, #1
 80068e2:	683a      	ldr	r2, [r7, #0]
 80068e4:	4619      	mov	r1, r3
 80068e6:	f002 fde4 	bl	80094b2 <VL53L1_decode_row_col>
			pdev->dyn_cfg.roi_config__user_roi_centre_spad,
			&(puser_zone->y_centre),
			&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	f893 01c4 	ldrb.w	r0, [r3, #452]	@ 0x1c4
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	1c99      	adds	r1, r3, #2
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	3303      	adds	r3, #3
 80068f8:	461a      	mov	r2, r3
 80068fa:	f002 fc25 	bl	8009148 <VL53L1_decode_zone_size>
		&(puser_zone->width),
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
 80068fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006902:	4618      	mov	r0, r3
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b086      	sub	sp, #24
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
 8006912:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the mode mitigation ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006914:	2300      	movs	r3, #0
 8006916:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 800691c:	2300      	movs	r3, #0
 800691e:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8006920:	2300      	movs	r3, #0
 8006922:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8006924:	2300      	movs	r3, #0
 8006926:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	f893 322a 	ldrb.w	r3, [r3, #554]	@ 0x22a
 800692e:	f107 020e 	add.w	r2, r7, #14
 8006932:	f107 010d 	add.w	r1, r7, #13
 8006936:	4618      	mov	r0, r3
 8006938:	f002 fdbb 	bl	80094b2 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 800693c:	7bba      	ldrb	r2, [r7, #14]
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8006942:	7b7a      	ldrb	r2, [r7, #13]
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	705a      	strb	r2, [r3, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	f893 322b 	ldrb.w	r3, [r3, #555]	@ 0x22b
 800694e:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8006950:	7bfb      	ldrb	r3, [r7, #15]
 8006952:	091b      	lsrs	r3, r3, #4
 8006954:	b2da      	uxtb	r2, r3
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 800695a:	7bfb      	ldrb	r3, [r7, #15]
 800695c:	f003 030f 	and.w	r3, r3, #15
 8006960:	b2da      	uxtb	r2, r3
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8006966:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800696a:	4618      	mov	r0, r3
 800696c:	3718      	adds	r7, #24
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
	...

08006974 <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8006974:	b480      	push	{r7}
 8006976:	b087      	sub	sp, #28
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	607a      	str	r2, [r7, #4]
 800697e:	603b      	str	r3, [r7, #0]
 8006980:	460b      	mov	r3, r1
 8006982:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006984:	2300      	movs	r3, #0
 8006986:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 800698c:	7afb      	ldrb	r3, [r7, #11]
 800698e:	3b01      	subs	r3, #1
 8006990:	2b25      	cmp	r3, #37	@ 0x25
 8006992:	f200 808e 	bhi.w	8006ab2 <VL53L1_get_preset_mode_timing_cfg+0x13e>
 8006996:	a201      	add	r2, pc, #4	@ (adr r2, 800699c <VL53L1_get_preset_mode_timing_cfg+0x28>)
 8006998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800699c:	08006a35 	.word	0x08006a35
 80069a0:	08006a35 	.word	0x08006a35
 80069a4:	08006a35 	.word	0x08006a35
 80069a8:	08006a35 	.word	0x08006a35
 80069ac:	08006a35 	.word	0x08006a35
 80069b0:	08006a5f 	.word	0x08006a5f
 80069b4:	08006a5f 	.word	0x08006a5f
 80069b8:	08006a5f 	.word	0x08006a5f
 80069bc:	08006ab3 	.word	0x08006ab3
 80069c0:	08006ab3 	.word	0x08006ab3
 80069c4:	08006ab3 	.word	0x08006ab3
 80069c8:	08006ab3 	.word	0x08006ab3
 80069cc:	08006ab3 	.word	0x08006ab3
 80069d0:	08006ab3 	.word	0x08006ab3
 80069d4:	08006ab3 	.word	0x08006ab3
 80069d8:	08006ab3 	.word	0x08006ab3
 80069dc:	08006a35 	.word	0x08006a35
 80069e0:	08006a5f 	.word	0x08006a5f
 80069e4:	08006ab3 	.word	0x08006ab3
 80069e8:	08006ab3 	.word	0x08006ab3
 80069ec:	08006ab3 	.word	0x08006ab3
 80069f0:	08006ab3 	.word	0x08006ab3
 80069f4:	08006ab3 	.word	0x08006ab3
 80069f8:	08006ab3 	.word	0x08006ab3
 80069fc:	08006ab3 	.word	0x08006ab3
 8006a00:	08006ab3 	.word	0x08006ab3
 8006a04:	08006ab3 	.word	0x08006ab3
 8006a08:	08006ab3 	.word	0x08006ab3
 8006a0c:	08006ab3 	.word	0x08006ab3
 8006a10:	08006ab3 	.word	0x08006ab3
 8006a14:	08006ab3 	.word	0x08006ab3
 8006a18:	08006ab3 	.word	0x08006ab3
 8006a1c:	08006ab3 	.word	0x08006ab3
 8006a20:	08006ab3 	.word	0x08006ab3
 8006a24:	08006ab3 	.word	0x08006ab3
 8006a28:	08006a89 	.word	0x08006a89
 8006a2c:	08006a89 	.word	0x08006a89
 8006a30:	08006a89 	.word	0x08006a89
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	f8b3 20ca 	ldrh.w	r2, [r3, #202]	@ 0xca
		*pdss_config__target_total_rate_mcps =
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
		*pphasecal_config_timeout_us =
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
		*pmm_config_timeout_us =
 8006a4e:	6a3b      	ldr	r3, [r7, #32]
 8006a50:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lite_us;
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
		*prange_config_timeout_us =
 8006a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a5a:	601a      	str	r2, [r3, #0]
	break;
 8006a5c:	e02c      	b.n	8006ab8 <VL53L1_get_preset_mode_timing_cfg+0x144>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
		*pdss_config__target_total_rate_mcps =
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
		*pphasecal_config_timeout_us =
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
		*pmm_config_timeout_us =
 8006a78:	6a3b      	ldr	r3, [r7, #32]
 8006a7a:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_timed_us;
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
		*prange_config_timeout_us =
 8006a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a84:	601a      	str	r2, [r3, #0]
	break;
 8006a86:	e017      	b.n	8006ab8 <VL53L1_get_preset_mode_timing_cfg+0x144>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
		*pdss_config__target_total_rate_mcps =
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
		*pphasecal_config_timeout_us =
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
		*pmm_config_timeout_us =
 8006aa2:	6a3b      	ldr	r3, [r7, #32]
 8006aa4:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
		*prange_config_timeout_us =
 8006aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aae:	601a      	str	r2, [r3, #0]
	break;
 8006ab0:	e002      	b.n	8006ab8 <VL53L1_get_preset_mode_timing_cfg+0x144>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8006ab2:	23fc      	movs	r3, #252	@ 0xfc
 8006ab4:	75fb      	strb	r3, [r7, #23]
		break;
 8006ab6:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8006ab8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	371c      	adds	r7, #28
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b092      	sub	sp, #72	@ 0x48
 8006acc:	af04      	add	r7, sp, #16
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	607b      	str	r3, [r7, #4]
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	72fb      	strb	r3, [r7, #11]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	813b      	strh	r3, [r7, #8]
	/**
	 * Initializes static and dynamic data structures for
	 * the provided preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006ada:	2300      	movs	r3, #0
 8006adc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	VL53L1_LLDriverData_t *pdev =
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	633b      	str	r3, [r7, #48]	@ 0x30
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8006ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8006aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aee:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8006af2:	62bb      	str	r3, [r7, #40]	@ 0x28
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8006af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af6:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8006afa:	627b      	str	r3, [r7, #36]	@ 0x24
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8006afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006afe:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 8006b02:	623b      	str	r3, [r7, #32]
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8006b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b06:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8006b0a:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8006b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b0e:	33a4      	adds	r3, #164	@ 0xa4
 8006b10:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 8006b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b14:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8006b18:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode                 = device_preset_mode;
 8006b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b1c:	7afa      	ldrb	r2, [r7, #11]
 8006b1e:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8006b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b24:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8006b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b2a:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8006b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b30:	615a      	str	r2, [r3, #20]

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 8006b32:	2103      	movs	r1, #3
 8006b34:	68f8      	ldr	r0, [r7, #12]
 8006b36:	f001 fde6 	bl	8008706 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 8006b3a:	7afb      	ldrb	r3, [r7, #11]
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	2b25      	cmp	r3, #37	@ 0x25
 8006b40:	f200 810c 	bhi.w	8006d5c <VL53L1_set_preset_mode+0x294>
 8006b44:	a201      	add	r2, pc, #4	@ (adr r2, 8006b4c <VL53L1_set_preset_mode+0x84>)
 8006b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b4a:	bf00      	nop
 8006b4c:	08006be5 	.word	0x08006be5
 8006b50:	08006c01 	.word	0x08006c01
 8006b54:	08006c1d 	.word	0x08006c1d
 8006b58:	08006c39 	.word	0x08006c39
 8006b5c:	08006c55 	.word	0x08006c55
 8006b60:	08006c71 	.word	0x08006c71
 8006b64:	08006c8d 	.word	0x08006c8d
 8006b68:	08006ca9 	.word	0x08006ca9
 8006b6c:	08006d5d 	.word	0x08006d5d
 8006b70:	08006d5d 	.word	0x08006d5d
 8006b74:	08006d5d 	.word	0x08006d5d
 8006b78:	08006d5d 	.word	0x08006d5d
 8006b7c:	08006d5d 	.word	0x08006d5d
 8006b80:	08006d5d 	.word	0x08006d5d
 8006b84:	08006d5d 	.word	0x08006d5d
 8006b88:	08006d5d 	.word	0x08006d5d
 8006b8c:	08006cc5 	.word	0x08006cc5
 8006b90:	08006ce1 	.word	0x08006ce1
 8006b94:	08006d5d 	.word	0x08006d5d
 8006b98:	08006d5d 	.word	0x08006d5d
 8006b9c:	08006d5d 	.word	0x08006d5d
 8006ba0:	08006d5d 	.word	0x08006d5d
 8006ba4:	08006d5d 	.word	0x08006d5d
 8006ba8:	08006d5d 	.word	0x08006d5d
 8006bac:	08006d5d 	.word	0x08006d5d
 8006bb0:	08006d5d 	.word	0x08006d5d
 8006bb4:	08006d5d 	.word	0x08006d5d
 8006bb8:	08006d5d 	.word	0x08006d5d
 8006bbc:	08006d5d 	.word	0x08006d5d
 8006bc0:	08006d5d 	.word	0x08006d5d
 8006bc4:	08006d5d 	.word	0x08006d5d
 8006bc8:	08006d5d 	.word	0x08006d5d
 8006bcc:	08006d5d 	.word	0x08006d5d
 8006bd0:	08006d5d 	.word	0x08006d5d
 8006bd4:	08006d5d 	.word	0x08006d5d
 8006bd8:	08006cfd 	.word	0x08006cfd
 8006bdc:	08006d1d 	.word	0x08006d1d
 8006be0:	08006d3d 	.word	0x08006d3d

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	9301      	str	r3, [sp, #4]
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	9300      	str	r3, [sp, #0]
 8006bec:	6a3b      	ldr	r3, [r7, #32]
 8006bee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bf0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006bf2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006bf4:	f001 fa09 	bl	800800a <VL53L1_preset_mode_standard_ranging>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8006bfe:	e0b1      	b.n	8006d64 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	9301      	str	r3, [sp, #4]
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	9300      	str	r3, [sp, #0]
 8006c08:	6a3b      	ldr	r3, [r7, #32]
 8006c0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006c10:	f001 fb19 	bl	8008246 <VL53L1_preset_mode_standard_ranging_short_range>
 8006c14:	4603      	mov	r3, r0
 8006c16:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8006c1a:	e0a3      	b.n	8006d64 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	9301      	str	r3, [sp, #4]
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	9300      	str	r3, [sp, #0]
 8006c24:	6a3b      	ldr	r3, [r7, #32]
 8006c26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c2a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006c2c:	f001 fb4c 	bl	80082c8 <VL53L1_preset_mode_standard_ranging_long_range>
 8006c30:	4603      	mov	r3, r0
 8006c32:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8006c36:	e095      	b.n	8006d64 <VL53L1_set_preset_mode+0x29c>

#ifndef VL53L1_NOCALIB
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	9301      	str	r3, [sp, #4]
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	9300      	str	r3, [sp, #0]
 8006c40:	6a3b      	ldr	r3, [r7, #32]
 8006c42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c46:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006c48:	f001 fb7f 	bl	800834a <VL53L1_preset_mode_standard_ranging_mm1_cal>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8006c52:	e087      	b.n	8006d64 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	9301      	str	r3, [sp, #4]
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	9300      	str	r3, [sp, #0]
 8006c5c:	6a3b      	ldr	r3, [r7, #32]
 8006c5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c62:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006c64:	f001 fb96 	bl	8008394 <VL53L1_preset_mode_standard_ranging_mm2_cal>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8006c6e:	e079      	b.n	8006d64 <VL53L1_set_preset_mode+0x29c>
#endif

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	9301      	str	r3, [sp, #4]
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	9300      	str	r3, [sp, #0]
 8006c78:	6a3b      	ldr	r3, [r7, #32]
 8006c7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c7e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006c80:	f001 fbad 	bl	80083de <VL53L1_preset_mode_timed_ranging>
 8006c84:	4603      	mov	r3, r0
 8006c86:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8006c8a:	e06b      	b.n	8006d64 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	9301      	str	r3, [sp, #4]
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	9300      	str	r3, [sp, #0]
 8006c94:	6a3b      	ldr	r3, [r7, #32]
 8006c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c9a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006c9c:	f001 fbd9 	bl	8008452 <VL53L1_preset_mode_timed_ranging_short_range>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8006ca6:	e05d      	b.n	8006d64 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	9301      	str	r3, [sp, #4]
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	9300      	str	r3, [sp, #0]
 8006cb0:	6a3b      	ldr	r3, [r7, #32]
 8006cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cb6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006cb8:	f001 fc05 	bl	80084c6 <VL53L1_preset_mode_timed_ranging_long_range>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8006cc2:	e04f      	b.n	8006d64 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	9301      	str	r3, [sp, #4]
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	6a3b      	ldr	r3, [r7, #32]
 8006cce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cd2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006cd4:	f001 fcd9 	bl	800868a <VL53L1_preset_mode_olt>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8006cde:	e041      	b.n	8006d64 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	9301      	str	r3, [sp, #4]
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	9300      	str	r3, [sp, #0]
 8006ce8:	6a3b      	ldr	r3, [r7, #32]
 8006cea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006cf0:	f001 fc95 	bl	800861e <VL53L1_preset_mode_singleshot_ranging>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8006cfa:	e033      	b.n	8006d64 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	9302      	str	r3, [sp, #8]
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	9301      	str	r3, [sp, #4]
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	9300      	str	r3, [sp, #0]
 8006d08:	6a3b      	ldr	r3, [r7, #32]
 8006d0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d10:	f001 fc39 	bl	8008586 <VL53L1_preset_mode_low_power_auto_short_ranging>
 8006d14:	4603      	mov	r3, r0
 8006d16:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 8006d1a:	e023      	b.n	8006d64 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	9302      	str	r3, [sp, #8]
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	9301      	str	r3, [sp, #4]
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	9300      	str	r3, [sp, #0]
 8006d28:	6a3b      	ldr	r3, [r7, #32]
 8006d2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d2e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d30:	f001 fc03 	bl	800853a <VL53L1_preset_mode_low_power_auto_ranging>
 8006d34:	4603      	mov	r3, r0
 8006d36:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 8006d3a:	e013      	b.n	8006d64 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	9302      	str	r3, [sp, #8]
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	9301      	str	r3, [sp, #4]
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	9300      	str	r3, [sp, #0]
 8006d48:	6a3b      	ldr	r3, [r7, #32]
 8006d4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d4e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d50:	f001 fc3f 	bl	80085d2 <VL53L1_preset_mode_low_power_auto_long_ranging>
 8006d54:	4603      	mov	r3, r0
 8006d56:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 8006d5a:	e003      	b.n	8006d64 <VL53L1_set_preset_mode+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8006d5c:	23fc      	movs	r3, #252	@ 0xfc
 8006d5e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		break;
 8006d62:	bf00      	nop

	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 8006d64:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d105      	bne.n	8006d78 <VL53L1_set_preset_mode+0x2b0>

		pstatic->dss_config__target_total_rate_mcps =
 8006d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d6e:	893a      	ldrh	r2, [r7, #8]
 8006d70:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 8006d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d74:	893a      	ldrh	r2, [r7, #8]
 8006d76:	831a      	strh	r2, [r3, #24]
	/*
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
 8006d78:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d108      	bne.n	8006d92 <VL53L1_set_preset_mode+0x2ca>
		status =
			VL53L1_set_timeouts_us(
 8006d80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d84:	6879      	ldr	r1, [r7, #4]
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f7ff fca2 	bl	80066d0 <VL53L1_set_timeouts_us>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 8006d92:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d106      	bne.n	8006da8 <VL53L1_set_preset_mode+0x2e0>
		status =
			VL53L1_set_inter_measurement_period_ms(
 8006d9a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f7ff fc6e 	bl	800667e <VL53L1_set_inter_measurement_period_ms>
 8006da2:	4603      	mov	r3, r0
 8006da4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				Dev,
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
 8006da8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3738      	adds	r7, #56	@ 0x38
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b085      	sub	sp, #20
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
	 * Gets the Sigma Threshold value for Lite Mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	f8b3 21a6 	ldrh.w	r2, [r3, #422]	@ 0x1a6
	*plite_sigma =
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8006dd0:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3714      	adds	r7, #20
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	460b      	mov	r3, r1
 8006dea:	807b      	strh	r3, [r7, #2]
	 * Sets the Sigma threshold value for Lite mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006dec:	2300      	movs	r3, #0
 8006dee:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	887a      	ldrh	r2, [r7, #2]
 8006df8:	f8a3 21a6 	strh.w	r2, [r3, #422]	@ 0x1a6

	LOG_FUNCTION_END(status);

	return status;
 8006dfc:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3714      	adds	r7, #20
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b085      	sub	sp, #20
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
	 * Gets the Min Count Rate value for Lite Mode
	 *
	 * (fixed point 9.7 Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006e16:	2300      	movs	r3, #0
 8006e18:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
			pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	f8b3 21a8 	ldrh.w	r2, [r3, #424]	@ 0x1a8
	*plite_mincountrate =
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8006e28:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3714      	adds	r7, #20
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	460b      	mov	r3, r1
 8006e42:	807b      	strh	r3, [r7, #2]
	 * Sets the Min COunt Rate value for Lite mode
	 *
	 * (fixed point 19.7Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006e44:	2300      	movs	r3, #0
 8006e46:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	887a      	ldrh	r2, [r7, #2]
 8006e50:	f8a3 21a8 	strh.w	r2, [r3, #424]	@ 0x1a8
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 8006e54:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3714      	adds	r7, #20
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <VL53L1_set_vhv_loopbound>:


VL53L1_Error VL53L1_set_vhv_loopbound(
	VL53L1_DEV                   Dev,
	uint8_t                      vhv_loopbound)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b085      	sub	sp, #20
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	70fb      	strb	r3, [r7, #3]
	 * - ensure that any change here is followed by a
	 * init_and_start_range with full i2c packet
	 * configuration.
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006e70:	2300      	movs	r3, #0
 8006e72:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 8006e7e:	f003 0303 	and.w	r3, r3, #3
 8006e82:	b2da      	uxtb	r2, r3
 8006e84:	78fb      	ldrb	r3, [r7, #3]
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	4413      	add	r3, r2
 8006e8c:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160
			(vhv_loopbound * 4);

	LOG_FUNCTION_END(status);

	return status;
 8006e94:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3714      	adds	r7, #20
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b0d0      	sub	sp, #320	@ 0x140
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006eae:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8006eb2:	6018      	str	r0, [r3, #0]
 8006eb4:	4608      	mov	r0, r1
 8006eb6:	4611      	mov	r1, r2
 8006eb8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006ebc:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	701a      	strb	r2, [r3, #0]
 8006ec4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006ec8:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8006ecc:	460a      	mov	r2, r1
 8006ece:	701a      	strb	r2, [r3, #0]
	 * system_control is always sent as the last byte of this
	 * register group (mode_start) either triggers the range
	 * or enables the next range
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006ed6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006eda:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 8006ee4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006ee8:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8006eec:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 8006ef0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006ef4:	3342      	adds	r3, #66	@ 0x42
 8006ef6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8006efa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006efe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006f02:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8006f06:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006f0a:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8006f0e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8006f12:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006f16:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8006f1a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8006f1e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006f22:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 8006f26:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8006f2a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006f2e:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8006f32:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 8006f36:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006f3a:	332c      	adds	r3, #44	@ 0x2c
 8006f3c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 8006f40:	f107 030c 	add.w	r3, r7, #12
 8006f44:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	uint16_t i                          = 0;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
	uint16_t i2c_index                  = 0;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
	uint16_t i2c_buffer_offset_bytes    = 0;
 8006f54:	2300      	movs	r3, #0
 8006f56:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c

	LOG_FUNCTION_START("");

	/* save measurement mode */
	pdev->measurement_mode = measurement_mode;
 8006f60:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006f64:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8006f68:	f2a2 123d 	subw	r2, r2, #317	@ 0x13d
 8006f6c:	7812      	ldrb	r2, [r2, #0]
 8006f6e:	709a      	strb	r2, [r3, #2]

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 8006f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f74:	791b      	ldrb	r3, [r3, #4]
 8006f76:	b25b      	sxtb	r3, r3
 8006f78:	f003 030f 	and.w	r3, r3, #15
 8006f7c:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8006f7e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006f82:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 8006f86:	f993 3000 	ldrsb.w	r3, [r3]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	b25b      	sxtb	r3, r3
 8006f8e:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 8006f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f94:	711a      	strb	r2, [r3, #4]
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 8006f96:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006f9a:	f8b3 2142 	ldrh.w	r2, [r3, #322]	@ 0x142
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 8006f9e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006fa2:	f8a3 217c 	strh.w	r2, [r3, #380]	@ 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 8006fa6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006faa:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
 8006fae:	2bff      	cmp	r3, #255	@ 0xff
 8006fb0:	d104      	bne.n	8006fbc <VL53L1_init_and_start_range+0x118>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8006fb2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8006fbc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006fc0:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d139      	bne.n	800703c <VL53L1_init_and_start_range+0x198>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8006fc8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006fcc:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d133      	bne.n	800703c <VL53L1_init_and_start_range+0x198>
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 8006fd4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006fd8:	f893 2186 	ldrb.w	r2, [r3, #390]	@ 0x186
		pdev->low_power_auto_data.saved_interrupt_config =
 8006fdc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006fe0:	f883 22e7 	strb.w	r2, [r3, #743]	@ 0x2e7
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8006fe4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006fe8:	2220      	movs	r2, #32
 8006fea:	f883 2186 	strb.w	r2, [r3, #390]	@ 0x186
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 8006fee:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006ff2:	f893 31c5 	ldrb.w	r3, [r3, #453]	@ 0x1c5
 8006ff6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10c      	bne.n	8007018 <VL53L1_init_and_start_range+0x174>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 8006ffe:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007002:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	@ 0x58
 8007006:	b29b      	uxth	r3, r3
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	b29b      	uxth	r3, r3
 800700c:	b21a      	sxth	r2, r3
			pdev->customer.algo__part_to_part_range_offset_mm =
 800700e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007012:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
 8007016:	e004      	b.n	8007022 <VL53L1_init_and_start_range+0x17e>
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 8007018:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800701c:	2200      	movs	r2, #0
 800701e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
		}

		/* make sure config gets written out */
		if (device_config_level <
 8007022:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007026:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	2b04      	cmp	r3, #4
 800702e:	d805      	bhi.n	800703c <VL53L1_init_and_start_range+0x198>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 8007030:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007034:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8007038:	2205      	movs	r2, #5
 800703a:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800703c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007040:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 8007044:	2b01      	cmp	r3, #1
 8007046:	d113      	bne.n	8007070 <VL53L1_init_and_start_range+0x1cc>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8007048:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800704c:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8007050:	2b01      	cmp	r3, #1
 8007052:	d10d      	bne.n	8007070 <VL53L1_init_and_start_range+0x1cc>
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 8007054:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007058:	f893 22e7 	ldrb.w	r2, [r3, #743]	@ 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio =
 800705c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007060:	f883 2186 	strb.w	r2, [r3, #390]	@ 0x186

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 8007064:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007068:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 800706c:	2206      	movs	r2, #6
 800706e:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine Initial I2C index
	 */

	switch (device_config_level) {
 8007070:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007074:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	3b01      	subs	r3, #1
 800707c:	2b05      	cmp	r3, #5
 800707e:	d827      	bhi.n	80070d0 <VL53L1_init_and_start_range+0x22c>
 8007080:	a201      	add	r2, pc, #4	@ (adr r2, 8007088 <VL53L1_init_and_start_range+0x1e4>)
 8007082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007086:	bf00      	nop
 8007088:	080070c9 	.word	0x080070c9
 800708c:	080070c1 	.word	0x080070c1
 8007090:	080070b9 	.word	0x080070b9
 8007094:	080070b1 	.word	0x080070b1
 8007098:	080070a9 	.word	0x080070a9
 800709c:	080070a1 	.word	0x080070a1
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 80070a0:	2301      	movs	r3, #1
 80070a2:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 80070a6:	e017      	b.n	80070d8 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 80070a8:	230d      	movs	r3, #13
 80070aa:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 80070ae:	e013      	b.n	80070d8 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 80070b0:	2324      	movs	r3, #36	@ 0x24
 80070b2:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 80070b6:	e00f      	b.n	80070d8 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 80070b8:	2344      	movs	r3, #68	@ 0x44
 80070ba:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 80070be:	e00b      	b.n	80070d8 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 80070c0:	235a      	movs	r3, #90	@ 0x5a
 80070c2:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 80070c6:	e007      	b.n	80070d8 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 80070c8:	2371      	movs	r3, #113	@ 0x71
 80070ca:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 80070ce:	e003      	b.n	80070d8 <VL53L1_init_and_start_range+0x234>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 80070d0:	2383      	movs	r3, #131	@ 0x83
 80070d2:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 80070d6:	bf00      	nop
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 80070d8:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 80070dc:	f1c3 0388 	rsb	r3, r3, #136	@ 0x88
 80070e0:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c
			 VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			 i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
 80070e4:	f107 030c 	add.w	r3, r7, #12
 80070e8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 80070ec:	2300      	movs	r3, #0
 80070ee:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 80070f2:	e00b      	b.n	800710c <VL53L1_init_and_start_range+0x268>
		*pbuffer++ = 0;
 80070f4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80070f8:	1c5a      	adds	r2, r3, #1
 80070fa:	f8c7 2138 	str.w	r2, [r7, #312]	@ 0x138
 80070fe:	2200      	movs	r2, #0
 8007100:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 8007102:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8007106:	3301      	adds	r3, #1
 8007108:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 800710c:	f8b7 2136 	ldrh.w	r2, [r7, #310]	@ 0x136
 8007110:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 8007114:	429a      	cmp	r2, r3
 8007116:	d3ed      	bcc.n	80070f4 <VL53L1_init_and_start_range+0x250>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 8007118:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800711c:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	2b05      	cmp	r3, #5
 8007124:	d917      	bls.n	8007156 <VL53L1_init_and_start_range+0x2b2>
 8007126:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 800712a:	2b00      	cmp	r3, #0
 800712c:	d113      	bne.n	8007156 <VL53L1_init_and_start_range+0x2b2>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800712e:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8007132:	f1c3 0301 	rsb	r3, r3, #1
 8007136:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800713a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 800713e:	f107 020c 	add.w	r2, r7, #12
 8007142:	4413      	add	r3, r2
 8007144:	461a      	mov	r2, r3
 8007146:	210b      	movs	r1, #11
 8007148:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 800714c:	f002 f9e0 	bl	8009510 <VL53L1_i2c_encode_static_nvm_managed>
 8007150:	4603      	mov	r3, r0
 8007152:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8007156:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800715a:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	2b04      	cmp	r3, #4
 8007162:	d917      	bls.n	8007194 <VL53L1_init_and_start_range+0x2f0>
 8007164:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8007168:	2b00      	cmp	r3, #0
 800716a:	d113      	bne.n	8007194 <VL53L1_init_and_start_range+0x2f0>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800716c:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8007170:	f1c3 030d 	rsb	r3, r3, #13
 8007174:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8007178:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 800717c:	f107 020c 	add.w	r2, r7, #12
 8007180:	4413      	add	r3, r2
 8007182:	461a      	mov	r2, r3
 8007184:	2117      	movs	r1, #23
 8007186:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 800718a:	f002 fa9d 	bl	80096c8 <VL53L1_i2c_encode_customer_nvm_managed>
 800718e:	4603      	mov	r3, r0
 8007190:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8007194:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007198:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	2b03      	cmp	r3, #3
 80071a0:	d917      	bls.n	80071d2 <VL53L1_init_and_start_range+0x32e>
 80071a2:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d113      	bne.n	80071d2 <VL53L1_init_and_start_range+0x32e>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 80071aa:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 80071ae:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 80071b2:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80071b6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_static_config(
 80071ba:	f107 020c 	add.w	r2, r7, #12
 80071be:	4413      	add	r3, r2
 80071c0:	461a      	mov	r2, r3
 80071c2:	2120      	movs	r1, #32
 80071c4:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 80071c8:	f002 fbbc 	bl	8009944 <VL53L1_i2c_encode_static_config>
 80071cc:	4603      	mov	r3, r0
 80071ce:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 80071d2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80071d6:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d917      	bls.n	8007210 <VL53L1_init_and_start_range+0x36c>
 80071e0:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d113      	bne.n	8007210 <VL53L1_init_and_start_range+0x36c>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80071e8:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 80071ec:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 80071f0:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80071f4:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_general_config(
 80071f8:	f107 020c 	add.w	r2, r7, #12
 80071fc:	4413      	add	r3, r2
 80071fe:	461a      	mov	r2, r3
 8007200:	2116      	movs	r1, #22
 8007202:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 8007206:	f002 fc80 	bl	8009b0a <VL53L1_i2c_encode_general_config>
 800720a:	4603      	mov	r3, r0
 800720c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8007210:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007214:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	2b01      	cmp	r3, #1
 800721c:	d917      	bls.n	800724e <VL53L1_init_and_start_range+0x3aa>
 800721e:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8007222:	2b00      	cmp	r3, #0
 8007224:	d113      	bne.n	800724e <VL53L1_init_and_start_range+0x3aa>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8007226:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 800722a:	f1c3 035a 	rsb	r3, r3, #90	@ 0x5a
 800722e:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8007232:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_timing_config(
 8007236:	f107 020c 	add.w	r2, r7, #12
 800723a:	4413      	add	r3, r2
 800723c:	461a      	mov	r2, r3
 800723e:	2117      	movs	r1, #23
 8007240:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8007244:	f002 fce5 	bl	8009c12 <VL53L1_i2c_encode_timing_config>
 8007248:	4603      	mov	r3, r0
 800724a:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 800724e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007252:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d036      	beq.n	80072ca <VL53L1_init_and_start_range+0x426>
 800725c:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8007260:	2b00      	cmp	r3, #0
 8007262:	d132      	bne.n	80072ca <VL53L1_init_and_start_range+0x426>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8007264:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8007268:	f1c3 0371 	rsb	r3, r3, #113	@ 0x71
 800726c:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;

		/* If in back to back mode, use GPH ID from cfg_state */
		if ((psystem->system__mode_start &
 8007270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007274:	791b      	ldrb	r3, [r3, #4]
 8007276:	f003 0320 	and.w	r3, r3, #32
 800727a:	2b00      	cmp	r3, #0
 800727c:	d017      	beq.n	80072ae <VL53L1_init_and_start_range+0x40a>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 800727e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007282:	789b      	ldrb	r3, [r3, #2]
 8007284:	f043 0301 	orr.w	r3, r3, #1
 8007288:	b2da      	uxtb	r2, r3
 800728a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800728e:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 8007290:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007294:	789b      	ldrb	r3, [r3, #2]
 8007296:	f043 0301 	orr.w	r3, r3, #1
 800729a:	b2da      	uxtb	r2, r3
 800729c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80072a0:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 80072a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80072a6:	789a      	ldrb	r2, [r3, #2]
 80072a8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80072ac:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80072ae:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_dynamic_config(
 80072b2:	f107 020c 	add.w	r2, r7, #12
 80072b6:	4413      	add	r3, r2
 80072b8:	461a      	mov	r2, r3
 80072ba:	2112      	movs	r1, #18
 80072bc:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 80072c0:	f002 fd29 	bl	8009d16 <VL53L1_i2c_encode_dynamic_config>
 80072c4:	4603      	mov	r3, r0
 80072c6:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (status == VL53L1_ERROR_NONE) {
 80072ca:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d113      	bne.n	80072fa <VL53L1_init_and_start_range+0x456>

		i2c_buffer_offset_bytes = \
 80072d2:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 80072d6:	f1c3 0383 	rsb	r3, r3, #131	@ 0x83
 80072da:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80072de:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_system_control(
 80072e2:	f107 020c 	add.w	r2, r7, #12
 80072e6:	4413      	add	r3, r2
 80072e8:	461a      	mov	r2, r3
 80072ea:	2105      	movs	r1, #5
 80072ec:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 80072f0:	f002 fd96 	bl	8009e20 <VL53L1_i2c_encode_system_control>
 80072f4:	4603      	mov	r3, r0
 80072f6:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 80072fa:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d10f      	bne.n	8007322 <VL53L1_init_and_start_range+0x47e>
		status =
			VL53L1_WriteMulti(
 8007302:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 8007306:	f107 020c 	add.w	r2, r7, #12
 800730a:	f8b7 1134 	ldrh.w	r1, [r7, #308]	@ 0x134
 800730e:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8007312:	f5a0 709e 	sub.w	r0, r0, #316	@ 0x13c
 8007316:	6800      	ldr	r0, [r0, #0]
 8007318:	f003 fa44 	bl	800a7a4 <VL53L1_WriteMulti>
 800731c:	4603      	mov	r3, r0
 800731e:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 8007322:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8007326:	2b00      	cmp	r3, #0
 8007328:	d109      	bne.n	800733e <VL53L1_init_and_start_range+0x49a>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 800732a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800732e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8007332:	6818      	ldr	r0, [r3, #0]
 8007334:	f001 fa10 	bl	8008758 <VL53L1_update_ll_driver_rd_state>
 8007338:	4603      	mov	r3, r0
 800733a:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

	if (status == VL53L1_ERROR_NONE)
 800733e:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8007342:	2b00      	cmp	r3, #0
 8007344:	d109      	bne.n	800735a <VL53L1_init_and_start_range+0x4b6>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 8007346:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800734a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800734e:	6818      	ldr	r0, [r3, #0]
 8007350:	f001 fad5 	bl	80088fe <VL53L1_update_ll_driver_cfg_state>
 8007354:	4603      	mov	r3, r0
 8007356:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

	LOG_FUNCTION_END(status);

	return status;
 800735a:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
}
 800735e:	4618      	mov	r0, r3
 8007360:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b0c8      	sub	sp, #288	@ 0x120
 800736c:	af00      	add	r7, sp, #0
 800736e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007372:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8007376:	6018      	str	r0, [r3, #0]
 8007378:	460a      	mov	r2, r1
 800737a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800737e:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8007382:	701a      	strb	r2, [r3, #0]
	/*
	 * Read via a single I2C multiple byte transaction all
	 * of the requested device measurement data results
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007384:	2300      	movs	r3, #0
 8007386:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800738a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800738e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 8007398:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800739c:	f503 73e7 	add.w	r3, r3, #462	@ 0x1ce
 80073a0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 80073a4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80073a8:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80073ac:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 80073b0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80073b4:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 80073b8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 80073bc:	2388      	movs	r3, #136	@ 0x88
 80073be:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 80073c2:	2300      	movs	r3, #0
 80073c4:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 80073c8:	2300      	movs	r3, #0
 80073ca:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 80073ce:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80073d2:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d008      	beq.n	80073ee <VL53L1_get_measurement_results+0x86>
 80073dc:	2b02      	cmp	r3, #2
 80073de:	d10d      	bne.n	80073fc <VL53L1_get_measurement_results+0x94>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 80073e0:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 80073e4:	f5c3 7387 	rsb	r3, r3, #270	@ 0x10e
 80073e8:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 80073ec:	e00a      	b.n	8007404 <VL53L1_get_measurement_results+0x9c>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 80073ee:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 80073f2:	f1c3 03d5 	rsb	r3, r3, #213	@ 0xd5
 80073f6:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 80073fa:	e003      	b.n	8007404 <VL53L1_get_measurement_results+0x9c>
	default:
		i2c_buffer_size_bytes =
 80073fc:	232c      	movs	r3, #44	@ 0x2c
 80073fe:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 8007402:	bf00      	nop
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8007404:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8007408:	2b00      	cmp	r3, #0
 800740a:	d10f      	bne.n	800742c <VL53L1_get_measurement_results+0xc4>
		status =
			VL53L1_ReadMulti(
 800740c:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8007410:	f107 0208 	add.w	r2, r7, #8
 8007414:	f8b7 110a 	ldrh.w	r1, [r7, #266]	@ 0x10a
 8007418:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 800741c:	f5a0 708e 	sub.w	r0, r0, #284	@ 0x11c
 8007420:	6800      	ldr	r0, [r0, #0]
 8007422:	f003 f9f5 	bl	800a810 <VL53L1_ReadMulti>
 8007426:	4603      	mov	r3, r0
 8007428:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 800742c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007430:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	2b01      	cmp	r3, #1
 8007438:	d917      	bls.n	800746a <VL53L1_get_measurement_results+0x102>
 800743a:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 800743e:	2b00      	cmp	r3, #0
 8007440:	d113      	bne.n	800746a <VL53L1_get_measurement_results+0x102>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8007442:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8007446:	f1c3 03d6 	rsb	r3, r3, #214	@ 0xd6
 800744a:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800744e:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53L1_i2c_decode_debug_results(
 8007452:	f107 0208 	add.w	r2, r7, #8
 8007456:	4413      	add	r3, r2
 8007458:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800745c:	4619      	mov	r1, r3
 800745e:	2038      	movs	r0, #56	@ 0x38
 8007460:	f002 fe70 	bl	800a144 <VL53L1_i2c_decode_debug_results>
 8007464:	4603      	mov	r3, r0
 8007466:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 800746a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800746e:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d017      	beq.n	80074a8 <VL53L1_get_measurement_results+0x140>
 8007478:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 800747c:	2b00      	cmp	r3, #0
 800747e:	d113      	bne.n	80074a8 <VL53L1_get_measurement_results+0x140>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8007480:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8007484:	f1c3 03b4 	rsb	r3, r3, #180	@ 0xb4
 8007488:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800748c:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53L1_i2c_decode_core_results(
 8007490:	f107 0208 	add.w	r2, r7, #8
 8007494:	4413      	add	r3, r2
 8007496:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800749a:	4619      	mov	r1, r3
 800749c:	2021      	movs	r0, #33	@ 0x21
 800749e:	f002 fdf0 	bl	800a082 <VL53L1_i2c_decode_core_results>
 80074a2:	4603      	mov	r3, r0
 80074a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 80074a8:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d110      	bne.n	80074d2 <VL53L1_get_measurement_results+0x16a>

		i2c_buffer_offset_bytes = 0;
 80074b0:	2300      	movs	r3, #0
 80074b2:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 80074b6:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53L1_i2c_decode_system_results(
 80074ba:	f107 0208 	add.w	r2, r7, #8
 80074be:	4413      	add	r3, r2
 80074c0:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80074c4:	4619      	mov	r1, r3
 80074c6:	202c      	movs	r0, #44	@ 0x2c
 80074c8:	f002 fce5 	bl	8009e96 <VL53L1_i2c_decode_system_results>
 80074cc:	4603      	mov	r3, r0
 80074ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 80074d2:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b088      	sub	sp, #32
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	460b      	mov	r3, r1
 80074ea:	607a      	str	r2, [r7, #4]
 80074ec:	72fb      	strb	r3, [r7, #11]
	 *  VL53L1_copy_sys_and_core_results_to_range_results()
	 *
	 *  The input measurement mode controls what happens next ...
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80074ee:	2300      	movs	r3, #0
 80074f0:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev =
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 80074fc:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults = &(pres->range_results);
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	/* Get device results */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8007502:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d106      	bne.n	8007518 <VL53L1_get_device_results+0x38>
		status = VL53L1_get_measurement_results(
 800750a:	7afb      	ldrb	r3, [r7, #11]
 800750c:	4619      	mov	r1, r3
 800750e:	68f8      	ldr	r0, [r7, #12]
 8007510:	f7ff ff2a 	bl	8007368 <VL53L1_get_measurement_results>
 8007514:	4603      	mov	r3, r0
 8007516:	77fb      	strb	r3, [r7, #31]
						Dev,
						device_results_level);

	if (status == VL53L1_ERROR_NONE)
 8007518:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d10c      	bne.n	800753a <VL53L1_get_device_results+0x5a>
		VL53L1_copy_sys_and_core_results_to_range_results(
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
		VL53L1_copy_sys_and_core_results_to_range_results(
 8007526:	4618      	mov	r0, r3
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	f503 71e7 	add.w	r1, r3, #462	@ 0x1ce
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	f503 7222 	add.w	r2, r3, #648	@ 0x288
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	f000 f85d 	bl	80075f4 <VL53L1_copy_sys_and_core_results_to_range_results>
				&(pdev->core_results),
				presults);

	/* Start Patch_LowPowerAutoMode */
	/* process results from first range of low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 8007540:	2b01      	cmp	r3, #1
 8007542:	d11f      	bne.n	8007584 <VL53L1_get_device_results+0xa4>
		/* change to manual calibrations. Only needed on the
		 * first range out  */
		if ((status == VL53L1_ERROR_NONE) &&
 8007544:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d10e      	bne.n	800756a <VL53L1_get_device_results+0x8a>
			(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 8007552:	2b00      	cmp	r3, #0
 8007554:	d109      	bne.n	800756a <VL53L1_get_device_results+0x8a>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	f001 ff3f 	bl	80093da <VL53L1_low_power_auto_setup_manual_calibration>
 800755c:	4603      	mov	r3, r0
 800755e:	77fb      	strb	r3, [r7, #31]
					Dev);
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
 8007568:	e00c      	b.n	8007584 <VL53L1_get_device_results+0xa4>
		} else if ((status == VL53L1_ERROR_NONE) &&
 800756a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d108      	bne.n	8007584 <VL53L1_get_device_results+0xa4>
			(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8007572:	69bb      	ldr	r3, [r7, #24]
 8007574:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
		} else if ((status == VL53L1_ERROR_NONE) &&
 8007578:	2b01      	cmp	r3, #1
 800757a:	d103      	bne.n	8007584 <VL53L1_get_device_results+0xa4>
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	2202      	movs	r2, #2
 8007580:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
	}
	/* End Patch_LowPowerAutoMode */

	/* copy current state into results */

	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	705a      	strb	r2, [r3, #1]

	/* copy internal structure to supplied output pointer */

	memcpy(
 8007598:	2284      	movs	r2, #132	@ 0x84
 800759a:	6939      	ldr	r1, [r7, #16]
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f003 fb29 	bl	800abf4 <memcpy>
	/*
	 * Check LL driver and Device are in Sync
	 * If not an error is raised
	 */

	if (status == VL53L1_ERROR_NONE)
 80075a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d104      	bne.n	80075b4 <VL53L1_get_device_results+0xd4>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 80075aa:	68f8      	ldr	r0, [r7, #12]
 80075ac:	f001 f95c 	bl	8008868 <VL53L1_check_ll_driver_rd_state>
 80075b0:	4603      	mov	r3, r0
 80075b2:	77fb      	strb	r3, [r7, #31]
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 80075b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3720      	adds	r7, #32
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	460b      	mov	r3, r1
 80075ca:	70fb      	strb	r3, [r7, #3]
	/*
	 * Enable next range by sending handshake which
	 * clears the interrupt
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80075cc:	2300      	movs	r3, #0
 80075ce:	73fb      	strb	r3, [r7, #15]
	/* Dynamic GPH Management     */
	/* Setup GPH absorption point and config values for next measurement */

	/* Update GPH registers, clear interrupt and set measurement mode */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80075d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d107      	bne.n	80075e8 <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 80075d8:	78fb      	ldrb	r3, [r7, #3]
 80075da:	2203      	movs	r2, #3
 80075dc:	4619      	mov	r1, r3
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f7ff fc60 	bl	8006ea4 <VL53L1_init_and_start_range>
 80075e4:	4603      	mov	r3, r0
 80075e6:	73fb      	strb	r3, [r7, #15]
					measurement_mode,
					VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 80075e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b089      	sub	sp, #36	@ 0x24
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	607a      	str	r2, [r7, #4]
 8007600:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 8007602:	2300      	movs	r3, #0
 8007604:	77fb      	strb	r3, [r7, #31]

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 8007606:	2300      	movs	r3, #0
 8007608:	613b      	str	r3, [r7, #16]
	uint32_t tmpu32 = 0;
 800760a:	2300      	movs	r3, #0
 800760c:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count    = psys->result__stream_count;
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	78da      	ldrb	r2, [r3, #3]
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	709a      	strb	r2, [r3, #2]

	pdata = &(presults->data[0]);
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	3304      	adds	r3, #4
 800761a:	61bb      	str	r3, [r7, #24]

	for (i = 0 ; i < 2 ; i++) {
 800761c:	2300      	movs	r3, #0
 800761e:	77fb      	strb	r3, [r7, #31]
 8007620:	e0d0      	b.n	80077c4 <VL53L1_copy_sys_and_core_results_to_range_results+0x1d0>

		pdata->range_id     = i;
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	7ffa      	ldrb	r2, [r7, #31]
 8007626:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	2200      	movs	r2, #0
 800762c:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	78db      	ldrb	r3, [r3, #3]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d10a      	bne.n	800764c <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	785b      	ldrb	r3, [r3, #1]
 800763a:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 800763e:	2b09      	cmp	r3, #9
 8007640:	d104      	bne.n	800764c <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	2213      	movs	r2, #19
 8007646:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800764a:	e007      	b.n	800765c <VL53L1_copy_sys_and_core_results_to_range_results+0x68>
		} else {
			pdata->range_status =
					psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	785b      	ldrb	r3, [r3, #1]
 8007650:	f003 031f 	and.w	r3, r3, #31
 8007654:	b2da      	uxtb	r2, r3
			pdata->range_status =
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
		}

		switch (i) {
 800765c:	7ffb      	ldrb	r3, [r7, #31]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d002      	beq.n	8007668 <VL53L1_copy_sys_and_core_results_to_range_results+0x74>
 8007662:	2b01      	cmp	r3, #1
 8007664:	d05d      	beq.n	8007722 <VL53L1_copy_sys_and_core_results_to_range_results+0x12e>
 8007666:	e0a7      	b.n	80077b8 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>

		case 0:

			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	789b      	ldrb	r3, [r3, #2]
 800766c:	2b07      	cmp	r3, #7
 800766e:	d104      	bne.n	800767a <VL53L1_copy_sys_and_core_results_to_range_results+0x86>
				pdata->actual_effective_spads =
					psys->result__mm_inner_actual_effective_spads_sd0;
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	8a5a      	ldrh	r2, [r3, #18]
				pdata->actual_effective_spads =
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	821a      	strh	r2, [r3, #16]
 8007678:	e00c      	b.n	8007694 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	789b      	ldrb	r3, [r3, #2]
 800767e:	2b08      	cmp	r3, #8
 8007680:	d104      	bne.n	800768c <VL53L1_copy_sys_and_core_results_to_range_results+0x98>
				pdata->actual_effective_spads =
						psys->result__mm_outer_actual_effective_spads_sd0;
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	8a9a      	ldrh	r2, [r3, #20]
				pdata->actual_effective_spads =
 8007686:	69bb      	ldr	r3, [r7, #24]
 8007688:	821a      	strh	r2, [r3, #16]
 800768a:	e003      	b.n	8007694 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else
				pdata->actual_effective_spads =
					psys->result__dss_actual_effective_spads_sd0;
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	889a      	ldrh	r2, [r3, #4]
				pdata->actual_effective_spads =
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	821a      	strh	r2, [r3, #16]

			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	8a1a      	ldrh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	859a      	strh	r2, [r3, #44]	@ 0x2c
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	85da      	strh	r2, [r3, #46]	@ 0x2e
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	861a      	strh	r2, [r3, #48]	@ 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	895b      	ldrh	r3, [r3, #10]
 80076b0:	015b      	lsls	r3, r3, #5
 80076b2:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076ba:	d302      	bcc.n	80076c2 <VL53L1_copy_sys_and_core_results_to_range_results+0xce>
				tmpu32 = 0xFFFF;
 80076bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80076c0:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	871a      	strh	r2, [r3, #56]	@ 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd0;
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	899a      	ldrh	r2, [r3, #12]
			pdata->median_phase =
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	875a      	strh	r2, [r3, #58]	@ 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd0;
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	89db      	ldrh	r3, [r3, #14]
			range_mm =
 80076d6:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	fb02 f303 	mul.w	r3, r2, r3
 80076e0:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80076e8:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	da01      	bge.n	80076f4 <VL53L1_copy_sys_and_core_results_to_range_results+0x100>
 80076f0:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 80076f4:	12db      	asrs	r3, r3, #11
 80076f6:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	b21a      	sxth	r2, r3
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	879a      	strh	r2, [r3, #60]	@ 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd0;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	685a      	ldr	r2, [r3, #4]
			pdata->ranging_total_events =
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	625a      	str	r2, [r3, #36]	@ 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd0;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	689a      	ldr	r2, [r3, #8]
			pdata->signal_total_events =
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 8007714:	69bb      	ldr	r3, [r7, #24]
 8007716:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd0;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681a      	ldr	r2, [r3, #0]
			pdata->ambient_window_events =
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	621a      	str	r2, [r3, #32]

			break;
 8007720:	e04a      	b.n	80077b8 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>
		case 1:

			pdata->actual_effective_spads =
				psys->result__dss_actual_effective_spads_sd1;
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	8b1a      	ldrh	r2, [r3, #24]
			pdata->actual_effective_spads =
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	821a      	strh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	859a      	strh	r2, [r3, #44]	@ 0x2c
			pdata->avg_signal_count_rate_mcps =
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007738:	85da      	strh	r2, [r3, #46]	@ 0x2e
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	861a      	strh	r2, [r3, #48]	@ 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	8bdb      	ldrh	r3, [r3, #30]
 8007746:	015b      	lsls	r3, r3, #5
 8007748:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007750:	d302      	bcc.n	8007758 <VL53L1_copy_sys_and_core_results_to_range_results+0x164>
				tmpu32 = 0xFFFF;
 8007752:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007756:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	b29a      	uxth	r2, r3
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	871a      	strh	r2, [r3, #56]	@ 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd1;
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	8c1a      	ldrh	r2, [r3, #32]
			pdata->median_phase =
 8007764:	69bb      	ldr	r3, [r7, #24]
 8007766:	875a      	strh	r2, [r3, #58]	@ 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd1;
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
			range_mm =
 800776c:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	fb02 f303 	mul.w	r3, r2, r3
 8007776:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800777e:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	2b00      	cmp	r3, #0
 8007784:	da01      	bge.n	800778a <VL53L1_copy_sys_and_core_results_to_range_results+0x196>
 8007786:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 800778a:	12db      	asrs	r3, r3, #11
 800778c:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	b21a      	sxth	r2, r3
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	879a      	strh	r2, [r3, #60]	@ 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd1;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	695a      	ldr	r2, [r3, #20]
			pdata->ranging_total_events =
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	625a      	str	r2, [r3, #36]	@ 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd1;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	699a      	ldr	r2, [r3, #24]
			pdata->signal_total_events =
 80077a2:	69bb      	ldr	r3, [r7, #24]
 80077a4:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd1;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	691a      	ldr	r2, [r3, #16]
			pdata->ambient_window_events =
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	621a      	str	r2, [r3, #32]

			break;
 80077b6:	bf00      	nop
		}

		pdata++;
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	3340      	adds	r3, #64	@ 0x40
 80077bc:	61bb      	str	r3, [r7, #24]
	for (i = 0 ; i < 2 ; i++) {
 80077be:	7ffb      	ldrb	r3, [r7, #31]
 80077c0:	3301      	adds	r3, #1
 80077c2:	77fb      	strb	r3, [r7, #31]
 80077c4:	7ffb      	ldrb	r3, [r7, #31]
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	f67f af2b 	bls.w	8007622 <VL53L1_copy_sys_and_core_results_to_range_results+0x2e>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	2200      	movs	r2, #0
 80077d0:	70da      	strb	r2, [r3, #3]
	 * - If device error condition, update device status
	 * - Remove device status from range status output this should
	 * only contain information relating to range data
	 */

	switch (psys->result__range_status &
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	785b      	ldrb	r3, [r3, #1]
 80077d6:	f003 031f 	and.w	r3, r3, #31
 80077da:	2b11      	cmp	r3, #17
 80077dc:	bf8c      	ite	hi
 80077de:	2201      	movhi	r2, #1
 80077e0:	2200      	movls	r2, #0
 80077e2:	b2d2      	uxtb	r2, r2
 80077e4:	2a00      	cmp	r2, #0
 80077e6:	d117      	bne.n	8007818 <VL53L1_copy_sys_and_core_results_to_range_results+0x224>
 80077e8:	4a0e      	ldr	r2, [pc, #56]	@ (8007824 <VL53L1_copy_sys_and_core_results_to_range_results+0x230>)
 80077ea:	fa22 f303 	lsr.w	r3, r2, r3
 80077ee:	f003 0301 	and.w	r3, r3, #1
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	bf14      	ite	ne
 80077f6:	2301      	movne	r3, #1
 80077f8:	2300      	moveq	r3, #0
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00b      	beq.n	8007818 <VL53L1_copy_sys_and_core_results_to_range_results+0x224>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	785b      	ldrb	r3, [r3, #1]
 8007804:	f003 031f 	and.w	r3, r3, #31
 8007808:	b2da      	uxtb	r2, r3
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	70da      	strb	r2, [r3, #3]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	2200      	movs	r2, #0
 8007812:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	break;
 8007816:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 8007818:	bf00      	nop
 800781a:	3724      	adds	r7, #36	@ 0x24
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr
 8007824:	0002200e 	.word	0x0002200e

08007828 <VL53L1_set_GPIO_interrupt_config_struct>:
 */

VL53L1_Error VL53L1_set_GPIO_interrupt_config_struct(
	VL53L1_DEV                      Dev,
	VL53L1_GPIO_interrupt_config_t	intconf)
{
 8007828:	b084      	sub	sp, #16
 800782a:	b580      	push	{r7, lr}
 800782c:	b086      	sub	sp, #24
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
 8007832:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007836:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800783a:	2300      	movs	r3, #0
 800783c:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	613b      	str	r3, [r7, #16]
	VL53L1_GPIO_interrupt_config_t *pintconf = &(pdev->gpio_interrupt_config);
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	3334      	adds	r3, #52	@ 0x34
 8007846:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	 /* using memcpy(dst, src, size in bytes) */
	memcpy(pintconf, &(intconf), sizeof(VL53L1_GPIO_interrupt_config_t));
 8007848:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800784c:	220e      	movs	r2, #14
 800784e:	4619      	mov	r1, r3
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f003 f9cf 	bl	800abf4 <memcpy>

	/* encoded interrupt config */
	pdev->gen_cfg.system__interrupt_config_gpio =
		VL53L1_encode_GPIO_interrupt_config(pintconf);
 8007856:	68f8      	ldr	r0, [r7, #12]
 8007858:	f001 fca4 	bl	80091a4 <VL53L1_encode_GPIO_interrupt_config>
 800785c:	4603      	mov	r3, r0
 800785e:	461a      	mov	r2, r3
	pdev->gen_cfg.system__interrupt_config_gpio =
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	f883 2186 	strb.w	r2, [r3, #390]	@ 0x186

	/* set thresholds */
	status = VL53L1_set_GPIO_thresholds_from_struct(
 8007866:	68f9      	ldr	r1, [r7, #12]
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f001 fd44 	bl	80092f6 <VL53L1_set_GPIO_thresholds_from_struct>
 800786e:	4603      	mov	r3, r0
 8007870:	75fb      	strb	r3, [r7, #23]
			Dev,
			pintconf);

	LOG_FUNCTION_END(status);
	return status;
 8007872:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007876:	4618      	mov	r0, r3
 8007878:	3718      	adds	r7, #24
 800787a:	46bd      	mov	sp, r7
 800787c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007880:	b004      	add	sp, #16
 8007882:	4770      	bx	lr

08007884 <VL53L1_get_GPIO_interrupt_config>:
 */

VL53L1_Error VL53L1_get_GPIO_interrupt_config(
	VL53L1_DEV                      Dev,
	VL53L1_GPIO_interrupt_config_t	*pintconf)
{
 8007884:	b590      	push	{r4, r7, lr}
 8007886:	b089      	sub	sp, #36	@ 0x24
 8007888:	af00      	add	r7, sp, #0
 800788a:	6178      	str	r0, [r7, #20]
 800788c:	6139      	str	r1, [r7, #16]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800788e:	2300      	movs	r3, #0
 8007890:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	61bb      	str	r3, [r7, #24]

	/*
	 * Decode the system__interrupt_config_gpio register
	 * This makes sure the structure is in line with the register
	 */
	pdev->gpio_interrupt_config = VL53L1_decode_GPIO_interrupt_config(
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	f893 2186 	ldrb.w	r2, [r3, #390]	@ 0x186
 800789c:	69bc      	ldr	r4, [r7, #24]
 800789e:	463b      	mov	r3, r7
 80078a0:	4611      	mov	r1, r2
 80078a2:	4618      	mov	r0, r3
 80078a4:	f001 fcb4 	bl	8009210 <VL53L1_decode_GPIO_interrupt_config>
 80078a8:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 80078ac:	463c      	mov	r4, r7
 80078ae:	6820      	ldr	r0, [r4, #0]
 80078b0:	6861      	ldr	r1, [r4, #4]
 80078b2:	68a2      	ldr	r2, [r4, #8]
 80078b4:	c307      	stmia	r3!, {r0, r1, r2}
 80078b6:	89a2      	ldrh	r2, [r4, #12]
 80078b8:	801a      	strh	r2, [r3, #0]

	/*
	 * Readout the system thresholds
	 */
	pdev->gpio_interrupt_config.threshold_distance_high =
		pdev->dyn_cfg.system__thresh_high;
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	f8b3 21b6 	ldrh.w	r2, [r3, #438]	@ 0x1b6
	pdev->gpio_interrupt_config.threshold_distance_high =
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	875a      	strh	r2, [r3, #58]	@ 0x3a
	pdev->gpio_interrupt_config.threshold_distance_low =
		pdev->dyn_cfg.system__thresh_low;
 80078c4:	69bb      	ldr	r3, [r7, #24]
 80078c6:	f8b3 21b8 	ldrh.w	r2, [r3, #440]	@ 0x1b8
	pdev->gpio_interrupt_config.threshold_distance_low =
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	879a      	strh	r2, [r3, #60]	@ 0x3c

	pdev->gpio_interrupt_config.threshold_rate_high =
		pdev->gen_cfg.system__thresh_rate_high;
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	f8b3 2190 	ldrh.w	r2, [r3, #400]	@ 0x190
	pdev->gpio_interrupt_config.threshold_rate_high =
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
	pdev->gpio_interrupt_config.threshold_rate_low =
		pdev->gen_cfg.system__thresh_rate_low;
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	f8b3 2192 	ldrh.w	r2, [r3, #402]	@ 0x192
	pdev->gpio_interrupt_config.threshold_rate_low =
 80078de:	69bb      	ldr	r3, [r7, #24]
 80078e0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

	if (pintconf == &(pdev->gpio_interrupt_config))	{
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	3334      	adds	r3, #52	@ 0x34
 80078e8:	693a      	ldr	r2, [r7, #16]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d006      	beq.n	80078fc <VL53L1_get_GPIO_interrupt_config+0x78>
		/* Cowardly refusing to copy the same memory locations */
	} else {

		/* using memcpy(dst, src, size in bytes) */
		memcpy(pintconf, &(pdev->gpio_interrupt_config),
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	3334      	adds	r3, #52	@ 0x34
 80078f2:	220e      	movs	r2, #14
 80078f4:	4619      	mov	r1, r3
 80078f6:	6938      	ldr	r0, [r7, #16]
 80078f8:	f003 f97c 	bl	800abf4 <memcpy>
				sizeof(VL53L1_GPIO_interrupt_config_t));
	}

	LOG_FUNCTION_END(status);
	return status;
 80078fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007900:	4618      	mov	r0, r3
 8007902:	3724      	adds	r7, #36	@ 0x24
 8007904:	46bd      	mov	sp, r7
 8007906:	bd90      	pop	{r4, r7, pc}

08007908 <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 8007908:	b480      	push	{r7}
 800790a:	b087      	sub	sp, #28
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	460b      	mov	r3, r1
 8007912:	607a      	str	r2, [r7, #4]
 8007914:	817b      	strh	r3, [r7, #10]
	 * Gets the requested tuning parm value
	 * - Large case statement for returns
	 * - if key does not match, INVALID parm error returned
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007916:	2300      	movs	r3, #0
 8007918:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 800791e:	897b      	ldrh	r3, [r7, #10]
 8007920:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8007924:	2b38      	cmp	r3, #56	@ 0x38
 8007926:	f200 8204 	bhi.w	8007d32 <VL53L1_get_tuning_parm+0x42a>
 800792a:	a201      	add	r2, pc, #4	@ (adr r2, 8007930 <VL53L1_get_tuning_parm+0x28>)
 800792c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007930:	08007a15 	.word	0x08007a15
 8007934:	08007a23 	.word	0x08007a23
 8007938:	08007a31 	.word	0x08007a31
 800793c:	08007a3f 	.word	0x08007a3f
 8007940:	08007a4d 	.word	0x08007a4d
 8007944:	08007a5b 	.word	0x08007a5b
 8007948:	08007a69 	.word	0x08007a69
 800794c:	08007a77 	.word	0x08007a77
 8007950:	08007a85 	.word	0x08007a85
 8007954:	08007a93 	.word	0x08007a93
 8007958:	08007aa1 	.word	0x08007aa1
 800795c:	08007aaf 	.word	0x08007aaf
 8007960:	08007abd 	.word	0x08007abd
 8007964:	08007acb 	.word	0x08007acb
 8007968:	08007ad9 	.word	0x08007ad9
 800796c:	08007ae7 	.word	0x08007ae7
 8007970:	08007af5 	.word	0x08007af5
 8007974:	08007b03 	.word	0x08007b03
 8007978:	08007b11 	.word	0x08007b11
 800797c:	08007b1f 	.word	0x08007b1f
 8007980:	08007b2d 	.word	0x08007b2d
 8007984:	08007b3b 	.word	0x08007b3b
 8007988:	08007b49 	.word	0x08007b49
 800798c:	08007b57 	.word	0x08007b57
 8007990:	08007b65 	.word	0x08007b65
 8007994:	08007b73 	.word	0x08007b73
 8007998:	08007b81 	.word	0x08007b81
 800799c:	08007b8f 	.word	0x08007b8f
 80079a0:	08007b9d 	.word	0x08007b9d
 80079a4:	08007bab 	.word	0x08007bab
 80079a8:	08007bb9 	.word	0x08007bb9
 80079ac:	08007bc7 	.word	0x08007bc7
 80079b0:	08007bd5 	.word	0x08007bd5
 80079b4:	08007be3 	.word	0x08007be3
 80079b8:	08007bf1 	.word	0x08007bf1
 80079bc:	08007bff 	.word	0x08007bff
 80079c0:	08007c0d 	.word	0x08007c0d
 80079c4:	08007c1b 	.word	0x08007c1b
 80079c8:	08007c29 	.word	0x08007c29
 80079cc:	08007c37 	.word	0x08007c37
 80079d0:	08007c45 	.word	0x08007c45
 80079d4:	08007c53 	.word	0x08007c53
 80079d8:	08007c61 	.word	0x08007c61
 80079dc:	08007c6f 	.word	0x08007c6f
 80079e0:	08007c7d 	.word	0x08007c7d
 80079e4:	08007c8b 	.word	0x08007c8b
 80079e8:	08007c99 	.word	0x08007c99
 80079ec:	08007ca7 	.word	0x08007ca7
 80079f0:	08007cb5 	.word	0x08007cb5
 80079f4:	08007cc3 	.word	0x08007cc3
 80079f8:	08007cd1 	.word	0x08007cd1
 80079fc:	08007cdf 	.word	0x08007cdf
 8007a00:	08007ced 	.word	0x08007ced
 8007a04:	08007cfb 	.word	0x08007cfb
 8007a08:	08007d09 	.word	0x08007d09
 8007a0c:	08007d17 	.word	0x08007d17
 8007a10:	08007d25 	.word	0x08007d25

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 8007a1a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	601a      	str	r2, [r3, #0]
	break;
 8007a20:	e18e      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 8007a28:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	601a      	str	r2, [r3, #0]
	break;
 8007a2e:	e187      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 8007a36:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	601a      	str	r2, [r3, #0]
	break;
 8007a3c:	e180      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8007a44:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	601a      	str	r2, [r3, #0]
	break;
 8007a4a:	e179      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8007a52:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	601a      	str	r2, [r3, #0]
	break;
 8007a58:	e172      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 8007a60:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	601a      	str	r2, [r3, #0]
	break;
 8007a66:	e16b      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8007a6e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	601a      	str	r2, [r3, #0]
	break;
 8007a74:	e164      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8007a7c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	601a      	str	r2, [r3, #0]
	break;
 8007a82:	e15d      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	@ 0xb6
 8007a8a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	601a      	str	r2, [r3, #0]
	break;
 8007a90:	e156      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8007a98:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	601a      	str	r2, [r3, #0]
	break;
 8007a9e:	e14f      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8007aa6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	601a      	str	r2, [r3, #0]
	break;
 8007aac:	e148      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8007ab4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	601a      	str	r2, [r3, #0]
	break;
 8007aba:	e141      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	f8b3 30be 	ldrh.w	r3, [r3, #190]	@ 0xbe
 8007ac2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	601a      	str	r2, [r3, #0]
	break;
 8007ac8:	e13a      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	@ 0xc0
 8007ad0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	601a      	str	r2, [r3, #0]
	break;
 8007ad6:	e133      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 8007ade:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	601a      	str	r2, [r3, #0]
	break;
 8007ae4:	e12c      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8007aec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	601a      	str	r2, [r3, #0]
	break;
 8007af2:	e125      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	f893 30c4 	ldrb.w	r3, [r3, #196]	@ 0xc4
 8007afa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	601a      	str	r2, [r3, #0]
	break;
 8007b00:	e11e      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	f893 3140 	ldrb.w	r3, [r3, #320]	@ 0x140
 8007b08:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	601a      	str	r2, [r3, #0]
	break;
 8007b0e:	e117      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg ;
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	f893 30c5 	ldrb.w	r3, [r3, #197]	@ 0xc5
 8007b16:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	601a      	str	r2, [r3, #0]
	break;
 8007b1c:	e110      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	f893 30c7 	ldrb.w	r3, [r3, #199]	@ 0xc7
 8007b24:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	601a      	str	r2, [r3, #0]
	break;
 8007b2a:	e109      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 8007b32:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	601a      	str	r2, [r3, #0]
	break;
 8007b38:	e102      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	f9b3 313e 	ldrsh.w	r3, [r3, #318]	@ 0x13e
 8007b40:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	601a      	str	r2, [r3, #0]
	break;
 8007b46:	e0fb      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	f893 30aa 	ldrb.w	r3, [r3, #170]	@ 0xaa
 8007b4e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	601a      	str	r2, [r3, #0]
	break;
 8007b54:	e0f4      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	f893 30ab 	ldrb.w	r3, [r3, #171]	@ 0xab
 8007b5c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	601a      	str	r2, [r3, #0]
	break;
 8007b62:	e0ed      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8007b6a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	601a      	str	r2, [r3, #0]
	break;
 8007b70:	e0e6      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8007b78:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	601a      	str	r2, [r3, #0]
	break;
 8007b7e:	e0df      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 8007b86:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	601a      	str	r2, [r3, #0]
	break;
 8007b8c:	e0d8      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	f893 30af 	ldrb.w	r3, [r3, #175]	@ 0xaf
 8007b94:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	601a      	str	r2, [r3, #0]
	break;
 8007b9a:	e0d1      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	f893 30c6 	ldrb.w	r3, [r3, #198]	@ 0xc6
 8007ba2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	601a      	str	r2, [r3, #0]
	break;
 8007ba8:	e0ca      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
				(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 8007bb0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	601a      	str	r2, [r3, #0]
	break;
 8007bb6:	e0c3      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.device_test_mode;
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 8007bbe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	601a      	str	r2, [r3, #0]
	break;
 8007bc4:	e0bc      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.vcsel_period;
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 8007bcc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	601a      	str	r2, [r3, #0]
	break;
 8007bd2:	e0b5      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.timeout_us;
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8007bda:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	601a      	str	r2, [r3, #0]
	break;
 8007be0:	e0ae      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	f8b3 3118 	ldrh.w	r3, [r3, #280]	@ 0x118
 8007be8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	601a      	str	r2, [r3, #0]
	break;
 8007bee:	e0a7      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
 8007bf6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	601a      	str	r2, [r3, #0]
	break;
 8007bfc:	e0a0      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	f8b3 311c 	ldrh.w	r3, [r3, #284]	@ 0x11c
 8007c04:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	601a      	str	r2, [r3, #0]
	break;
 8007c0a:	e099      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8007c12:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	601a      	str	r2, [r3, #0]
	break;
 8007c18:	e092      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8007c20:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	601a      	str	r2, [r3, #0]
	break;
 8007c26:	e08b      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8007c2e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	601a      	str	r2, [r3, #0]
	break;
 8007c34:	e084      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8007c3c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	601a      	str	r2, [r3, #0]
	break;
 8007c42:	e07d      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	f893 3154 	ldrb.w	r3, [r3, #340]	@ 0x154
 8007c4a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	601a      	str	r2, [r3, #0]
	break;
 8007c50:	e076      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	f893 3155 	ldrb.w	r3, [r3, #341]	@ 0x155
 8007c58:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	601a      	str	r2, [r3, #0]
	break;
 8007c5e:	e06f      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	f893 3156 	ldrb.w	r3, [r3, #342]	@ 0x156
 8007c66:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	601a      	str	r2, [r3, #0]
	break;
 8007c6c:	e068      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_period;
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	f893 3121 	ldrb.w	r3, [r3, #289]	@ 0x121
 8007c74:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	601a      	str	r2, [r3, #0]
	break;
 8007c7a:	e061      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_start;
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	f893 3122 	ldrb.w	r3, [r3, #290]	@ 0x122
 8007c82:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	601a      	str	r2, [r3, #0]
	break;
 8007c88:	e05a      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	f8b3 3128 	ldrh.w	r3, [r3, #296]	@ 0x128
 8007c90:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	601a      	str	r2, [r3, #0]
	break;
 8007c96:	e053      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	@ 0xca
 8007c9e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	601a      	str	r2, [r3, #0]
	break;
 8007ca4:	e04c      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	@ 0xcc
 8007cac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	601a      	str	r2, [r3, #0]
	break;
 8007cb2:	e045      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8007cba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	601a      	str	r2, [r3, #0]
	break;
 8007cc0:	e03e      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8007cc8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	601a      	str	r2, [r3, #0]
	break;
 8007cce:	e037      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007cd6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	601a      	str	r2, [r3, #0]
	break;
 8007cdc:	e030      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007ce4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	601a      	str	r2, [r3, #0]
	break;
 8007cea:	e029      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007cf2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	601a      	str	r2, [r3, #0]
	break;
 8007cf8:	e022      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007d00:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	601a      	str	r2, [r3, #0]
	break;
 8007d06:	e01b      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
				(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	f893 32e4 	ldrb.w	r3, [r3, #740]	@ 0x2e4
 8007d0e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	601a      	str	r2, [r3, #0]
	break;
 8007d14:	e014      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d1c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	601a      	str	r2, [r3, #0]
	break;
 8007d22:	e00d      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8007d2a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	601a      	str	r2, [r3, #0]
	break;
 8007d30:	e006      	b.n	8007d40 <VL53L1_get_tuning_parm+0x438>


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8007d38:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 8007d3a:	23fc      	movs	r3, #252	@ 0xfc
 8007d3c:	75fb      	strb	r3, [r7, #23]
	break;
 8007d3e:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8007d40:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	371c      	adds	r7, #28
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <VL53L1_init_refspadchar_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b085      	sub	sp, #20
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Ref SPAD Char data structures preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	73fb      	strb	r3, [r7, #15]
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2208      	movs	r2, #8
 8007d60:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	220b      	movs	r2, #11
 8007d66:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007d6e:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8007d76:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8007d7e:	815a      	strh	r2, [r3, #10]
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8007d86:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8007d88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3714      	adds	r7, #20
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes SPAD Self Check (SSC) data structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007da0:	2300      	movs	r3, #0
 8007da2:	73fb      	strb	r3, [r7, #15]
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	701a      	strb	r2, [r3, #0]

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2212      	movs	r2, #18
 8007dae:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start  =
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	220f      	movs	r2, #15
 8007db4:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2202      	movs	r2, #2
 8007dba:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 8007dc2:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	220c      	movs	r2, #12
 8007dc8:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8007dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3714      	adds	r7, #20
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr

08007dda <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b084      	sub	sp, #16
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
 8007de2:	6039      	str	r1, [r7, #0]
	/*
	 * Initializes Xtalk Config structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007de4:	2300      	movs	r3, #0
 8007de6:	73fb      	strb	r3, [r7, #15]
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	895b      	ldrh	r3, [r3, #10]
 8007dec:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	80da      	strh	r2, [r3, #6]

	/* Store NVM defaults for later use */

	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	895b      	ldrh	r3, [r3, #10]
 8007e0a:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	81da      	strh	r2, [r3, #14]

	pdata->lite_mode_crosstalk_margin_kcps                     =
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	2200      	movs	r2, #0
 8007e28:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	2240      	movs	r2, #64	@ 0x40
 8007e2e:	751a      	strb	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d10d      	bne.n	8007e54 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d108      	bne.n	8007e54 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d103      	bne.n	8007e54 <VL53L1_init_xtalk_config_struct+0x7a>
		pdata->global_crosstalk_compensation_enable = 0x00;
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	741a      	strb	r2, [r3, #16]
 8007e52:	e002      	b.n	8007e5a <VL53L1_init_xtalk_config_struct+0x80>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	2201      	movs	r2, #1
 8007e58:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 8007e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d114      	bne.n	8007e8c <VL53L1_init_xtalk_config_struct+0xb2>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d110      	bne.n	8007e8c <VL53L1_init_xtalk_config_struct+0xb2>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	6818      	ldr	r0, [r3, #0]
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	7d1b      	ldrb	r3, [r3, #20]
 8007e7e:	f000 ff99 	bl	8008db4 <VL53L1_calc_range_ignore_threshold>
 8007e82:	4603      	mov	r3, r0
 8007e84:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	82da      	strh	r2, [r3, #22]
 8007e8a:	e002      	b.n	8007e92 <VL53L1_init_xtalk_config_struct+0xb8>
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 8007e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <VL53L1_init_offset_cal_config_struct>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 8007e9e:	b480      	push	{r7}
 8007ea0:	b085      	sub	sp, #20
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Offset Calibration Config structure
	 * - for use with VL53L1_run_offset_calibration()
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps          =
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8007eb0:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us                  =
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007eb8:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us                     =
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8007ec0:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us                        =
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8007ec8:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2208      	movs	r2, #8
 8007ece:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2228      	movs	r2, #40	@ 0x28
 8007ed4:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2209      	movs	r2, #9
 8007eda:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8007edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3714      	adds	r7, #20
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b085      	sub	sp, #20
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes  Tuning Param storage structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	73fb      	strb	r3, [r7, #15]
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version              =
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f248 0203 	movw	r2, #32771	@ 0x8003
 8007efe:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f248 0201 	movw	r2, #32769	@ 0x8001
 8007f06:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f248 0241 	movw	r2, #32833	@ 0x8041
 8007f0e:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	220e      	movs	r2, #14
 8007f14:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	220a      	movs	r2, #10
 8007f1a:	71da      	strb	r2, [r3, #7]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2206      	movs	r2, #6
 8007f20:	721a      	strb	r2, [r3, #8]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	220e      	movs	r2, #14
 8007f26:	725a      	strb	r2, [r3, #9]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	220a      	movs	r2, #10
 8007f2c:	729a      	strb	r2, [r3, #10]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2206      	movs	r2, #6
 8007f32:	72da      	strb	r2, [r3, #11]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2202      	movs	r2, #2
 8007f38:	731a      	strb	r2, [r3, #12]
			VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2221      	movs	r2, #33	@ 0x21
 8007f3e:	735a      	strb	r2, [r3, #13]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8007f52:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8007f5a:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8007f62:	82da      	strh	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	22c0      	movs	r2, #192	@ 0xc0
 8007f68:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	22c0      	movs	r2, #192	@ 0xc0
 8007f6e:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	22c0      	movs	r2, #192	@ 0xc0
 8007f74:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2208      	movs	r2, #8
 8007f7a:	779a      	strb	r2, [r3, #30]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2210      	movs	r2, #16
 8007f80:	77da      	strb	r2, [r3, #31]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2201      	movs	r2, #1
 8007f86:	f883 2020 	strb.w	r2, [r3, #32]
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2202      	movs	r2, #2
 8007f8e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2201      	movs	r2, #1
 8007f96:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2202      	movs	r2, #2
 8007f9e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8007fb0:	84da      	strh	r2, [r3, #38]	@ 0x26
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8007fb8:	851a      	strh	r2, [r3, #40]	@ 0x28
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f248 0230 	movw	r2, #32816	@ 0x8030
 8007fc0:	62da      	str	r2, [r3, #44]	@ 0x2c
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007fc8:	631a      	str	r2, [r3, #48]	@ 0x30
			VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8007fd0:	635a      	str	r2, [r3, #52]	@ 0x34
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8007fd8:	639a      	str	r2, [r3, #56]	@ 0x38
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f24f 6218 	movw	r2, #63000	@ 0xf618
 8007fe0:	641a      	str	r2, [r3, #64]	@ 0x40
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8007fe8:	645a      	str	r2, [r3, #68]	@ 0x44
			VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8007ff0:	63da      	str	r2, [r3, #60]	@ 0x3c
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8007ff8:	649a      	str	r2, [r3, #72]	@ 0x48
			VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 8007ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3714      	adds	r7, #20
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr

0800800a <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800800a:	b480      	push	{r7}
 800800c:	b087      	sub	sp, #28
 800800e:	af00      	add	r7, sp, #0
 8008010:	60f8      	str	r0, [r7, #12]
 8008012:	60b9      	str	r1, [r7, #8]
 8008014:	607a      	str	r2, [r7, #4]
 8008016:	603b      	str	r3, [r7, #0]
	 *  - back to back
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008018:	2300      	movs	r3, #0
 800801a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8008022:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl                                      = 0x00;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2200      	movs	r2, #0
 8008028:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2200      	movs	r2, #0
 800802e:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2200      	movs	r2, #0
 8008034:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2200      	movs	r2, #0
 800803a:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2200      	movs	r2, #0
 8008040:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2200      	movs	r2, #0
 8008046:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status                                  = 0x00;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2200      	movs	r2, #0
 800804c:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2200      	movs	r2, #0
 8008052:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2200      	movs	r2, #0
 8008058:	729a      	strb	r2, [r3, #10]

	/*
	 *  0 - gpio__extsup_hv
	 *  1 - gpio__vmodeint_hv
	 */
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2200      	movs	r2, #0
 800805e:	72da      	strb	r2, [r3, #11]
	 * Set interrupt active low
	 *
	 *  3:0 - gpio__mux_select_hv
	 *    4 - gpio__mux_active_high_hv
	 */
	pstatic->gpio_hv_mux__ctrl  = \
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2211      	movs	r2, #17
 8008064:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2202      	movs	r2, #2
 800806a:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2200      	movs	r2, #0
 8008070:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2202      	movs	r2, #2
 8008076:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2208      	movs	r2, #8
 800807c:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2200      	movs	r2, #0
 8008082:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 8008084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008086:	7f9a      	ldrb	r2, [r3, #30]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 800808c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800808e:	7fda      	ldrb	r2, [r3, #31]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 8008094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008096:	f893 2020 	ldrb.w	r2, [r3, #32]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	751a      	strb	r2, [r3, #20]
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2201      	movs	r2, #1
 80080a2:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2200      	movs	r2, #0
 80080a8:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2200      	movs	r2, #0
 80080ae:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2200      	movs	r2, #0
 80080b4:	831a      	strh	r2, [r3, #24]

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	22ff      	movs	r2, #255	@ 0xff
 80080ba:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 80080bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080be:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->algo__range_min_clip                             =
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	76da      	strb	r2, [r3, #27]
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 80080c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c6:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->algo__consistency_check__tolerance               =
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2200      	movs	r2, #0
 80080d0:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2200      	movs	r2, #0
 80080d6:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2200      	movs	r2, #0
 80080dc:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value           = 0x00;
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	2200      	movs	r2, #0
 80080e2:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider                   = 0x00;
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	2200      	movs	r2, #0
 80080e8:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	2220      	movs	r2, #32
 80080ee:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	220b      	movs	r2, #11
 80080f4:	70da      	strb	r2, [r3, #3]
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 80080f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f8:	89da      	ldrh	r2, [r3, #14]
	pgeneral->cal_config__repeat_rate                         =
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width                      = 0x02;
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	2202      	movs	r2, #2
 8008102:	719a      	strb	r2, [r3, #6]
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	220d      	movs	r2, #13
 8008108:	71da      	strb	r2, [r3, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 800810a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800810c:	7b5a      	ldrb	r2, [r3, #13]
	pgeneral->phasecal_config__target                         =
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override                       = 0x00;
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	2200      	movs	r2, #0
 8008116:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	2201      	movs	r2, #1
 800811c:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	2200      	movs	r2, #0
 8008122:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	2200      	movs	r2, #0
 8008128:	81da      	strh	r2, [r3, #14]
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	f44f 420c 	mov.w	r2, #35840	@ 0x8c00
 8008130:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	2200      	movs	r2, #0
 8008136:	749a      	strb	r2, [r3, #18]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	2238      	movs	r2, #56	@ 0x38
 800813c:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit                     = 0xFF;
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	22ff      	movs	r2, #255	@ 0xff
 8008142:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit                     = 0x01;
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	2201      	movs	r2, #1
 8008148:	755a      	strb	r2, [r3, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	221a      	movs	r2, #26
 8008154:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2220      	movs	r2, #32
 8008160:	70da      	strb	r2, [r3, #3]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2201      	movs	r2, #1
 8008166:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	22cc      	movs	r2, #204	@ 0xcc
 800816c:	715a      	strb	r2, [r3, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	220b      	movs	r2, #11
 8008172:	719a      	strb	r2, [r3, #6]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	22f5      	movs	r2, #245	@ 0xf5
 800817e:	721a      	strb	r2, [r3, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2209      	movs	r2, #9
 8008184:	725a      	strb	r2, [r3, #9]
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 8008186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008188:	8a9a      	ldrh	r2, [r3, #20]
	ptiming->range_config__sigma_thresh                       =
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	815a      	strh	r2, [r3, #10]
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 800818e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008190:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	819a      	strh	r2, [r3, #12]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2208      	movs	r2, #8
 800819a:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2278      	movs	r2, #120	@ 0x78
 80081a0:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable                        = 0x00;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	751a      	strb	r2, [r3, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	2201      	movs	r2, #1
 80081b2:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	2200      	movs	r2, #0
 80081b8:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	2200      	movs	r2, #0
 80081be:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	2200      	movs	r2, #0
 80081c4:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 80081c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c8:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
	pdynamic->system__seed_config =
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	71da      	strb	r2, [r3, #7]

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	220b      	movs	r2, #11
 80081d4:	721a      	strb	r2, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	2209      	movs	r2, #9
 80081da:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 80081dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081de:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;;
 80081e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e6:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	2201      	movs	r2, #1
 80081f0:	731a      	strb	r2, [r3, #12]
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 80081f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f4:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
	pdynamic->sd_config__first_order_select =
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 80081fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081fe:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
	pdynamic->sd_config__quantifier         =
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	22c7      	movs	r2, #199	@ 0xc7
 800820a:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	22ff      	movs	r2, #255	@ 0xff
 8008210:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          = \
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	22db      	movs	r2, #219	@ 0xdb
 8008216:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN | \
			VL53L1_SEQUENCE_DSS2_EN | \
			VL53L1_SEQUENCE_MM2_EN | \
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold                   = 0x02;
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	2202      	movs	r2, #2
 800821c:	749a      	strb	r2, [r3, #18]

	/* System control */


	psystem->system__stream_count_ctrl                         = 0x00;
 800821e:	6a3b      	ldr	r3, [r7, #32]
 8008220:	2200      	movs	r2, #0
 8008222:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable                                  = 0x01;
 8008224:	6a3b      	ldr	r3, [r7, #32]
 8008226:	2201      	movs	r2, #1
 8008228:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           = \
 800822a:	6a3b      	ldr	r3, [r7, #32]
 800822c:	2201      	movs	r2, #1
 800822e:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                = \
 8008230:	6a3b      	ldr	r3, [r7, #32]
 8008232:	2221      	movs	r2, #33	@ 0x21
 8008234:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD | \
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 8008236:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800823a:	4618      	mov	r0, r3
 800823c:	371c      	adds	r7, #28
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr

08008246 <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8008246:	b580      	push	{r7, lr}
 8008248:	b088      	sub	sp, #32
 800824a:	af02      	add	r7, sp, #8
 800824c:	60f8      	str	r0, [r7, #12]
 800824e:	60b9      	str	r1, [r7, #8]
 8008250:	607a      	str	r2, [r7, #4]
 8008252:	603b      	str	r3, [r7, #0]
	 * (up to 1.4 metres)
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008254:	2300      	movs	r3, #0
 8008256:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8008258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800825a:	9301      	str	r3, [sp, #4]
 800825c:	6a3b      	ldr	r3, [r7, #32]
 800825e:	9300      	str	r3, [sp, #0]
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	68b9      	ldr	r1, [r7, #8]
 8008266:	68f8      	ldr	r0, [r7, #12]
 8008268:	f7ff fecf 	bl	800800a <VL53L1_preset_mode_standard_ranging>
 800826c:	4603      	mov	r3, r0
 800826e:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8008270:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d121      	bne.n	80082bc <VL53L1_preset_mode_standard_ranging_short_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2207      	movs	r2, #7
 800827c:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2205      	movs	r2, #5
 8008282:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 8008284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008286:	8ada      	ldrh	r2, [r3, #22]
		ptiming->range_config__sigma_thresh                  =
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 800828c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800828e:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2208      	movs	r2, #8
 8008298:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2238      	movs	r2, #56	@ 0x38
 800829e:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	2207      	movs	r2, #7
 80082a4:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	2205      	movs	r2, #5
 80082aa:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 80082ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ae:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 80082b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b6:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 80082bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3718      	adds	r7, #24
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b088      	sub	sp, #32
 80082cc:	af02      	add	r7, sp, #8
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	607a      	str	r2, [r7, #4]
 80082d4:	603b      	str	r3, [r7, #0]
	 * (up to 4.8 metres)
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80082d6:	2300      	movs	r3, #0
 80082d8:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 80082da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082dc:	9301      	str	r3, [sp, #4]
 80082de:	6a3b      	ldr	r3, [r7, #32]
 80082e0:	9300      	str	r3, [sp, #0]
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	68b9      	ldr	r1, [r7, #8]
 80082e8:	68f8      	ldr	r0, [r7, #12]
 80082ea:	f7ff fe8e 	bl	800800a <VL53L1_preset_mode_standard_ranging>
 80082ee:	4603      	mov	r3, r0
 80082f0:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80082f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d121      	bne.n	800833e <VL53L1_preset_mode_standard_ranging_long_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	220f      	movs	r2, #15
 80082fe:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	220d      	movs	r2, #13
 8008304:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 8008306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008308:	8a5a      	ldrh	r2, [r3, #18]
		ptiming->range_config__sigma_thresh                  =
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 800830e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008310:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2208      	movs	r2, #8
 800831a:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	22b8      	movs	r2, #184	@ 0xb8
 8008320:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	220f      	movs	r2, #15
 8008326:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	220d      	movs	r2, #13
 800832c:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 800832e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008330:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 8008336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008338:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800833e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008342:	4618      	mov	r0, r3
 8008344:	3718      	adds	r7, #24
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b088      	sub	sp, #32
 800834e:	af02      	add	r7, sp, #8
 8008350:	60f8      	str	r0, [r7, #12]
 8008352:	60b9      	str	r1, [r7, #8]
 8008354:	607a      	str	r2, [r7, #4]
 8008356:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008358:	2300      	movs	r3, #0
 800835a:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800835c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800835e:	9301      	str	r3, [sp, #4]
 8008360:	6a3b      	ldr	r3, [r7, #32]
 8008362:	9300      	str	r3, [sp, #0]
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	68b9      	ldr	r1, [r7, #8]
 800836a:	68f8      	ldr	r0, [r7, #12]
 800836c:	f7ff fe4d 	bl	800800a <VL53L1_preset_mode_standard_ranging>
 8008370:	4603      	mov	r3, r0
 8008372:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8008374:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d105      	bne.n	8008388 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	2202      	movs	r2, #2
 8008380:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	223b      	movs	r2, #59	@ 0x3b
 8008386:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008388:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800838c:	4618      	mov	r0, r3
 800838e:	3718      	adds	r7, #24
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b088      	sub	sp, #32
 8008398:	af02      	add	r7, sp, #8
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	607a      	str	r2, [r7, #4]
 80083a0:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80083a2:	2300      	movs	r3, #0
 80083a4:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 80083a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a8:	9301      	str	r3, [sp, #4]
 80083aa:	6a3b      	ldr	r3, [r7, #32]
 80083ac:	9300      	str	r3, [sp, #0]
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	68b9      	ldr	r1, [r7, #8]
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f7ff fe28 	bl	800800a <VL53L1_preset_mode_standard_ranging>
 80083ba:	4603      	mov	r3, r0
 80083bc:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80083be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d105      	bne.n	80083d2 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	2202      	movs	r2, #2
 80083ca:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	225b      	movs	r2, #91	@ 0x5b
 80083d0:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 80083d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3718      	adds	r7, #24
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}

080083de <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80083de:	b580      	push	{r7, lr}
 80083e0:	b088      	sub	sp, #32
 80083e2:	af02      	add	r7, sp, #8
 80083e4:	60f8      	str	r0, [r7, #12]
 80083e6:	60b9      	str	r1, [r7, #8]
 80083e8:	607a      	str	r2, [r7, #4]
 80083ea:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80083ec:	2300      	movs	r3, #0
 80083ee:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 80083f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f2:	9301      	str	r3, [sp, #4]
 80083f4:	6a3b      	ldr	r3, [r7, #32]
 80083f6:	9300      	str	r3, [sp, #0]
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	68b9      	ldr	r1, [r7, #8]
 80083fe:	68f8      	ldr	r0, [r7, #12]
 8008400:	f7ff fe03 	bl	800800a <VL53L1_preset_mode_standard_ranging>
 8008404:	4603      	mov	r3, r0
 8008406:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8008408:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d11a      	bne.n	8008446 <VL53L1_preset_mode_timed_ranging+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	2200      	movs	r2, #0
 8008414:	749a      	strb	r2, [r3, #18]

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2200      	movs	r2, #0
 800841a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	22b1      	movs	r2, #177	@ 0xb1
 8008420:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	22d4      	movs	r2, #212	@ 0xd4
 800842c:	721a      	strb	r2, [r3, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8008434:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8008436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008438:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 8008440:	6a3b      	ldr	r3, [r7, #32]
 8008442:	2240      	movs	r2, #64	@ 0x40
 8008444:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008446:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800844a:	4618      	mov	r0, r3
 800844c:	3718      	adds	r7, #24
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8008452:	b580      	push	{r7, lr}
 8008454:	b088      	sub	sp, #32
 8008456:	af02      	add	r7, sp, #8
 8008458:	60f8      	str	r0, [r7, #12]
 800845a:	60b9      	str	r1, [r7, #8]
 800845c:	607a      	str	r2, [r7, #4]
 800845e:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008460:	2300      	movs	r3, #0
 8008462:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 8008464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008466:	9301      	str	r3, [sp, #4]
 8008468:	6a3b      	ldr	r3, [r7, #32]
 800846a:	9300      	str	r3, [sp, #0]
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	68b9      	ldr	r1, [r7, #8]
 8008472:	68f8      	ldr	r0, [r7, #12]
 8008474:	f7ff fee7 	bl	8008246 <VL53L1_preset_mode_standard_ranging_short_range>
 8008478:	4603      	mov	r3, r0
 800847a:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800847c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d11a      	bne.n	80084ba <VL53L1_preset_mode_timed_ranging_short_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	2200      	movs	r2, #0
 8008488:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2201      	movs	r2, #1
 800848e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2284      	movs	r2, #132	@ 0x84
 8008494:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2201      	movs	r2, #1
 800849a:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	22b1      	movs	r2, #177	@ 0xb1
 80084a0:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80084a8:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 80084aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ac:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 80084b4:	6a3b      	ldr	r3, [r7, #32]
 80084b6:	2240      	movs	r2, #64	@ 0x40
 80084b8:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 80084ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3718      	adds	r7, #24
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}

080084c6 <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80084c6:	b580      	push	{r7, lr}
 80084c8:	b088      	sub	sp, #32
 80084ca:	af02      	add	r7, sp, #8
 80084cc:	60f8      	str	r0, [r7, #12]
 80084ce:	60b9      	str	r1, [r7, #8]
 80084d0:	607a      	str	r2, [r7, #4]
 80084d2:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80084d4:	2300      	movs	r3, #0
 80084d6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 80084d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084da:	9301      	str	r3, [sp, #4]
 80084dc:	6a3b      	ldr	r3, [r7, #32]
 80084de:	9300      	str	r3, [sp, #0]
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	68b9      	ldr	r1, [r7, #8]
 80084e6:	68f8      	ldr	r0, [r7, #12]
 80084e8:	f7ff feee 	bl	80082c8 <VL53L1_preset_mode_standard_ranging_long_range>
 80084ec:	4603      	mov	r3, r0
 80084ee:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80084f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d11a      	bne.n	800852e <VL53L1_preset_mode_timed_ranging_long_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	2200      	movs	r2, #0
 80084fc:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2297      	movs	r2, #151	@ 0x97
 8008508:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	22b1      	movs	r2, #177	@ 0xb1
 8008514:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800851c:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800851e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008520:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 8008528:	6a3b      	ldr	r3, [r7, #32]
 800852a:	2240      	movs	r2, #64	@ 0x40
 800852c:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800852e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008532:	4618      	mov	r0, r3
 8008534:	3718      	adds	r7, #24
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800853a:	b580      	push	{r7, lr}
 800853c:	b088      	sub	sp, #32
 800853e:	af02      	add	r7, sp, #8
 8008540:	60f8      	str	r0, [r7, #12]
 8008542:	60b9      	str	r1, [r7, #8]
 8008544:	607a      	str	r2, [r7, #4]
 8008546:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008548:	2300      	movs	r3, #0
 800854a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 800854c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800854e:	9301      	str	r3, [sp, #4]
 8008550:	6a3b      	ldr	r3, [r7, #32]
 8008552:	9300      	str	r3, [sp, #0]
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	687a      	ldr	r2, [r7, #4]
 8008558:	68b9      	ldr	r1, [r7, #8]
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	f7ff ff3f 	bl	80083de <VL53L1_preset_mode_timed_ranging>
 8008560:	4603      	mov	r3, r0
 8008562:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8008564:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d106      	bne.n	800857a <VL53L1_preset_mode_low_power_auto_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800856c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800856e:	6839      	ldr	r1, [r7, #0]
 8008570:	68b8      	ldr	r0, [r7, #8]
 8008572:	f000 ff19 	bl	80093a8 <VL53L1_config_low_power_auto_mode>
 8008576:	4603      	mov	r3, r0
 8008578:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800857a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800857e:	4618      	mov	r0, r3
 8008580:	3718      	adds	r7, #24
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8008586:	b580      	push	{r7, lr}
 8008588:	b088      	sub	sp, #32
 800858a:	af02      	add	r7, sp, #8
 800858c:	60f8      	str	r0, [r7, #12]
 800858e:	60b9      	str	r1, [r7, #8]
 8008590:	607a      	str	r2, [r7, #4]
 8008592:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008594:	2300      	movs	r3, #0
 8008596:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 8008598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800859a:	9301      	str	r3, [sp, #4]
 800859c:	6a3b      	ldr	r3, [r7, #32]
 800859e:	9300      	str	r3, [sp, #0]
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	68b9      	ldr	r1, [r7, #8]
 80085a6:	68f8      	ldr	r0, [r7, #12]
 80085a8:	f7ff ff53 	bl	8008452 <VL53L1_preset_mode_timed_ranging_short_range>
 80085ac:	4603      	mov	r3, r0
 80085ae:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 80085b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d106      	bne.n	80085c6 <VL53L1_preset_mode_low_power_auto_short_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 80085b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80085ba:	6839      	ldr	r1, [r7, #0]
 80085bc:	68b8      	ldr	r0, [r7, #8]
 80085be:	f000 fef3 	bl	80093a8 <VL53L1_config_low_power_auto_mode>
 80085c2:	4603      	mov	r3, r0
 80085c4:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 80085c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3718      	adds	r7, #24
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b088      	sub	sp, #32
 80085d6:	af02      	add	r7, sp, #8
 80085d8:	60f8      	str	r0, [r7, #12]
 80085da:	60b9      	str	r1, [r7, #8]
 80085dc:	607a      	str	r2, [r7, #4]
 80085de:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80085e0:	2300      	movs	r3, #0
 80085e2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 80085e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e6:	9301      	str	r3, [sp, #4]
 80085e8:	6a3b      	ldr	r3, [r7, #32]
 80085ea:	9300      	str	r3, [sp, #0]
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	68b9      	ldr	r1, [r7, #8]
 80085f2:	68f8      	ldr	r0, [r7, #12]
 80085f4:	f7ff ff67 	bl	80084c6 <VL53L1_preset_mode_timed_ranging_long_range>
 80085f8:	4603      	mov	r3, r0
 80085fa:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 80085fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d106      	bne.n	8008612 <VL53L1_preset_mode_low_power_auto_long_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 8008604:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008606:	6839      	ldr	r1, [r7, #0]
 8008608:	68b8      	ldr	r0, [r7, #8]
 800860a:	f000 fecd 	bl	80093a8 <VL53L1_config_low_power_auto_mode>
 800860e:	4603      	mov	r3, r0
 8008610:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8008612:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008616:	4618      	mov	r0, r3
 8008618:	3718      	adds	r7, #24
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}

0800861e <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800861e:	b580      	push	{r7, lr}
 8008620:	b088      	sub	sp, #32
 8008622:	af02      	add	r7, sp, #8
 8008624:	60f8      	str	r0, [r7, #12]
 8008626:	60b9      	str	r1, [r7, #8]
 8008628:	607a      	str	r2, [r7, #4]
 800862a:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800862c:	2300      	movs	r3, #0
 800862e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8008630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008632:	9301      	str	r3, [sp, #4]
 8008634:	6a3b      	ldr	r3, [r7, #32]
 8008636:	9300      	str	r3, [sp, #0]
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	68b9      	ldr	r1, [r7, #8]
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	f7ff fce3 	bl	800800a <VL53L1_preset_mode_standard_ranging>
 8008644:	4603      	mov	r3, r0
 8008646:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8008648:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d116      	bne.n	800867e <VL53L1_preset_mode_singleshot_ranging+0x60>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	2200      	movs	r2, #0
 8008654:	749a      	strb	r2, [r3, #18]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2200      	movs	r2, #0
 800865a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	22b1      	movs	r2, #177	@ 0xb1
 8008660:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2200      	movs	r2, #0
 8008666:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	22d4      	movs	r2, #212	@ 0xd4
 800866c:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800866e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008670:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 8008678:	6a3b      	ldr	r3, [r7, #32]
 800867a:	2210      	movs	r2, #16
 800867c:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 800867e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008682:	4618      	mov	r0, r3
 8008684:	3718      	adds	r7, #24
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800868a:	b580      	push	{r7, lr}
 800868c:	b088      	sub	sp, #32
 800868e:	af02      	add	r7, sp, #8
 8008690:	60f8      	str	r0, [r7, #12]
 8008692:	60b9      	str	r1, [r7, #8]
 8008694:	607a      	str	r2, [r7, #4]
 8008696:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_OLT
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008698:	2300      	movs	r3, #0
 800869a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800869c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800869e:	9301      	str	r3, [sp, #4]
 80086a0:	6a3b      	ldr	r3, [r7, #32]
 80086a2:	9300      	str	r3, [sp, #0]
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	68b9      	ldr	r1, [r7, #8]
 80086aa:	68f8      	ldr	r0, [r7, #12]
 80086ac:	f7ff fcad 	bl	800800a <VL53L1_preset_mode_standard_ranging>
 80086b0:	4603      	mov	r3, r0
 80086b2:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80086b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d102      	bne.n	80086c2 <VL53L1_preset_mode_olt+0x38>

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 80086bc:	6a3b      	ldr	r3, [r7, #32]
 80086be:	2201      	movs	r2, #1
 80086c0:	705a      	strb	r2, [r3, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
 80086c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3718      	adds	r7, #24
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}

080086ce <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 80086ce:	b480      	push	{r7}
 80086d0:	b085      	sub	sp, #20
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
	/**
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2201      	movs	r2, #1
 80086de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2202      	movs	r2, #2
 80086e6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	220d      	movs	r2, #13
 80086ee:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f640 028e 	movw	r2, #2190	@ 0x88e
 80086f8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80086fa:	bf00      	nop
 80086fc:	3714      	adds	r7, #20
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr

08008706 <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 8008706:	b480      	push	{r7}
 8008708:	b085      	sub	sp, #20
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
 800870e:	460b      	mov	r3, r1
 8008710:	70fb      	strb	r3, [r7, #3]
	/**
	 * Initialise LL Driver state variables
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	332c      	adds	r3, #44	@ 0x2c
 800871a:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	78fa      	ldrb	r2, [r7, #3]
 8008720:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	2200      	movs	r2, #0
 8008726:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	2202      	movs	r2, #2
 800872c:	709a      	strb	r2, [r3, #2]
	pstate->cfg_timing_status = 0;
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	2200      	movs	r2, #0
 8008732:	70da      	strb	r2, [r3, #3]

	pstate->rd_device_state   = device_state;
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	78fa      	ldrb	r2, [r7, #3]
 8008738:	711a      	strb	r2, [r3, #4]
	pstate->rd_stream_count   = 0;
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	2200      	movs	r2, #0
 800873e:	715a      	strb	r2, [r3, #5]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	2202      	movs	r2, #2
 8008744:	719a      	strb	r2, [r3, #6]
	pstate->rd_timing_status  = 0;
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	2200      	movs	r2, #0
 800874a:	71da      	strb	r2, [r3, #7]

}
 800874c:	bf00      	nop
 800874e:	3714      	adds	r7, #20
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 8008758:	b480      	push	{r7}
 800875a:	b087      	sub	sp, #28
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
	 * VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC
	 * VL53L1_DEVICESTATE_RANGING_GATHER_DATA
	 * VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA
	 */

	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 8008760:	2300      	movs	r3, #0
 8008762:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	332c      	adds	r3, #44	@ 0x2c
 800876c:	60fb      	str	r3, [r7, #12]

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 8008774:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008778:	2b00      	cmp	r3, #0
 800877a:	d10c      	bne.n	8008796 <VL53L1_update_ll_driver_rd_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2203      	movs	r2, #3
 8008780:	711a      	strb	r2, [r3, #4]
		pstate->rd_stream_count  = 0;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2200      	movs	r2, #0
 8008786:	715a      	strb	r2, [r3, #5]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2202      	movs	r2, #2
 800878c:	719a      	strb	r2, [r3, #6]
		pstate->rd_timing_status = 0;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2200      	movs	r2, #0
 8008792:	71da      	strb	r2, [r3, #7]
 8008794:	e060      	b.n	8008858 <VL53L1_update_ll_driver_rd_state+0x100>

		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	795b      	ldrb	r3, [r3, #5]
 800879a:	2bff      	cmp	r3, #255	@ 0xff
 800879c:	d103      	bne.n	80087a6 <VL53L1_update_ll_driver_rd_state+0x4e>
			pstate->rd_stream_count = 0x80;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2280      	movs	r2, #128	@ 0x80
 80087a2:	715a      	strb	r2, [r3, #5]
 80087a4:	e005      	b.n	80087b2 <VL53L1_update_ll_driver_rd_state+0x5a>
		} else {
			pstate->rd_stream_count++;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	795b      	ldrb	r3, [r3, #5]
 80087aa:	3301      	adds	r3, #1
 80087ac:	b2da      	uxtb	r2, r3
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	715a      	strb	r2, [r3, #5]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	799b      	ldrb	r3, [r3, #6]
 80087b6:	f083 0302 	eor.w	r3, r3, #2
 80087ba:	b2da      	uxtb	r2, r3
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	719a      	strb	r2, [r3, #6]

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	791b      	ldrb	r3, [r3, #4]
 80087c4:	3b03      	subs	r3, #3
 80087c6:	2b05      	cmp	r3, #5
 80087c8:	d839      	bhi.n	800883e <VL53L1_update_ll_driver_rd_state+0xe6>
 80087ca:	a201      	add	r2, pc, #4	@ (adr r2, 80087d0 <VL53L1_update_ll_driver_rd_state+0x78>)
 80087cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d0:	080087e9 	.word	0x080087e9
 80087d4:	0800883f 	.word	0x0800883f
 80087d8:	0800883f 	.word	0x0800883f
 80087dc:	08008813 	.word	0x08008813
 80087e0:	08008821 	.word	0x08008821
 80087e4:	08008829 	.word	0x08008829

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	f893 31c6 	ldrb.w	r3, [r3, #454]	@ 0x1c6
 80087ee:	f003 0302 	and.w	r3, r3, #2
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	dd03      	ble.n	80087fe <VL53L1_update_ll_driver_rd_state+0xa6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2206      	movs	r2, #6
 80087fa:	711a      	strb	r2, [r3, #4]
 80087fc:	e002      	b.n	8008804 <VL53L1_update_ll_driver_rd_state+0xac>
					VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				pstate->rd_device_state =
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2208      	movs	r2, #8
 8008802:	711a      	strb	r2, [r3, #4]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			}

			pstate->rd_stream_count  = 0;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2200      	movs	r2, #0
 8008808:	715a      	strb	r2, [r3, #5]
			pstate->rd_timing_status = 0;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2200      	movs	r2, #0
 800880e:	71da      	strb	r2, [r3, #7]

		break;
 8008810:	e022      	b.n	8008858 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:

			pstate->rd_stream_count = 0;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2200      	movs	r2, #0
 8008816:	715a      	strb	r2, [r3, #5]
			pstate->rd_device_state =
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2208      	movs	r2, #8
 800881c:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800881e:	e01b      	b.n	8008858 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:

			pstate->rd_device_state =
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2208      	movs	r2, #8
 8008824:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 8008826:	e017      	b.n	8008858 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:

			pstate->rd_timing_status ^= 0x01;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	79db      	ldrb	r3, [r3, #7]
 800882c:	f083 0301 	eor.w	r3, r3, #1
 8008830:	b2da      	uxtb	r2, r3
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	71da      	strb	r2, [r3, #7]

			pstate->rd_device_state =
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2208      	movs	r2, #8
 800883a:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800883c:	e00c      	b.n	8008858 <VL53L1_update_ll_driver_rd_state+0x100>

		default:

			pstate->rd_device_state  =
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2203      	movs	r2, #3
 8008842:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2200      	movs	r2, #0
 8008848:	715a      	strb	r2, [r3, #5]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2202      	movs	r2, #2
 800884e:	719a      	strb	r2, [r3, #6]
			pstate->rd_timing_status = 0;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2200      	movs	r2, #0
 8008854:	71da      	strb	r2, [r3, #7]

		break;
 8008856:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8008858:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800885c:	4618      	mov	r0, r3
 800885e:	371c      	adds	r7, #28
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 8008868:	b480      	push	{r7}
 800886a:	b089      	sub	sp, #36	@ 0x24
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
	 * matches the state and stream count received from the device
	 *
	 * Check is only use in back to back mode
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 8008870:	2300      	movs	r3, #0
 8008872:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 8008878:	69bb      	ldr	r3, [r7, #24]
 800887a:	332c      	adds	r3, #44	@ 0x2c
 800887c:	617b      	str	r3, [r7, #20]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 800887e:	69bb      	ldr	r3, [r7, #24]
 8008880:	f503 73e7 	add.w	r3, r3, #462	@ 0x1ce
 8008884:	613b      	str	r3, [r7, #16]

	uint8_t   device_range_status   = 0;
 8008886:	2300      	movs	r3, #0
 8008888:	73fb      	strb	r3, [r7, #15]
	uint8_t   device_stream_count   = 0;
 800888a:	2300      	movs	r3, #0
 800888c:	73bb      	strb	r3, [r7, #14]
	uint8_t   device_gph_id         = 0;
 800888e:	2300      	movs	r3, #0
 8008890:	737b      	strb	r3, [r7, #13]
#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	device_range_status =
			psys_results->result__range_status &
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 8008896:	f003 031f 	and.w	r3, r3, #31
 800889a:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	78db      	ldrb	r3, [r3, #3]
 80088a0:	73bb      	strb	r3, [r7, #14]

	/* load the correct GPH ID */
	device_gph_id = (psys_results->result__interrupt_status &
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 80088a6:	111b      	asrs	r3, r3, #4
 80088a8:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 80088aa:	f003 0302 	and.w	r3, r3, #2
 80088ae:	737b      	strb	r3, [r7, #13]

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 80088b0:	69bb      	ldr	r3, [r7, #24]
 80088b2:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 80088b6:	f003 0320 	and.w	r3, r3, #32
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d017      	beq.n	80088ee <VL53L1_check_ll_driver_rd_state+0x86>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	791b      	ldrb	r3, [r3, #4]
 80088c2:	2b06      	cmp	r3, #6
 80088c4:	d105      	bne.n	80088d2 <VL53L1_check_ll_driver_rd_state+0x6a>
			VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

			if (device_range_status !=
 80088c6:	7bfb      	ldrb	r3, [r7, #15]
 80088c8:	2b12      	cmp	r3, #18
 80088ca:	d010      	beq.n	80088ee <VL53L1_check_ll_driver_rd_state+0x86>
				VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 80088cc:	23ef      	movs	r3, #239	@ 0xef
 80088ce:	77fb      	strb	r3, [r7, #31]
 80088d0:	e00d      	b.n	80088ee <VL53L1_check_ll_driver_rd_state+0x86>
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	795b      	ldrb	r3, [r3, #5]
 80088d6:	7bba      	ldrb	r2, [r7, #14]
 80088d8:	429a      	cmp	r2, r3
 80088da:	d001      	beq.n	80088e0 <VL53L1_check_ll_driver_rd_state+0x78>
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 80088dc:	23ee      	movs	r3, #238	@ 0xee
 80088de:	77fb      	strb	r3, [r7, #31]

		/*
		 * Check Read state GPH ID
		 */

		if (pstate->rd_gph_id != device_gph_id) {
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	799b      	ldrb	r3, [r3, #6]
 80088e4:	7b7a      	ldrb	r2, [r7, #13]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d001      	beq.n	80088ee <VL53L1_check_ll_driver_rd_state+0x86>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 80088ea:	23ed      	movs	r3, #237	@ 0xed
 80088ec:	77fb      	strb	r3, [r7, #31]

	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
 80088ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3724      	adds	r7, #36	@ 0x24
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr

080088fe <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 80088fe:	b480      	push	{r7}
 8008900:	b087      	sub	sp, #28
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
	/**
	 * State machine for configuration device state
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 8008906:	2300      	movs	r3, #0
 8008908:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t  *pdev =
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	332c      	adds	r3, #44	@ 0x2c
 8008912:	60fb      	str	r3, [r7, #12]
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 800891a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800891e:	2b00      	cmp	r3, #0
 8008920:	d10c      	bne.n	800893c <VL53L1_update_ll_driver_cfg_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2203      	movs	r2, #3
 8008926:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2200      	movs	r2, #0
 800892c:	705a      	strb	r2, [r3, #1]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2202      	movs	r2, #2
 8008932:	709a      	strb	r2, [r3, #2]
		pstate->cfg_timing_status = 0;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2200      	movs	r2, #0
 8008938:	70da      	strb	r2, [r3, #3]
 800893a:	e03e      	b.n	80089ba <VL53L1_update_ll_driver_cfg_state+0xbc>

		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	785b      	ldrb	r3, [r3, #1]
 8008940:	2bff      	cmp	r3, #255	@ 0xff
 8008942:	d103      	bne.n	800894c <VL53L1_update_ll_driver_cfg_state+0x4e>
			pstate->cfg_stream_count = 0x80;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2280      	movs	r2, #128	@ 0x80
 8008948:	705a      	strb	r2, [r3, #1]
 800894a:	e005      	b.n	8008958 <VL53L1_update_ll_driver_cfg_state+0x5a>
		} else {
			pstate->cfg_stream_count++;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	785b      	ldrb	r3, [r3, #1]
 8008950:	3301      	adds	r3, #1
 8008952:	b2da      	uxtb	r2, r3
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	705a      	strb	r2, [r3, #1]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	789b      	ldrb	r3, [r3, #2]
 800895c:	f083 0302 	eor.w	r3, r3, #2
 8008960:	b2da      	uxtb	r2, r3
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	709a      	strb	r2, [r3, #2]

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	2b03      	cmp	r3, #3
 800896c:	d002      	beq.n	8008974 <VL53L1_update_ll_driver_cfg_state+0x76>
 800896e:	2b04      	cmp	r3, #4
 8008970:	d00e      	beq.n	8008990 <VL53L1_update_ll_driver_cfg_state+0x92>
 8008972:	e015      	b.n	80089a0 <VL53L1_update_ll_driver_cfg_state+0xa2>

		case VL53L1_DEVICESTATE_SW_STANDBY:

			pstate->cfg_timing_status ^= 0x01;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	78db      	ldrb	r3, [r3, #3]
 8008978:	f083 0301 	eor.w	r3, r3, #1
 800897c:	b2da      	uxtb	r2, r3
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	70da      	strb	r2, [r3, #3]
			pstate->cfg_stream_count = 1;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2201      	movs	r2, #1
 8008986:	705a      	strb	r2, [r3, #1]

			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2204      	movs	r2, #4
 800898c:	701a      	strb	r2, [r3, #0]
		break;
 800898e:	e014      	b.n	80089ba <VL53L1_update_ll_driver_cfg_state+0xbc>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:

			pstate->cfg_timing_status ^= 0x01;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	78db      	ldrb	r3, [r3, #3]
 8008994:	f083 0301 	eor.w	r3, r3, #1
 8008998:	b2da      	uxtb	r2, r3
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	70da      	strb	r2, [r3, #3]

		break;
 800899e:	e00c      	b.n	80089ba <VL53L1_update_ll_driver_cfg_state+0xbc>

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2203      	movs	r2, #3
 80089a4:	701a      	strb	r2, [r3, #0]
			pstate->cfg_stream_count = 0;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2200      	movs	r2, #0
 80089aa:	705a      	strb	r2, [r3, #1]
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2202      	movs	r2, #2
 80089b0:	709a      	strb	r2, [r3, #2]
			pstate->cfg_timing_status = 0;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2200      	movs	r2, #0
 80089b6:	70da      	strb	r2, [r3, #3]

		break;
 80089b8:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 80089ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80089be:	4618      	mov	r0, r3
 80089c0:	371c      	adds	r7, #28
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr

080089ca <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 80089ca:	b480      	push	{r7}
 80089cc:	b083      	sub	sp, #12
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
 80089d2:	6039      	str	r1, [r7, #0]
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	7c1a      	ldrb	r2, [r3, #16]
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	3301      	adds	r3, #1
 80089e0:	687a      	ldr	r2, [r7, #4]
 80089e2:	7c52      	ldrb	r2, [r2, #17]
 80089e4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	3302      	adds	r3, #2
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	7c92      	ldrb	r2, [r2, #18]
 80089ee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	3303      	adds	r3, #3
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	7cd2      	ldrb	r2, [r2, #19]
 80089f8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	3304      	adds	r3, #4
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	7d12      	ldrb	r2, [r2, #20]
 8008a02:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	3305      	adds	r3, #5
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	7d52      	ldrb	r2, [r2, #21]
 8008a0c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	3306      	adds	r3, #6
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	7d92      	ldrb	r2, [r2, #22]
 8008a16:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	3307      	adds	r3, #7
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	7dd2      	ldrb	r2, [r2, #23]
 8008a20:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	3308      	adds	r3, #8
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	7e12      	ldrb	r2, [r2, #24]
 8008a2a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	3309      	adds	r3, #9
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	7e52      	ldrb	r2, [r2, #25]
 8008a34:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	330a      	adds	r3, #10
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	7e92      	ldrb	r2, [r2, #26]
 8008a3e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	330b      	adds	r3, #11
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	7ed2      	ldrb	r2, [r2, #27]
 8008a48:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	330c      	adds	r3, #12
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	7f12      	ldrb	r2, [r2, #28]
 8008a52:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	330d      	adds	r3, #13
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	7f52      	ldrb	r2, [r2, #29]
 8008a5c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	330e      	adds	r3, #14
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	7f92      	ldrb	r2, [r2, #30]
 8008a66:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	330f      	adds	r3, #15
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	7fd2      	ldrb	r2, [r2, #31]
 8008a70:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	3310      	adds	r3, #16
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	f892 2020 	ldrb.w	r2, [r2, #32]
 8008a7c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	3311      	adds	r3, #17
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	f892 2021 	ldrb.w	r2, [r2, #33]	@ 0x21
 8008a88:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	3312      	adds	r3, #18
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
 8008a94:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	3313      	adds	r3, #19
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 8008aa0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	3314      	adds	r3, #20
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8008aac:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	3315      	adds	r3, #21
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	f892 2025 	ldrb.w	r2, [r2, #37]	@ 0x25
 8008ab8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	3316      	adds	r3, #22
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	f892 2026 	ldrb.w	r2, [r2, #38]	@ 0x26
 8008ac4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	3317      	adds	r3, #23
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 8008ad0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	3318      	adds	r3, #24
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 8008adc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	3319      	adds	r3, #25
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	f892 2029 	ldrb.w	r2, [r2, #41]	@ 0x29
 8008ae8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	331a      	adds	r3, #26
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
 8008af4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	331b      	adds	r3, #27
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
 8008b00:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	331c      	adds	r3, #28
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8008b0c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	331d      	adds	r3, #29
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	f892 202d 	ldrb.w	r2, [r2, #45]	@ 0x2d
 8008b18:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	331e      	adds	r3, #30
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 8008b24:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	331f      	adds	r3, #31
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	f892 202f 	ldrb.w	r2, [r2, #47]	@ 0x2f
 8008b30:	701a      	strb	r2, [r3, #0]
}
 8008b32:	bf00      	nop
 8008b34:	370c      	adds	r7, #12
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr

08008b3e <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008b3e:	b480      	push	{r7}
 8008b40:	b085      	sub	sp, #20
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	4603      	mov	r3, r0
 8008b46:	603a      	str	r2, [r7, #0]
 8008b48:	80fb      	strh	r3, [r7, #6]
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a uint16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	81fb      	strh	r3, [r7, #14]
	uint16_t   data = 0;
 8008b52:	2300      	movs	r3, #0
 8008b54:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 8008b56:	88fb      	ldrh	r3, [r7, #6]
 8008b58:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	81fb      	strh	r3, [r7, #14]
 8008b5e:	e00e      	b.n	8008b7e <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8008b60:	88ba      	ldrh	r2, [r7, #4]
 8008b62:	89fb      	ldrh	r3, [r7, #14]
 8008b64:	1ad3      	subs	r3, r2, r3
 8008b66:	3b01      	subs	r3, #1
 8008b68:	683a      	ldr	r2, [r7, #0]
 8008b6a:	4413      	add	r3, r2
 8008b6c:	89ba      	ldrh	r2, [r7, #12]
 8008b6e:	b2d2      	uxtb	r2, r2
 8008b70:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 8008b72:	89bb      	ldrh	r3, [r7, #12]
 8008b74:	0a1b      	lsrs	r3, r3, #8
 8008b76:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 8008b78:	89fb      	ldrh	r3, [r7, #14]
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	81fb      	strh	r3, [r7, #14]
 8008b7e:	89fa      	ldrh	r2, [r7, #14]
 8008b80:	88bb      	ldrh	r3, [r7, #4]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d3ec      	bcc.n	8008b60 <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 8008b86:	bf00      	nop
 8008b88:	bf00      	nop
 8008b8a:	3714      	adds	r7, #20
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b085      	sub	sp, #20
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	6039      	str	r1, [r7, #0]
 8008b9e:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0) {
 8008ba4:	e00b      	b.n	8008bbe <VL53L1_i2c_decode_uint16_t+0x2a>
		value = (value << 8) | (uint16_t)*pbuffer++;
 8008ba6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008baa:	021b      	lsls	r3, r3, #8
 8008bac:	b21a      	sxth	r2, r3
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	1c59      	adds	r1, r3, #1
 8008bb2:	6039      	str	r1, [r7, #0]
 8008bb4:	781b      	ldrb	r3, [r3, #0]
 8008bb6:	b21b      	sxth	r3, r3
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	b21b      	sxth	r3, r3
 8008bbc:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 8008bbe:	88fb      	ldrh	r3, [r7, #6]
 8008bc0:	1e5a      	subs	r2, r3, #1
 8008bc2:	80fa      	strh	r2, [r7, #6]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d1ee      	bne.n	8008ba6 <VL53L1_i2c_decode_uint16_t+0x12>
	}

	return value;
 8008bc8:	89fb      	ldrh	r3, [r7, #14]
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3714      	adds	r7, #20
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr

08008bd6 <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008bd6:	b480      	push	{r7}
 8008bd8:	b085      	sub	sp, #20
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	4603      	mov	r3, r0
 8008bde:	603a      	str	r2, [r7, #0]
 8008be0:	80fb      	strh	r3, [r7, #6]
 8008be2:	460b      	mov	r3, r1
 8008be4:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a int16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 8008be6:	2300      	movs	r3, #0
 8008be8:	81fb      	strh	r3, [r7, #14]
	int16_t    data = 0;
 8008bea:	2300      	movs	r3, #0
 8008bec:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 8008bee:	88fb      	ldrh	r3, [r7, #6]
 8008bf0:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	81fb      	strh	r3, [r7, #14]
 8008bf6:	e00f      	b.n	8008c18 <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8008bf8:	88ba      	ldrh	r2, [r7, #4]
 8008bfa:	89fb      	ldrh	r3, [r7, #14]
 8008bfc:	1ad3      	subs	r3, r2, r3
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	683a      	ldr	r2, [r7, #0]
 8008c02:	4413      	add	r3, r2
 8008c04:	89ba      	ldrh	r2, [r7, #12]
 8008c06:	b2d2      	uxtb	r2, r2
 8008c08:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 8008c0a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008c0e:	121b      	asrs	r3, r3, #8
 8008c10:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 8008c12:	89fb      	ldrh	r3, [r7, #14]
 8008c14:	3301      	adds	r3, #1
 8008c16:	81fb      	strh	r3, [r7, #14]
 8008c18:	89fa      	ldrh	r2, [r7, #14]
 8008c1a:	88bb      	ldrh	r3, [r7, #4]
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d3eb      	bcc.n	8008bf8 <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 8008c20:	bf00      	nop
 8008c22:	bf00      	nop
 8008c24:	3714      	adds	r7, #20
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr

08008c2e <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008c2e:	b480      	push	{r7}
 8008c30:	b085      	sub	sp, #20
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	4603      	mov	r3, r0
 8008c36:	6039      	str	r1, [r7, #0]
 8008c38:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int16_t    value = 0x00;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	81fb      	strh	r3, [r7, #14]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	b25b      	sxtb	r3, r3
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	da0d      	bge.n	8008c64 <VL53L1_i2c_decode_int16_t+0x36>
		value = 0xFFFF;
 8008c48:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008c4c:	81fb      	strh	r3, [r7, #14]
	}

	while (count-- > 0) {
 8008c4e:	e009      	b.n	8008c64 <VL53L1_i2c_decode_int16_t+0x36>
		value = (value << 8) | (int16_t)*pbuffer++;
 8008c50:	89fb      	ldrh	r3, [r7, #14]
 8008c52:	021b      	lsls	r3, r3, #8
 8008c54:	b21a      	sxth	r2, r3
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	1c59      	adds	r1, r3, #1
 8008c5a:	6039      	str	r1, [r7, #0]
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	b21b      	sxth	r3, r3
 8008c60:	4313      	orrs	r3, r2
 8008c62:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 8008c64:	88fb      	ldrh	r3, [r7, #6]
 8008c66:	1e5a      	subs	r2, r3, #1
 8008c68:	80fa      	strh	r2, [r7, #6]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d1f0      	bne.n	8008c50 <VL53L1_i2c_decode_int16_t+0x22>
	}

	return value;
 8008c6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3714      	adds	r7, #20
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr

08008c7e <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008c7e:	b480      	push	{r7}
 8008c80:	b087      	sub	sp, #28
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	60f8      	str	r0, [r7, #12]
 8008c86:	460b      	mov	r3, r1
 8008c88:	607a      	str	r2, [r7, #4]
 8008c8a:	817b      	strh	r3, [r7, #10]
	/*
	 * Encodes a uint32_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	82fb      	strh	r3, [r7, #22]
	uint32_t   data = 0;
 8008c90:	2300      	movs	r3, #0
 8008c92:	613b      	str	r3, [r7, #16]

	data =  ip_value;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count ; i++) {
 8008c98:	2300      	movs	r3, #0
 8008c9a:	82fb      	strh	r3, [r7, #22]
 8008c9c:	e00e      	b.n	8008cbc <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8008c9e:	897a      	ldrh	r2, [r7, #10]
 8008ca0:	8afb      	ldrh	r3, [r7, #22]
 8008ca2:	1ad3      	subs	r3, r2, r3
 8008ca4:	3b01      	subs	r3, #1
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	4413      	add	r3, r2
 8008caa:	693a      	ldr	r2, [r7, #16]
 8008cac:	b2d2      	uxtb	r2, r2
 8008cae:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	0a1b      	lsrs	r3, r3, #8
 8008cb4:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count ; i++) {
 8008cb6:	8afb      	ldrh	r3, [r7, #22]
 8008cb8:	3301      	adds	r3, #1
 8008cba:	82fb      	strh	r3, [r7, #22]
 8008cbc:	8afa      	ldrh	r2, [r7, #22]
 8008cbe:	897b      	ldrh	r3, [r7, #10]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d3ec      	bcc.n	8008c9e <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 8008cc4:	bf00      	nop
 8008cc6:	bf00      	nop
 8008cc8:	371c      	adds	r7, #28
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr

08008cd2 <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008cd2:	b480      	push	{r7}
 8008cd4:	b085      	sub	sp, #20
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	4603      	mov	r3, r0
 8008cda:	6039      	str	r1, [r7, #0]
 8008cdc:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t   value = 0x00;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	60fb      	str	r3, [r7, #12]

	while (count-- > 0) {
 8008ce2:	e007      	b.n	8008cf4 <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	021a      	lsls	r2, r3, #8
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	1c59      	adds	r1, r3, #1
 8008cec:	6039      	str	r1, [r7, #0]
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 8008cf4:	88fb      	ldrh	r3, [r7, #6]
 8008cf6:	1e5a      	subs	r2, r3, #1
 8008cf8:	80fa      	strh	r2, [r7, #6]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d1f2      	bne.n	8008ce4 <VL53L1_i2c_decode_uint32_t+0x12>
	}

	return value;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3714      	adds	r7, #20
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr

08008d0c <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b085      	sub	sp, #20
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	4603      	mov	r3, r0
 8008d14:	6039      	str	r1, [r7, #0]
 8008d16:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int32_t    value = 0x00;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	60fb      	str	r3, [r7, #12]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	781b      	ldrb	r3, [r3, #0]
 8008d20:	b25b      	sxtb	r3, r3
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	da0b      	bge.n	8008d3e <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 8008d26:	f04f 33ff 	mov.w	r3, #4294967295
 8008d2a:	60fb      	str	r3, [r7, #12]
	}

	while (count-- > 0) {
 8008d2c:	e007      	b.n	8008d3e <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	021a      	lsls	r2, r3, #8
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	1c59      	adds	r1, r3, #1
 8008d36:	6039      	str	r1, [r7, #0]
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 8008d3e:	88fb      	ldrh	r3, [r7, #6]
 8008d40:	1e5a      	subs	r2, r3, #1
 8008d42:	80fa      	strh	r2, [r7, #6]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d1f2      	bne.n	8008d2e <VL53L1_i2c_decode_int32_t+0x22>
	}

	return value;
 8008d48:	68fb      	ldr	r3, [r7, #12]
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3714      	adds	r7, #20
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr

08008d56 <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b086      	sub	sp, #24
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	460a      	mov	r2, r1
 8008d60:	80fb      	strh	r3, [r7, #6]
 8008d62:	4613      	mov	r3, r2
 8008d64:	717b      	strb	r3, [r7, #5]
	 *
	 * Macro period fixed point format = unsigned 12.12
	 * Maximum supported macro period  = 4095.9999 us
	 */

	uint32_t  pll_period_us        = 0;
 8008d66:	2300      	movs	r3, #0
 8008d68:	617b      	str	r3, [r7, #20]
	uint8_t   vcsel_period_pclks   = 0;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	60fb      	str	r3, [r7, #12]

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 8008d72:	88fb      	ldrh	r3, [r7, #6]
 8008d74:	4618      	mov	r0, r3
 8008d76:	f000 fb75 	bl	8009464 <VL53L1_calc_pll_period_us>
 8008d7a:	6178      	str	r0, [r7, #20]

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 8008d7c:	797b      	ldrb	r3, [r7, #5]
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f000 fb84 	bl	800948c <VL53L1_decode_vcsel_period>
 8008d84:	4603      	mov	r3, r0
 8008d86:	74fb      	strb	r3, [r7, #19]
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 8008d88:	697a      	ldr	r2, [r7, #20]
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	00db      	lsls	r3, r3, #3
 8008d8e:	4413      	add	r3, r2
 8008d90:	021b      	lsls	r3, r3, #8
 8008d92:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	099b      	lsrs	r3, r3, #6
 8008d98:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 8008d9a:	7cfa      	ldrb	r2, [r7, #19]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	fb02 f303 	mul.w	r3, r2, r3
 8008da2:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	099b      	lsrs	r3, r3, #6
 8008da8:	60fb      	str	r3, [r7, #12]
			macro_period_us);
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
 8008daa:	68fb      	ldr	r3, [r7, #12]
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3718      	adds	r7, #24
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b089      	sub	sp, #36	@ 0x24
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	4608      	mov	r0, r1
 8008dbe:	4611      	mov	r1, r2
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	817b      	strh	r3, [r7, #10]
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	813b      	strh	r3, [r7, #8]
 8008dca:	4613      	mov	r3, r2
 8008dcc:	71fb      	strb	r3, [r7, #7]
	 * Range ignore threshold rate is then multiplied by user input
	 * rate_mult (in 3.5 fractional format)
	 *
	 */

	int32_t    range_ignore_thresh_int  = 0;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 8008dde:	2300      	movs	r3, #0
 8008de0:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	011b      	lsls	r3, r3, #4
 8008de6:	4a23      	ldr	r2, [pc, #140]	@ (8008e74 <VL53L1_calc_range_ignore_threshold+0xc0>)
 8008de8:	fb82 1203 	smull	r1, r2, r2, r3
 8008dec:	1192      	asrs	r2, r2, #6
 8008dee:	17db      	asrs	r3, r3, #31
 8008df0:	1ad3      	subs	r3, r2, r3
 8008df2:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0) {
 8008df4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	da03      	bge.n	8008e04 <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 8008dfc:	897b      	ldrh	r3, [r7, #10]
 8008dfe:	425b      	negs	r3, r3
 8008e00:	b29b      	uxth	r3, r3
 8008e02:	83bb      	strh	r3, [r7, #28]
	}

	if (y_gradient < 0) {
 8008e04:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	da03      	bge.n	8008e14 <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 8008e0c:	893b      	ldrh	r3, [r7, #8]
 8008e0e:	425b      	negs	r3, r3
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	837b      	strh	r3, [r7, #26]

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 8008e14:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8008e18:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8008e1c:	4413      	add	r3, r2
 8008e1e:	015b      	lsls	r3, r3, #5
 8008e20:	617b      	str	r3, [r7, #20]

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	4a13      	ldr	r2, [pc, #76]	@ (8008e74 <VL53L1_calc_range_ignore_threshold+0xc0>)
 8008e26:	fb82 1203 	smull	r1, r2, r2, r3
 8008e2a:	1192      	asrs	r2, r2, #6
 8008e2c:	17db      	asrs	r3, r3, #31
 8008e2e:	1ad3      	subs	r3, r2, r3
 8008e30:	617b      	str	r3, [r7, #20]

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 8008e32:	697a      	ldr	r2, [r7, #20]
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	4413      	add	r3, r2
 8008e38:	617b      	str	r3, [r7, #20]

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 8008e3a:	79fa      	ldrb	r2, [r7, #7]
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	fb02 f303 	mul.w	r3, r2, r3
 8008e42:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	3310      	adds	r3, #16
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	da00      	bge.n	8008e4e <VL53L1_calc_range_ignore_threshold+0x9a>
 8008e4c:	331f      	adds	r3, #31
 8008e4e:	115b      	asrs	r3, r3, #5
 8008e50:	617b      	str	r3, [r7, #20]

	/* Finally clip and output in correct format */

	if (range_ignore_thresh_int > 0xFFFF) {
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e58:	db03      	blt.n	8008e62 <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 8008e5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008e5e:	83fb      	strh	r3, [r7, #30]
 8008e60:	e001      	b.n	8008e66 <VL53L1_calc_range_ignore_threshold+0xb2>
	} else {
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	83fb      	strh	r3, [r7, #30]
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 8008e66:	8bfb      	ldrh	r3, [r7, #30]
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3724      	adds	r7, #36	@ 0x24
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr
 8008e74:	10624dd3 	.word	0x10624dd3

08008e78 <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b085      	sub	sp, #20
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 8008e82:	2300      	movs	r3, #0
 8008e84:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	031a      	lsls	r2, r3, #12
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	085b      	lsrs	r3, r3, #1
 8008e8e:	441a      	add	r2, r3
	timeout_mclks   =
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e96:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 8008e98:	68fb      	ldr	r3, [r7, #12]
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3714      	adds	r7, #20
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr

08008ea6 <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b084      	sub	sp, #16
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
 8008eae:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 8008eb8:	6839      	ldr	r1, [r7, #0]
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f7ff ffdc 	bl	8008e78 <VL53L1_calc_timeout_mclks>
 8008ec0:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 8008ec2:	68f8      	ldr	r0, [r7, #12]
 8008ec4:	f000 f860 	bl	8008f88 <VL53L1_encode_timeout>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	817b      	strh	r3, [r7, #10]
			timeout_encoded, timeout_encoded);
#endif

	LOG_FUNCTION_END(0);

	return timeout_encoded;
 8008ecc:	897b      	ldrh	r3, [r7, #10]
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3710      	adds	r7, #16
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}

08008ed6 <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 8008ed6:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008eda:	b087      	sub	sp, #28
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_us     = 0;
 8008ee2:	2100      	movs	r1, #0
 8008ee4:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 8008ee6:	f04f 0000 	mov.w	r0, #0
 8008eea:	f04f 0100 	mov.w	r1, #0
 8008eee:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 8008ef2:	6879      	ldr	r1, [r7, #4]
 8008ef4:	2000      	movs	r0, #0
 8008ef6:	4688      	mov	r8, r1
 8008ef8:	4681      	mov	r9, r0
 8008efa:	6839      	ldr	r1, [r7, #0]
 8008efc:	2000      	movs	r0, #0
 8008efe:	460c      	mov	r4, r1
 8008f00:	4605      	mov	r5, r0
 8008f02:	fb04 f009 	mul.w	r0, r4, r9
 8008f06:	fb08 f105 	mul.w	r1, r8, r5
 8008f0a:	4401      	add	r1, r0
 8008f0c:	fba8 2304 	umull	r2, r3, r8, r4
 8008f10:	4419      	add	r1, r3
 8008f12:	460b      	mov	r3, r1
 8008f14:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008f18:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 8008f1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008f20:	f512 6a00 	adds.w	sl, r2, #2048	@ 0x800
 8008f24:	f143 0b00 	adc.w	fp, r3, #0
 8008f28:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 8008f2c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008f30:	f04f 0200 	mov.w	r2, #0
 8008f34:	f04f 0300 	mov.w	r3, #0
 8008f38:	0b02      	lsrs	r2, r0, #12
 8008f3a:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8008f3e:	0b0b      	lsrs	r3, r1, #12
 8008f40:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	617b      	str	r3, [r7, #20]
			timeout_us, timeout_us);
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
 8008f48:	697b      	ldr	r3, [r7, #20]
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	371c      	adds	r7, #28
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008f54:	4770      	bx	lr

08008f56 <VL53L1_calc_decoded_timeout_us>:
}

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b084      	sub	sp, #16
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	6039      	str	r1, [r7, #0]
 8008f60:	80fb      	strh	r3, [r7, #6]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks  = 0;
 8008f62:	2300      	movs	r3, #0
 8008f64:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 8008f66:	2300      	movs	r3, #0
 8008f68:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 8008f6a:	88fb      	ldrh	r3, [r7, #6]
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f000 f835 	bl	8008fdc <VL53L1_decode_timeout>
 8008f72:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 8008f74:	6839      	ldr	r1, [r7, #0]
 8008f76:	68f8      	ldr	r0, [r7, #12]
 8008f78:	f7ff ffad 	bl	8008ed6 <VL53L1_calc_timeout_us>
 8008f7c:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 8008f7e:	68bb      	ldr	r3, [r7, #8]
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3710      	adds	r7, #16
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b087      	sub	sp, #28
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
	/*
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8008f90:	2300      	movs	r3, #0
 8008f92:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8008f94:	2300      	movs	r3, #0
 8008f96:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d015      	beq.n	8008fce <VL53L1_encode_timeout+0x46>
		ls_byte = timeout_mclks - 1;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	3b01      	subs	r3, #1
 8008fa6:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008fa8:	e005      	b.n	8008fb6 <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	085b      	lsrs	r3, r3, #1
 8008fae:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8008fb0:	89fb      	ldrh	r3, [r7, #14]
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	2bff      	cmp	r3, #255	@ 0xff
 8008fba:	d8f6      	bhi.n	8008faa <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8008fbc:	89fb      	ldrh	r3, [r7, #14]
 8008fbe:	021b      	lsls	r3, r3, #8
 8008fc0:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	b2db      	uxtb	r3, r3
 8008fc8:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8008fca:	4413      	add	r3, r2
 8008fcc:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8008fce:	8afb      	ldrh	r3, [r7, #22]
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	371c      	adds	r7, #28
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b085      	sub	sp, #20
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decode 16-bit timeout register value
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8008fea:	88fb      	ldrh	r3, [r7, #6]
 8008fec:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8008fee:	88fa      	ldrh	r2, [r7, #6]
 8008ff0:	0a12      	lsrs	r2, r2, #8
 8008ff2:	b292      	uxth	r2, r2
 8008ff4:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3714      	adds	r7, #20
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b088      	sub	sp, #32
 800900c:	af00      	add	r7, sp, #0
 800900e:	60f8      	str	r0, [r7, #12]
 8009010:	60b9      	str	r1, [r7, #8]
 8009012:	607a      	str	r2, [r7, #4]
 8009014:	807b      	strh	r3, [r7, #2]
	 * into the appropriate register values
	 *
	 * Must also be run after the VCSEL period settings are changed
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8009016:	2300      	movs	r3, #0
 8009018:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 800901a:	2300      	movs	r3, #0
 800901c:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 800901e:	2300      	movs	r3, #0
 8009020:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 8009022:	2300      	movs	r3, #0
 8009024:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 8009026:	887b      	ldrh	r3, [r7, #2]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d102      	bne.n	8009032 <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800902c:	23f1      	movs	r3, #241	@ 0xf1
 800902e:	77fb      	strb	r3, [r7, #31]
 8009030:	e05d      	b.n	80090ee <VL53L1_calc_timeout_register_values+0xe6>
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 8009032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009034:	799a      	ldrb	r2, [r3, #6]
 8009036:	887b      	ldrh	r3, [r7, #2]
 8009038:	4611      	mov	r1, r2
 800903a:	4618      	mov	r0, r3
 800903c:	f7ff fe8b 	bl	8008d56 <VL53L1_calc_macro_period_us>
 8009040:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);

		/*  Update Phase timeout - uses Timing A */
		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 8009042:	6979      	ldr	r1, [r7, #20]
 8009044:	68f8      	ldr	r0, [r7, #12]
 8009046:	f7ff ff17 	bl	8008e78 <VL53L1_calc_timeout_mclks>
 800904a:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);

		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
 800904c:	69bb      	ldr	r3, [r7, #24]
 800904e:	2bff      	cmp	r3, #255	@ 0xff
 8009050:	d901      	bls.n	8009056 <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 8009052:	23ff      	movs	r3, #255	@ 0xff
 8009054:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 8009056:	69bb      	ldr	r3, [r7, #24]
 8009058:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 800905a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800905c:	71da      	strb	r2, [r3, #7]

		/*  Update MM Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800905e:	6979      	ldr	r1, [r7, #20]
 8009060:	68b8      	ldr	r0, [r7, #8]
 8009062:	f7ff ff20 	bl	8008ea6 <VL53L1_calc_encoded_timeout>
 8009066:	4603      	mov	r3, r0
 8009068:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800906a:	8a7b      	ldrh	r3, [r7, #18]
 800906c:	0a1b      	lsrs	r3, r3, #8
 800906e:	b29b      	uxth	r3, r3
 8009070:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 8009072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009074:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8009076:	8a7b      	ldrh	r3, [r7, #18]
 8009078:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 800907a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800907c:	705a      	strb	r2, [r3, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800907e:	6979      	ldr	r1, [r7, #20]
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f7ff ff10 	bl	8008ea6 <VL53L1_calc_encoded_timeout>
 8009086:	4603      	mov	r3, r0
 8009088:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800908a:	8a7b      	ldrh	r3, [r7, #18]
 800908c:	0a1b      	lsrs	r3, r3, #8
 800908e:	b29b      	uxth	r3, r3
 8009090:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 8009092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009094:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8009096:	8a7b      	ldrh	r3, [r7, #18]
 8009098:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 800909a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800909c:	715a      	strb	r2, [r3, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800909e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090a0:	7a5a      	ldrb	r2, [r3, #9]
 80090a2:	887b      	ldrh	r3, [r7, #2]
 80090a4:	4611      	mov	r1, r2
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7ff fe55 	bl	8008d56 <VL53L1_calc_macro_period_us>
 80090ac:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 80090ae:	6979      	ldr	r1, [r7, #20]
 80090b0:	68b8      	ldr	r0, [r7, #8]
 80090b2:	f7ff fef8 	bl	8008ea6 <VL53L1_calc_encoded_timeout>
 80090b6:	4603      	mov	r3, r0
 80090b8:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80090ba:	8a7b      	ldrh	r3, [r7, #18]
 80090bc:	0a1b      	lsrs	r3, r3, #8
 80090be:	b29b      	uxth	r3, r3
 80090c0:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 80090c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090c4:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 80090c6:	8a7b      	ldrh	r3, [r7, #18]
 80090c8:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 80090ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090cc:	70da      	strb	r2, [r3, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 80090ce:	6979      	ldr	r1, [r7, #20]
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f7ff fee8 	bl	8008ea6 <VL53L1_calc_encoded_timeout>
 80090d6:	4603      	mov	r3, r0
 80090d8:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80090da:	8a7b      	ldrh	r3, [r7, #18]
 80090dc:	0a1b      	lsrs	r3, r3, #8
 80090de:	b29b      	uxth	r3, r3
 80090e0:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 80090e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090e4:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 80090e6:	8a7b      	ldrh	r3, [r7, #18]
 80090e8:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 80090ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090ec:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 80090ee:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3720      	adds	r7, #32
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}

080090fa <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 80090fa:	b480      	push	{r7}
 80090fc:	b083      	sub	sp, #12
 80090fe:	af00      	add	r7, sp, #0
 8009100:	4603      	mov	r3, r0
 8009102:	603a      	str	r2, [r7, #0]
 8009104:	71fb      	strb	r3, [r7, #7]
 8009106:	460b      	mov	r3, r1
 8009108:	71bb      	strb	r3, [r7, #6]
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 800910a:	79fb      	ldrb	r3, [r7, #7]
 800910c:	2b07      	cmp	r3, #7
 800910e:	d90a      	bls.n	8009126 <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 8009110:	79bb      	ldrb	r3, [r7, #6]
 8009112:	00db      	lsls	r3, r3, #3
 8009114:	b2da      	uxtb	r2, r3
 8009116:	79fb      	ldrb	r3, [r7, #7]
 8009118:	1ad3      	subs	r3, r2, r3
 800911a:	b2db      	uxtb	r3, r3
 800911c:	3b71      	subs	r3, #113	@ 0x71
 800911e:	b2da      	uxtb	r2, r3
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	701a      	strb	r2, [r3, #0]
	} else {
		*pspad_number = ((15-col) << 3) + row;
	}
}
 8009124:	e00a      	b.n	800913c <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 8009126:	79bb      	ldrb	r3, [r7, #6]
 8009128:	f1c3 030f 	rsb	r3, r3, #15
 800912c:	b2db      	uxtb	r3, r3
 800912e:	00db      	lsls	r3, r3, #3
 8009130:	b2da      	uxtb	r2, r3
 8009132:	79fb      	ldrb	r3, [r7, #7]
 8009134:	4413      	add	r3, r2
 8009136:	b2da      	uxtb	r2, r3
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	701a      	strb	r2, [r3, #0]
}
 800913c:	bf00      	nop
 800913e:	370c      	adds	r7, #12
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr

08009148 <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 8009148:	b480      	push	{r7}
 800914a:	b085      	sub	sp, #20
 800914c:	af00      	add	r7, sp, #0
 800914e:	4603      	mov	r3, r0
 8009150:	60b9      	str	r1, [r7, #8]
 8009152:	607a      	str	r2, [r7, #4]
 8009154:	73fb      	strb	r3, [r7, #15]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 8009156:	7bfb      	ldrb	r3, [r7, #15]
 8009158:	091b      	lsrs	r3, r3, #4
 800915a:	b2da      	uxtb	r2, r3
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 8009160:	7bfb      	ldrb	r3, [r7, #15]
 8009162:	f003 030f 	and.w	r3, r3, #15
 8009166:	b2da      	uxtb	r2, r3
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	701a      	strb	r2, [r3, #0]

}
 800916c:	bf00      	nop
 800916e:	3714      	adds	r7, #20
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 8009178:	b480      	push	{r7}
 800917a:	b083      	sub	sp, #12
 800917c:	af00      	add	r7, sp, #0
 800917e:	4603      	mov	r3, r0
 8009180:	603a      	str	r2, [r7, #0]
 8009182:	71fb      	strb	r3, [r7, #7]
 8009184:	460b      	mov	r3, r1
 8009186:	71bb      	strb	r3, [r7, #6]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 8009188:	79bb      	ldrb	r3, [r7, #6]
 800918a:	011b      	lsls	r3, r3, #4
 800918c:	b2da      	uxtb	r2, r3
 800918e:	79fb      	ldrb	r3, [r7, #7]
 8009190:	4413      	add	r3, r2
 8009192:	b2da      	uxtb	r2, r3
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	701a      	strb	r2, [r3, #0]

}
 8009198:	bf00      	nop
 800919a:	370c      	adds	r7, #12
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <VL53L1_encode_GPIO_interrupt_config>:
 * Encodes VL53L1_GPIO_interrupt_config_t structure to FW register format
 */

uint8_t	VL53L1_encode_GPIO_interrupt_config(
	VL53L1_GPIO_interrupt_config_t	*pintconf)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b085      	sub	sp, #20
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
	uint8_t system__interrupt_config;

	system__interrupt_config = pintconf->intr_mode_distance;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	781b      	ldrb	r3, [r3, #0]
 80091b0:	73fb      	strb	r3, [r7, #15]
	system__interrupt_config |= ((pintconf->intr_mode_rate) << 2);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	785b      	ldrb	r3, [r3, #1]
 80091b6:	b25b      	sxtb	r3, r3
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	b25a      	sxtb	r2, r3
 80091bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091c0:	4313      	orrs	r3, r2
 80091c2:	b25b      	sxtb	r3, r3
 80091c4:	73fb      	strb	r3, [r7, #15]
	system__interrupt_config |= ((pintconf->intr_new_measure_ready) << 5);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	789b      	ldrb	r3, [r3, #2]
 80091ca:	b25b      	sxtb	r3, r3
 80091cc:	015b      	lsls	r3, r3, #5
 80091ce:	b25a      	sxtb	r2, r3
 80091d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091d4:	4313      	orrs	r3, r2
 80091d6:	b25b      	sxtb	r3, r3
 80091d8:	73fb      	strb	r3, [r7, #15]
	system__interrupt_config |= ((pintconf->intr_no_target) << 6);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	78db      	ldrb	r3, [r3, #3]
 80091de:	b25b      	sxtb	r3, r3
 80091e0:	019b      	lsls	r3, r3, #6
 80091e2:	b25a      	sxtb	r2, r3
 80091e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091e8:	4313      	orrs	r3, r2
 80091ea:	b25b      	sxtb	r3, r3
 80091ec:	73fb      	strb	r3, [r7, #15]
	system__interrupt_config |= ((pintconf->intr_combined_mode) << 7);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	791b      	ldrb	r3, [r3, #4]
 80091f2:	b25b      	sxtb	r3, r3
 80091f4:	01db      	lsls	r3, r3, #7
 80091f6:	b25a      	sxtb	r2, r3
 80091f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091fc:	4313      	orrs	r3, r2
 80091fe:	b25b      	sxtb	r3, r3
 8009200:	73fb      	strb	r3, [r7, #15]

	return system__interrupt_config;
 8009202:	7bfb      	ldrb	r3, [r7, #15]
}
 8009204:	4618      	mov	r0, r3
 8009206:	3714      	adds	r7, #20
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <VL53L1_decode_GPIO_interrupt_config>:
 * Decodes FW register to VL53L1_GPIO_interrupt_config_t structure
 */

VL53L1_GPIO_interrupt_config_t VL53L1_decode_GPIO_interrupt_config(
	uint8_t		system__interrupt_config)
{
 8009210:	b490      	push	{r4, r7}
 8009212:	b086      	sub	sp, #24
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	460b      	mov	r3, r1
 800921a:	70fb      	strb	r3, [r7, #3]
	VL53L1_GPIO_interrupt_config_t	intconf;

	intconf.intr_mode_distance = system__interrupt_config & 0x03;
 800921c:	78fb      	ldrb	r3, [r7, #3]
 800921e:	f003 0303 	and.w	r3, r3, #3
 8009222:	b2db      	uxtb	r3, r3
 8009224:	723b      	strb	r3, [r7, #8]
	intconf.intr_mode_rate = (system__interrupt_config >> 2) & 0x03;
 8009226:	78fb      	ldrb	r3, [r7, #3]
 8009228:	089b      	lsrs	r3, r3, #2
 800922a:	b2db      	uxtb	r3, r3
 800922c:	f003 0303 	and.w	r3, r3, #3
 8009230:	b2db      	uxtb	r3, r3
 8009232:	727b      	strb	r3, [r7, #9]
	intconf.intr_new_measure_ready = (system__interrupt_config >> 5) & 0x01;
 8009234:	78fb      	ldrb	r3, [r7, #3]
 8009236:	095b      	lsrs	r3, r3, #5
 8009238:	b2db      	uxtb	r3, r3
 800923a:	f003 0301 	and.w	r3, r3, #1
 800923e:	b2db      	uxtb	r3, r3
 8009240:	72bb      	strb	r3, [r7, #10]
	intconf.intr_no_target = (system__interrupt_config >> 6) & 0x01;
 8009242:	78fb      	ldrb	r3, [r7, #3]
 8009244:	099b      	lsrs	r3, r3, #6
 8009246:	b2db      	uxtb	r3, r3
 8009248:	f003 0301 	and.w	r3, r3, #1
 800924c:	b2db      	uxtb	r3, r3
 800924e:	72fb      	strb	r3, [r7, #11]
	intconf.intr_combined_mode = (system__interrupt_config >> 7) & 0x01;
 8009250:	78fb      	ldrb	r3, [r7, #3]
 8009252:	09db      	lsrs	r3, r3, #7
 8009254:	b2db      	uxtb	r3, r3
 8009256:	733b      	strb	r3, [r7, #12]

	/* set some default values */
	intconf.threshold_rate_low = 0;
 8009258:	2300      	movs	r3, #0
 800925a:	82bb      	strh	r3, [r7, #20]
	intconf.threshold_rate_high = 0;
 800925c:	2300      	movs	r3, #0
 800925e:	827b      	strh	r3, [r7, #18]
	intconf.threshold_distance_low = 0;
 8009260:	2300      	movs	r3, #0
 8009262:	823b      	strh	r3, [r7, #16]
	intconf.threshold_distance_high = 0;
 8009264:	2300      	movs	r3, #0
 8009266:	81fb      	strh	r3, [r7, #14]

	return intconf;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	461c      	mov	r4, r3
 800926c:	f107 0308 	add.w	r3, r7, #8
 8009270:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009272:	6020      	str	r0, [r4, #0]
 8009274:	6061      	str	r1, [r4, #4]
 8009276:	60a2      	str	r2, [r4, #8]
 8009278:	881b      	ldrh	r3, [r3, #0]
 800927a:	81a3      	strh	r3, [r4, #12]
}
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	3718      	adds	r7, #24
 8009280:	46bd      	mov	sp, r7
 8009282:	bc90      	pop	{r4, r7}
 8009284:	4770      	bx	lr

08009286 <VL53L1_set_GPIO_distance_threshold>:

VL53L1_Error VL53L1_set_GPIO_distance_threshold(
	VL53L1_DEV                      Dev,
	uint16_t			threshold_high,
	uint16_t			threshold_low)
{
 8009286:	b480      	push	{r7}
 8009288:	b085      	sub	sp, #20
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
 800928e:	460b      	mov	r3, r1
 8009290:	807b      	strh	r3, [r7, #2]
 8009292:	4613      	mov	r3, r2
 8009294:	803b      	strh	r3, [r7, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009296:	2300      	movs	r3, #0
 8009298:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->dyn_cfg.system__thresh_high = threshold_high;
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	887a      	ldrh	r2, [r7, #2]
 80092a2:	f8a3 21b6 	strh.w	r2, [r3, #438]	@ 0x1b6
	pdev->dyn_cfg.system__thresh_low = threshold_low;
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	883a      	ldrh	r2, [r7, #0]
 80092aa:	f8a3 21b8 	strh.w	r2, [r3, #440]	@ 0x1b8

	LOG_FUNCTION_END(status);
	return status;
 80092ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3714      	adds	r7, #20
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr

080092be <VL53L1_set_GPIO_rate_threshold>:

VL53L1_Error VL53L1_set_GPIO_rate_threshold(
	VL53L1_DEV                      Dev,
	uint16_t			threshold_high,
	uint16_t			threshold_low)
{
 80092be:	b480      	push	{r7}
 80092c0:	b085      	sub	sp, #20
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	6078      	str	r0, [r7, #4]
 80092c6:	460b      	mov	r3, r1
 80092c8:	807b      	strh	r3, [r7, #2]
 80092ca:	4613      	mov	r3, r2
 80092cc:	803b      	strh	r3, [r7, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80092ce:	2300      	movs	r3, #0
 80092d0:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->gen_cfg.system__thresh_rate_high = threshold_high;
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	887a      	ldrh	r2, [r7, #2]
 80092da:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190
	pdev->gen_cfg.system__thresh_rate_low = threshold_low;
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	883a      	ldrh	r2, [r7, #0]
 80092e2:	f8a3 2192 	strh.w	r2, [r3, #402]	@ 0x192

	LOG_FUNCTION_END(status);
	return status;
 80092e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3714      	adds	r7, #20
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr

080092f6 <VL53L1_set_GPIO_thresholds_from_struct>:
 */

VL53L1_Error VL53L1_set_GPIO_thresholds_from_struct(
	VL53L1_DEV                      Dev,
	VL53L1_GPIO_interrupt_config_t *pintconf)
{
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b084      	sub	sp, #16
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
 80092fe:	6039      	str	r1, [r7, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009300:	2300      	movs	r3, #0
 8009302:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_GPIO_distance_threshold(
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	88d9      	ldrh	r1, [r3, #6]
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	891b      	ldrh	r3, [r3, #8]
 800930c:	461a      	mov	r2, r3
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f7ff ffb9 	bl	8009286 <VL53L1_set_GPIO_distance_threshold>
 8009314:	4603      	mov	r3, r0
 8009316:	73fb      	strb	r3, [r7, #15]
			Dev,
			pintconf->threshold_distance_high,
			pintconf->threshold_distance_low);

	if (status == VL53L1_ERROR_NONE) {
 8009318:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d109      	bne.n	8009334 <VL53L1_set_GPIO_thresholds_from_struct+0x3e>
		status =
			VL53L1_set_GPIO_rate_threshold(
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	8959      	ldrh	r1, [r3, #10]
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	899b      	ldrh	r3, [r3, #12]
 8009328:	461a      	mov	r2, r3
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f7ff ffc7 	bl	80092be <VL53L1_set_GPIO_rate_threshold>
 8009330:	4603      	mov	r3, r0
 8009332:	73fb      	strb	r3, [r7, #15]
				pintconf->threshold_rate_high,
				pintconf->threshold_rate_low);
	}

	LOG_FUNCTION_END(status);
	return status;
 8009334:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009338:	4618      	mov	r0, r3
 800933a:	3710      	adds	r7, #16
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <VL53L1_low_power_auto_data_init>:
/* Start Patch_LowPowerAutoMode */

VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 8009340:	b480      	push	{r7}
 8009342:	b085      	sub	sp, #20
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes internal data structures for low power auto mode
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009348:	2300      	movs	r3, #0
 800934a:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	2203      	movs	r2, #3
 8009354:	f883 22e4 	strb.w	r2, [r3, #740]	@ 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	2200      	movs	r2, #0
 800935c:	f883 22e5 	strb.w	r2, [r3, #741]	@ 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	2200      	movs	r2, #0
 8009364:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	2200      	movs	r2, #0
 800936c:	f883 22e7 	strb.w	r2, [r3, #743]	@ 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	2200      	movs	r2, #0
 8009374:	f883 22e8 	strb.w	r2, [r3, #744]	@ 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	2200      	movs	r2, #0
 800937c:	f883 22e9 	strb.w	r2, [r3, #745]	@ 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	2200      	movs	r2, #0
 8009384:	f883 22ea 	strb.w	r2, [r3, #746]	@ 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	2200      	movs	r2, #0
 800938c:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	2200      	movs	r2, #0
 8009394:	f8a3 22f0 	strh.w	r2, [r3, #752]	@ 0x2f0

	LOG_FUNCTION_END(status);

	return status;
 8009398:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800939c:	4618      	mov	r0, r3
 800939e:	3714      	adds	r7, #20
 80093a0:	46bd      	mov	sp, r7
 80093a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a6:	4770      	bx	lr

080093a8 <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b087      	sub	sp, #28
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	60f8      	str	r0, [r7, #12]
 80093b0:	60b9      	str	r1, [r7, #8]
 80093b2:	607a      	str	r2, [r7, #4]
	/*
	 * Initializes configs for when low power auto presets are selected
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80093b4:	2300      	movs	r3, #0
 80093b6:	75fb      	strb	r3, [r7, #23]
	SUPPRESS_UNUSED_WARNING(pgeneral);

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2201      	movs	r2, #1
 80093bc:	705a      	strb	r2, [r3, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2200      	movs	r2, #0
 80093c2:	709a      	strb	r2, [r3, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	229b      	movs	r2, #155	@ 0x9b
 80093c8:	745a      	strb	r2, [r3, #17]
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	LOG_FUNCTION_END(status);

	return status;
 80093ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	371c      	adds	r7, #28
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr

080093da <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 80093da:	b480      	push	{r7}
 80093dc:	b085      	sub	sp, #20
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
	/*
	 * Setup ranges after the first one in low power auto mode by turning
	 * off FW calibration steps and programming static values
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80093e6:	2300      	movs	r3, #0
 80093e8:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f893 2163 	ldrb.w	r2, [r3, #355]	@ 0x163
	pdev->low_power_auto_data.saved_vhv_init =
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f883 22e8 	strb.w	r2, [r3, #744]	@ 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f893 2160 	ldrb.w	r2, [r3, #352]	@ 0x160
	pdev->low_power_auto_data.saved_vhv_timeout =
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f883 22e9 	strb.w	r2, [r3, #745]	@ 0x2e9

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f893 3163 	ldrb.w	r3, [r3, #355]	@ 0x163
 8009408:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800940c:	b2da      	uxtb	r2, r3
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 800941a:	f003 0303 	and.w	r3, r3, #3
 800941e:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f893 32e4 	ldrb.w	r3, [r3, #740]	@ 0x2e4
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800942a:	4413      	add	r3, r2
 800942c:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2201      	movs	r2, #1
 8009438:	f883 218d 	strb.w	r2, [r3, #397]	@ 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f893 22ae 	ldrb.w	r2, [r3, #686]	@ 0x2ae
	pdev->low_power_auto_data.first_run_phasecal_result =
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	f883 22ea 	strb.w	r2, [r3, #746]	@ 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f893 22ea 	ldrb.w	r2, [r3, #746]	@ 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	f883 2187 	strb.w	r2, [r3, #391]	@ 0x187

	LOG_FUNCTION_END(status);

	return status;
 8009454:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009458:	4618      	mov	r0, r3
 800945a:	3714      	adds	r7, #20
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 8009464:	b480      	push	{r7}
 8009466:	b085      	sub	sp, #20
 8009468:	af00      	add	r7, sp, #0
 800946a:	4603      	mov	r3, r0
 800946c:	80fb      	strh	r3, [r7, #6]
	 *  ->  only the 18 LS bits are used
	 *
	 *  2^30 = (2^24) (1.0us) * 4096 (2^12) / 64 (PLL Multiplier)
	 */

	uint32_t  pll_period_us        = 0;
 800946e:	2300      	movs	r3, #0
 8009470:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pll_period_us = (0x01 << 30) / fast_osc_frequency;
 8009472:	88fb      	ldrh	r3, [r7, #6]
 8009474:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8009478:	fb92 f3f3 	sdiv	r3, r2, r3
 800947c:	60fb      	str	r3, [r7, #12]
			pll_period_us);
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
 800947e:	68fb      	ldr	r3, [r7, #12]
}
 8009480:	4618      	mov	r0, r3
 8009482:	3714      	adds	r7, #20
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr

0800948c <VL53L1_decode_vcsel_period>:
	return range_mm;
}
#endif

uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800948c:	b480      	push	{r7}
 800948e:	b085      	sub	sp, #20
 8009490:	af00      	add	r7, sp, #0
 8009492:	4603      	mov	r3, r0
 8009494:	71fb      	strb	r3, [r7, #7]
	/*
	 * Converts the encoded VCSEL period register value into
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8009496:	2300      	movs	r3, #0
 8009498:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800949a:	79fb      	ldrb	r3, [r7, #7]
 800949c:	3301      	adds	r3, #1
 800949e:	b2db      	uxtb	r3, r3
 80094a0:	005b      	lsls	r3, r3, #1
 80094a2:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 80094a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3714      	adds	r7, #20
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr

080094b2 <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 80094b2:	b480      	push	{r7}
 80094b4:	b085      	sub	sp, #20
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	4603      	mov	r3, r0
 80094ba:	60b9      	str	r1, [r7, #8]
 80094bc:	607a      	str	r2, [r7, #4]
 80094be:	73fb      	strb	r3, [r7, #15]
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 80094c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	da10      	bge.n	80094ea <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 80094c8:	7bfb      	ldrb	r3, [r7, #15]
 80094ca:	43db      	mvns	r3, r3
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	f003 0307 	and.w	r3, r3, #7
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	3308      	adds	r3, #8
 80094d6:	b2da      	uxtb	r2, r3
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 80094dc:	7bfb      	ldrb	r3, [r7, #15]
 80094de:	3b80      	subs	r3, #128	@ 0x80
 80094e0:	10db      	asrs	r3, r3, #3
 80094e2:	b2da      	uxtb	r2, r3
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 80094e8:	e00c      	b.n	8009504 <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 80094ea:	7bfb      	ldrb	r3, [r7, #15]
 80094ec:	f003 0307 	and.w	r3, r3, #7
 80094f0:	b2da      	uxtb	r2, r3
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 80094f6:	7bfb      	ldrb	r3, [r7, #15]
 80094f8:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 80094fc:	10db      	asrs	r3, r3, #3
 80094fe:	b2da      	uxtb	r2, r3
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	701a      	strb	r2, [r3, #0]
}
 8009504:	bf00      	nop
 8009506:	3714      	adds	r7, #20
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b086      	sub	sp, #24
 8009514:	af00      	add	r7, sp, #0
 8009516:	60f8      	str	r0, [r7, #12]
 8009518:	460b      	mov	r3, r1
 800951a:	607a      	str	r2, [r7, #4]
 800951c:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800951e:	2300      	movs	r3, #0
 8009520:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8009522:	897b      	ldrh	r3, [r7, #10]
 8009524:	2b0a      	cmp	r3, #10
 8009526:	d802      	bhi.n	800952e <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8009528:	f06f 0309 	mvn.w	r3, #9
 800952c:	e047      	b.n	80095be <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009536:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8009544:	f002 020f 	and.w	r2, r2, #15
 8009548:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800954a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8009554:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009558:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800955a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8009564:	f002 0203 	and.w	r2, r2, #3
 8009568:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800956a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 8009574:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009578:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800957a:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	88d8      	ldrh	r0, [r3, #6]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	3305      	adds	r3, #5
 8009584:	461a      	mov	r2, r3
 8009586:	2102      	movs	r1, #2
 8009588:	f7ff fad9 	bl	8008b3e <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 8009590:	68fa      	ldr	r2, [r7, #12]
 8009592:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8009594:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 800959a:	68fa      	ldr	r2, [r7, #12]
 800959c:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800959e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 80095a8:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80095ac:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 80095ae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 80095b4:	68fa      	ldr	r2, [r7, #12]
 80095b6:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 80095b8:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80095ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3718      	adds	r7, #24
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b086      	sub	sp, #24
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	4603      	mov	r3, r0
 80095ce:	60b9      	str	r1, [r7, #8]
 80095d0:	607a      	str	r2, [r7, #4]
 80095d2:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_static_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80095d4:	2300      	movs	r3, #0
 80095d6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 80095d8:	89fb      	ldrh	r3, [r7, #14]
 80095da:	2b0a      	cmp	r3, #10
 80095dc:	d802      	bhi.n	80095e4 <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80095de:	f06f 0309 	mvn.w	r3, #9
 80095e2:	e046      	b.n	8009672 <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	781b      	ldrb	r3, [r3, #0]
 80095e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095ec:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	3301      	adds	r3, #1
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	f003 030f 	and.w	r3, r3, #15
 80095fc:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	3302      	adds	r3, #2
 8009606:	781b      	ldrb	r3, [r3, #0]
 8009608:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800960c:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	3303      	adds	r3, #3
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	f003 0303 	and.w	r3, r3, #3
 800961c:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	3304      	adds	r3, #4
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800962c:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	3305      	adds	r3, #5
 8009636:	4619      	mov	r1, r3
 8009638:	2002      	movs	r0, #2
 800963a:	f7ff faab 	bl	8008b94 <VL53L1_i2c_decode_uint16_t>
 800963e:	4603      	mov	r3, r0
 8009640:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	79da      	ldrb	r2, [r3, #7]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	7a1a      	ldrb	r2, [r3, #8]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	3309      	adds	r3, #9
 800965a:	781b      	ldrb	r3, [r3, #0]
 800965c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009660:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	7a9a      	ldrb	r2, [r3, #10]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 800966e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009672:	4618      	mov	r0, r3
 8009674:	3718      	adds	r7, #24
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800967a:	b580      	push	{r7, lr}
 800967c:	b086      	sub	sp, #24
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
 8009682:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_static_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8009684:	2300      	movs	r3, #0
 8009686:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8009688:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d108      	bne.n	80096a2 <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 8009690:	f107 020c 	add.w	r2, r7, #12
 8009694:	230b      	movs	r3, #11
 8009696:	2101      	movs	r1, #1
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f001 f8b9 	bl	800a810 <VL53L1_ReadMulti>
 800969e:	4603      	mov	r3, r0
 80096a0:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 80096a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d108      	bne.n	80096bc <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 80096aa:	f107 030c 	add.w	r3, r7, #12
 80096ae:	683a      	ldr	r2, [r7, #0]
 80096b0:	4619      	mov	r1, r3
 80096b2:	200b      	movs	r0, #11
 80096b4:	f7ff ff87 	bl	80095c6 <VL53L1_i2c_decode_static_nvm_managed>
 80096b8:	4603      	mov	r3, r0
 80096ba:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 80096bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3718      	adds	r7, #24
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b086      	sub	sp, #24
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	460b      	mov	r3, r1
 80096d2:	607a      	str	r2, [r7, #4]
 80096d4:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_customer_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80096d6:	2300      	movs	r3, #0
 80096d8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 80096da:	897b      	ldrh	r3, [r7, #10]
 80096dc:	2b16      	cmp	r3, #22
 80096de:	d802      	bhi.n	80096e6 <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80096e0:	f06f 0309 	mvn.w	r3, #9
 80096e4:	e076      	b.n	80097d4 <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 80096f2:	68fa      	ldr	r2, [r7, #12]
 80096f4:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 80096f6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 80096fc:	68fa      	ldr	r2, [r7, #12]
 80096fe:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8009700:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 8009706:	68fa      	ldr	r2, [r7, #12]
 8009708:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800970a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 8009710:	68fa      	ldr	r2, [r7, #12]
 8009712:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8009714:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800971e:	f002 020f 	and.w	r2, r2, #15
 8009722:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8009724:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 800972a:	68fa      	ldr	r2, [r7, #12]
 800972c:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 800972e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8009738:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800973c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800973e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 8009748:	f002 0203 	and.w	r2, r2, #3
 800974c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800974e:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	8958      	ldrh	r0, [r3, #10]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	3309      	adds	r3, #9
 8009758:	461a      	mov	r2, r3
 800975a:	2102      	movs	r1, #2
 800975c:	f7ff f9ef 	bl	8008b3e <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	330b      	adds	r3, #11
 800976a:	461a      	mov	r2, r3
 800976c:	2102      	movs	r1, #2
 800976e:	f7ff fa32 	bl	8008bd6 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	330d      	adds	r3, #13
 800977c:	461a      	mov	r2, r3
 800977e:	2102      	movs	r1, #2
 8009780:	f7ff fa29 	bl	8008bd6 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	8a18      	ldrh	r0, [r3, #16]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	330f      	adds	r3, #15
 800978c:	461a      	mov	r2, r3
 800978e:	2102      	movs	r1, #2
 8009790:	f7ff f9d5 	bl	8008b3e <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 800979a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800979e:	b218      	sxth	r0, r3
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	3311      	adds	r3, #17
 80097a4:	461a      	mov	r2, r3
 80097a6:	2102      	movs	r1, #2
 80097a8:	f7ff fa15 	bl	8008bd6 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	3313      	adds	r3, #19
 80097b6:	461a      	mov	r2, r3
 80097b8:	2102      	movs	r1, #2
 80097ba:	f7ff fa0c 	bl	8008bd6 <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	3315      	adds	r3, #21
 80097c8:	461a      	mov	r2, r3
 80097ca:	2102      	movs	r1, #2
 80097cc:	f7ff fa03 	bl	8008bd6 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 80097d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3718      	adds	r7, #24
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b086      	sub	sp, #24
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	4603      	mov	r3, r0
 80097e4:	60b9      	str	r1, [r7, #8]
 80097e6:	607a      	str	r2, [r7, #4]
 80097e8:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_customer_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80097ea:	2300      	movs	r3, #0
 80097ec:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 80097ee:	89fb      	ldrh	r3, [r7, #14]
 80097f0:	2b16      	cmp	r3, #22
 80097f2:	d802      	bhi.n	80097fa <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80097f4:	f06f 0309 	mvn.w	r3, #9
 80097f8:	e079      	b.n	80098ee <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	785a      	ldrb	r2, [r3, #1]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	789a      	ldrb	r2, [r3, #2]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	78da      	ldrb	r2, [r3, #3]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	791a      	ldrb	r2, [r3, #4]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	3305      	adds	r3, #5
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	f003 030f 	and.w	r3, r3, #15
 800982c:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	799a      	ldrb	r2, [r3, #6]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	3307      	adds	r3, #7
 800983e:	781b      	ldrb	r3, [r3, #0]
 8009840:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009844:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	3308      	adds	r3, #8
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	f003 0303 	and.w	r3, r3, #3
 8009854:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	3309      	adds	r3, #9
 800985e:	4619      	mov	r1, r3
 8009860:	2002      	movs	r0, #2
 8009862:	f7ff f997 	bl	8008b94 <VL53L1_i2c_decode_uint16_t>
 8009866:	4603      	mov	r3, r0
 8009868:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	330b      	adds	r3, #11
 8009872:	4619      	mov	r1, r3
 8009874:	2002      	movs	r0, #2
 8009876:	f7ff f9da 	bl	8008c2e <VL53L1_i2c_decode_int16_t>
 800987a:	4603      	mov	r3, r0
 800987c:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	330d      	adds	r3, #13
 8009886:	4619      	mov	r1, r3
 8009888:	2002      	movs	r0, #2
 800988a:	f7ff f9d0 	bl	8008c2e <VL53L1_i2c_decode_int16_t>
 800988e:	4603      	mov	r3, r0
 8009890:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	330f      	adds	r3, #15
 800989a:	4619      	mov	r1, r3
 800989c:	2002      	movs	r0, #2
 800989e:	f7ff f979 	bl	8008b94 <VL53L1_i2c_decode_uint16_t>
 80098a2:	4603      	mov	r3, r0
 80098a4:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	3311      	adds	r3, #17
 80098ae:	4619      	mov	r1, r3
 80098b0:	2002      	movs	r0, #2
 80098b2:	f7ff f9bc 	bl	8008c2e <VL53L1_i2c_decode_int16_t>
 80098b6:	4603      	mov	r3, r0
 80098b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80098bc:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	3313      	adds	r3, #19
 80098c6:	4619      	mov	r1, r3
 80098c8:	2002      	movs	r0, #2
 80098ca:	f7ff f9b0 	bl	8008c2e <VL53L1_i2c_decode_int16_t>
 80098ce:	4603      	mov	r3, r0
 80098d0:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	3315      	adds	r3, #21
 80098da:	4619      	mov	r1, r3
 80098dc:	2002      	movs	r0, #2
 80098de:	f7ff f9a6 	bl	8008c2e <VL53L1_i2c_decode_int16_t>
 80098e2:	4603      	mov	r3, r0
 80098e4:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 80098ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3718      	adds	r7, #24
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}

080098f6 <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 80098f6:	b580      	push	{r7, lr}
 80098f8:	b088      	sub	sp, #32
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
 80098fe:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_customer_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8009900:	2300      	movs	r3, #0
 8009902:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8009904:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d108      	bne.n	800991e <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 800990c:	f107 0208 	add.w	r2, r7, #8
 8009910:	2317      	movs	r3, #23
 8009912:	210d      	movs	r1, #13
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 ff7b 	bl	800a810 <VL53L1_ReadMulti>
 800991a:	4603      	mov	r3, r0
 800991c:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800991e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d108      	bne.n	8009938 <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 8009926:	f107 0308 	add.w	r3, r7, #8
 800992a:	683a      	ldr	r2, [r7, #0]
 800992c:	4619      	mov	r1, r3
 800992e:	2017      	movs	r0, #23
 8009930:	f7ff ff54 	bl	80097dc <VL53L1_i2c_decode_customer_nvm_managed>
 8009934:	4603      	mov	r3, r0
 8009936:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8009938:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800993c:	4618      	mov	r0, r3
 800993e:	3720      	adds	r7, #32
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b086      	sub	sp, #24
 8009948:	af00      	add	r7, sp, #0
 800994a:	60f8      	str	r0, [r7, #12]
 800994c:	460b      	mov	r3, r1
 800994e:	607a      	str	r2, [r7, #4]
 8009950:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_config_t into a I2C write buffer
	 * Buffer must be at least 32 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8009952:	2300      	movs	r3, #0
 8009954:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8009956:	897b      	ldrh	r3, [r7, #10]
 8009958:	2b1f      	cmp	r3, #31
 800995a:	d802      	bhi.n	8009962 <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800995c:	f06f 0309 	mvn.w	r3, #9
 8009960:	e0cf      	b.n	8009b02 <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	881b      	ldrh	r3, [r3, #0]
 8009966:	687a      	ldr	r2, [r7, #4]
 8009968:	2102      	movs	r1, #2
 800996a:	4618      	mov	r0, r3
 800996c:	f7ff f8e7 	bl	8008b3e <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 8009978:	f002 0201 	and.w	r2, r2, #1
 800997c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800997e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 8009988:	f002 020f 	and.w	r2, r2, #15
 800998c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800998e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 8009998:	f002 020f 	and.w	r2, r2, #15
 800999c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800999e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 80099a8:	f002 021f 	and.w	r2, r2, #31
 80099ac:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 80099ae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 80099b8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80099bc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 80099be:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 80099c8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80099cc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 80099ce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 80099d8:	f002 0201 	and.w	r2, r2, #1
 80099dc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 80099de:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 80099e4:	68fa      	ldr	r2, [r7, #12]
 80099e6:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 80099e8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 80099f2:	f002 0201 	and.w	r2, r2, #1
 80099f6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 80099f8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 8009a02:	f002 0203 	and.w	r2, r2, #3
 8009a06:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8009a08:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8009a12:	f002 021f 	and.w	r2, r2, #31
 8009a16:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8009a18:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 8009a22:	f002 0203 	and.w	r2, r2, #3
 8009a26:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8009a28:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 8009a32:	f002 0203 	and.w	r2, r2, #3
 8009a36:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 8009a38:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8009a42:	f002 0207 	and.w	r2, r2, #7
 8009a46:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 8009a48:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8009a52:	f002 021f 	and.w	r2, r2, #31
 8009a56:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 8009a58:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8009a62:	f002 0201 	and.w	r2, r2, #1
 8009a66:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8009a68:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 8009a6e:	68fa      	ldr	r2, [r7, #12]
 8009a70:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8009a72:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 8009a78:	68fa      	ldr	r2, [r7, #12]
 8009a7a:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8009a7c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 8009a82:	68fa      	ldr	r2, [r7, #12]
 8009a84:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8009a86:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 8009a8c:	68fa      	ldr	r2, [r7, #12]
 8009a8e:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8009a90:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 8009a96:	68fa      	ldr	r2, [r7, #12]
 8009a98:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 8009a9a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 8009aa0:	68fa      	ldr	r2, [r7, #12]
 8009aa2:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 8009aa4:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	8b18      	ldrh	r0, [r3, #24]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	3318      	adds	r3, #24
 8009aae:	461a      	mov	r2, r3
 8009ab0:	2102      	movs	r1, #2
 8009ab2:	f7ff f844 	bl	8008b3e <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 8009aba:	68fa      	ldr	r2, [r7, #12]
 8009abc:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 8009abe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 8009ac4:	68fa      	ldr	r2, [r7, #12]
 8009ac6:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 8009ac8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 8009ad2:	f002 020f 	and.w	r2, r2, #15
 8009ad6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 8009ad8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 8009ade:	68fa      	ldr	r2, [r7, #12]
 8009ae0:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 8009ae2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 8009aec:	f002 020f 	and.w	r2, r2, #15
 8009af0:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 8009af2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 8009af8:	68fa      	ldr	r2, [r7, #12]
 8009afa:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 8009afc:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8009afe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3718      	adds	r7, #24
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}

08009b0a <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b086      	sub	sp, #24
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	60f8      	str	r0, [r7, #12]
 8009b12:	460b      	mov	r3, r1
 8009b14:	607a      	str	r2, [r7, #4]
 8009b16:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_general_config_t into a I2C write buffer
	 * Buffer must be at least 22 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 8009b1c:	897b      	ldrh	r3, [r7, #10]
 8009b1e:	2b15      	cmp	r3, #21
 8009b20:	d802      	bhi.n	8009b28 <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8009b22:	f06f 0309 	mvn.w	r3, #9
 8009b26:	e070      	b.n	8009c0a <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 8009b34:	68fa      	ldr	r2, [r7, #12]
 8009b36:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8009b38:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 8009b3e:	68fa      	ldr	r2, [r7, #12]
 8009b40:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8009b42:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 8009b4c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009b50:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8009b52:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 8009b58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009b5c:	b298      	uxth	r0, r3
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	3304      	adds	r3, #4
 8009b62:	461a      	mov	r2, r3
 8009b64:	2102      	movs	r1, #2
 8009b66:	f7fe ffea 	bl	8008b3e <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 8009b72:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009b76:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8009b78:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 8009b7e:	68fa      	ldr	r2, [r7, #12]
 8009b80:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 8009b82:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 8009b88:	68fa      	ldr	r2, [r7, #12]
 8009b8a:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8009b8c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 8009b96:	f002 0201 	and.w	r2, r2, #1
 8009b9a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8009b9c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 8009ba6:	f002 0207 	and.w	r2, r2, #7
 8009baa:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8009bac:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	8998      	ldrh	r0, [r3, #12]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	330c      	adds	r3, #12
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	2102      	movs	r1, #2
 8009bba:	f7fe ffc0 	bl	8008b3e <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	89d8      	ldrh	r0, [r3, #14]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	330e      	adds	r3, #14
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	2102      	movs	r1, #2
 8009bca:	f7fe ffb8 	bl	8008b3e <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	8a18      	ldrh	r0, [r3, #16]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	3310      	adds	r3, #16
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	2102      	movs	r1, #2
 8009bda:	f7fe ffb0 	bl	8008b3e <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 8009be2:	68fa      	ldr	r2, [r7, #12]
 8009be4:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8009be6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 8009bec:	68fa      	ldr	r2, [r7, #12]
 8009bee:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8009bf0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 8009bf6:	68fa      	ldr	r2, [r7, #12]
 8009bf8:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8009bfa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 8009c00:	68fa      	ldr	r2, [r7, #12]
 8009c02:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8009c04:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8009c06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3718      	adds	r7, #24
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}

08009c12 <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8009c12:	b580      	push	{r7, lr}
 8009c14:	b086      	sub	sp, #24
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	60f8      	str	r0, [r7, #12]
 8009c1a:	460b      	mov	r3, r1
 8009c1c:	607a      	str	r2, [r7, #4]
 8009c1e:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_timing_config_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8009c20:	2300      	movs	r3, #0
 8009c22:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 8009c24:	897b      	ldrh	r3, [r7, #10]
 8009c26:	2b16      	cmp	r3, #22
 8009c28:	d802      	bhi.n	8009c30 <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8009c2a:	f06f 0309 	mvn.w	r3, #9
 8009c2e:	e06e      	b.n	8009d0e <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	f003 030f 	and.w	r3, r3, #15
 8009c38:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 8009c42:	68fa      	ldr	r2, [r7, #12]
 8009c44:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8009c46:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8009c50:	f002 020f 	and.w	r2, r2, #15
 8009c54:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8009c56:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 8009c5c:	68fa      	ldr	r2, [r7, #12]
 8009c5e:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8009c60:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8009c6a:	f002 020f 	and.w	r2, r2, #15
 8009c6e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8009c70:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 8009c76:	68fa      	ldr	r2, [r7, #12]
 8009c78:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 8009c7a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 8009c84:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8009c88:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8009c8a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8009c94:	f002 020f 	and.w	r2, r2, #15
 8009c98:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8009c9a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 8009ca0:	68fa      	ldr	r2, [r7, #12]
 8009ca2:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8009ca4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 8009cae:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8009cb2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8009cb4:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	8958      	ldrh	r0, [r3, #10]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	330a      	adds	r3, #10
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	2102      	movs	r1, #2
 8009cc2:	f7fe ff3c 	bl	8008b3e <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	8998      	ldrh	r0, [r3, #12]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	330c      	adds	r3, #12
 8009cce:	461a      	mov	r2, r3
 8009cd0:	2102      	movs	r1, #2
 8009cd2:	f7fe ff34 	bl	8008b3e <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 8009cda:	68fa      	ldr	r2, [r7, #12]
 8009cdc:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 8009cde:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 8009ce4:	68fa      	ldr	r2, [r7, #12]
 8009ce6:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 8009ce8:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	6918      	ldr	r0, [r3, #16]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	3312      	adds	r3, #18
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	2104      	movs	r1, #4
 8009cf6:	f7fe ffc2 	bl	8008c7e <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 8009d02:	f002 0201 	and.w	r2, r2, #1
 8009d06:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 8009d08:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8009d0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3718      	adds	r7, #24
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}

08009d16 <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8009d16:	b580      	push	{r7, lr}
 8009d18:	b086      	sub	sp, #24
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	60f8      	str	r0, [r7, #12]
 8009d1e:	460b      	mov	r3, r1
 8009d20:	607a      	str	r2, [r7, #4]
 8009d22:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_dynamic_config_t into a I2C write buffer
	 * Buffer must be at least 18 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8009d24:	2300      	movs	r3, #0
 8009d26:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8009d28:	897b      	ldrh	r3, [r7, #10]
 8009d2a:	2b11      	cmp	r3, #17
 8009d2c:	d802      	bhi.n	8009d34 <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8009d2e:	f06f 0309 	mvn.w	r3, #9
 8009d32:	e071      	b.n	8009e18 <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	781b      	ldrb	r3, [r3, #0]
 8009d38:	f003 0303 	and.w	r3, r3, #3
 8009d3c:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	8858      	ldrh	r0, [r3, #2]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	3301      	adds	r3, #1
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	2102      	movs	r1, #2
 8009d4e:	f7fe fef6 	bl	8008b3e <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	8898      	ldrh	r0, [r3, #4]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	3303      	adds	r3, #3
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	2102      	movs	r1, #2
 8009d5e:	f7fe feee 	bl	8008b3e <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8009d6a:	f002 0201 	and.w	r2, r2, #1
 8009d6e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8009d70:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 8009d7a:	f002 0207 	and.w	r2, r2, #7
 8009d7e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8009d80:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 8009d86:	68fa      	ldr	r2, [r7, #12]
 8009d88:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8009d8a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 8009d90:	68fa      	ldr	r2, [r7, #12]
 8009d92:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8009d94:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8009d9e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009da2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8009da4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8009dae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009db2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8009db4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8009dbe:	f002 0203 	and.w	r2, r2, #3
 8009dc2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8009dc4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 8009dce:	f002 0203 	and.w	r2, r2, #3
 8009dd2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8009dd4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 8009dde:	f002 020f 	and.w	r2, r2, #15
 8009de2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8009de4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 8009dea:	68fa      	ldr	r2, [r7, #12]
 8009dec:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 8009dee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 8009df4:	68fa      	ldr	r2, [r7, #12]
 8009df6:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 8009df8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 8009dfe:	68fa      	ldr	r2, [r7, #12]
 8009e00:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 8009e02:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 8009e0c:	f002 0203 	and.w	r2, r2, #3
 8009e10:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8009e12:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8009e14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3718      	adds	r7, #24
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b087      	sub	sp, #28
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	460b      	mov	r3, r1
 8009e2a:	607a      	str	r2, [r7, #4]
 8009e2c:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_system_control_t into a I2C write buffer
	 * Buffer must be at least 5 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 8009e32:	897b      	ldrh	r3, [r7, #10]
 8009e34:	2b04      	cmp	r3, #4
 8009e36:	d802      	bhi.n	8009e3e <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8009e38:	f06f 0309 	mvn.w	r3, #9
 8009e3c:	e025      	b.n	8009e8a <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	f003 0301 	and.w	r3, r3, #1
 8009e46:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 8009e54:	f002 0201 	and.w	r2, r2, #1
 8009e58:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8009e5a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 8009e64:	f002 0201 	and.w	r2, r2, #1
 8009e68:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8009e6a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 8009e74:	f002 0203 	and.w	r2, r2, #3
 8009e78:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8009e7a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	3304      	adds	r3, #4
		pdata->system__mode_start;
 8009e80:	68fa      	ldr	r2, [r7, #12]
 8009e82:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8009e84:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8009e86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	371c      	adds	r7, #28
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e94:	4770      	bx	lr

08009e96 <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 8009e96:	b580      	push	{r7, lr}
 8009e98:	b086      	sub	sp, #24
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	60b9      	str	r1, [r7, #8]
 8009ea0:	607a      	str	r2, [r7, #4]
 8009ea2:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_system_results_t from the input I2C read buffer
	 * Buffer must be at least 44 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 8009ea8:	89fb      	ldrh	r3, [r7, #14]
 8009eaa:	2b2b      	cmp	r3, #43	@ 0x2b
 8009eac:	d802      	bhi.n	8009eb4 <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8009eae:	f06f 0309 	mvn.w	r3, #9
 8009eb2:	e0e2      	b.n	800a07a <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009ebc:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	785a      	ldrb	r2, [r3, #1]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	3302      	adds	r3, #2
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	f003 030f 	and.w	r3, r3, #15
 8009ed4:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	78da      	ldrb	r2, [r3, #3]
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	3304      	adds	r3, #4
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	2002      	movs	r0, #2
 8009eea:	f7fe fe53 	bl	8008b94 <VL53L1_i2c_decode_uint16_t>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	3306      	adds	r3, #6
 8009efa:	4619      	mov	r1, r3
 8009efc:	2002      	movs	r0, #2
 8009efe:	f7fe fe49 	bl	8008b94 <VL53L1_i2c_decode_uint16_t>
 8009f02:	4603      	mov	r3, r0
 8009f04:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	3308      	adds	r3, #8
 8009f0e:	4619      	mov	r1, r3
 8009f10:	2002      	movs	r0, #2
 8009f12:	f7fe fe3f 	bl	8008b94 <VL53L1_i2c_decode_uint16_t>
 8009f16:	4603      	mov	r3, r0
 8009f18:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	330a      	adds	r3, #10
 8009f22:	4619      	mov	r1, r3
 8009f24:	2002      	movs	r0, #2
 8009f26:	f7fe fe35 	bl	8008b94 <VL53L1_i2c_decode_uint16_t>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	330c      	adds	r3, #12
 8009f36:	4619      	mov	r1, r3
 8009f38:	2002      	movs	r0, #2
 8009f3a:	f7fe fe2b 	bl	8008b94 <VL53L1_i2c_decode_uint16_t>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	330e      	adds	r3, #14
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	2002      	movs	r0, #2
 8009f4e:	f7fe fe21 	bl	8008b94 <VL53L1_i2c_decode_uint16_t>
 8009f52:	4603      	mov	r3, r0
 8009f54:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	3310      	adds	r3, #16
 8009f5e:	4619      	mov	r1, r3
 8009f60:	2002      	movs	r0, #2
 8009f62:	f7fe fe17 	bl	8008b94 <VL53L1_i2c_decode_uint16_t>
 8009f66:	4603      	mov	r3, r0
 8009f68:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	3312      	adds	r3, #18
 8009f72:	4619      	mov	r1, r3
 8009f74:	2002      	movs	r0, #2
 8009f76:	f7fe fe0d 	bl	8008b94 <VL53L1_i2c_decode_uint16_t>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	3314      	adds	r3, #20
 8009f86:	4619      	mov	r1, r3
 8009f88:	2002      	movs	r0, #2
 8009f8a:	f7fe fe03 	bl	8008b94 <VL53L1_i2c_decode_uint16_t>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	3316      	adds	r3, #22
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	2002      	movs	r0, #2
 8009f9e:	f7fe fdf9 	bl	8008b94 <VL53L1_i2c_decode_uint16_t>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	3318      	adds	r3, #24
 8009fae:	4619      	mov	r1, r3
 8009fb0:	2002      	movs	r0, #2
 8009fb2:	f7fe fdef 	bl	8008b94 <VL53L1_i2c_decode_uint16_t>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	331a      	adds	r3, #26
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	2002      	movs	r0, #2
 8009fc6:	f7fe fde5 	bl	8008b94 <VL53L1_i2c_decode_uint16_t>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	331c      	adds	r3, #28
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	2002      	movs	r0, #2
 8009fda:	f7fe fddb 	bl	8008b94 <VL53L1_i2c_decode_uint16_t>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	331e      	adds	r3, #30
 8009fea:	4619      	mov	r1, r3
 8009fec:	2002      	movs	r0, #2
 8009fee:	f7fe fdd1 	bl	8008b94 <VL53L1_i2c_decode_uint16_t>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	3320      	adds	r3, #32
 8009ffe:	4619      	mov	r1, r3
 800a000:	2002      	movs	r0, #2
 800a002:	f7fe fdc7 	bl	8008b94 <VL53L1_i2c_decode_uint16_t>
 800a006:	4603      	mov	r3, r0
 800a008:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	3322      	adds	r3, #34	@ 0x22
 800a012:	4619      	mov	r1, r3
 800a014:	2002      	movs	r0, #2
 800a016:	f7fe fdbd 	bl	8008b94 <VL53L1_i2c_decode_uint16_t>
 800a01a:	4603      	mov	r3, r0
 800a01c:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	845a      	strh	r2, [r3, #34]	@ 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	3324      	adds	r3, #36	@ 0x24
 800a026:	4619      	mov	r1, r3
 800a028:	2002      	movs	r0, #2
 800a02a:	f7fe fdb3 	bl	8008b94 <VL53L1_i2c_decode_uint16_t>
 800a02e:	4603      	mov	r3, r0
 800a030:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	849a      	strh	r2, [r3, #36]	@ 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	3326      	adds	r3, #38	@ 0x26
 800a03a:	4619      	mov	r1, r3
 800a03c:	2002      	movs	r0, #2
 800a03e:	f7fe fda9 	bl	8008b94 <VL53L1_i2c_decode_uint16_t>
 800a042:	4603      	mov	r3, r0
 800a044:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	84da      	strh	r2, [r3, #38]	@ 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	3328      	adds	r3, #40	@ 0x28
 800a04e:	4619      	mov	r1, r3
 800a050:	2002      	movs	r0, #2
 800a052:	f7fe fd9f 	bl	8008b94 <VL53L1_i2c_decode_uint16_t>
 800a056:	4603      	mov	r3, r0
 800a058:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	851a      	strh	r2, [r3, #40]	@ 0x28
	pdata->result__spare_3_sd1 =
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 800a076:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3718      	adds	r7, #24
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}

0800a082 <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 800a082:	b580      	push	{r7, lr}
 800a084:	b086      	sub	sp, #24
 800a086:	af00      	add	r7, sp, #0
 800a088:	4603      	mov	r3, r0
 800a08a:	60b9      	str	r1, [r7, #8]
 800a08c:	607a      	str	r2, [r7, #4]
 800a08e:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_core_results_t from the input I2C read buffer
	 * Buffer must be at least 33 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800a090:	2300      	movs	r3, #0
 800a092:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 800a094:	89fb      	ldrh	r3, [r7, #14]
 800a096:	2b20      	cmp	r3, #32
 800a098:	d802      	bhi.n	800a0a0 <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800a09a:	f06f 0309 	mvn.w	r3, #9
 800a09e:	e04d      	b.n	800a13c <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 800a0a0:	68b9      	ldr	r1, [r7, #8]
 800a0a2:	2004      	movs	r0, #4
 800a0a4:	f7fe fe15 	bl	8008cd2 <VL53L1_i2c_decode_uint32_t>
 800a0a8:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	3304      	adds	r3, #4
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	2004      	movs	r0, #4
 800a0b6:	f7fe fe0c 	bl	8008cd2 <VL53L1_i2c_decode_uint32_t>
 800a0ba:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	3308      	adds	r3, #8
 800a0c4:	4619      	mov	r1, r3
 800a0c6:	2004      	movs	r0, #4
 800a0c8:	f7fe fe20 	bl	8008d0c <VL53L1_i2c_decode_int32_t>
 800a0cc:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	330c      	adds	r3, #12
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	2004      	movs	r0, #4
 800a0da:	f7fe fdfa 	bl	8008cd2 <VL53L1_i2c_decode_uint32_t>
 800a0de:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	3310      	adds	r3, #16
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	2004      	movs	r0, #4
 800a0ec:	f7fe fdf1 	bl	8008cd2 <VL53L1_i2c_decode_uint32_t>
 800a0f0:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	3314      	adds	r3, #20
 800a0fa:	4619      	mov	r1, r3
 800a0fc:	2004      	movs	r0, #4
 800a0fe:	f7fe fde8 	bl	8008cd2 <VL53L1_i2c_decode_uint32_t>
 800a102:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	3318      	adds	r3, #24
 800a10c:	4619      	mov	r1, r3
 800a10e:	2004      	movs	r0, #4
 800a110:	f7fe fdfc 	bl	8008d0c <VL53L1_i2c_decode_int32_t>
 800a114:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	331c      	adds	r3, #28
 800a11e:	4619      	mov	r1, r3
 800a120:	2004      	movs	r0, #4
 800a122:	f7fe fdd6 	bl	8008cd2 <VL53L1_i2c_decode_uint32_t>
 800a126:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	f893 2020 	ldrb.w	r2, [r3, #32]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 800a138:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3718      	adds	r7, #24
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}

0800a144 <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b086      	sub	sp, #24
 800a148:	af00      	add	r7, sp, #0
 800a14a:	4603      	mov	r3, r0
 800a14c:	60b9      	str	r1, [r7, #8]
 800a14e:	607a      	str	r2, [r7, #4]
 800a150:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_debug_results_t from the input I2C read buffer
	 * Buffer must be at least 56 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800a152:	2300      	movs	r3, #0
 800a154:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 800a156:	89fb      	ldrh	r3, [r7, #14]
 800a158:	2b37      	cmp	r3, #55	@ 0x37
 800a15a:	d802      	bhi.n	800a162 <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800a15c:	f06f 0309 	mvn.w	r3, #9
 800a160:	e15e      	b.n	800a420 <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 800a162:	68b9      	ldr	r1, [r7, #8]
 800a164:	2002      	movs	r0, #2
 800a166:	f7fe fd15 	bl	8008b94 <VL53L1_i2c_decode_uint16_t>
 800a16a:	4603      	mov	r3, r0
 800a16c:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	3302      	adds	r3, #2
 800a176:	781b      	ldrb	r3, [r3, #0]
 800a178:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a17c:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	3303      	adds	r3, #3
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a18c:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	3304      	adds	r3, #4
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	f003 0303 	and.w	r3, r3, #3
 800a19c:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	3305      	adds	r3, #5
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	f003 0301 	and.w	r3, r3, #1
 800a1ac:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	3306      	adds	r3, #6
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a1bc:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	3307      	adds	r3, #7
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a1cc:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	3308      	adds	r3, #8
 800a1d6:	4619      	mov	r1, r3
 800a1d8:	2002      	movs	r0, #2
 800a1da:	f7fe fcdb 	bl	8008b94 <VL53L1_i2c_decode_uint16_t>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a1e4:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	330a      	adds	r3, #10
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	f003 0303 	and.w	r3, r3, #3
 800a1f4:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	330b      	adds	r3, #11
 800a1fe:	781b      	ldrb	r3, [r3, #0]
 800a200:	f003 0303 	and.w	r3, r3, #3
 800a204:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	330c      	adds	r3, #12
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	f003 030f 	and.w	r3, r3, #15
 800a214:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	330d      	adds	r3, #13
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	f003 0307 	and.w	r3, r3, #7
 800a224:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	330e      	adds	r3, #14
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	f003 0301 	and.w	r3, r3, #1
 800a234:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	330f      	adds	r3, #15
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	f003 0303 	and.w	r3, r3, #3
 800a244:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	7c1a      	ldrb	r2, [r3, #16]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	7c5a      	ldrb	r2, [r3, #17]
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	3312      	adds	r3, #18
 800a25e:	4619      	mov	r1, r3
 800a260:	2002      	movs	r0, #2
 800a262:	f7fe fc97 	bl	8008b94 <VL53L1_i2c_decode_uint16_t>
 800a266:	4603      	mov	r3, r0
 800a268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a26c:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	3316      	adds	r3, #22
 800a276:	4619      	mov	r1, r3
 800a278:	2002      	movs	r0, #2
 800a27a:	f7fe fc8b 	bl	8008b94 <VL53L1_i2c_decode_uint16_t>
 800a27e:	4603      	mov	r3, r0
 800a280:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	3318      	adds	r3, #24
 800a28a:	4619      	mov	r1, r3
 800a28c:	2002      	movs	r0, #2
 800a28e:	f7fe fc81 	bl	8008b94 <VL53L1_i2c_decode_uint16_t>
 800a292:	4603      	mov	r3, r0
 800a294:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	331a      	adds	r3, #26
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	f003 0301 	and.w	r3, r3, #1
 800a2a4:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	331b      	adds	r3, #27
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	f003 0307 	and.w	r3, r3, #7
 800a2b4:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	7f1a      	ldrb	r2, [r3, #28]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	7f5a      	ldrb	r2, [r3, #29]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	331e      	adds	r3, #30
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2d4:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	331f      	adds	r3, #31
 800a2de:	781b      	ldrb	r3, [r3, #0]
 800a2e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2e4:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	3320      	adds	r3, #32
 800a2ee:	781b      	ldrb	r3, [r3, #0]
 800a2f0:	f003 0303 	and.w	r3, r3, #3
 800a2f4:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	3321      	adds	r3, #33	@ 0x21
 800a2fe:	781b      	ldrb	r3, [r3, #0]
 800a300:	f003 030f 	and.w	r3, r3, #15
 800a304:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	3325      	adds	r3, #37	@ 0x25
 800a332:	781b      	ldrb	r3, [r3, #0]
 800a334:	f003 0301 	and.w	r3, r3, #1
 800a338:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	3326      	adds	r3, #38	@ 0x26
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	f003 0303 	and.w	r3, r3, #3
 800a34a:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	3327      	adds	r3, #39	@ 0x27
 800a356:	781b      	ldrb	r3, [r3, #0]
 800a358:	f003 031f 	and.w	r3, r3, #31
 800a35c:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	3328      	adds	r3, #40	@ 0x28
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	f003 031f 	and.w	r3, r3, #31
 800a36e:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	3329      	adds	r3, #41	@ 0x29
 800a37a:	781b      	ldrb	r3, [r3, #0]
 800a37c:	f003 031f 	and.w	r3, r3, #31
 800a380:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	332a      	adds	r3, #42	@ 0x2a
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	f003 0301 	and.w	r3, r3, #1
 800a392:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	332b      	adds	r3, #43	@ 0x2b
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	f003 0301 	and.w	r3, r3, #1
 800a3a4:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	332c      	adds	r3, #44	@ 0x2c
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	f003 0303 	and.w	r3, r3, #3
 800a3b6:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	332d      	adds	r3, #45	@ 0x2d
 800a3c2:	781b      	ldrb	r3, [r3, #0]
 800a3c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a3c8:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	332e      	adds	r3, #46	@ 0x2e
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	2004      	movs	r0, #4
 800a3d8:	f7fe fc7b 	bl	8008cd2 <VL53L1_i2c_decode_uint32_t>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	62da      	str	r2, [r3, #44]	@ 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	3332      	adds	r3, #50	@ 0x32
 800a3ea:	4619      	mov	r1, r3
 800a3ec:	2004      	movs	r0, #4
 800a3ee:	f7fe fc70 	bl	8008cd2 <VL53L1_i2c_decode_uint32_t>
 800a3f2:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	631a      	str	r2, [r3, #48]	@ 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	3336      	adds	r3, #54	@ 0x36
 800a3fc:	781b      	ldrb	r3, [r3, #0]
 800a3fe:	f003 0301 	and.w	r3, r3, #1
 800a402:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	3337      	adds	r3, #55	@ 0x37
 800a40e:	781b      	ldrb	r3, [r3, #0]
 800a410:	f003 0301 	and.w	r3, r3, #1
 800a414:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

	LOG_FUNCTION_END(status);

	return status;
 800a41c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a420:	4618      	mov	r0, r3
 800a422:	3718      	adds	r7, #24
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}

0800a428 <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b086      	sub	sp, #24
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	4603      	mov	r3, r0
 800a430:	60b9      	str	r1, [r7, #8]
 800a432:	607a      	str	r2, [r7, #4]
 800a434:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_nvm_copy_data_t from the input I2C read buffer
	 * Buffer must be at least 49 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800a436:	2300      	movs	r3, #0
 800a438:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 800a43a:	89fb      	ldrh	r3, [r7, #14]
 800a43c:	2b30      	cmp	r3, #48	@ 0x30
 800a43e:	d802      	bhi.n	800a446 <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800a440:	f06f 0309 	mvn.w	r3, #9
 800a444:	e112      	b.n	800a66c <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	785a      	ldrb	r2, [r3, #1]
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	789a      	ldrb	r2, [r3, #2]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	3303      	adds	r3, #3
 800a462:	4619      	mov	r1, r3
 800a464:	2002      	movs	r0, #2
 800a466:	f7fe fb95 	bl	8008b94 <VL53L1_i2c_decode_uint16_t>
 800a46a:	4603      	mov	r3, r0
 800a46c:	461a      	mov	r2, r3
	pdata->identification__module_id =
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	3305      	adds	r3, #5
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a47c:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	3306      	adds	r3, #6
 800a486:	781b      	ldrb	r3, [r3, #0]
 800a488:	f003 0307 	and.w	r3, r3, #7
 800a48c:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	3307      	adds	r3, #7
 800a496:	781b      	ldrb	r3, [r3, #0]
 800a498:	f003 0307 	and.w	r3, r3, #7
 800a49c:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	3308      	adds	r3, #8
 800a4a6:	781b      	ldrb	r3, [r3, #0]
 800a4a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a4ac:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	3309      	adds	r3, #9
 800a4b6:	781b      	ldrb	r3, [r3, #0]
 800a4b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a4bc:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	330a      	adds	r3, #10
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	f003 0301 	and.w	r3, r3, #1
 800a4cc:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	330b      	adds	r3, #11
 800a4d6:	781b      	ldrb	r3, [r3, #0]
 800a4d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a4dc:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	330c      	adds	r3, #12
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	f003 0301 	and.w	r3, r3, #1
 800a4ec:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	330d      	adds	r3, #13
 800a4f6:	781b      	ldrb	r3, [r3, #0]
 800a4f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a4fc:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	330e      	adds	r3, #14
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a50c:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	7bda      	ldrb	r2, [r3, #15]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	7c1a      	ldrb	r2, [r3, #16]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	7c5a      	ldrb	r2, [r3, #17]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	7c9a      	ldrb	r2, [r3, #18]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	7cda      	ldrb	r2, [r3, #19]
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	7d1a      	ldrb	r2, [r3, #20]
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	7d5a      	ldrb	r2, [r3, #21]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	7d9a      	ldrb	r2, [r3, #22]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	7dda      	ldrb	r2, [r3, #23]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	7e1a      	ldrb	r2, [r3, #24]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	7e5a      	ldrb	r2, [r3, #25]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	7e9a      	ldrb	r2, [r3, #26]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	7eda      	ldrb	r2, [r3, #27]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	7f1a      	ldrb	r2, [r3, #28]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	7f5a      	ldrb	r2, [r3, #29]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	7f9a      	ldrb	r2, [r3, #30]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	7fda      	ldrb	r2, [r3, #31]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	f893 2020 	ldrb.w	r2, [r3, #32]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 800a668:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3718      	adds	r7, #24
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}

0800a674 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b090      	sub	sp, #64	@ 0x40
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_nvm_copy_data_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800a67e:	2300      	movs	r3, #0
 800a680:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800a684:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d10a      	bne.n	800a6a2 <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 800a68c:	f107 020c 	add.w	r2, r7, #12
 800a690:	2331      	movs	r3, #49	@ 0x31
 800a692:	f240 110f 	movw	r1, #271	@ 0x10f
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f000 f8ba 	bl	800a810 <VL53L1_ReadMulti>
 800a69c:	4603      	mov	r3, r0
 800a69e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800a6a2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d109      	bne.n	800a6be <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 800a6aa:	f107 030c 	add.w	r3, r7, #12
 800a6ae:	683a      	ldr	r2, [r7, #0]
 800a6b0:	4619      	mov	r1, r3
 800a6b2:	2031      	movs	r0, #49	@ 0x31
 800a6b4:	f7ff feb8 	bl	800a428 <VL53L1_i2c_decode_nvm_copy_data>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800a6be:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3740      	adds	r7, #64	@ 0x40
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}

0800a6ca <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 800a6ca:	b580      	push	{r7, lr}
 800a6cc:	b086      	sub	sp, #24
 800a6ce:	af02      	add	r7, sp, #8
 800a6d0:	6078      	str	r0, [r7, #4]
 800a6d2:	6039      	str	r1, [r7, #0]
	/**
	 * Polls the bit 0 of the FIRMWARE__SYSTEM_STATUS register to see if
	 * the firmware is ready.
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	73fb      	strb	r3, [r7, #15]
	 * it copies the NVM data into the G02 host register banks
	 * The host must wait the required time to allow the copy
	 * to complete before attempting to read the firmware status
	 */

	status = VL53L1_WaitUs(
 800a6d8:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f000 f989 	bl	800a9f4 <VL53L1_WaitUs>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 800a6e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d10b      	bne.n	800a706 <VL53L1_poll_for_boot_completion+0x3c>
		status =
			VL53L1_WaitValueMaskEx(
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	9301      	str	r3, [sp, #4]
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	9300      	str	r3, [sp, #0]
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	22e5      	movs	r2, #229	@ 0xe5
 800a6fa:	6839      	ldr	r1, [r7, #0]
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 f98f 	bl	800aa20 <VL53L1_WaitValueMaskEx>
 800a702:	4603      	mov	r3, r0
 800a704:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 800a706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d103      	bne.n	800a716 <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 800a70e:	2103      	movs	r1, #3
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f7fd fff8 	bl	8008706 <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 800a716:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3710      	adds	r7, #16
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}

0800a722 <_I2CWrite>:
#   define VL53L1_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800a722:	b580      	push	{r7, lr}
 800a724:	b088      	sub	sp, #32
 800a726:	af02      	add	r7, sp, #8
 800a728:	60f8      	str	r0, [r7, #12]
 800a72a:	60b9      	str	r1, [r7, #8]
 800a72c:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	330a      	adds	r3, #10
 800a732:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f8d3 03a0 	ldr.w	r0, [r3, #928]	@ 0x3a0
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	f893 3398 	ldrb.w	r3, [r3, #920]	@ 0x398
 800a740:	4619      	mov	r1, r3
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	b29a      	uxth	r2, r3
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	9300      	str	r3, [sp, #0]
 800a74a:	4613      	mov	r3, r2
 800a74c:	68ba      	ldr	r2, [r7, #8]
 800a74e:	f7f7 fe0d 	bl	800236c <HAL_I2C_Master_Transmit>
 800a752:	4603      	mov	r3, r0
 800a754:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800a756:	693b      	ldr	r3, [r7, #16]
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3718      	adds	r7, #24
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}

0800a760 <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800a760:	b580      	push	{r7, lr}
 800a762:	b088      	sub	sp, #32
 800a764:	af02      	add	r7, sp, #8
 800a766:	60f8      	str	r0, [r7, #12]
 800a768:	60b9      	str	r1, [r7, #8]
 800a76a:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	330a      	adds	r3, #10
 800a770:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	f8d3 03a0 	ldr.w	r0, [r3, #928]	@ 0x3a0
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f893 3398 	ldrb.w	r3, [r3, #920]	@ 0x398
 800a77e:	f043 0301 	orr.w	r3, r3, #1
 800a782:	b2db      	uxtb	r3, r3
 800a784:	4619      	mov	r1, r3
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	b29a      	uxth	r2, r3
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	9300      	str	r3, [sp, #0]
 800a78e:	4613      	mov	r3, r2
 800a790:	68ba      	ldr	r2, [r7, #8]
 800a792:	f7f7 ff03 	bl	800259c <HAL_I2C_Master_Receive>
 800a796:	4603      	mov	r3, r0
 800a798:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800a79a:	693b      	ldr	r3, [r7, #16]
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3718      	adds	r7, #24
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b086      	sub	sp, #24
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	60f8      	str	r0, [r7, #12]
 800a7ac:	607a      	str	r2, [r7, #4]
 800a7ae:	603b      	str	r3, [r7, #0]
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	2bff      	cmp	r3, #255	@ 0xff
 800a7bc:	d902      	bls.n	800a7c4 <VL53L1_WriteMulti+0x20>
        return VL53L1_ERROR_INVALID_PARAMS;
 800a7be:	f06f 0303 	mvn.w	r3, #3
 800a7c2:	e01d      	b.n	800a800 <VL53L1_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 800a7c4:	897b      	ldrh	r3, [r7, #10]
 800a7c6:	0a1b      	lsrs	r3, r3, #8
 800a7c8:	b29b      	uxth	r3, r3
 800a7ca:	b2da      	uxtb	r2, r3
 800a7cc:	4b0e      	ldr	r3, [pc, #56]	@ (800a808 <VL53L1_WriteMulti+0x64>)
 800a7ce:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800a7d0:	897b      	ldrh	r3, [r7, #10]
 800a7d2:	b2da      	uxtb	r2, r3
 800a7d4:	4b0c      	ldr	r3, [pc, #48]	@ (800a808 <VL53L1_WriteMulti+0x64>)
 800a7d6:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 800a7d8:	683a      	ldr	r2, [r7, #0]
 800a7da:	6879      	ldr	r1, [r7, #4]
 800a7dc:	480b      	ldr	r0, [pc, #44]	@ (800a80c <VL53L1_WriteMulti+0x68>)
 800a7de:	f000 fa09 	bl	800abf4 <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	3302      	adds	r3, #2
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	4907      	ldr	r1, [pc, #28]	@ (800a808 <VL53L1_WriteMulti+0x64>)
 800a7ea:	68f8      	ldr	r0, [r7, #12]
 800a7ec:	f7ff ff99 	bl	800a722 <_I2CWrite>
 800a7f0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d001      	beq.n	800a7fc <VL53L1_WriteMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800a7f8:	23f3      	movs	r3, #243	@ 0xf3
 800a7fa:	75fb      	strb	r3, [r7, #23]
    }
    VL53L1_PutI2cBus();
    return Status;
 800a7fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a800:	4618      	mov	r0, r3
 800a802:	3718      	adds	r7, #24
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}
 800a808:	2000091c 	.word	0x2000091c
 800a80c:	2000091e 	.word	0x2000091e

0800a810 <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800a810:	b580      	push	{r7, lr}
 800a812:	b086      	sub	sp, #24
 800a814:	af00      	add	r7, sp, #0
 800a816:	60f8      	str	r0, [r7, #12]
 800a818:	607a      	str	r2, [r7, #4]
 800a81a:	603b      	str	r3, [r7, #0]
 800a81c:	460b      	mov	r3, r1
 800a81e:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a820:	2300      	movs	r3, #0
 800a822:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800a824:	897b      	ldrh	r3, [r7, #10]
 800a826:	0a1b      	lsrs	r3, r3, #8
 800a828:	b29b      	uxth	r3, r3
 800a82a:	b2da      	uxtb	r2, r3
 800a82c:	4b12      	ldr	r3, [pc, #72]	@ (800a878 <VL53L1_ReadMulti+0x68>)
 800a82e:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800a830:	897b      	ldrh	r3, [r7, #10]
 800a832:	b2da      	uxtb	r2, r3
 800a834:	4b10      	ldr	r3, [pc, #64]	@ (800a878 <VL53L1_ReadMulti+0x68>)
 800a836:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800a838:	2202      	movs	r2, #2
 800a83a:	490f      	ldr	r1, [pc, #60]	@ (800a878 <VL53L1_ReadMulti+0x68>)
 800a83c:	68f8      	ldr	r0, [r7, #12]
 800a83e:	f7ff ff70 	bl	800a722 <_I2CWrite>
 800a842:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d002      	beq.n	800a850 <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800a84a:	23f3      	movs	r3, #243	@ 0xf3
 800a84c:	75fb      	strb	r3, [r7, #23]
        goto done;
 800a84e:	e00c      	b.n	800a86a <VL53L1_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800a850:	683a      	ldr	r2, [r7, #0]
 800a852:	6879      	ldr	r1, [r7, #4]
 800a854:	68f8      	ldr	r0, [r7, #12]
 800a856:	f7ff ff83 	bl	800a760 <_I2CRead>
 800a85a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d002      	beq.n	800a868 <VL53L1_ReadMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800a862:	23f3      	movs	r3, #243	@ 0xf3
 800a864:	75fb      	strb	r3, [r7, #23]
 800a866:	e000      	b.n	800a86a <VL53L1_ReadMulti+0x5a>
    }
done:
 800a868:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 800a86a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3718      	adds	r7, #24
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop
 800a878:	2000091c 	.word	0x2000091c

0800a87c <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b084      	sub	sp, #16
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	460b      	mov	r3, r1
 800a886:	807b      	strh	r3, [r7, #2]
 800a888:	4613      	mov	r3, r2
 800a88a:	707b      	strb	r3, [r7, #1]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a88c:	2300      	movs	r3, #0
 800a88e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800a890:	887b      	ldrh	r3, [r7, #2]
 800a892:	0a1b      	lsrs	r3, r3, #8
 800a894:	b29b      	uxth	r3, r3
 800a896:	b2da      	uxtb	r2, r3
 800a898:	4b0c      	ldr	r3, [pc, #48]	@ (800a8cc <VL53L1_WrByte+0x50>)
 800a89a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800a89c:	887b      	ldrh	r3, [r7, #2]
 800a89e:	b2da      	uxtb	r2, r3
 800a8a0:	4b0a      	ldr	r3, [pc, #40]	@ (800a8cc <VL53L1_WrByte+0x50>)
 800a8a2:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 800a8a4:	4a09      	ldr	r2, [pc, #36]	@ (800a8cc <VL53L1_WrByte+0x50>)
 800a8a6:	787b      	ldrb	r3, [r7, #1]
 800a8a8:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800a8aa:	2203      	movs	r2, #3
 800a8ac:	4907      	ldr	r1, [pc, #28]	@ (800a8cc <VL53L1_WrByte+0x50>)
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f7ff ff37 	bl	800a722 <_I2CWrite>
 800a8b4:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d001      	beq.n	800a8c0 <VL53L1_WrByte+0x44>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800a8bc:	23f3      	movs	r3, #243	@ 0xf3
 800a8be:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 800a8c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3710      	adds	r7, #16
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}
 800a8cc:	2000091c 	.word	0x2000091c

0800a8d0 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b086      	sub	sp, #24
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	60f8      	str	r0, [r7, #12]
 800a8d8:	460b      	mov	r3, r1
 800a8da:	607a      	str	r2, [r7, #4]
 800a8dc:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 800a8e2:	897b      	ldrh	r3, [r7, #10]
 800a8e4:	0a1b      	lsrs	r3, r3, #8
 800a8e6:	b29b      	uxth	r3, r3
 800a8e8:	b2da      	uxtb	r2, r3
 800a8ea:	4b12      	ldr	r3, [pc, #72]	@ (800a934 <VL53L1_RdByte+0x64>)
 800a8ec:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800a8ee:	897b      	ldrh	r3, [r7, #10]
 800a8f0:	b2da      	uxtb	r2, r3
 800a8f2:	4b10      	ldr	r3, [pc, #64]	@ (800a934 <VL53L1_RdByte+0x64>)
 800a8f4:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800a8f6:	2202      	movs	r2, #2
 800a8f8:	490e      	ldr	r1, [pc, #56]	@ (800a934 <VL53L1_RdByte+0x64>)
 800a8fa:	68f8      	ldr	r0, [r7, #12]
 800a8fc:	f7ff ff11 	bl	800a722 <_I2CWrite>
 800a900:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d002      	beq.n	800a90e <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800a908:	23f3      	movs	r3, #243	@ 0xf3
 800a90a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800a90c:	e00c      	b.n	800a928 <VL53L1_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 800a90e:	2201      	movs	r2, #1
 800a910:	6879      	ldr	r1, [r7, #4]
 800a912:	68f8      	ldr	r0, [r7, #12]
 800a914:	f7ff ff24 	bl	800a760 <_I2CRead>
 800a918:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d002      	beq.n	800a926 <VL53L1_RdByte+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800a920:	23f3      	movs	r3, #243	@ 0xf3
 800a922:	75fb      	strb	r3, [r7, #23]
 800a924:	e000      	b.n	800a928 <VL53L1_RdByte+0x58>
    }
done:
 800a926:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 800a928:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3718      	adds	r7, #24
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}
 800a934:	2000091c 	.word	0x2000091c

0800a938 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 800a938:	b580      	push	{r7, lr}
 800a93a:	b086      	sub	sp, #24
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	60f8      	str	r0, [r7, #12]
 800a940:	460b      	mov	r3, r1
 800a942:	607a      	str	r2, [r7, #4]
 800a944:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800a946:	2300      	movs	r3, #0
 800a948:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800a94a:	897b      	ldrh	r3, [r7, #10]
 800a94c:	0a1b      	lsrs	r3, r3, #8
 800a94e:	b29b      	uxth	r3, r3
 800a950:	b2da      	uxtb	r2, r3
 800a952:	4b17      	ldr	r3, [pc, #92]	@ (800a9b0 <VL53L1_RdWord+0x78>)
 800a954:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800a956:	897b      	ldrh	r3, [r7, #10]
 800a958:	b2da      	uxtb	r2, r3
 800a95a:	4b15      	ldr	r3, [pc, #84]	@ (800a9b0 <VL53L1_RdWord+0x78>)
 800a95c:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800a95e:	2202      	movs	r2, #2
 800a960:	4913      	ldr	r1, [pc, #76]	@ (800a9b0 <VL53L1_RdWord+0x78>)
 800a962:	68f8      	ldr	r0, [r7, #12]
 800a964:	f7ff fedd 	bl	800a722 <_I2CWrite>
 800a968:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d002      	beq.n	800a976 <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800a970:	23f3      	movs	r3, #243	@ 0xf3
 800a972:	75fb      	strb	r3, [r7, #23]
        goto done;
 800a974:	e015      	b.n	800a9a2 <VL53L1_RdWord+0x6a>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800a976:	2202      	movs	r2, #2
 800a978:	490d      	ldr	r1, [pc, #52]	@ (800a9b0 <VL53L1_RdWord+0x78>)
 800a97a:	68f8      	ldr	r0, [r7, #12]
 800a97c:	f7ff fef0 	bl	800a760 <_I2CRead>
 800a980:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d002      	beq.n	800a98e <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800a988:	23f3      	movs	r3, #243	@ 0xf3
 800a98a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800a98c:	e009      	b.n	800a9a2 <VL53L1_RdWord+0x6a>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800a98e:	4b08      	ldr	r3, [pc, #32]	@ (800a9b0 <VL53L1_RdWord+0x78>)
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	021b      	lsls	r3, r3, #8
 800a994:	b29b      	uxth	r3, r3
 800a996:	4a06      	ldr	r2, [pc, #24]	@ (800a9b0 <VL53L1_RdWord+0x78>)
 800a998:	7852      	ldrb	r2, [r2, #1]
 800a99a:	4413      	add	r3, r2
 800a99c:	b29a      	uxth	r2, r3
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 800a9a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3718      	adds	r7, #24
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
 800a9ae:	bf00      	nop
 800a9b0:	2000091c 	.word	0x2000091c

0800a9b4 <VL53L1_GetTickCount>:
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(
	uint32_t *ptick_count_ms)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b085      	sub	sp, #20
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	73fb      	strb	r3, [r7, #15]

	//*ptick_count_ms = timeGetTime();
	*ptick_count_ms = 0;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 800a9c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3714      	adds	r7, #20
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d4:	4770      	bx	lr

0800a9d6 <VL53L1_WaitMs>:
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}


VL53L1_Error VL53L1_WaitMs(VL53L1_Dev_t *pdev, int32_t wait_ms){
 800a9d6:	b580      	push	{r7, lr}
 800a9d8:	b082      	sub	sp, #8
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	6078      	str	r0, [r7, #4]
 800a9de:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_ms);
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f7f6 fbe8 	bl	80011b8 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 800a9e8:	2300      	movs	r3, #0
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3708      	adds	r7, #8
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}
	...

0800a9f4 <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us){
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b082      	sub	sp, #8
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_us/1000);
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	4a06      	ldr	r2, [pc, #24]	@ (800aa1c <VL53L1_WaitUs+0x28>)
 800aa02:	fb82 1203 	smull	r1, r2, r2, r3
 800aa06:	1192      	asrs	r2, r2, #6
 800aa08:	17db      	asrs	r3, r3, #31
 800aa0a:	1ad3      	subs	r3, r2, r3
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f7f6 fbd3 	bl	80011b8 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 800aa12:	2300      	movs	r3, #0
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3708      	adds	r7, #8
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}
 800aa1c:	10624dd3 	.word	0x10624dd3

0800aa20 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 800aa20:	b590      	push	{r4, r7, lr}
 800aa22:	f5ad 7d0b 	sub.w	sp, sp, #556	@ 0x22c
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	f507 740a 	add.w	r4, r7, #552	@ 0x228
 800aa2c:	f5a4 7407 	sub.w	r4, r4, #540	@ 0x21c
 800aa30:	6020      	str	r0, [r4, #0]
 800aa32:	f507 700a 	add.w	r0, r7, #552	@ 0x228
 800aa36:	f5a0 7008 	sub.w	r0, r0, #544	@ 0x220
 800aa3a:	6001      	str	r1, [r0, #0]
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800aa42:	f2a3 2322 	subw	r3, r3, #546	@ 0x222
 800aa46:	801a      	strh	r2, [r3, #0]
 800aa48:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800aa4c:	f2a3 2323 	subw	r3, r3, #547	@ 0x223
 800aa50:	460a      	mov	r2, r1
 800aa52:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800aa54:	2300      	movs	r3, #0
 800aa56:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
	uint32_t     start_time_ms = 0;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
	uint32_t     current_time_ms = 0;
 800aa60:	2300      	movs	r3, #0
 800aa62:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
	uint32_t     polling_time_ms = 0;
 800aa66:	2300      	movs	r3, #0
 800aa68:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
	uint8_t      byte_value      = 0;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
	uint8_t      found           = 0;
 800aa72:	2300      	movs	r3, #0
 800aa74:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 800aa78:	f107 0310 	add.w	r3, r7, #16
 800aa7c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800aa80:	493b      	ldr	r1, [pc, #236]	@ (800ab70 <VL53L1_WaitValueMaskEx+0x150>)
 800aa82:	4618      	mov	r0, r3
 800aa84:	f000 f87e 	bl	800ab84 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(&start_time_ms);
 800aa88:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f7ff ff91 	bl	800a9b4 <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 800aa92:	e049      	b.n	800ab28 <VL53L1_WaitValueMaskEx+0x108>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 800aa94:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d110      	bne.n	800aabe <VL53L1_WaitValueMaskEx+0x9e>
			status = VL53L1_RdByte(
 800aa9c:	f207 2213 	addw	r2, r7, #531	@ 0x213
 800aaa0:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800aaa4:	f2a3 2322 	subw	r3, r3, #546	@ 0x222
 800aaa8:	8819      	ldrh	r1, [r3, #0]
 800aaaa:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800aaae:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800aab2:	6818      	ldr	r0, [r3, #0]
 800aab4:	f7ff ff0c 	bl	800a8d0 <VL53L1_RdByte>
 800aab8:	4603      	mov	r3, r0
 800aaba:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
							pdev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 800aabe:	f897 2213 	ldrb.w	r2, [r7, #531]	@ 0x213
 800aac2:	f897 3238 	ldrb.w	r3, [r7, #568]	@ 0x238
 800aac6:	4013      	ands	r3, r2
 800aac8:	b2db      	uxtb	r3, r3
 800aaca:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 800aace:	f2a2 2223 	subw	r2, r2, #547	@ 0x223
 800aad2:	7812      	ldrb	r2, [r2, #0]
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d102      	bne.n	800aade <VL53L1_WaitValueMaskEx+0xbe>
			found = 1;
 800aad8:	2301      	movs	r3, #1
 800aada:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f

		if (status == VL53L1_ERROR_NONE  &&
 800aade:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d114      	bne.n	800ab10 <VL53L1_WaitValueMaskEx+0xf0>
 800aae6:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d110      	bne.n	800ab10 <VL53L1_WaitValueMaskEx+0xf0>
			found == 0 &&
 800aaee:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d00c      	beq.n	800ab10 <VL53L1_WaitValueMaskEx+0xf0>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 800aaf6:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 800aafa:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800aafe:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800ab02:	4611      	mov	r1, r2
 800ab04:	6818      	ldr	r0, [r3, #0]
 800ab06:	f7ff ff66 	bl	800a9d6 <VL53L1_WaitMs>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
					pdev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(&current_time_ms);
 800ab10:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 800ab14:	4618      	mov	r0, r3
 800ab16:	f7ff ff4d 	bl	800a9b4 <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 800ab1a:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 800ab1e:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 800ab22:	1ad3      	subs	r3, r2, r3
 800ab24:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
		   (polling_time_ms < timeout_ms) &&
 800ab28:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d10c      	bne.n	800ab4a <VL53L1_WaitValueMaskEx+0x12a>
	while ((status == VL53L1_ERROR_NONE) &&
 800ab30:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800ab34:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800ab38:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	d203      	bcs.n	800ab4a <VL53L1_WaitValueMaskEx+0x12a>
		   (polling_time_ms < timeout_ms) &&
 800ab42:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d0a4      	beq.n	800aa94 <VL53L1_WaitValueMaskEx+0x74>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 800ab4a:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d106      	bne.n	800ab60 <VL53L1_WaitValueMaskEx+0x140>
 800ab52:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d102      	bne.n	800ab60 <VL53L1_WaitValueMaskEx+0x140>
		status = VL53L1_ERROR_TIME_OUT;
 800ab5a:	23f9      	movs	r3, #249	@ 0xf9
 800ab5c:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227

	return status;
 800ab60:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	f507 770b 	add.w	r7, r7, #556	@ 0x22c
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd90      	pop	{r4, r7, pc}
 800ab6e:	bf00      	nop
 800ab70:	0800ac60 	.word	0x0800ac60

0800ab74 <memset>:
 800ab74:	4402      	add	r2, r0
 800ab76:	4603      	mov	r3, r0
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d100      	bne.n	800ab7e <memset+0xa>
 800ab7c:	4770      	bx	lr
 800ab7e:	f803 1b01 	strb.w	r1, [r3], #1
 800ab82:	e7f9      	b.n	800ab78 <memset+0x4>

0800ab84 <strncpy>:
 800ab84:	b510      	push	{r4, lr}
 800ab86:	3901      	subs	r1, #1
 800ab88:	4603      	mov	r3, r0
 800ab8a:	b132      	cbz	r2, 800ab9a <strncpy+0x16>
 800ab8c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ab90:	f803 4b01 	strb.w	r4, [r3], #1
 800ab94:	3a01      	subs	r2, #1
 800ab96:	2c00      	cmp	r4, #0
 800ab98:	d1f7      	bne.n	800ab8a <strncpy+0x6>
 800ab9a:	441a      	add	r2, r3
 800ab9c:	2100      	movs	r1, #0
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d100      	bne.n	800aba4 <strncpy+0x20>
 800aba2:	bd10      	pop	{r4, pc}
 800aba4:	f803 1b01 	strb.w	r1, [r3], #1
 800aba8:	e7f9      	b.n	800ab9e <strncpy+0x1a>
	...

0800abac <__libc_init_array>:
 800abac:	b570      	push	{r4, r5, r6, lr}
 800abae:	4d0d      	ldr	r5, [pc, #52]	@ (800abe4 <__libc_init_array+0x38>)
 800abb0:	4c0d      	ldr	r4, [pc, #52]	@ (800abe8 <__libc_init_array+0x3c>)
 800abb2:	1b64      	subs	r4, r4, r5
 800abb4:	10a4      	asrs	r4, r4, #2
 800abb6:	2600      	movs	r6, #0
 800abb8:	42a6      	cmp	r6, r4
 800abba:	d109      	bne.n	800abd0 <__libc_init_array+0x24>
 800abbc:	4d0b      	ldr	r5, [pc, #44]	@ (800abec <__libc_init_array+0x40>)
 800abbe:	4c0c      	ldr	r4, [pc, #48]	@ (800abf0 <__libc_init_array+0x44>)
 800abc0:	f000 f826 	bl	800ac10 <_init>
 800abc4:	1b64      	subs	r4, r4, r5
 800abc6:	10a4      	asrs	r4, r4, #2
 800abc8:	2600      	movs	r6, #0
 800abca:	42a6      	cmp	r6, r4
 800abcc:	d105      	bne.n	800abda <__libc_init_array+0x2e>
 800abce:	bd70      	pop	{r4, r5, r6, pc}
 800abd0:	f855 3b04 	ldr.w	r3, [r5], #4
 800abd4:	4798      	blx	r3
 800abd6:	3601      	adds	r6, #1
 800abd8:	e7ee      	b.n	800abb8 <__libc_init_array+0xc>
 800abda:	f855 3b04 	ldr.w	r3, [r5], #4
 800abde:	4798      	blx	r3
 800abe0:	3601      	adds	r6, #1
 800abe2:	e7f2      	b.n	800abca <__libc_init_array+0x1e>
 800abe4:	0800acb4 	.word	0x0800acb4
 800abe8:	0800acb4 	.word	0x0800acb4
 800abec:	0800acb4 	.word	0x0800acb4
 800abf0:	0800acb8 	.word	0x0800acb8

0800abf4 <memcpy>:
 800abf4:	440a      	add	r2, r1
 800abf6:	4291      	cmp	r1, r2
 800abf8:	f100 33ff 	add.w	r3, r0, #4294967295
 800abfc:	d100      	bne.n	800ac00 <memcpy+0xc>
 800abfe:	4770      	bx	lr
 800ac00:	b510      	push	{r4, lr}
 800ac02:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac06:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac0a:	4291      	cmp	r1, r2
 800ac0c:	d1f9      	bne.n	800ac02 <memcpy+0xe>
 800ac0e:	bd10      	pop	{r4, pc}

0800ac10 <_init>:
 800ac10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac12:	bf00      	nop
 800ac14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac16:	bc08      	pop	{r3}
 800ac18:	469e      	mov	lr, r3
 800ac1a:	4770      	bx	lr

0800ac1c <_fini>:
 800ac1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac1e:	bf00      	nop
 800ac20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac22:	bc08      	pop	{r3}
 800ac24:	469e      	mov	lr, r3
 800ac26:	4770      	bx	lr
